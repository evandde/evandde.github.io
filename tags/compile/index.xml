<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compile | EvaNote</title>
    <link>https://evandde.github.io/tags/compile/</link>
      <atom:link href="https://evandde.github.io/tags/compile/index.xml" rel="self" type="application/rss+xml" />
    <description>Compile</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2021 Evan Kim</copyright><lastBuildDate>Wed, 10 Nov 2021 16:32:26 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>Compile</title>
      <link>https://evandde.github.io/tags/compile/</link>
    </image>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 3. 빌드, 컴파일, 링크</title>
      <link>https://evandde.github.io/praccpp-003-whatisbuild/</link>
      <pubDate>Wed, 10 Nov 2021 16:32:26 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-003-whatisbuild/</guid>
      <description>&lt;p&gt;이 글에서는 &lt;b&gt;빌드&lt;/b&gt;/&lt;b&gt;컴파일&lt;/b&gt;/&lt;b&gt;링크&lt;/b&gt;가 무엇인지 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-설명&#34;&gt;용어 설명&lt;/h2&gt;
&lt;h3 id=&#34;컴파일&#34;&gt;컴파일&lt;/h3&gt;
&lt;p&gt;컴파일이란 사람의 언어로 작성된 코드(e.g. &lt;code&gt;main.cpp&lt;/code&gt;)를 컴퓨터가 사용하는 언어로 &lt;b&gt;번역&lt;/b&gt;하는 과정을 의미합니다.&lt;/p&gt;
&lt;p&gt;컴퓨터는 C++로 작성된 파일을 해석할 수 없습니다. 그래서 이 파일을 컴퓨터가 사용하는 이진수(binary) 기반의 언어로 번역하는 단계가 필요합니다. 이 과정을 &lt;b&gt;컴파일(compile)&lt;/b&gt;이라 부르고, 컴파일을 수행해주는 도구를 &lt;b&gt;컴파일러(compiler)&lt;/b&gt;라고 합니다.&lt;/p&gt;
&lt;p&gt;번역기도 파파고나 구글번역기 등 여러가지가 있고 각각의 결과물도 다르고 성능도 다르듯, 컴파일러도 여러가지 종류가 있고 각각의 특징이나 장단점이 있습니다. 이 시리즈에서는 그 중 Microsoft에서 제공하는 컴파일러를 이용하고 있는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;링크&#34;&gt;링크&lt;/h3&gt;
&lt;p&gt;링크란 여러 개의 파일들을 &lt;strong&gt;한데 묶어서&lt;/strong&gt; 하나의 실행용 프로그램(e.g. &lt;code&gt;.exe&lt;/code&gt; 파일)을 만들어내는 과정을 의미합니다.&lt;/p&gt;
&lt;p&gt;지금 우리는 C++ 코드가 &lt;code&gt;main.cpp&lt;/code&gt; 파일 하나만 가지고 있지만, 앞으로 C++을 배워나가다 보면 더 많은 파일을 이용하여 이들을 모아 하나의 프로그램을 만들어야 할 일이 생길 것입니다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. 마치 요리를 할 때 메인 재료 이외에도 다른 부가적인 재료와 양념이 들어가듯 말이죠. 이 때, 여러 개의 파일들을 유기적으로 잘 엮어서 하나의 완성된 프로그램으로 만들어내는 과정을 &lt;b&gt;링크(link)&lt;/b&gt;라고 부르고, 링크를 수행해주는 도구를 &lt;b&gt;링커(linker)&lt;/b&gt;라고 합니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드&#34;&gt;빌드&lt;/h3&gt;
&lt;p&gt;빌드란 컴파일과 링크의 두 과정을 합친 것입니다.&lt;/p&gt;
&lt;p&gt;순서 상으로는, &lt;b&gt;컴파일&lt;/b&gt;을 먼저 한 뒤에, 번역된 파일들을 &lt;b&gt;링크&lt;/b&gt;하는 과정을 거쳐 프로그램이 만들어집니다. 이 일련의 과정을 &lt;b&gt;빌드(build)&lt;/b&gt;라고 하고, 빌드를 수행해주는 도구를 &lt;b&gt;빌더(builder)&lt;/b&gt;라고 하는 것이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;b&gt;컴파일&lt;/b&gt;이라는 용어를 &lt;b&gt;빌드의 뜻&lt;/b&gt;으로 사용하는 경우가 꽤나 자주 있으니 그러려니 하고 넘어가시면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;cmake-quick-start-프로젝트-파일구조&#34;&gt;CMake: Quick Start 프로젝트 파일구조&lt;/h2&gt;
&lt;p&gt;지난 번 글에서 만든 &lt;a href=&#34;https://evandde.github.io/praccpp-002-envtest/#cmake-quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake: Quick Start 프로젝트&lt;/a&gt;를 살펴보며 설명을 이어가도록 하겠습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    만약 다른 IDE를 사용하고 있어 CMake: Quick Start를 실습하지 못하는 분은, 그냥 &lt;b&gt;이론적인 부분만 보고 넘어가셔도 괜찮습니다&lt;/b&gt;.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;CMake: Quick Start 프로젝트를 만든 폴더에는 다음과 같은 내용물이 만들어져 있을 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; 폴더&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vscode&lt;/code&gt; 폴더(이 폴더는 있을 수도 있고, 없을 수도 있습니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각에 대해 간단히 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;maincpp-파일&#34;&gt;main.cpp 파일&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일은 프로그램이 &lt;b&gt;실제로 어떤 일을 수행할 지&lt;/b&gt;에 대해 &lt;b&gt;C++ 언어&lt;/b&gt;로 적혀있는 파일로, 가장 핵심이 되는 파일입니다.&lt;/p&gt;
&lt;p&gt;앞으로 우리가 이 시리즈를 진행함에 있어, 계속 수정하며 살펴볼 파일입니다.&lt;/p&gt;
&lt;h3 id=&#34;build-폴더&#34;&gt;build 폴더&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; 폴더는 빌드를 수행하여 나온 결과물이 담긴 폴더입니다.&lt;/p&gt;
&lt;p&gt;빌드 결과물을 담는 경로는 자유롭게 변경 가능하지만, 이처럼 &lt;code&gt;build&lt;/code&gt;라는 이름의 폴더를 만들고 그 안에 결과물을 담는 것이 일반적입니다. 이 시리즈와 같이 환경을 구셩하셨다면, 자동으로 이 관례에 따라 저장될 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;cmakeliststxt-파일&#34;&gt;CMakeLists.txt 파일&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일은 CMake라는 프로그램을 활용하기 위해 필요한 파일입니다. 이는 나중에 CMake에 대해 다룰 때 다시 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;vscode-폴더&#34;&gt;.vscode 폴더&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.vscode&lt;/code&gt; 폴더는 &lt;b&gt;VSCode라는 IDE를 사용할 때의 설정 값 등이 저장되는 폴더&lt;/b&gt;로, CMake 기반의 프로젝트와는 아무런 관계가 없는 폴더입니다.&lt;/p&gt;
&lt;p&gt;나중에 여러가지 설정을 조정할 때 쓰일 일이 있으니, 그 때 다시 살펴보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;일단 이론은 간단하게 여기까지만 하도록 하죠. 다음 글에서 뵙겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-11-10: 최초 게시&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;사실 지금처럼 &lt;code&gt;main.cpp&lt;/code&gt; 파일 하나만으로 프로그램을 만들 때에도, 눈에 보이지 않는 수많은 다른 파일들이 엮어져서 프로그램이 만들어지게 됩니다. 이는 C++ 프로그램을 만들 때 알아서 엮어지도록 되어 있어서 직접 보이지 않을 뿐입니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
  </channel>
</rss>
