<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>loop | EvaNote</title>
    <link>https://evandde.github.io/tags/loop/</link>
      <atom:link href="https://evandde.github.io/tags/loop/index.xml" rel="self" type="application/rss+xml" />
    <description>loop</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2022 Evan Kim</copyright><lastBuildDate>Mon, 05 Apr 2021 17:13:04 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>loop</title>
      <link>https://evandde.github.io/tags/loop/</link>
    </image>
    
    <item>
      <title>Geant4 UI command 소개 - 반복문</title>
      <link>https://evandde.github.io/geant4-uicommand-loop/</link>
      <pubDate>Mon, 05 Apr 2021 17:13:04 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-uicommand-loop/</guid>
      <description>&lt;p&gt;Geant4 UI command에서 활용 가능한 반복문. &lt;code&gt;/control/loop&lt;/code&gt;와 &lt;code&gt;/control/foreach&lt;/code&gt;에 대해 알아봅니다.&lt;/p&gt;
&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;Geant4에서 built-in UI command로 제공하는 반복문은 두 가지입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/control/loop&lt;/li&gt;
&lt;li&gt;/control/foreach&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 반복문의 중요한 특징은 &amp;ldquo;&lt;strong&gt;다른 매크로파일을 반복적으로 실행시킨다&lt;/strong&gt;&amp;ldquo;는 점입니다.&lt;/p&gt;
&lt;p&gt;각각의 용법과 함께 좀 더 자세히 살펴보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controlloop&#34;&gt;/control/loop&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/loop&lt;/code&gt; 반복문은 대개의 프로그래밍 언어가 제공하는 for문과 유사합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;시작&lt;/strong&gt;, &lt;strong&gt;끝&lt;/strong&gt;, &lt;strong&gt;간격&lt;/strong&gt;을 입력하여 &lt;strong&gt;카운터를 증감&lt;/strong&gt;시키며 &lt;strong&gt;다른 매크로파일을 실행&lt;/strong&gt;시켜줍니다.&lt;/p&gt;
&lt;h3 id=&#34;사용법&#34;&gt;사용법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/control/loop 매크로파일명 카운터변수명 시작값 끝값 간격&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;이 때, &lt;code&gt;매크로파일명&lt;/code&gt;과 &lt;code&gt;카운터변수명&lt;/code&gt;은 문자열(string)로 인식하고, &lt;code&gt;시작값&lt;/code&gt;, &lt;code&gt;끝값&lt;/code&gt;, &lt;code&gt;간격&lt;/code&gt;은 실수형(double)으로 인식합니다.&lt;/p&gt;
&lt;p&gt;이렇게 입력하면, &lt;code&gt;매크로파일&lt;/code&gt;에서 &lt;code&gt;카운터변수&lt;/code&gt;를 &lt;code&gt;시작&lt;/code&gt;~&lt;code&gt;끝&lt;/code&gt;값으로 aliasing 시켜줍니다. 즉, &lt;code&gt;매크로파일&lt;/code&gt; 내에서는 &lt;code&gt;{카운터변수}&lt;/code&gt;와 같이 입력하면 되는 것이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;간격&lt;/code&gt; 값은 생략 가능합니다. 생략할 경우 기본값으로 &lt;strong&gt;1&lt;/strong&gt;이 사용됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;사용예시&#34;&gt;사용예시&lt;/h3&gt;
&lt;p&gt;다음과 같은 매크로를 만들어봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/energy 10. MeV
/run/beamOn 10000

/gun/energy 12. MeV
/run/beamOn 10000

/gun/energy 14. MeV
/run/beamOn 10000

/gun/energy 16. MeV
/run/beamOn 10000

/gun/energy 18. MeV
/run/beamOn 10000

/gun/energy 20. MeV
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 에너지 값이 10~20으로 2씩 바뀌고 있을 뿐, 나머지는 반복됩니다.&lt;/p&gt;
&lt;p&gt;이 경우 다음과 같이 두 개의 파일로 나누어 작성하면 동일하게 동작합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;주 매크로파일&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/loop myRun.mac ene 10. 20. 2.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;myRun.mac&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/energy {ene} MeV
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controlforeach&#34;&gt;/control/foreach&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/foreach&lt;/code&gt; 반복문은 대개의 프로그래밍 언어가 제공하는 range-based for문과 유사합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;카운터&lt;/strong&gt;를 &lt;strong&gt;제시된 목록의 각 값&lt;/strong&gt;으로 바꾸어가며 &lt;strong&gt;다른 매크로파일을 반복적으로 실행&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;h3 id=&#34;사용법-1&#34;&gt;사용법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/control/foreach 매크로파일명 카운터변수명 &amp;quot;반복할값목록&amp;quot;&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;여기서 &lt;code&gt;&amp;quot;반복할값목록&amp;quot;&lt;/code&gt;을 &lt;font color=red&gt;입력할 때 주의점&lt;/font&gt;이 두 가지 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;목록 전체를 반드시 &amp;quot;&amp;quot;(double-quote)로 감쌀 것&lt;/li&gt;
&lt;li&gt;목록의 각 값은 띄어쓰기로 구분할 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 입력하면, &lt;code&gt;매크로파일&lt;/code&gt;에서 &lt;code&gt;카운터변수&lt;/code&gt;를 &lt;code&gt;&amp;quot;반복할값목록&amp;quot;&lt;/code&gt;에 적힌 각각의 값으로 aliasing 시켜줍니다. 즉, &lt;code&gt;매크로파일&lt;/code&gt; 내에서는 &lt;code&gt;{카운터변수}&lt;/code&gt;와 같이 입력하면 되는 것이죠.&lt;/p&gt;
&lt;h3 id=&#34;사용예시-1&#34;&gt;사용예시&lt;/h3&gt;
&lt;p&gt;다음과 같은 매크로를 만들어 봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/particle p
/run/beamOn 10000

/gun/particle e-
/run/beamOn 10000

/gun/particle e+
/run/beamOn 10000

/gun/particle gamma
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서는 입자가 p, e-, e+, gamma로 바뀌고 있을 뿐, 나머지는 반복됩니다.&lt;/p&gt;
&lt;p&gt;이 경우 다음과 같이 두 개의 파일로 나누어 작성하면 동일하게 동작합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;주 매크로파일&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/foreach myRun.mac pname &amp;quot;p e- e+ gamma&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;myRun.mac&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/particle {pname}
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
