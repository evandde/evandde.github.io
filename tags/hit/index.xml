<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hit | EvaNote</title>
    <link>https://evandde.github.io/tags/hit/</link>
      <atom:link href="https://evandde.github.io/tags/hit/index.xml" rel="self" type="application/rss+xml" />
    <description>Hit</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2021 Evan Kim</copyright><lastBuildDate>Fri, 30 Jul 2021 16:48:26 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>Hit</title>
      <link>https://evandde.github.io/tags/hit/</link>
    </image>
    
    <item>
      <title>Geant4 무작정 따라하기 - 10. 스코어링 이론</title>
      <link>https://evandde.github.io/g4-noqasked-010-scoringtheory/</link>
      <pubDate>Fri, 30 Jul 2021 16:48:26 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-010-scoringtheory/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 열번째. Geant4 시뮬레이션에서 원하는 물리량을 기록하는 스코어링에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 Geant4에서 스코어링 시스템의 기본적인 동작 이론에 대해 설명할 것입니다. 이를 바탕으로 다음 글에서 이어질 Geant4에서 기본적으로 제공하는 스코어러의 사용에 있어 이해도를 높이는 것이 이번 글의 목적입니다. 더 나아가, 이 개념을 잘 이해하시고 충분한 C++ 언어 지식을 갖추신다면 Geant4에서 기본 제공하는 스코어러를 넘어 여러분만의 스코어러를 직접 구현하여 이용할 수도 있을 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4의-스코어링-용어&#34;&gt;Geant4의 스코어링 용어&lt;/h2&gt;
&lt;p&gt;Geant4는 모든 구조물 내에서 방사선 수송에 필요한 물리량 전반을 다 계산하며 시뮬레이션을 돌립니다. 이 수많은 값들을 우리에게 모조리 알려주는 방식이 이전에 설명한 바 있는 &lt;a href=&#34;https://evandde.github.io/g4-noqasked-007-trkvb/&#34;&gt;verbose&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;하지만 우리는 이 모든 값이 다 필요한 것이 아닙니다. 이 중에 원하는 부분만 추려서 기록하면 좋겠지요. 이러한 작업을 &lt;strong&gt;스코어링&lt;/strong&gt;이라고 합니다. 즉, 스코어링이란 &lt;font color=red&gt;&lt;b&gt;관심 있는 지오메트리 내&lt;/b&gt;&lt;/font&gt;에서 &lt;font color=blue&gt;&lt;b&gt;관심 있는 물리량&lt;/b&gt;&lt;/font&gt;이 &lt;strong&gt;어떠한 값을 가지는지&lt;/strong&gt;를 살펴보는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;관심-있는-지오메트리&#34;&gt;관심 있는 지오메트리&lt;/h3&gt;
&lt;p&gt;사용자가 만든 다양한 지오메트리 중, 스코어링을 수행하고 싶은 &lt;b&gt;&lt;font color=red&gt;관심 있는 지오메트리(들)&lt;/font&gt;&lt;/b&gt;이 있을 것입니다. 이 지오메트리(들)의 &lt;b&gt;&lt;font color=red&gt;Logical Volume&lt;/font&gt;&lt;/b&gt;에 &lt;b&gt;Sensitive Detector를 세팅&lt;/b&gt;해줌으로써, 해당 지오메트리 내에서의 일을 스코어링하도록 프로그램에게 지시할 수 있습니다.&lt;/p&gt;
&lt;p&gt;여기서 &lt;b&gt;Sensitive Detector&lt;/b&gt;, 줄여서 &lt;b&gt;SD&lt;/b&gt;는, &lt;b&gt;&lt;font color=blue&gt;관심 있는 물리량&lt;/font&gt;&lt;/b&gt;을 어떤 조건 하에서 어떻게 가공하여 메모리 공간에 저장할 것인지와 같은 &lt;b&gt;스코어링 방법을 정의하는 클래스&lt;/b&gt;입니다.&lt;/p&gt;
&lt;h3 id=&#34;관심-있는-물리량&#34;&gt;관심 있는 물리량&lt;/h3&gt;
&lt;p&gt;사용자는 &lt;b&gt;&lt;font color=red&gt;해당 지오메트리&lt;/font&gt;&lt;/b&gt;에 &lt;b&gt;&lt;font color=blue&gt;전달된 에너지&lt;/font&gt;&lt;/b&gt;에 관심이 있을 수도 있고, &lt;b&gt;&lt;font color=blue&gt;반응 위치에 관심&lt;/font&gt;&lt;/b&gt;이 있을 수도 있으며, &lt;b&gt;&lt;font color=blue&gt;반응 위치와 해당 위치에 전달된 에너지를 한 세트로 묶어서&lt;/font&gt;&lt;/b&gt; 살펴보고 싶을 수도 있습니다. 이처럼 &lt;strong&gt;관심 있는 물리량&lt;/strong&gt; 혹은 그 &lt;strong&gt;물리량들을 조합한 한 세트&lt;/strong&gt;를 Geant4에서는 &lt;b&gt;&lt;font color=blue&gt;Hit&lt;/font&gt;&lt;/b&gt;이라는 클래스를 통해 관리합니다. 즉, &lt;strong&gt;Hit 하나&lt;/strong&gt;당 &lt;strong&gt;한 세트의 정보&lt;/strong&gt;가 된다고 보시면 됩니다.&lt;/p&gt;
&lt;p&gt;만약 여러 종류의 정보를 따로 관리하고 싶다면, 여러 종류의 Hit을 사용하면 됩니다. 예를 들어, 어떤 조건 하에서는 전달된 에너지만 기록하고 싶고, 또 다른 조건 하에서는 반응 위치만 기록하고 싶다면, &lt;b&gt;전달된 에너지라는 Hit&lt;/b&gt;과 &lt;b&gt;반응 위치라는 Hit&lt;/b&gt;으로 분리하여 두 종류의 Hit을 이용할 수 있습니다. 이는 반응 위치와 그 위치에 전달된 에너지를 한 세트로 묶은 Hit과는 다른 개념인 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4는 &lt;b&gt;같은 종류의 Hit들을 한 데 모아서 저장&lt;/b&gt;하는 &lt;b&gt;HitsCollection&lt;/b&gt; 이라는 클래스도 제공하고 있습니다. 이는 간단히 말해 &lt;b&gt;Hit을 담는 주머니&lt;/b&gt;라고 생각하면 됩니다. 하나의 HitsCollection에는 같은 종류의 Hit들만 들어가기 때문에, 예를 들어 전달된 에너지 Hit은 전달된 에너지 HitsCollection에 담기게 되고, 반응 위치 Hit은 반응 위치 HitsCollection에 담기는 식입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4의-스코어링-개념&#34;&gt;Geant4의 스코어링 개념&lt;/h2&gt;
&lt;h3 id=&#34;기본-원리&#34;&gt;기본 원리&lt;/h3&gt;
&lt;p&gt;스코어링은 기본적으로 &lt;strong&gt;Event 단위&lt;/strong&gt;로 이루어지며, 다음 과정이 매 Event마다 반복됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;입자를 수송하던 중, 입자가 &lt;b&gt;&lt;font color=red&gt;SD가 세팅된 지오메트리&lt;/font&gt;&lt;/b&gt; 내에 들어오는 순간부터, 해당 SD가 일을 하기 시작합니다.&lt;/li&gt;
&lt;li&gt;SD는 구현된 내용에 따라, &lt;b&gt;&lt;font color=blue&gt;매 Step마다 관심 있는 물리량 정보를 수집하여 Hit을 생성&lt;/font&gt;&lt;/b&gt;합니다. 생성된 Hit은 각 종류별로 상응하는 HitsCollection에 저장됩니다.&lt;/li&gt;
&lt;li&gt;Geant4는 매 Event가 끝날 때마다, 해당 Event에서 만들어진 HitsCollection들을 한 데 묶어 &lt;strong&gt;HCofThisEvent&lt;/strong&gt;라는 형태로 제공합니다. 사용자는 이 HCofThisEvent로부터 원하는 종류의 HitsCollection을 가져온 뒤, 그 안에 저장된 Hit들을 확인하고 기록할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그림으로 나타내면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_Scoring&#34; srcset=&#34;
               /g4-noqasked-010-scoringtheory/01_Scoring_hu83e7a473b484a0c712644511b7ab14c4_541136_cd0a9e3028ca4e62f4b8b07c068c3c3a.png 400w,
               /g4-noqasked-010-scoringtheory/01_Scoring_hu83e7a473b484a0c712644511b7ab14c4_541136_2bead1050922f64236121302b6dcc9e8.png 760w,
               /g4-noqasked-010-scoringtheory/01_Scoring_hu83e7a473b484a0c712644511b7ab14c4_541136_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-010-scoringtheory/01_Scoring_hu83e7a473b484a0c712644511b7ab14c4_541136_cd0a9e3028ca4e62f4b8b07c068c3c3a.png&#34;
               width=&#34;760&#34;
               height=&#34;523&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;sensitive-detector-설계방법&#34;&gt;Sensitive Detector 설계방법&lt;/h3&gt;
&lt;p&gt;Sensitive Detector를 설계하는 방법은 크게 다음의 두 가지가 있습니다만, 여기서는 &lt;b&gt;1번 방법&lt;/b&gt;만 다루겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;Multi Functional Detector&lt;/b&gt;에 사용자가 원하는 &lt;b&gt;Primitive Scorer들을 Register&lt;/b&gt;하여 설계&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G4VSensitiveDetector 클래스를 상속받아 사용자가 직접 Sensitive Detector를 구현. 경우에 따라 Hit과 HitsCollection 수준부터 직접 구현하여 이용하기도 함.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Multi Functional Detector(MFD)는 일종의 틀로 보시면 되고, 이 틀에 실질적인 기능을 가진 Primitive Scorer(PS)를 조립해 넣는 식으로 SD를 구현합니다. 일종의 모듈형 시스템&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;처럼 조립된 전체가 하나의 SD가 되는 방식입니다. Geant4가 제공하는 PS들 중 일부를 소개해 드리겠습니다. (10.7 버전 기준)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4PSCellCharge: 해당 지오메트리 내에 deposit된 charge의 총합을 스코어링&lt;/li&gt;
&lt;li&gt;G4PSCellFlux: 해당 지오메트리 내의 플럭스를 스코어링 (트랙길이 / 부피 방식으로 계산)&lt;/li&gt;
&lt;li&gt;G4PSDoseDeposit: 해당 지오메트리 내에서의 흡수선량(absorbed dose)을 스코어링&lt;/li&gt;
&lt;li&gt;G4PSEnergyDeposit: 해당 지오메트리 내에 deposit된 에너지의 총합을 스코어링&lt;/li&gt;
&lt;li&gt;G4PSNofCollision: 해당 지오메트리에 입사한 입자의 개수를 스코어링&lt;/li&gt;
&lt;li&gt;G4PSPassageCellCurrent&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;: 해당 지오메트리를 지나쳐간(입사 후 빠져나간) track의 수를 스코어링&lt;/li&gt;
&lt;li&gt;G4PSPassageCellFlux: 해당 지오메트리를 지나쳐간(입사 후 빠져나간) track의 플럭스를 스코어링 (트랙길이 / 부피 방식으로 계산)&lt;/li&gt;
&lt;li&gt;G4PSPopulation&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;: 해당 지오메트리에 들어온 입자의 수를 스코어링&lt;/li&gt;
&lt;li&gt;G4PSTermination: 해당 지오메트리 내에서 종료&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;된 track의 수를 스코어링&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 외에도 더 많은 PS가 존재합니다. 그리고 이름 끝에 3D가 붙은 PS도 있는데, 이는 3D가 없는 것과 기능이 동일하며 해당 물리량을 복셀화된 각 볼륨마다 따로 저장하여 3D 분포를 살펴보는 데에 활용 가능합니다. (e.g. G4PSCellCharge3D)&lt;/p&gt;
&lt;p&gt;추가적으로, &lt;strong&gt;필터&lt;/strong&gt;를 활용하면 &lt;strong&gt;특정 조건 하에서만 스코어링&lt;/strong&gt;이 이루어지도록 할 수도 있습니다. 예를 들어, G4PSCellFlux를 사용하는데 여기에 입자 제한 필터로 Gamma만 스코어링하도록 제한하면, 해당 지오메트리 내에서 Gamma 입자의 플럭스만 스코어링할 수 있는 것입니다. 다만, &lt;b&gt;하나의 PS당 하나의 필터만 세팅&lt;/b&gt;할 수 있습니다. 필터의 종류는 다음과 같습니다. (10.7 버전 기준)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4SDChargedFillter: (+) 혹은 (-) 전하를 가진 입자만 스코어링하도록 제한&lt;/li&gt;
&lt;li&gt;G4SDNeutralFilter: 전하가 없는 중성 입자만 스코어링하도록 제한&lt;/li&gt;
&lt;li&gt;G4SDKineticEnergyFilter: 입자의 운동에너지가 일정 범위(하한~상한) 내에 들어오는 경우에만 스코어링하도록 제한&lt;/li&gt;
&lt;li&gt;G4SDParticleFilter: 입자의 이름을 이용하여, 그 입자만 스코어링하도록 제한 (여러 종류의 입자도 가능)&lt;/li&gt;
&lt;li&gt;G4SDParticleWithEnergyFilter: 입자의 이름과 운동에너지 범위를 이용하여, 그 입자의 운동에너지가 일정 범위(하한~상한) 내에 들어오는 경우에만 스코어링하도록 제한 (한 종류의 입자만 가능)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ps-hit-hc에-대한-상세-설명&#34;&gt;PS, Hit, HC에 대한 상세 설명&lt;/h2&gt;
&lt;h3 id=&#34;ps와-hc의-관계&#34;&gt;PS와 HC의 관계&lt;/h3&gt;
&lt;p&gt;결국 Primitive Scorer(PS)가 실질적으로 &lt;b&gt;&lt;font color=blue&gt;물리량(Hit)&lt;/font&gt;&lt;/b&gt;을 검출하는 기능을 가집니다. 그리고 PS가 검출한 물리량(Hit)들은 앞서 설명하였던 &lt;strong&gt;HitsCollection&lt;/strong&gt;에 담기게 될 것입니다.&lt;/p&gt;
&lt;p&gt;이 때, PS마다 스코어링하는 물리량의 종류가 다르므로 &lt;b&gt;&lt;u&gt;PS마다 각각 HitsCollection을 하나씩 담당&lt;/u&gt;&lt;/b&gt;하게 되는 것입니다. 각 PS가 담당하여 맡고 있는 HitsCollection에, 스코어링을 통해 검출해낸 Hit들을 저장하는 방식이 되는 것이지요.&lt;/p&gt;
&lt;h3 id=&#34;hc에-hit을-저장하는-방법&#34;&gt;HC에 Hit을 저장하는 방법&lt;/h3&gt;
&lt;p&gt;Hit은 스코어링 조건에만 부합하는 상황이라면 일단 매 Step마다 생성됩니다. 이렇게 생성되는 수 많은 Hit들은 HitsCollection(HC)에 저장되지요. PS를 이용하는 경우에는 Hit이 HC에 담길 때 &lt;strong&gt;누적&lt;/strong&gt;하는 방식으로 저장됩니다. 예를 들어, G4PSDoseDeposit의 경우에는 스코어링 된 흡수선량을 계속 더해서, 최종적으로 &lt;strong&gt;총 흡수선량의 합&lt;/strong&gt;이라는 하나의 값만 남는 것이죠.&lt;/p&gt;
&lt;h3 id=&#34;여러-지오메트리끼리의-구분&#34;&gt;여러 지오메트리끼리의 구분&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://evandde.github.io/g4-noqasked-002-detcon/#%ec%9d%91%ec%9a%a9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이전 글&lt;/a&gt;에서 Geant4에서는 지오메트리를 Solid, Logical, Physical로 나누어 관리하기 때문에, Logical Volume을 하나만 만들고 이를 공유하여 Physical Volume을 여러 개 둘 수 있다고 하였습니다. 이런 경우, &lt;b&gt;SD는 Logical Volume에 세팅&lt;/b&gt;하므로 &lt;b&gt;여러 개의 지오메트리에 동일한 SD가 세팅&lt;/b&gt; 될 것입니다.&lt;/p&gt;
&lt;p&gt;이처럼 여러 개의 Physical Volume으로 정의된 지오메트리는 실제로도 각각 서로 다른 지오메트리이므로, &lt;b&gt;각자의 스코어링 결과를 구분하여 기록&lt;/b&gt;하고 싶은 경우가 많을 것입니다. 이를 위해 Geant4는 HC에 Hit을 저장할 때 &lt;b&gt;지오메트리 별로 구분하여 누적하는 방식을 채택&lt;/b&gt;하였습니다.&lt;/p&gt;
&lt;p&gt;여기서 각각의 지오메트리를 구분하는 구분자가 바로 &lt;strong&gt;Copy Number&lt;/strong&gt;입니다. 이전에 Physical Volume에 대한 설명을 하던 &lt;a href=&#34;https://evandde.github.io/g4-noqasked-006-phyvol/#copy-number&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 글&lt;/a&gt;에서 Copy Number는 스코어링 결과를 따로따로 보관하기 위한 &lt;strong&gt;사물함 번호&lt;/strong&gt;라는 설명을 했었지요. 즉, G4PSDoseDeposit이 세팅된 Logical Volume을 공유하여 여러 개의 Physical Volume이 배치되었다면, &lt;font color=green&gt;Copy Number가 0번인 Physical Volume&lt;/font&gt;에서 스코어링 된 &lt;font color=green&gt;흡수선량은 0번 사물함에 누적&lt;/font&gt;되고, &lt;font color=violet&gt;Copy Number가 1번인 Physical Volume&lt;/font&gt;에서 스코어링 된 &lt;font color=violet&gt;흡수선량은 1번 사물함에 누적&lt;/font&gt;되는 식입니다. 최종적으로 사용자는 각 Copy Number에 상응하는 사물함에서 누적된 총 합을 확인함으로써 각 지오메트리 별로 구분할 수 있게 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;위 내용을 다이어그램으로 요약해보면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
    subgraph Sensitive Detector
    C &amp;amp; D --&amp;gt; B
    E --- C
    F --- D
    end
B ==&amp;gt; A
A[Logical Volume]
B[Multi Functional Detector]
C[Primitive Scorer 1]
D[Primitive Scorer 2]
E[Filter 1]
F[Filter 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph BT
A --&amp;gt; B
C --&amp;gt; D
B &amp;amp; D --&amp;gt; E === F
A[1번에서 스코어링된 Hit]
B[1번 사물함]
C[2번에서 스코어링된 Hit]
D[2번 사물함]
E[HitsCollection]
F[Primitive Scorer]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Geant4에서의 스코어링에 대한 큰 개념은 이것으로 끝입니다. 새로운 용어와 개념이 너무 많아, 처음 보면 어려울 수 있습니다. 맨 마지막에 보여드린 다이어그램만 대강 이해하셔도 괜찮습니다. 일단 사용하다보면 익숙해지기 마련이니까요.&lt;/p&gt;
&lt;p&gt;다음 글에서는 이 이론을 바탕으로 스코어링을 직접 구현해보도록 하겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;여러 개의 기능적 구성요소(모듈)들을 조합하여 하나의 시스템으로 완성되는 구조.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Passage 유형은 해당 지오메트리를 빠져나갔던 track 다시 들어와서 또 빠져나가면 count가 추가됨.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Population 유형은 해당 지오메트리에 처음으로 들어올 때에만 count가 추가됨. 나갔다 다시 들어오면 무시.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;흡수되거나 운동에너지가 0이 되는 등의 이유로 멈춘 것. 엄밀히는 &lt;em&gt;fStopAndKill&lt;/em&gt; 상태가 된 track을 의미함.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
  </channel>
</rss>
