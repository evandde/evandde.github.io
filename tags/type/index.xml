<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Type | EvaNote</title>
    <link>https://evandde.github.io/tags/type/</link>
      <atom:link href="https://evandde.github.io/tags/type/index.xml" rel="self" type="application/rss+xml" />
    <description>Type</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2022 Evan Kim</copyright><lastBuildDate>Thu, 30 Dec 2021 10:28:53 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>Type</title>
      <link>https://evandde.github.io/tags/type/</link>
    </image>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 7. 자료형(type)</title>
      <link>https://evandde.github.io/praccpp-007-type/</link>
      <pubDate>Thu, 30 Dec 2021 10:28:53 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-007-type/</guid>
      <description>&lt;p&gt;이 글에서는 C++의 근간이 되는 개념인 &lt;strong&gt;자료형&lt;/strong&gt;에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++은 자료형 기반의 언어임. C++에서 사용되는 모든 데이터는 어떤 자료형인지 명확하게 정해져 있어야만 함&lt;/li&gt;
&lt;li&gt;대표적인 기본 자료형 &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;std::string&lt;/code&gt;  정도는 기억할 것&lt;/li&gt;
&lt;li&gt;대부분의 경우, 숫자 형태의 데이터는 &lt;code&gt;int&lt;/code&gt;나 &lt;code&gt;double&lt;/code&gt;로, 문자 형태의 데이터는 &lt;code&gt;&amp;quot;&lt;/code&gt;(큰따옴표)로 묶어서 &lt;code&gt;std::string&lt;/code&gt; 자료형으로 다룸&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;자료형&#34;&gt;자료형&lt;/h2&gt;
&lt;p&gt;C++에서 &lt;b&gt;자료형(type)&lt;/b&gt;이라는 개념은 매우 중요합니다. C++ 언어로 짜여진 코드를 컴파일 하기 위해서는, 코드 내의 모든 변수, 함수의 입력인자, 함수의 출력인자의 자료형이 정해져 있어야만 합니다.&lt;/p&gt;
&lt;p&gt;자료형이란 말그대로 데이터가 어떤 종류의 자료인지를 설명하는 것입니다. 예를 들어 &lt;code&gt;3&lt;/code&gt;은 &lt;strong&gt;정수&lt;/strong&gt;라는 종류로, &lt;code&gt;-1.8&lt;/code&gt;은 &lt;strong&gt;실수&lt;/strong&gt;라는 종류로, &lt;code&gt;&#39;c&#39;&lt;/code&gt;는 &lt;strong&gt;문자&lt;/strong&gt;라는 종류로 분류해볼 수 있겠네요. 이렇게 분류에 사용한 개념인 &lt;b&gt;정수, 실수, 문자&lt;/b&gt;같은 것을 자료형이라고 합니다.&lt;/p&gt;
&lt;p&gt;C++에는 언어 자체적으로 제공하는 몇 가지의 기본자료형(built-in type)이 있어, 간단한 데이터에 대해서는 이 기본자료형으로 자료형을 정해줄 수 있습니다.&lt;/p&gt;
&lt;p&gt;만약 기본자료형으로 부족함을 느끼신다면, 여러분이 직접 자료형을 만들어서 사용할 수도 있습니다. 이를 클래스(class)라고 합니다. 이에 대해서는 나중에 다루겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;기본자료형&#34;&gt;기본자료형&lt;/h2&gt;
&lt;p&gt;기본자료형에도 많은 종류가 있습니다. 예를 들면 정수를 저장하더라도, 크기가 작은 정수를 저장할 때에는 메모리 공간을 조금만 써도 되니 일종의 &lt;b&gt;작은 정수&lt;/b&gt;라는 자료형도 있고, 크기가 큰 정수를 저장해야 할 때에는 &lt;b&gt;큰 정수&lt;/b&gt;라는 자료형에 저장하는 식입니다.&lt;/p&gt;
&lt;p&gt;하지만 이 시리즈에서는 그렇게 세세하게 다 살펴보지는 않을 것입니다. 그냥 대중적으로 쓰이는 &lt;b&gt;기본자료형 5가지만 기억&lt;/b&gt;하고 가겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;bool&#34;&gt;bool&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bool&lt;/code&gt;은 &lt;b&gt;참(true)&lt;/b&gt;과 &lt;b&gt;거짓(false)&lt;/b&gt;이라는 두 가지 데이터를 담당하는 자료형입니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;b&gt;&amp;quot;3은 5보다 작다&amp;quot;&lt;/b&gt;라는 내용이 있다면, 우리는 이것을 보고 참(true)이라고 생각할 것입니다. 그렇다면 &lt;b&gt;&amp;quot;3은 5보다 작다&amp;quot;&lt;/b&gt;라는 내용은 &lt;code&gt;bool&lt;/code&gt; 자료형의 데이터라고 볼 수 있는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;int&#34;&gt;int&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt;는 &lt;strong&gt;정수&lt;/strong&gt;를 담당하는 자료형입니다. &lt;code&gt;-153&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;22&lt;/code&gt;, &amp;hellip; 등 소수점 이하를 가지지 않는 정수를 C++에서는 &lt;code&gt;int&lt;/code&gt; 자료형으로 구분합니다.&lt;/p&gt;
&lt;h3 id=&#34;double&#34;&gt;double&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;double&lt;/code&gt;은 &lt;strong&gt;실수&lt;/strong&gt;를 담당하는 자료형입니다. &lt;code&gt;-3.2&lt;/code&gt;, &lt;code&gt;0.72351&lt;/code&gt;, &amp;hellip; 등 소수점 이하를 가지는 실수를 C++에서는 &lt;code&gt;double&lt;/code&gt; 자료형으로 구분합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;수학적으로는 정수 값이라고 여겨지더라도, C++에서는 소수점 이하를 가진다면 &lt;code&gt;int&lt;/code&gt;가 아니라 &lt;code&gt;double&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;3&lt;/code&gt;은 &lt;code&gt;int&lt;/code&gt; 자료형이지만, &lt;code&gt;3.0&lt;/code&gt;은 &lt;code&gt;double&lt;/code&gt; 자료형입니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;char&#34;&gt;char&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;char&lt;/code&gt;는 한 글자의 문자를 담당하는 자료형입니다. &lt;code&gt;&#39;&lt;/code&gt;(작은따옴표) 표시로 감싸진 한 글자의 문자만 이에 해당합니다.&lt;/p&gt;
&lt;p&gt;예를 들면, &lt;code&gt;&#39;a&#39;&lt;/code&gt;, &lt;code&gt;&#39;T&#39;&lt;/code&gt;, &lt;code&gt;&#39;1&#39;&lt;/code&gt;, &lt;code&gt;&#39;.&#39;&lt;/code&gt;, &amp;hellip; 등과 같은 데이터가 &lt;code&gt;char&lt;/code&gt; 자료형입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;code&gt;1&lt;/code&gt;과 &lt;code&gt;1.0&lt;/code&gt;과 &lt;code&gt;&#39;1&#39;&lt;/code&gt;은 C++ 입장에서 전혀 다른 데이터입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt;은 정수 1로서, &lt;code&gt;int&lt;/code&gt; 자료형입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.0&lt;/code&gt;은 실수 1.0으로서, &lt;code&gt;double&lt;/code&gt; 자료형입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;1&#39;&lt;/code&gt;은 1이라는 모양을 가진 글자 한 개로서, &lt;code&gt;char&lt;/code&gt; 자료형입니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;stdstring&#34;&gt;std::string&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;std::string&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;은 문자들로 구성된 글 데이터를 담당하는 자료형입니다. &lt;code&gt;&amp;quot;&lt;/code&gt;(큰따옴표) 표시로 감싸진 문자들을 말합니다. 이를 프로그래밍에서는 &lt;strong&gt;문자열&lt;/strong&gt;이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;예를 들면, &lt;code&gt;&amp;quot;ABC&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Hi.&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Hello, world!&amp;quot;&lt;/code&gt;, &amp;hellip; 등과 같은 데이터가 &lt;code&gt;std::string&lt;/code&gt; 자료형입니다.&lt;/p&gt;
&lt;p&gt;최근의 C++에서 글자로 구성된 데이터를 다룰 때에는 대부분 &lt;code&gt;std::string&lt;/code&gt;을 쓰는 추세입니다. 심지어 한 글자의 문자를 저장할 때에도, &lt;code&gt;char&lt;/code&gt;보다는 &lt;code&gt;std::string&lt;/code&gt; 자료형을 사용하지요.
&lt;code&gt;char&lt;/code&gt;이라는 자료형은 &lt;b&gt;이 데이터는 무조건 한 글자의 문자&lt;/b&gt;라는 것이 명확한 경우에 사용될 뿐, 대부분 문자 형태의 데이터를 다룰 때에는 &lt;code&gt;std::string&lt;/code&gt; 자료형을 쓴다고 보시면 됩니다.&lt;/p&gt;
&lt;p&gt;다만, 최적화의 목적등을 위해 사용하는 경우도 있고, 혹은 이전부터 사용하던 함수에서 &lt;code&gt;char&lt;/code&gt;을 보게 될 일도 꽤 많으므로, 둘 다 기억해두시기 바랍니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;C++에서는 &lt;code&gt;&#39;&lt;/code&gt;(작은따옴표)로 감싼 문자와 &lt;code&gt;&amp;quot;&lt;/code&gt;(큰따옴표)로 감싼 문자는 완전히 다릅니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;&#39;a&#39;&lt;/code&gt;은 &lt;code&gt;char&lt;/code&gt; 자료형이지만, &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;은 &lt;code&gt;std::string&lt;/code&gt; 자료형입니다.&lt;/p&gt;
&lt;p&gt;또한, &lt;code&gt;&amp;quot;&lt;/code&gt;로는 &lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt;와 같이 여러 개의 문자들을 한 번에 묶어서 감쌀 수 있지만, &lt;code&gt;&#39;&lt;/code&gt;로는 &lt;code&gt;&#39;abc&#39;&lt;/code&gt;와 같이 사용하실 수 없으며 무조건 한 개의 문자만 감싸는 형태로 사용하셔야 합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;chanagelog&#34;&gt;Chanagelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-12-30: 최초 게시&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;엄밀히는 &lt;code&gt;std&lt;/code&gt; 부분은 namespace라고 하는 것이고, &lt;code&gt;std::string&lt;/code&gt;이라는 표현은 &lt;code&gt;std&lt;/code&gt;에 소속된 &lt;code&gt;string&lt;/code&gt;이라는 자료형의 의미입니다. 다만, 이런 문법은 나중에 살펴보기로 하고, 여기서는 &lt;code&gt;std::string&lt;/code&gt;이라는 것을 통째로 기억하시길 권해드립니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
  </channel>
</rss>
