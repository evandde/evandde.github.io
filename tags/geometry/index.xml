<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geometry | EvaNote</title>
    <link>https://evandde.github.io/tags/geometry/</link>
      <atom:link href="https://evandde.github.io/tags/geometry/index.xml" rel="self" type="application/rss+xml" />
    <description>Geometry</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2022 Evan Kim</copyright><lastBuildDate>Fri, 11 Jun 2021 19:27:03 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>Geometry</title>
      <link>https://evandde.github.io/tags/geometry/</link>
    </image>
    
    <item>
      <title>Geant4 무작정 따라하기 - 2. 지오메트리 정의하기</title>
      <link>https://evandde.github.io/g4-noqasked-002-detcon/</link>
      <pubDate>Thu, 10 Jun 2021 09:52:13 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-002-detcon/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 두번째. 지오메트리를 정의하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4의-지오메트리-개념&#34;&gt;Geant4의 지오메트리 개념&lt;/h2&gt;
&lt;h3 id=&#34;기본&#34;&gt;기본&lt;/h3&gt;
&lt;p&gt;Geant4에서의 지오메트리 정의 과정은 다음의 세 클래스가 분리하여 담당합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Solid (형태): 지오메트리의 &lt;strong&gt;모양&lt;/strong&gt;, &lt;strong&gt;크기&lt;/strong&gt; 등에 대한 정보를 담당&lt;/li&gt;
&lt;li&gt;Logical Volume (특성): 지오메트리의 &lt;strong&gt;매질&lt;/strong&gt; 등 질적인 특성에 대한 정보를 담당&lt;/li&gt;
&lt;li&gt;Physical Volume (배치): 지오메트리의 &lt;strong&gt;위치&lt;/strong&gt;, &lt;strong&gt;회전&lt;/strong&gt;, &lt;strong&gt;소속&lt;/strong&gt; 등 배치에 대한 정보를 담당&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 세 가지 클래스가 다음 다이어그램과 같이 유기적으로 연결되어 하나의 지오메트리 객체를 정의하게 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B --&amp;gt; C
A[Solid]
B[Logical Volume]
C[Physical Volume]
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;모양에 대한 정보를 담은 Solid 객체를 정의.&lt;/li&gt;
&lt;li&gt;이 Solid 객체에 매질 정보를 넣어 Logical Volume 객체를 정의.&lt;/li&gt;
&lt;li&gt;이 Logical Volume 객체에 위치, 회전, 소속에 대한 정보를 넣어 Physical Volume 객체를 정의.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;좀 더 구체적인 예시로 다이어그램을 그려보면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B --&amp;gt; C
A[직육면체]
B[물이 담긴 직육면체]
C[&amp;quot;(10, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;중요한 부분은, &lt;strong&gt;Physical Volume까지 정의되어야만&lt;/strong&gt; 비로소 &lt;strong&gt;시뮬레이션 세계에 존재&lt;/strong&gt;하게 된다는 점입니다.&lt;/p&gt;
&lt;p&gt;즉, Solid만 정의된 상태인 &amp;ldquo;직육면체&amp;quot;나, Logical Volume까지만 정의된 &amp;ldquo;물이 담긴 직육면체&amp;quot;는 아직 시뮬레이션 세계에 존재하지 않는 &lt;strong&gt;개념적인 존재일 뿐&lt;/strong&gt;입니다. 이를 &lt;u&gt;&lt;strong&gt;Physical Volume으로서 &amp;quot;(10, 0, 0)에 놓겠다&amp;quot;는 부분이 정의되어야 그제서야 시뮬레이션 세계에 존재&lt;/strong&gt;&lt;/u&gt;하게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;응용&#34;&gt;응용&lt;/h3&gt;
&lt;p&gt;Geant4에서는 지오메트리를 &lt;strong&gt;Solid(형태)&lt;/strong&gt;, &lt;strong&gt;Logical Volume(특성)&lt;/strong&gt;, &lt;b&gt;Physical Volume(배치)&lt;/b&gt;의 세 단계로 나누어 관리하기 때문에, 유사한 지오메트리를 여러개 배치하여야 할 때 이전에 만들어둔 객체를 재사용하여 효율적인 코딩이 가능합니다. Logical Volume을 재사용하는 다음의 다이어그램을 살펴봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B --&amp;gt; C &amp;amp; D &amp;amp; E
A[직육면체]
B[물이 담긴 직육면체]
C[&amp;quot;(0, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
D[&amp;quot;(10, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
E[&amp;quot;(20, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;물이 담긴 직육면체&amp;quot; 라는 Logical Volume을 여러 위치에 배치해야 하는 경우, 위 다이어그램과 같이 Physical Volume만을 변경하며 여러 번 정의해줄 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은, 모양이 동일한데 매질이 달라져야 하는 경우에는 다음과 같이 Solid 객체를 재사용하여 구성할 수도 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B &amp;amp; C
B --&amp;gt; D &amp;amp; E
C --&amp;gt; F
A[직육면체]
B[물이 담긴 직육면체]
C[공기가 담긴 직육면체]
D[&amp;quot;(0, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
E[&amp;quot;(10, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
F[&amp;quot;(20, 0, 0)&amp;quot;에 위치한 공기가 담긴 직육면체]
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;실전&#34;&gt;실전&lt;/h2&gt;
&lt;p&gt;일단 이론은 이정도만 해두고, 코드를 직접 작성해봅시다.&lt;/p&gt;
&lt;p&gt;Geant4 코드 작성 시, 지오메트리에 대한 내용을 적는 곳은 정해져 있습니다. G4VUserDetectorConstruction 클래스를 상속받아 만드는 UserClass에 존재하는 G4VPhysicalVolume* Construct() 함수입니다. 하지만 이렇게 정석대로 설명하면 너무 생소하실테니 제가 제공해드렸던 템플릿 코드에서 살펴보도록 하죠.&lt;/p&gt;
&lt;p&gt;템플릿 코드의 &lt;strong&gt;src 디렉토리&lt;/strong&gt; 내부에 &lt;b&gt;DetectorConstruction.cc&lt;/b&gt;라는 파일이 있을 것입니다. 이 파일을 열면 다음 그림과 같은 코드가 나옵니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_detcon&#34; srcset=&#34;
               /g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_98254c7e6515c22bccd06a6a250bc279.png 400w,
               /g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_877b941cb9d0383047c8cfc68f9bee58.png 760w,
               /g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_98254c7e6515c22bccd06a6a250bc279.png&#34;
               width=&#34;760&#34;
               height=&#34;485&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 18번째 줄부터 나오는 &lt;b&gt;G4VPhysicalVolume *DetectorConstruction::Construct() 함수 안&lt;/b&gt;에 지오메트리에 대한 내용을 적으면 됩니다.&lt;/p&gt;
&lt;p&gt;다음과 같이 정의되는 물이 담긴 팬텀&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;를 만들어보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solid: 가로, 세로, 높이가 5 cm인 정육면체&lt;/li&gt;
&lt;li&gt;Logical Volume: 매질을 물로 채움&lt;/li&gt;
&lt;li&gt;Physical Volume: 팬텀의 중심이 (0, 0, 10 cm)가 되게끔 위치시킴&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;물-정의하기&#34;&gt;&amp;quot;물&amp;quot; 정의하기&lt;/h3&gt;
&lt;p&gt;일단 물이라는 물질을 가져와야 합니다. 자세한 설명은 나중에 하기로 하고, 아래 그림에서 표시된 위치에 다음 한 줄을 적어넣습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto matWater = nist-&amp;gt;FindOrBuildMaterial(&amp;quot;G4_WATER&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_material&#34; srcset=&#34;
               /g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_f0925dfeb3f749d46fcf665f23279291.png 400w,
               /g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_1b3d3fda0dbb6a171c1198db0cd40522.png 760w,
               /g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_f0925dfeb3f749d46fcf665f23279291.png&#34;
               width=&#34;760&#34;
               height=&#34;273&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 한 줄을 통해, &lt;strong&gt;matWater&lt;/strong&gt; 라는 변수는 &amp;ldquo;물&amp;quot;이라는 물질로 정의되었습니다.&lt;/p&gt;
&lt;h3 id=&#34;물이-담긴-팬텀-위치시키기&#34;&gt;물이 담긴 팬텀 위치시키기&lt;/h3&gt;
&lt;p&gt;이제 solid, logical volume, physical volume을 정의해봅시다.&lt;/p&gt;
&lt;p&gt;아래 그림에서 표시된 위치에 다음 내용을 적어 넣습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Water phantom
auto phantomSize = 5. * cm;
auto phantomPos = G4ThreeVector(0., 0., 10.*cm);
auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, .5 * phantomSize, .5 * phantomSize, .5 * phantomSize);
auto phantomLog = new G4LogicalVolume(phantomSol, matWater, &amp;quot;phantom&amp;quot;);
new G4PVPlacement(nullptr, phantomPos, phantomLog, &amp;quot;phantom&amp;quot;, worldLog, false, 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_waterbox&#34; srcset=&#34;
               /g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_fcaacd02e82498e2b0b060072cf4aeb6.png 400w,
               /g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_745c6650d358e625439864280e5f9e97.png 760w,
               /g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_fcaacd02e82498e2b0b060072cf4aeb6.png&#34;
               width=&#34;760&#34;
               height=&#34;390&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    phantomSize, phantomPos와 같은 변수의 경우에는, 사실 따로 변수로 만들지 않고 직접 solid나 physical volume에 값을 적어도 됩니다. 하지만 재사용성 및 가독성을 고려하여 변수로 만들어 사용하였습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;실행해보기&#34;&gt;실행해보기&lt;/h3&gt;
&lt;p&gt;이제 작성한 코드를 저장하고 빌드를 한 뒤 UI모드로 실행하면, 물 팬텀이 추가된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;지난 글에서 만들어뒀던 build 디렉토리에 들어간 뒤, make 명령어만 입력하면 빌드가 수행됩니다.&lt;/p&gt;
&lt;p&gt;이어서, &lt;b&gt;./g4_minimal&lt;/b&gt; 이라고 입력하여 실행하면 UI모드로 실행할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd build
make
./g4_minimal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실행하면 다음 그림과 같은 창이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_UI&#34; srcset=&#34;
               /g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_a41c4580aa9af7a66a5e2de48c3b9182.png 400w,
               /g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_0d5238257ae692deab4467d3847ec8a4.png 760w,
               /g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_a41c4580aa9af7a66a5e2de48c3b9182.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;왼쪽의 탭에서 &lt;strong&gt;Scene tree&lt;/strong&gt;를 클릭하면, 화면에 나타나는 지오메트리의 트리구조를 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 중, &lt;strong&gt;Touchables&lt;/strong&gt; 하위에 있는 것이 여러분이 만든 지오메트리 목록입니다.&lt;/p&gt;
&lt;p&gt;지금 저희가 만들었던 물 팬텀은 &lt;strong&gt;phantom&lt;/strong&gt;이라는 이름으로 표시되고 있으며, 왼쪽의 체크박스를 누르면 오른쪽 그림에서 조그마한 직육면체가 나타났다 사라졌다 하는 것을 확인할 수 있을 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;최종-파일-다운받는-법&#34;&gt;최종 파일 다운받는 법&lt;/h2&gt;
&lt;p&gt;이번 글에서 작성한 코드는 &lt;a href=&#34;https://github.com/evandde/g4_minimal/archive/c6018b5845fbce089a1eee309ea7546d4d8319e4.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;를 통해 다운받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은 git repository를 clone하신 분의 경우에는, example branch의 이전 커밋 중 V1_DetCon이라는 커밋을 참고하셔도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;새로 추가된 코드 부분을 정리하면 다음 그림과 같습니다. 주석이나 단순히 변수를 정의한 부분은 따로 표시하지 않았습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_newcode&#34; srcset=&#34;
               /g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_9d7c2331a92c6d7139f550cbe762a9e4.png 400w,
               /g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_5cb5a5e93bd5842c5c70997286a543a9.png 760w,
               /g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_9d7c2331a92c6d7139f550cbe762a9e4.png&#34;
               width=&#34;760&#34;
               height=&#34;390&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;위 코드에서 어떤 코드가 무슨 역할을 하고 있는지만 기억하시면 됩니다.&lt;/p&gt;
&lt;p&gt;세부적인 설명은 다음 글에서 하도록 하겠습니다.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;의료영상 혹은 방사선 조사 등의 특수한 목적을 위해 제작된 구조물&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 3. 다양한 모양의 지오메트리 만들기</title>
      <link>https://evandde.github.io/g4-noqasked-003-solid/</link>
      <pubDate>Fri, 11 Jun 2021 19:27:03 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-003-solid/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 세번째. 다양한 모양의 지오메트리를 만들기 위해 Solid에 대해 살펴봅시다.&lt;/p&gt;
&lt;p&gt;Geant4에서는 다양한 종류의 Solid(형태)를 제공하고 있습니다. 이번 글에서는 다양한 Solid들을 사용해보도록 하겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4에서의-단위&#34;&gt;Geant4에서의 단위&lt;/h2&gt;
&lt;p&gt;Solid를 알아보기에 앞서, 단위라는 개념부터 살펴보려 합니다. Solid를 만들 때 크기를 입력하려면 길이에 대한 단위가 필수적으로 요구되기 때문입니다.&lt;/p&gt;
&lt;p&gt;Geant4에서는 각종 물리량에 대한 단위를 제공하고 있으며, 이를 사용하기 위해서는 &lt;b&gt;&amp;ldquo;G4SystemOfUnits.hh&amp;rdquo;&lt;/b&gt; 헤더가 필요합니다. 현재 작업 중인 DetectorConsturction.cc 파일에는 제가 이미 이 헤더를 추가해 놓았으므로, 바로 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;사용은 실제 물리량을 기술할 때와 동일한 방식으로 사용하면 됩니다만, 곱하기를 명시해주어야 한다는 점만 주의하면 됩니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;b&gt;10 cm 라는 길이를 Geant4 코드 작성에서 기술하고자 할 때에는 다음과 같이 입력&lt;/b&gt;합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;10. * cm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;길이 단위 이외에도, 질량, 밀도, 온도, 기압, 흡수선량 등 다양한 물리량에 대한 단위를 제공하고 있으므로, 필요에 따라 활용해보시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;solid의-여러가지-종류&#34;&gt;Solid의 여러가지 종류&lt;/h2&gt;
&lt;p&gt;Solid는 간단히 말해 &lt;strong&gt;입체도형&lt;/strong&gt;입니다. 입체도형에는 직육면체, 원기둥, 구, 원뿔 등 다양한 모양이 있지요. Geant4에서도 Solid라는 개념 아래에 &lt;strong&gt;하위 개념&lt;/strong&gt;으로서 G4Box(직육면체), GTubs(원기둥), G4Orb/G4Sphere(구), G4Cons(원뿔) 등을 만들어, 다양한 모양을 정의할 수 있게 하였습니다.&lt;/p&gt;
&lt;p&gt;우리는 &lt;strong&gt;Geant4에서 어떤 입체도형을 제공하는지 파악&lt;/strong&gt;하고, &lt;strong&gt;각각의 입체도형을 정의하는 방법을 학습&lt;/strong&gt;한 뒤, 그대로 사용하기만 하면 됩니다.&lt;/p&gt;
&lt;p&gt;Geant4에서 제공하고 있는 Solid의 모든 종류는 &lt;a href=&#34;https://geant4.kek.jp/Reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Doxygen&lt;/a&gt;에서 G4VSolid 클래스의 레퍼런스 페이지(&lt;a href=&#34;https://geant4.kek.jp/Reference/10.07.p01/classG4VSolid.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10.7.p01 버전&lt;/a&gt;)에 들어가면 상속받은 클래스 목록(&lt;em&gt;Inheritance diagram for G4VSolid&lt;/em&gt;) 부분을 통해 확인할 수 있습니다. 그 종류가 너무나도 많기 때문에, 이 글에서는 다음 세 가지 클래스의 생성자만 살펴보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4Box&lt;/li&gt;
&lt;li&gt;G4Tubs&lt;/li&gt;
&lt;li&gt;G4Orb&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    생성자가 뭔지 모르겠다면, 일단은 그냥 어떤 개념을 가진 대상을 만들 때 사용하는 함수라고 생각하세요. 여기서는 직육면체, 원기둥, 구를 만드는 함수라고 생각하시면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Geant4에서 Solid를 만들 때에는, 맨 처음 인자로 그 Solid의 &amp;ldquo;이름&amp;quot;을 지어주게 되어있습니다. 이름을 짓는 데에 어떠한 규약이 있는 것은 아니므로, 자유롭게 지으시면 됩니다. 다만, 되도록이면 다른 Solid와 이름이 겹치지 않도록 고유의 이름을 주시는 것을 권장합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;g4box직육면체&#34;&gt;G4Box(직육면체)&lt;/h3&gt;
&lt;p&gt;G4Box는 직육면체 모양을 정의하는 데에 사용하는 클래스입니다. 클래스의 생성자는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4Box (const G4String &amp;amp;pName, 
       G4double pX, 
       G4double pY, 
       G4double pZ);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pName: 정의할 직육면체의 이름. 자유롭게 적으면 됨&lt;/li&gt;
&lt;li&gt;pX: X축 방향으로의 모서리 길이의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;절반&lt;/b&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;pY: Y축 방향으로의 모서리 길이의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;절반&lt;/b&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;pZ: Z축 방향으로의 모서리 길이의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;절반&lt;/b&gt;&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;간단히 말해, 직육면체를 정의하기 위해 필요한 것은, 이름과 가로, 세로, 높이라고 볼 수 있습니다. 다만, 가로, 세로, 높이의 경우에는 그 &lt;strong&gt;길이의 절반&lt;/strong&gt;을 입력해야 한다는 점에 주의하세요.&lt;/p&gt;
&lt;p&gt;예를 들어, X축 방향으로 10 cm, Y축 방향으로 5 cm, Z축 방향으로 20 cm 크기를 가진 직육면체 형태의 팬텀을 정의하고자 한다면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, 5. * cm, 2.5 * cm, 10. * cm);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만, 이렇게 적으면 실제 직육면체 크기와 코드에 써있는 값이 서로 달라 헷갈리는 경우가 있어, 저는 개인적으로 다음과 같이 실제 길이에 0.5를 곱하는 형태로 적는 것을 선호합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, .5 * 10. * cm, .5 * 5. * cm, .5 * 20. * cm);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;각 변의 길이를 변수화한다면 다음과 같이 좀 더 알아보기 쉽게 적을 수 있겠지요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomXLength = 10. * cm;
auto phantomYLength = 5. * cm;
auto phantomZLength = 20. * cm;
auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, .5 * phantomXLength, .5 * phantomYLength, .5 * phantomZLength);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;지난 글에서 작성한 코드 부분 중, Solid에 해당하는 내용을 위 코드로 바꿔준 모습입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_g4box&#34; srcset=&#34;
               /g4-noqasked-003-solid/01_g4box_hu0e8f7b13d35a13a4e540f658820cab33_22168_1e461d9f4d3627cbd207c75d81b900e2.png 400w,
               /g4-noqasked-003-solid/01_g4box_hu0e8f7b13d35a13a4e540f658820cab33_22168_4e6672844932ff76292aed6cee9a0f51.png 760w,
               /g4-noqasked-003-solid/01_g4box_hu0e8f7b13d35a13a4e540f658820cab33_22168_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/01_g4box_hu0e8f7b13d35a13a4e540f658820cab33_22168_1e461d9f4d3627cbd207c75d81b900e2.png&#34;
               width=&#34;760&#34;
               height=&#34;198&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 상태로 실행해보면, 물팬텀의 크기가 바뀐 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_g4boxrun&#34; srcset=&#34;
               /g4-noqasked-003-solid/02_g4boxrun_hube810a1bde3702d14cac63e64f046204_77702_0be8989f9f37f1805c8f13af4ddc8ee4.png 400w,
               /g4-noqasked-003-solid/02_g4boxrun_hube810a1bde3702d14cac63e64f046204_77702_2275e2c23821bd8a85e0c406cbb68729.png 760w,
               /g4-noqasked-003-solid/02_g4boxrun_hube810a1bde3702d14cac63e64f046204_77702_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/02_g4boxrun_hube810a1bde3702d14cac63e64f046204_77702_0be8989f9f37f1805c8f13af4ddc8ee4.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;g4tubs원기둥&#34;&gt;G4Tubs(원기둥)&lt;/h3&gt;
&lt;p&gt;G4Tubs는 원기둥 모양을 정의하는 데에 사용하는 클래스입니다. 가운데가 빈 두루마리 휴지같은 모양도 표현할 수 있습니다. 클래스의 생성자는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4Tubs (const G4String &amp;amp;pName, 
        G4double pRMin, 
        G4double pRMax, 
        G4double pDz, 
        G4double pSPhi, 
        G4double pDPhi);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pName: 정의할 원기둥의 이름. 자유롭게 적으면 됨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pRMin: 내반경. 속이 꽉 찬 원기둥이라면 0을 적고, 가운데가 빈 원기둥이라면 내부 원의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;반지름&lt;/b&gt;&lt;/font&gt;을 적음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pRMax: 외반경. 외부 원의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;반지름&lt;/b&gt;&lt;/font&gt;을 적음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pDz: 원기둥 높이의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;절반&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pSPhi: 시작 중심각. 케이크 조각처럼 부채꼴 기둥을 표현하고자 하는 경우에, 시작할 각도를 0°~360° 사이에서 지정할 수 있음. 일반적인 원기둥의 경우 0을 적음. (0°: +x축, 90°: +y축)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pDPhi: 중심각의 변화량. 케이크 조각처럼 부채꼴 기둥을 표현하고자 하는 경우에, 중심각의 변화량을 0°~360° 사이에서 지정할 수 있음. 일반적인 원기둥의 경우 360°(360. * deg)를 적음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일반적인 원기둥 뿐만 아니라, 원기둥 껍질 혹은 부채꼴 기둥 및 부채꼴 기둥 껍질모양까지 만들 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    G4Tubs 클래스는 무조건 Z축을 중심축으로 한 형태로만 만들어집니다. 다른 축을 중심축으로 하고 싶다면, Physical Volume을 설정할 때 회전을 시키는 방법밖에 없습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;예를 들어, 반지름이 5 cm이고, 높이가 10 cm인 속이 꽉 찬 원기둥 형태의 팬텀을 정의하고자 한다면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomSol = new G4Tubs(&amp;quot;phantom&amp;quot;, 0., 5. * cm, 5. * cm, 0., 360. * deg);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;저는 G4Box의 경우와 유사하게, 반경대신 직경을 써서 코드 작성시의 일관성을 유지하는 것을 좋아합니다. 일반적으로 다음과 같이 작성하는 편이지요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomDiameter = 10. * cm;
auto phantomHeight = 10. * cm;
auto phantomSol = new G4Tubs(&amp;quot;phantom&amp;quot;, 0., .5 * phantomDiameter, .5 * phantomHeight, 0., 360. * deg);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아까 수정하였던 Solid에 해당하는 내용을 G4Tubs의 예시인 위 코드로 바꿔준 모습입니다. &lt;font color=&#39;red&#39;&gt;G4Tubs의 헤더(G4Tubs.hh)는 제가 제공해드렸던 템플릿 코드의 DetectorConstruction에 기본으로 포함되어 있지 않으므로, 꼭 직접 넣어주셔야 합니다.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_g4tubs&#34; srcset=&#34;
               /g4-noqasked-003-solid/03_g4tubs_hu05891ed905d4a019a805d5e6e5ea84de_203159_f4e9d7b1fec97b00d94ba319a64f1adf.png 400w,
               /g4-noqasked-003-solid/03_g4tubs_hu05891ed905d4a019a805d5e6e5ea84de_203159_851b8ffd53511ef6c04067fabfe79934.png 760w,
               /g4-noqasked-003-solid/03_g4tubs_hu05891ed905d4a019a805d5e6e5ea84de_203159_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/03_g4tubs_hu05891ed905d4a019a805d5e6e5ea84de_203159_f4e9d7b1fec97b00d94ba319a64f1adf.png&#34;
               width=&#34;760&#34;
               height=&#34;619&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;실행해보면, 물팬텀의 모양이 바뀐 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_g4tubsrun&#34; srcset=&#34;
               /g4-noqasked-003-solid/04_g4tubsrun_hu45feeb31614cc9859fb07c736b7b1c37_77157_89e3ff23693d8f6fc2acf064b8a97381.png 400w,
               /g4-noqasked-003-solid/04_g4tubsrun_hu45feeb31614cc9859fb07c736b7b1c37_77157_46a625c87f6a484cf18933f5f32eec85.png 760w,
               /g4-noqasked-003-solid/04_g4tubsrun_hu45feeb31614cc9859fb07c736b7b1c37_77157_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/04_g4tubsrun_hu45feeb31614cc9859fb07c736b7b1c37_77157_89e3ff23693d8f6fc2acf064b8a97381.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;g4orb구&#34;&gt;G4Orb(구)&lt;/h3&gt;
&lt;p&gt;G4Orb는 구 모양을 정의하는 데에 사용하는 클래스입니다. 클래스의 생성자는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4Orb (const G4String &amp;amp;pName, 
       G4double pRmax);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pName: 정의할 구의 이름. 자유롭게 적으면 됨&lt;/li&gt;
&lt;li&gt;pRmax: 구의 반지름&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;G4Orb는 속이 꽉 찬 구만 만들 수 있습니다. 단순히 구의 반지름만 적어주면 끝이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    G4Tubs처럼 구 껍질이나 각도에 따라 잘린 구를 만들기 위해서는 G4Sphere라는 Solid를 이용하시면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;예를 들어, 반지름이 5 cm인 구형 팬텀을 정의하고자 한다면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomSol = new G4Orb(&amp;quot;phantom&amp;quot;, 5. * cm);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;저는 여기서도 직경을 이용하는 편입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomDiameter = 10. * cm;
auto phantomSol = new G4Orb(&amp;quot;phantom&amp;quot;, .5 * phantomDiameter);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아까 수정하였던 Solid에 해당하는 내용을 G4Orb의 예시인 위 코드로 바꿔준 모습입니다. 이 경우에도 반드시 &lt;font color=&#39;red&#39;&gt;G4Orb의 헤더(G4Orb.hh)를 직접 넣어주시기 바랍니다.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_g4orb&#34; srcset=&#34;
               /g4-noqasked-003-solid/05_g4orb_huba09776a125216d4953124bbbb4120ea_196719_825c1244b29fed1817aecae870e8a2d8.png 400w,
               /g4-noqasked-003-solid/05_g4orb_huba09776a125216d4953124bbbb4120ea_196719_7ace8ff96d65f63ac5e8964c2143f293.png 760w,
               /g4-noqasked-003-solid/05_g4orb_huba09776a125216d4953124bbbb4120ea_196719_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/05_g4orb_huba09776a125216d4953124bbbb4120ea_196719_825c1244b29fed1817aecae870e8a2d8.png&#34;
               width=&#34;760&#34;
               height=&#34;619&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;실행하면, 구형의 물팬텀을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_g4orbrun&#34; srcset=&#34;
               /g4-noqasked-003-solid/06_g4orbrun_hu77955d15bf9517a9bb09aa947b7046bd_76553_05dd2ead8dd4b91f75d7bc16875aa605.png 400w,
               /g4-noqasked-003-solid/06_g4orbrun_hu77955d15bf9517a9bb09aa947b7046bd_76553_dbb50aa7f7af86646c6f03fd1f57998e.png 760w,
               /g4-noqasked-003-solid/06_g4orbrun_hu77955d15bf9517a9bb09aa947b7046bd_76553_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/06_g4orbrun_hu77955d15bf9517a9bb09aa947b7046bd_76553_05dd2ead8dd4b91f75d7bc16875aa605.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;Geant4는 이 외에도 정말 많은 Solid 종류를 제공하고 있습니다. 대부분의 경우, 각 클래스의 &lt;strong&gt;헤더파일&lt;/strong&gt;을 열어보면 어떤 모양을 어떤 변수로 표현하는지 주석으로 설명되어 있습니다.&lt;/p&gt;
&lt;p&gt;이 글에서 소개한 단순한 모양 이외에도, 두 개의 Solid를 이용하여 합집합/차집합/교집합에 해당하는 새로운 Solid를 정의하는 클래스 (G4UnionSolid, G4SubtractionSolid, G4IntersectionSolid)나, 다각형 면으로 구성된 지오메트리를 표현하기 위한 Solid 클래스 (G4TesellatedSolid) 등 다양한 클래스를 제공하고 있으니 필요에 따라 참고하시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;고생하셨습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는, &lt;strong&gt;물질&lt;/strong&gt;을 정의하는 방법에 대해 좀 더 자세히 살펴보도록 하겠습니다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
