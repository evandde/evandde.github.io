<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cmake | EvaNote</title>
    <link>https://evandde.github.io/tags/cmake/</link>
      <atom:link href="https://evandde.github.io/tags/cmake/index.xml" rel="self" type="application/rss+xml" />
    <description>cmake</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2021 Evan Kim</copyright><lastBuildDate>Fri, 24 Sep 2021 17:57:09 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>cmake</title>
      <link>https://evandde.github.io/tags/cmake/</link>
    </image>
    
    <item>
      <title>Visual Studio Code에서 MSVC 기반 C&#43;&#43;, CMake 환경 설정하기</title>
      <link>https://evandde.github.io/vscode-msvc/</link>
      <pubDate>Thu, 26 Aug 2021 10:05:15 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-msvc/</guid>
      <description>&lt;p&gt;VSCode에서 Microsoft Visual Studio 빌드 도구인 &lt;b&gt;MSVC&lt;/b&gt;를 이용하여 &lt;b&gt;C/C++ 언어&lt;/b&gt; 및 &lt;b&gt;CMake&lt;/b&gt;를 사용하기 위한 환경을 구축하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;VSCode 설치를 완료한 상태&lt;/b&gt;라고 가정합니다. VSCode 설치 및 기본 세팅은 &lt;a href=&#34;https://evandde.github.io/vscode/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    MSVC는 Windows에서만 이용 가능합니다. Linux나 Mac을 이용하시는 경우에는 &lt;b&gt;gcc&lt;/b&gt;와 같은 다른 대안을 이용하시기 바랍니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;vs2019-빌드-도구-설치&#34;&gt;VS2019 빌드 도구 설치&lt;/h2&gt;
&lt;p&gt;VSCode는 C 언어용 컴파일러나 디버거를 자체적으로 내장하고있지 않습니다. 때문에 C 언어를 VSCode에서 사용하려면, 컴파일러와 디버거를 직접 설치하고 이를 연동해주는 작업이 필요합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Extension을 설치한다고 해서 컴파일러나 디버거가 설치되는 것은 아닙니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;이 글에서는 Microsoft사에서 제공하는 MSVC(Microsoft Visual C++)를 이용하여 진행할 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;다운로드&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;Microsoft에서 제공하는 Visual Studio 2019용 Build Tools는 &lt;a href=&#34;https://visualstudio.microsoft.com/ko/downloads/#build-tools-for-visual-studio-2019&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 무료로 받을 수 있습니다. 아래 그림에서 보이는 다운로드 링크를 누르면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_download&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_df9e25f1c544aa68a78a92d89e0c13a0.png 400w,
               /vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_b06efe6e544273a41390ecc7e564f614.png 760w,
               /vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_df9e25f1c544aa68a78a92d89e0c13a0.png&#34;
               width=&#34;760&#34;
               height=&#34;135&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 뒤 실행하면, 아래 그림과 같은 창이 뜰 것입니다. 이 중 &lt;b&gt;C++를 사용한 데스크톱 개발&lt;/b&gt;을 클릭합니다. 오른쪽 설치 세부 정보에서, 자동으로 선택사항 중 일부가 선택될 것입니다. 혹시라도 &lt;b&gt;Windows용 C++ CMake 도구&lt;/b&gt;가 선택이 안되어있다면, &lt;b&gt;꼭 선택&lt;/b&gt;해주시기 바랍니다. 선택을 완료하셨다면 설치를 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_install&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_c5d8029504a4fb8ef927f8c6b3a180ce.png 400w,
               /vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_0b55a1d22f1be37baad8292a20a41ba4.png 760w,
               /vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_c5d8029504a4fb8ef927f8c6b3a180ce.png&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;제대로 설치가 되었는지 확인해보겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[S]&lt;/b&gt; 를 눌러 검색을 띄움&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;developer powershell&lt;/code&gt;을 입력하여 &lt;b&gt;Developer PowerShell for VS 2019&lt;/b&gt;를 찾은 뒤 실행&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_test1&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_226fbd82f31d51e44fa9627733e16400.png 400w,
               /vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_be659fa34a05acdcb7fbe530b7909974.png 760w,
               /vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_226fbd82f31d51e44fa9627733e16400.png&#34;
               width=&#34;760&#34;
               height=&#34;623&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cl&lt;/code&gt; 명령어와 &lt;code&gt;cmake&lt;/code&gt; 명령어를 입력하여, 다음 그림과 같이 사용법(usage)이 뜨는지 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_test2&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_2a6a75a7035c6176fb951ab1b20f22f7.png 400w,
               /vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_d0b2445390538f91ec4903fd6b0dd1b7.png 760w,
               /vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_2a6a75a7035c6176fb951ab1b20f22f7.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이제 여러분은 MSVC에 포함된 C/C++ 빌드 도구 및 CMake 도구를 사용할 수 있게 되었습니다.&lt;/p&gt;
&lt;h3 id=&#34;vscode-실행&#34;&gt;VSCode 실행&lt;/h3&gt;
&lt;p&gt;VSCode와 MSVC를 연동하여 사용하고자 하는 경우에는, &lt;b&gt;&lt;font color=red&gt;반드시 Developer PowerShell for VS 2019를 통해 VSCode를 실행시켜야만 합니다.&lt;/font&gt;&lt;/b&gt; 그렇지 않으면, VSCode에서 MSVC 관련 툴을 인지하지 못합니다.&lt;/p&gt;
&lt;p&gt;Developer PowerShell for VS 2019에서 VSCode를 실행시키는 법은 간단합니다. 다음 그림과 같이 &lt;code&gt;code&lt;/code&gt;라는 명령어만 실행시키시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_vscode&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_bfa1e99fb80419795fa53111b638bdeb.png 400w,
               /vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_1f77e81671e3dadffa69895898cd2817.png 760w,
               /vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_bfa1e99fb80419795fa53111b638bdeb.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;VSCode 창이 뜨면, &lt;b&gt;[File] - [Open Folder]&lt;/b&gt;를 선택하여, 작업을 진행할 폴더를 선택해주시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vscode_openfolder&#34; srcset=&#34;
               /vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_a42ed27b8f7572ec2f92b245192b2eee.png 400w,
               /vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_6c6f446b400d5cb8ef78e06bf19e9ada.png 760w,
               /vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_a42ed27b8f7572ec2f92b245192b2eee.png&#34;
               width=&#34;760&#34;
               height=&#34;647&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extension-설치&#34;&gt;Extension 설치&lt;/h2&gt;
&lt;p&gt;이제 VSCode에서 extension을 설치할 차례입니다.&lt;/p&gt;
&lt;h3 id=&#34;cc&#34;&gt;C/C++&lt;/h3&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 &amp;ldquo;&lt;strong&gt;c&lt;/strong&gt;&amp;ldquo;를 검색하세요. 맨 위에 C/C++ extension이 뜰 것입니다. Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_c&#34; srcset=&#34;
               /vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_6effe4ec295e401b02f8e8d25bd8cb0e.png 400w,
               /vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_d7e0729455c36626dfc5123f0d498ede.png 760w,
               /vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_6effe4ec295e401b02f8e8d25bd8cb0e.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;cmake&#34;&gt;CMake&lt;/h3&gt;
&lt;p&gt;이어서 CMake 관련 extension도 설치합니다.&lt;/p&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 “&lt;strong&gt;cmake&lt;/strong&gt;“를 검색하세요. 맨 위부터 &lt;strong&gt;CMake&lt;/strong&gt;와 &lt;strong&gt;CMake Tools&lt;/strong&gt;가 뜰 것입니다. 두 가지 모두 Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_cmake&#34; srcset=&#34;
               /vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png 400w,
               /vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_46089bc2159dbb4772073c745321d074.png 760w,
               /vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;각각의 용도는 이렇습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMake extension: CMake 명령어에 대한 자동완성 제공. CMakeLists.txt 파일 작성에 도움&lt;/li&gt;
&lt;li&gt;CMake Tools extension: CMake 기반 프로젝트를 관리하는데에 도움&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;테스트&#34;&gt;테스트&lt;/h2&gt;
&lt;p&gt;이제 제대로 설치가 되었는지 확인할 시간입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    경로에 &lt;strong&gt;한글&lt;/strong&gt;이 있으면 제대로 동작하지 않습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;hello-world-프로젝트-만들어보기&#34;&gt;Hello world 프로젝트 만들어보기&lt;/h3&gt;
&lt;p&gt;CMake Tools는 &lt;b&gt;CMake: Quick Start&lt;/b&gt;라는 기능을 제공합니다. 손쉽게 CMake 기반의 Hello world 프로젝트를 만들어주는 것이죠.&lt;/p&gt;
&lt;p&gt;적당한 경로에 빈 폴더를 만들어주고 다음과 같이 진행합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs1&#34; srcset=&#34;
               /vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png 400w,
               /vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_3da3f460f72e8cabaaf3889ef5780923.png 760w,
               /vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs2&#34; srcset=&#34;
               /vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png 400w,
               /vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_f9f11df871b2487e26ca5679338a6be8.png 760w,
               /vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs3&#34; srcset=&#34;
               /vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png 400w,
               /vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_c10044573126886eedd0e2d972091b76.png 760w,
               /vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs4&#34; srcset=&#34;
               /vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png 400w,
               /vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_8cd8b9516849d5a9d8d75ca9fb813464.png 760w,
               /vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs5&#34; srcset=&#34;
               /vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png 400w,
               /vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_2a9520c56ea9bd1f1d8c0f10ab602f8f.png 760w,
               /vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs6&#34; srcset=&#34;
               /vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png 400w,
               /vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_7c3275d6d1a0e5d48b7a79780d75038b.png 760w,
               /vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행-1&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 실행하시면 됩니다. 동일 폴더 내에 &lt;b&gt;.vscode&lt;/b&gt;라는 폴더가 생기고 그 안에 CMake 설정 등에 관한 &lt;code&gt;.json&lt;/code&gt; 파일이 자동으로 생성될 것입니다. 또한, &lt;b&gt;build&lt;/b&gt;라는 폴더가 생기고 그 안에 &lt;strong&gt;CMake를 통한 빌드 부산물 및 컴파일 결과물&lt;/strong&gt;이 자동으로 생성될 것입니다.&lt;/p&gt;
&lt;p&gt;이후 아래쪽의 &lt;strong&gt;TERMINAL&lt;/strong&gt; 탭을 확인하시면, 자동 생성된 main.cpp의 내용대로 Hello, world!가 출력되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run1&#34; srcset=&#34;
               /vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png 400w,
               /vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_0830794d6928faa454db44cb37713ac3.png 760w,
               /vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run2&#34; srcset=&#34;
               /vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png 400w,
               /vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_51d0b8047f56d8954d98888e1a03ec14.png 760w,
               /vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;디버깅&#34;&gt;디버깅&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 진행하여 디버깅도 가능합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    맨 처음 그림에서 보이는 바와 같이, CMake type을 Debug로 설정해야 함에 주의하세요!
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug1&#34; srcset=&#34;
               /vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png 400w,
               /vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_8bd4fe75f72748f2f1abec2b49ee6738.png 760w,
               /vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug2&#34; srcset=&#34;
               /vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png 400w,
               /vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_f9d287c1cb825e1f442a098e2e351024.png 760w,
               /vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug3&#34; srcset=&#34;
               /vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png 400w,
               /vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_7a86a29cff6db9ce2bed4c66f0c4ae71.png 760w,
               /vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug4&#34; srcset=&#34;
               /vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png 400w,
               /vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_dc1e0e7796f2a56584f0e24fc089a09d.png 760w,
               /vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug5&#34; srcset=&#34;
               /vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png 400w,
               /vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_48f79a1d99308f24c3c1818ab0a64c3b.png 760w,
               /vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;command-line-argument-설정&#34;&gt;Command line argument 설정&lt;/h3&gt;
&lt;p&gt;실행하거나 디버깅할 때, command line argument를 넘겨주도록 설정하고 싶을 때가 있습니다.&lt;/p&gt;
&lt;p&gt;이는 &lt;b&gt;.vscode/settings.json 파일을 생성&lt;/b&gt;해주고, 해당 파일에서 &lt;code&gt;cmake.debugConfig&lt;/code&gt;인자로서 입력해줘야 합니다.&lt;/p&gt;
&lt;h4 id=&#34;테스트-코드-수정&#34;&gt;테스트 코드 수정&lt;/h4&gt;
&lt;p&gt;그 전에 먼저 argument가 제대로 동작하는지 확인하기 위해 main.cpp 코드를 수정하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

int main(int argc, char**) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Hello, world!\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;argc: &amp;quot; &amp;lt;&amp;lt; argc &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 상태로 그냥 실행해보면 다음과 같이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg1&#34; srcset=&#34;
               /vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png 400w,
               /vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_f4a8f7ec275524a9111222bf92809d79.png 760w,
               /vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;settingsjson-설정-및-실행&#34;&gt;settings.json 설정 및 실행&lt;/h4&gt;
&lt;p&gt;이제 settings.json 파일을 만들어 보겠습니다. (이미 만들어져 있을 수도 있습니다만, 그대로 진행하시면 됩니다)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;다음 그림과 같이 File - Preferences - Settings를 클릭합니다. 단축키는 &lt;b&gt;[CTRL]+[,]&lt;/b&gt; 입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg2&#34; srcset=&#34;
               /vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png 400w,
               /vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_65c616437706abe59a2dbc43109e2633.png 760w,
               /vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 Workspace 탭을 클릭합니다. 이 프로젝트(workspace)에만 적용되는 설정항목이라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg3&#34; srcset=&#34;
               /vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png 400w,
               /vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_13eb3447d52efcc9587d006f0fe4e81b.png 760w,
               /vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상단 검색창에 &lt;code&gt;cmake.debugConfig&lt;/code&gt;를 검색한 뒤, &lt;u&gt;Edit in settings.json&lt;/u&gt; 부분을 클릭합니다. &lt;code&gt;cmake.debug&lt;/code&gt; 정도만 입력하셔도 바로 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg4&#34; srcset=&#34;
               /vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png 400w,
               /vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_748696740cce29f2715b14ab0cbbe055.png 760w,
               /vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클릭하시면 바로 다음과 같이 &lt;code&gt;.vscode/settings.json&lt;/code&gt; 폴더 및 파일이 생성되고, settings.json 파일이 열리며, 그 안에 다음 그림과 같은 내용이 자동으로 작성되어 있을 것입니다. (추가로 다른 내용이 더 쓰여있을 수도 있습니다.)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg5&#34; srcset=&#34;
               /vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png 400w,
               /vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_31882fb69a1599a520fda4d0b80951be.png 760w,
               /vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 이 안에 &lt;code&gt;args&lt;/code&gt; 항목을 만들어 command line argument를 설정합니다. 실행파일명 뒤에 이어질 추가적인 argument들만 적어주면 되며, 각 항목은 &amp;ldquo;&amp;quot;(double-quote)로 묶어주고 ,(comma)로 분리해주면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg6&#34; srcset=&#34;
               /vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png 400w,
               /vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_c9ff1596f853439e269c3e58da89d3ba.png 760w,
               /vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 저장한 뒤, 실행이나 디버깅을 해보면 다음과 같이 command line argument가 잘 반영된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg7&#34; srcset=&#34;
               /vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png 400w,
               /vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_193e7f64d30ffcba4b84ba7d57d00d13.png 760w,
               /vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code에서 CMake 환경 설정하기</title>
      <link>https://evandde.github.io/vscode-cmake/</link>
      <pubDate>Fri, 13 Nov 2020 10:04:24 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-cmake/</guid>
      <description>&lt;p&gt;VSCode에서 CMake 기반의 프로젝트를 만들고, 실행/디버깅 등이 가능한 환경을 구축하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 VSCode 설치 후, &lt;b&gt;C++ 언어를 사용하기 위한 환경 구축까지 완료한 상태&lt;/b&gt;라고 가정합니다. C++ 언어 사용을 위한 환경 구축은 &lt;a href=&#34;https://evandde.github.io/vscode-cpp/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;cmake-설치&#34;&gt;CMake 설치&lt;/h2&gt;
&lt;p&gt;VSCode는 CMake를 자체적으로 내장하고있지 않습니다. 때문에 CMake를 직접 설치하고 이를 연동해주는 작업이 필요합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Extension을 설치한다고 해서 CMake가 설치되는 것은 아닙니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;windows를-이용하는-경우&#34;&gt;Windows를 이용하는 경우&lt;/h3&gt;
&lt;p&gt;Chocolatey를 이용하면 쉽게 설치할 수 있습니다. 다만, chocolatey로 CMake를 설치하는 경우 &lt;code&gt;PATH&lt;/code&gt; 환경변수가 자동으로 잡히지 않아, 추가적인 명령어를 입력해주어야 합니다. 다음 명령어를 입력하세요.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Chocolatey는 Windows용 패키지 관리자입니다. 아직 사용 방법을 모르신다면, &lt;a href=&#34;https://evandde.github.io/chocolatey/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install cmake -y --installargs &#39;ADD_CMAKE_TO_PATH=System&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_windows&#34; srcset=&#34;
               /vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_9771e93ed3e87c576f6fb2867e7b5956.png 400w,
               /vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_f38a49ff98e14257a9b883dedfdabf5a.png 760w,
               /vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_9771e93ed3e87c576f6fb2867e7b5956.png&#34;
               width=&#34;760&#34;
               height=&#34;331&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 설치가 잘 되었는지 확인해보세요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake --version
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Chocolatey 특성 상, 설치한 직후에는 &lt;code&gt;cmake&lt;/code&gt; 명령어를 인식하지 못할 수 있습니다.&lt;/p&gt;
&lt;p&gt;PowerShell을 껐다 켜거나, &lt;code&gt;refreshenv&lt;/code&gt; 명령어를 활용하세요.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_version_windows&#34; srcset=&#34;
               /vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_0bc90b9ece12811ecdcb9939d2704be4.png 400w,
               /vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_afb26016a1a0ad67fc17e85ed1c59bba.png 760w,
               /vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_0bc90b9ece12811ecdcb9939d2704be4.png&#34;
               width=&#34;760&#34;
               height=&#34;122&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;linux를-이용하는-경우&#34;&gt;Linux를 이용하는 경우&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://salsa.debian.org/apt-team/apt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt(apt-get)&lt;/a&gt;나 &lt;a href=&#34;http://yum.baseurl.org/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;yum&lt;/a&gt;을 이용하면 쉽게 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 &lt;code&gt;apt&lt;/code&gt;를 이용하여 설치한다면 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install cmake -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_linux&#34; srcset=&#34;
               /vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_08db8804eb063c564c76702499a0f070.png 400w,
               /vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_68103a3937f845ce58583da48ddc4d0e.png 760w,
               /vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_08db8804eb063c564c76702499a0f070.png&#34;
               width=&#34;760&#34;
               height=&#34;300&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 설치가 잘 되었는지 확인해보세요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_version_linux&#34; srcset=&#34;
               /vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1a5c2e360d69d4f6e5ccd10c0e5ee3b7.png 400w,
               /vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1d69aa391dc32fc422821a292d815295.png 760w,
               /vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1a5c2e360d69d4f6e5ccd10c0e5ee3b7.png&#34;
               width=&#34;736&#34;
               height=&#34;77&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extension-설치&#34;&gt;Extension 설치&lt;/h2&gt;
&lt;p&gt;이제 VSCode에서 extension을 설치할 차례입니다.&lt;/p&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 “&lt;strong&gt;cmake&lt;/strong&gt;“를 검색하세요. 맨 위부터 &lt;strong&gt;CMake&lt;/strong&gt;와 &lt;strong&gt;CMake Tools&lt;/strong&gt;가 뜰 것입니다. 두 가지 모두 Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_cmake&#34; srcset=&#34;
               /vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png 400w,
               /vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_46089bc2159dbb4772073c745321d074.png 760w,
               /vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;각각의 용도는 이렇습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMake extension: CMake 명령어에 대한 자동완성 제공. CMakeLists.txt 파일 작성에 도움.&lt;/li&gt;
&lt;li&gt;CMake Tools extension: CMake 기반 프로젝트를 관리하는데에 도움.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;테스트&#34;&gt;테스트&lt;/h2&gt;
&lt;p&gt;이제 제대로 설치가 되었는지 확인할 시간입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    경로에 &lt;strong&gt;한글&lt;/strong&gt;이 있으면 제대로 동작하지 않습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;hello-world-프로젝트-만들어보기&#34;&gt;Hello world 프로젝트 만들어보기&lt;/h3&gt;
&lt;p&gt;CMake Tools는 &lt;b&gt;CMake: Quick Start&lt;/b&gt;라는 기능을 제공합니다. 손쉽게 CMake 기반의 Hello world 프로젝트를 만들어주는 것이죠.&lt;/p&gt;
&lt;p&gt;적당한 경로에 빈 폴더를 만들어주고 다음과 같이 진행합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs1&#34; srcset=&#34;
               /vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png 400w,
               /vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_3da3f460f72e8cabaaf3889ef5780923.png 760w,
               /vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs2&#34; srcset=&#34;
               /vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png 400w,
               /vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_f9f11df871b2487e26ca5679338a6be8.png 760w,
               /vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs3&#34; srcset=&#34;
               /vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png 400w,
               /vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_c10044573126886eedd0e2d972091b76.png 760w,
               /vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs4&#34; srcset=&#34;
               /vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png 400w,
               /vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_8cd8b9516849d5a9d8d75ca9fb813464.png 760w,
               /vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs5&#34; srcset=&#34;
               /vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png 400w,
               /vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_2a9520c56ea9bd1f1d8c0f10ab602f8f.png 760w,
               /vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs6&#34; srcset=&#34;
               /vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png 400w,
               /vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_7c3275d6d1a0e5d48b7a79780d75038b.png 760w,
               /vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 실행하시면 됩니다. 동일 폴더 내에 &lt;b&gt;.vscode&lt;/b&gt;라는 폴더가 생기고 그 안에 CMake 설정 등에 관한 &lt;code&gt;.json&lt;/code&gt; 파일이 자동으로 생성될 것입니다. 또한, &lt;b&gt;build&lt;/b&gt;라는 폴더가 생기고 그 안에 &lt;strong&gt;CMake를 통한 빌드 부산물 및 컴파일 결과물&lt;/strong&gt;이 자동으로 생성될 것입니다.&lt;/p&gt;
&lt;p&gt;이후 아래쪽의 &lt;strong&gt;TERMINAL&lt;/strong&gt; 탭을 확인하시면, 자동 생성된 main.cpp의 내용대로 Hello, world!가 출력되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run1&#34; srcset=&#34;
               /vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png 400w,
               /vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_0830794d6928faa454db44cb37713ac3.png 760w,
               /vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run2&#34; srcset=&#34;
               /vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png 400w,
               /vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_51d0b8047f56d8954d98888e1a03ec14.png 760w,
               /vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;디버깅&#34;&gt;디버깅&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 진행하여 디버깅도 가능합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    맨 처음 그림에서 보이는 바와 같이, CMake type을 Debug로 설정해야 함에 주의하세요!
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug1&#34; srcset=&#34;
               /vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png 400w,
               /vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_8bd4fe75f72748f2f1abec2b49ee6738.png 760w,
               /vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug2&#34; srcset=&#34;
               /vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png 400w,
               /vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_f9d287c1cb825e1f442a098e2e351024.png 760w,
               /vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug3&#34; srcset=&#34;
               /vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png 400w,
               /vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_7a86a29cff6db9ce2bed4c66f0c4ae71.png 760w,
               /vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug4&#34; srcset=&#34;
               /vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png 400w,
               /vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_dc1e0e7796f2a56584f0e24fc089a09d.png 760w,
               /vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug5&#34; srcset=&#34;
               /vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png 400w,
               /vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_48f79a1d99308f24c3c1818ab0a64c3b.png 760w,
               /vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;command-line-argument-설정&#34;&gt;Command line argument 설정&lt;/h3&gt;
&lt;p&gt;실행하거나 디버깅할 때, command line argument를 넘겨주도록 설정하고 싶을 때가 있습니다.&lt;/p&gt;
&lt;p&gt;이는 &lt;b&gt;.vscode/settings.json 파일을 생성&lt;/b&gt;해주고, 해당 파일에서 &lt;code&gt;cmake.debugConfig&lt;/code&gt;인자로서 입력해줘야 합니다.&lt;/p&gt;
&lt;h4 id=&#34;테스트-코드-수정&#34;&gt;테스트 코드 수정&lt;/h4&gt;
&lt;p&gt;그 전에 먼저 argument가 제대로 동작하는지 확인하기 위해 main.cpp 코드를 수정하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

int main(int argc, char**) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Hello, world!\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;argc: &amp;quot; &amp;lt;&amp;lt; argc &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 상태로 그냥 실행해보면 다음과 같이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg1&#34; srcset=&#34;
               /vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png 400w,
               /vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_f4a8f7ec275524a9111222bf92809d79.png 760w,
               /vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;settingsjson-설정-및-실행&#34;&gt;settings.json 설정 및 실행&lt;/h4&gt;
&lt;p&gt;이제 settings.json 파일을 만들어 보겠습니다. (이미 만들어져 있을 수도 있습니다만, 그대로 진행하시면 됩니다)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;다음 그림과 같이 File - Preferences - Settings를 클릭합니다. 단축키는 &lt;b&gt;[CTRL]+[,]&lt;/b&gt; 입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg2&#34; srcset=&#34;
               /vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png 400w,
               /vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_65c616437706abe59a2dbc43109e2633.png 760w,
               /vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 Workspace 탭을 클릭합니다. 이 프로젝트(workspace)에만 적용되는 설정항목이라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg3&#34; srcset=&#34;
               /vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png 400w,
               /vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_13eb3447d52efcc9587d006f0fe4e81b.png 760w,
               /vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상단 검색창에 &lt;code&gt;cmake.debugConfig&lt;/code&gt;를 검색한 뒤, &lt;u&gt;Edit in settings.json&lt;/u&gt; 부분을 클릭합니다. &lt;code&gt;cmake.debug&lt;/code&gt; 정도만 입력하셔도 바로 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg4&#34; srcset=&#34;
               /vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png 400w,
               /vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_748696740cce29f2715b14ab0cbbe055.png 760w,
               /vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클릭하시면 바로 다음과 같이 &lt;code&gt;.vscode/settings.json&lt;/code&gt; 폴더 및 파일이 생성되고, settings.json 파일이 열리며, 그 안에 다음 그림과 같은 내용이 자동으로 작성되어 있을 것입니다. (추가로 다른 내용이 더 쓰여있을 수도 있습니다.)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg5&#34; srcset=&#34;
               /vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png 400w,
               /vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_31882fb69a1599a520fda4d0b80951be.png 760w,
               /vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 이 안에 &lt;code&gt;args&lt;/code&gt; 항목을 만들어 command line argument를 설정합니다. 실행파일명 뒤에 이어질 추가적인 argument들만 적어주면 되며, 각 항목은 &amp;ldquo;&amp;quot;(double-quote)로 묶어주고 ,(comma)로 분리해주면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg6&#34; srcset=&#34;
               /vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png 400w,
               /vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_c9ff1596f853439e269c3e58da89d3ba.png 760w,
               /vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 저장한 뒤, 실행이나 디버깅을 해보면 다음과 같이 command line argument가 잘 반영된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg7&#34; srcset=&#34;
               /vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png 400w,
               /vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_193e7f64d30ffcba4b84ba7d57d00d13.png 760w,
               /vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/packages/cmake&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://chocolatey.org/packages/cmake&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vector-of-bool.github.io/docs/vscode-cmake-tools/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://vector-of-bool.github.io/docs/vscode-cmake-tools/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/settings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://code.visualstudio.com/docs/getstarted/settings&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 1. 실습환경 만들기</title>
      <link>https://evandde.github.io/praccpp-001-envsetting/</link>
      <pubDate>Fri, 24 Sep 2021 17:57:09 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-001-envsetting/</guid>
      <description>&lt;p&gt;&lt;b&gt;Windows 10&lt;/b&gt; 환경에서 Microsoft Visual C++ (MSVC)를 이용하여 C++ 및 CMake 개발 환경을 구축하고 VSCode를 설치하여 연동하는 방법을 살펴봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;microsoft-visual-c-설치&#34;&gt;Microsoft Visual C++ 설치&lt;/h2&gt;
&lt;h3 id=&#34;다운로드&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;현재 시점에서 최신 버전에 해당하는, &lt;b&gt;Visual Studio 2019용 Build Tools&lt;/b&gt;를 다운로드 받겠습니다.&lt;/p&gt;
&lt;p&gt;Microsoft에서 제공하는 Visual Studio 2019용 Build Tools는 &lt;a href=&#34;https://visualstudio.microsoft.com/ko/downloads/#build-tools-for-visual-studio-2019&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 무료로 받을 수 있습니다. 아래 그림에서 보이는 다운로드 링크를 누르면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_vs2019buildtools_download&#34; srcset=&#34;
               /praccpp-001-envsetting/01_vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_909f8b98a44ad6a4f6cf4df19f3ef6ba.png 400w,
               /praccpp-001-envsetting/01_vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_8578db8bcfddfb3e89d513c19e7ed0e7.png 760w,
               /praccpp-001-envsetting/01_vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/01_vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_909f8b98a44ad6a4f6cf4df19f3ef6ba.png&#34;
               width=&#34;760&#34;
               height=&#34;135&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 파일(&lt;code&gt;vs_buildtools_....exe&lt;/code&gt;)을 실행합니다. 다음 그림과 같은 창이 뜰 수 있습니다. &lt;b&gt;계속&lt;/b&gt; 버튼을 누르고 잠시 기다려줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_vs2019buildtools_install&#34; srcset=&#34;
               /praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_4efc43656ed797e74ddf58cb381dc51d.png 400w,
               /praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_7e57b38156a4bcbdd92e55c5a68a663a.png 760w,
               /praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_4efc43656ed797e74ddf58cb381dc51d.png&#34;
               width=&#34;480&#34;
               height=&#34;280&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다운로드를 마치고 설치 준비가 다 되면, 다음 그림과 같은 창이 뜰 것입니다. 이 중 &lt;b&gt;C++를 사용한 데스크톱 개발&lt;/b&gt;을 클릭합니다. 오른쪽 설치 세부 정보에서, 자동으로 선택사항 중 일부가 선택될 것입니다. 혹시라도 &lt;b&gt;Windows용 C++ CMake 도구&lt;/b&gt;가 선택이 안되어있다면, &lt;b&gt;꼭 선택&lt;/b&gt;해주시기 바랍니다. 선택을 완료하셨다면 &lt;b&gt;Install&lt;/b&gt; 버튼을 눌러 설치를 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_vs2019buildtools_install&#34; srcset=&#34;
               /praccpp-001-envsetting/03_vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_3802a8ff8d6569e57d6b90ed90dc4033.png 400w,
               /praccpp-001-envsetting/03_vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_8fed8aa0d866cb0977b6d1166f22591b.png 760w,
               /praccpp-001-envsetting/03_vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/03_vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_3802a8ff8d6569e57d6b90ed90dc4033.png&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;설치가 완료되었다면, 잘 실행되는지 테스트를 해보아야 합니다. 앞으로 진행할 실습을 시작할 때마다, 이 &lt;b&gt;Developer PowerShell for VS 2019&lt;/b&gt;를 켜주어야 합니다. &lt;b&gt;작업표시줄에 고정&lt;/b&gt;하거나, &lt;b&gt;시작화면에 고정&lt;/b&gt;하거나, 혹은 &lt;b&gt;바탕화면에 단축 아이콘&lt;/b&gt;을 만드시는 등, 실행하기 편하도록 해두시기를 추천드립니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[S]&lt;/b&gt; 를 눌러 검색을 띄움&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;developer powershell&lt;/code&gt;을 입력하여 &lt;b&gt;Developer PowerShell for VS 2019&lt;/b&gt;를 찾은 뒤 실행&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_vs2019buildtools_test1&#34; srcset=&#34;
               /praccpp-001-envsetting/04_vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_9e520458cb5b5fcc62dbf79c7daf6f75.png 400w,
               /praccpp-001-envsetting/04_vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_4e142f530f81ad56b5a45665a47bdc0f.png 760w,
               /praccpp-001-envsetting/04_vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/04_vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_9e520458cb5b5fcc62dbf79c7daf6f75.png&#34;
               width=&#34;760&#34;
               height=&#34;623&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cl&lt;/code&gt; 명령어와 &lt;code&gt;cmake&lt;/code&gt; 명령어를 각각 입력하여, 다음 그림과 같이 각각의 사용법(usage)이 뜨는지 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_vs2019buildtools_test2&#34; srcset=&#34;
               /praccpp-001-envsetting/05_vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_44a9d9706cd9e3255bce1f784eac3e01.png 400w,
               /praccpp-001-envsetting/05_vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_3befd5a34a8b7a447e978981ce71caff.png 760w,
               /praccpp-001-envsetting/05_vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/05_vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_44a9d9706cd9e3255bce1f784eac3e01.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vscode-설치&#34;&gt;VSCode 설치&lt;/h2&gt;
&lt;h3 id=&#34;다운로드-1&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;공식 홈페이지&lt;/a&gt; 첫화면에 있는 다운로드 버튼을 누르면 설치 프로그램이 다운로드 됩니다.&lt;/p&gt;
&lt;p&gt;혹은, &lt;a href=&#34;https://code.visualstudio.com/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;다운로드 페이지&lt;/a&gt;를 이용하시면 좀 더 다양한 옵션의 설치 파일을 다운로드 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_vscode_mainpage_download&#34; srcset=&#34;
               /praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_5032079348e1f8b63c47acc58d00d188.png 400w,
               /praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_e485de552509a5a298763d268417dd8a.png 760w,
               /praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_5032079348e1f8b63c47acc58d00d188.png&#34;
               width=&#34;732&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치-1&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 파일(&lt;code&gt;VSCode...Setup-....exe&lt;/code&gt;)을 실행합니다.&lt;/p&gt;
&lt;p&gt;공식 홈페이지 첫화면에서 다운로드 버튼을 눌렀거나, User installer를 받으신 경우에는, 권한 이슈로 인해 다음과 같은 경고가 뜰 수 있습니다. 개인 컴퓨터에 작업을 수행하고 있는 일반적인 경우라면, &lt;b&gt;확인 &lt;/b&gt;버튼을 누르고 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_vscode_install_warning&#34; srcset=&#34;
               /praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_e0b102a8223aa77038f3df9aa151f1d9.png 400w,
               /praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_7a434070efdaae037b5a501caa1beeb9.png 760w,
               /praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_e0b102a8223aa77038f3df9aa151f1d9.png&#34;
               width=&#34;413&#34;
               height=&#34;185&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;설치 과정 중 다음과 같은 화면이 뜰 텐데, 여기서 다른 건 몰라도 &lt;b&gt;다음 그림에 표시한 세 가지 항목은 체크해 두시길 권장&lt;/b&gt;합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;08_vscode_install&#34; srcset=&#34;
               /praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_be0695542f04faefe9122a652983f34c.png 400w,
               /praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_c34c609d7dbcf724b827810f58fc9891.png 760w,
               /praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_be0695542f04faefe9122a652983f34c.png&#34;
               width=&#34;598&#34;
               height=&#34;464&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행-1&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;VSCode를 실행시키는 것만이 목적이라면 그냥 시작메뉴나 바탕화면에 있는 Visual Studio Code를 실행시키면 됩니다.&lt;/p&gt;
&lt;p&gt;하지만, &lt;font color=red&gt;&lt;b&gt;우리는 MSVC와 연동해서 VSCode를 실행시켜야 하므로, 반드시 다음의 방법으로 실행해주셔야 합니다&lt;/b&gt;&lt;/font&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;위에서 켜보았던 &lt;b&gt;Developer PowerShell for VS 2019&lt;/b&gt;를 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;명령줄에 &lt;code&gt;code&lt;/code&gt;라고 입력하여 &lt;b&gt;VSCode&lt;/b&gt;를 실행&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;09_vscode_run&#34; srcset=&#34;
               /praccpp-001-envsetting/09_vscode_run_hua461e13989bf23c0cb14046057f8973e_11313_110c40b3170ab34fc73b0f8d6f41a128.png 400w,
               /praccpp-001-envsetting/09_vscode_run_hua461e13989bf23c0cb14046057f8973e_11313_30a03729ba673b7a17f400996e7b337b.png 760w,
               /praccpp-001-envsetting/09_vscode_run_hua461e13989bf23c0cb14046057f8973e_11313_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/09_vscode_run_hua461e13989bf23c0cb14046057f8973e_11313_110c40b3170ab34fc73b0f8d6f41a128.png&#34;
               width=&#34;643&#34;
               height=&#34;129&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음과 같은 창이 떴다면 정상적으로 실행이 된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;10_vscode_run&#34; srcset=&#34;
               /praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_36f07cc44663cd8e4afc0ffeac1a0acb.png 400w,
               /praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_fb08da58e0a9a0a8779eb8abf404899d.png 760w,
               /praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_36f07cc44663cd8e4afc0ffeac1a0acb.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이 글에서는 MSVC의 구성요소인 C++ 빌드 도구와 CMake를 설치하였고, IDE로서 활용할 수 있는 VSCode를 설치하였습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-09-24: 최초 게시&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4 설치하기(10.6.p02, Ubuntu2004 LTS)</title>
      <link>https://evandde.github.io/g4install-106p2-ubt2004/</link>
      <pubDate>Sun, 01 Nov 2020 16:17:56 +0900</pubDate>
      <guid>https://evandde.github.io/g4install-106p2-ubt2004/</guid>
      <description>&lt;p&gt;이 글에서는 Linux계열 운영체제 중 하나인 &lt;strong&gt;Ubuntu 20.04 LTS&lt;/strong&gt;에서 &lt;strong&gt;Geant4 10.6 patch 02 버전&lt;/strong&gt;을 설치하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;설치-정보-요약&#34;&gt;설치 정보 요약&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;설치 환경&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제: Ubuntu 20.04 LTS&lt;/li&gt;
&lt;li&gt;인터넷 사용 가능&lt;/li&gt;
&lt;li&gt;관리자 권한 (&lt;code&gt;sudo&lt;/code&gt;) 이용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 대상&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geant4 10.6 patch 02 버전&lt;/li&gt;
&lt;li&gt;Multi-threading 기능 활성화&lt;/li&gt;
&lt;li&gt;UI 및 가시화 기능 활용을 위해 Qt5, X11 OpenGL 라이브러리 연동하여 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 경로&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;여러 버전의 Geant4를 설치할 경우를 고려하여, &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;h3 id=&#34;geant4-관련-필수선택-라이브러리-설치&#34;&gt;Geant4 관련 필수/선택 라이브러리 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt; 패키지 매니저 최신화&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt;를 이용하여 다음 항목 설치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;CMake (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Expat (Linux, macOS에서 &lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Qt5, X11 OpenGL 라이브러리 설치 (&lt;font color=&#39;blue&#39;&gt;Geant4 설치 시 선택 라이브러리&lt;/font&gt;. GUI 등 그래픽 기반 기능 사용에 필요)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential cmake libexpat1-dev qt5-default libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;geant4-설치&#34;&gt;Geant4 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geant4 툴킷을 설치할 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.6.p02
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, Geant4 소스코드 다운로드 (소스코드 용량 약 40 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.6.p02
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.06.p02.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.06.p02.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 만들고 안으로 이동&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 수행 (&lt;code&gt;make&lt;/code&gt; 명령은 인터넷 속도 및 cpu 성능에 따라 수 분~수 십분 소요될 수 있음)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt;(크로스섹션 데이터 자동설치 여부): ON (데이터 총 용량 약 900 MB)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../geant4.10.06.p02 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.6.p02 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON
sudo make -j `grep -c processor /proc/cpuinfo`
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;환경변수 세팅을 위해 &lt;code&gt;~/.bashrc&lt;/code&gt;에 내용 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.6.p02/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prerequisite-설치&#34;&gt;Prerequisite 설치&lt;/h2&gt;
&lt;p&gt;인터넷이 안된다거나, 관리자 권한을 사용할 수 없다거나, Ubuntu가 아니라면 이야기가 좀 달라지겠지만&amp;hellip;&lt;/p&gt;
&lt;p&gt;앞서 말한 5가지 준비물은 모두 Ubuntu에서 제공하는 패키지 관리자 &lt;code&gt;apt&lt;/code&gt;를 통해 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;(RedHat 계열의 리눅스에서도 패키지 관리자 &lt;code&gt;yum&lt;/code&gt;을 통해 유사한 명령어로 설치할 수 있습니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    패키지 관리자를 사용하기 전에 최신화를 해주세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    본인이 &lt;strong&gt;서버 등을 관리하는 사람&lt;/strong&gt;이라면, &lt;strong&gt;최신화를 할 때 주의&lt;/strong&gt;하세요. 이런 경우에는 전체 패키지를 최신화하기보다는 &lt;strong&gt;원하는 특정 패키지를 선별하여 최신화하기를 권장&lt;/strong&gt;합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;패키지-매니저-최신화&#34;&gt;패키지 매니저 최신화&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;c-컴파일러-및-표준-라이브러리-헤더-설치-gcc-등&#34;&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 설치 (GCC 등)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cmake-설치&#34;&gt;CMake 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y cmake
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;expat-설치&#34;&gt;Expat 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libexpat1-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;qt5-설치&#34;&gt;Qt5 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y qt5-default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;x11-opengl-설치&#34;&gt;X11 OpenGL 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-설치하기&#34;&gt;Geant4 설치하기&lt;/h2&gt;
&lt;p&gt;이제 준비가 다 되었습니다. 이어서 Geant4를 설치해봅시다.&lt;/p&gt;
&lt;p&gt;우리가 설치하고자 하는 경로는 &lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;입니다. 앞서 말씀드린 것처럼, 여러 버전의 Geant4를 설치할 경우를 고려하여 &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전명에 해당하는 디렉토리를 두어 세분화한 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;설치를-위한-디렉토리-생성&#34;&gt;설치를 위한 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;우선 해당 디렉토리를 생성하기 위해 다음 명령어를 입력합니다. (&lt;code&gt;/opt&lt;/code&gt;는 관리자 권한이 있어야 수정할 수 있음)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.6.p02
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;geant4-소스코드-다운로드&#34;&gt;Geant4 소스코드 다운로드&lt;/h3&gt;
&lt;p&gt;이어서, 해당 디렉토리로 이동한 뒤 Geant4 소스코드를 다운 받겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.6.p02
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.06.p02.tar.gz 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34;&gt;Geant4 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    본 글에서 다루는 10.6.p02와 다른 버전을 설치하시는 경우에는, &lt;code&gt;wget&lt;/code&gt; 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;소스코드-압축-해제&#34;&gt;소스코드 압축 해제&lt;/h3&gt;
&lt;p&gt;위 과정을 통해 &lt;code&gt;geant4.10.06.p02.tar.gz&lt;/code&gt;라는 압축파일을 다운받으셨을 것입니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 해당 파일의 압축을 해제합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.06.p02.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;geant4.10.06.p02&lt;/code&gt;라는 디렉토리가 생성되고 그 안에 압축이 풀리게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드를-위한-build-디렉토리-생성&#34;&gt;빌드를 위한 build 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;빌드를 수행하면 CMake와 관련된 잡다한 부산물이 생성됩니다. 관리의 용이성을 위해, 별도의 &lt;code&gt;build&lt;/code&gt;라는 디렉토리를 만들고 이 안에서 컴파일을 수행하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;빌드-수행&#34;&gt;빌드 수행&lt;/h3&gt;
&lt;p&gt;우리는 빌드를 진행할 때 다음과 같은 옵션을 설정할 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt;(크로스섹션 데이터 자동설치 여부): ON (데이터 총 용량 약 900 MB)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 우리의 소스 코드는 &lt;code&gt;../geant4.10.06.p02&lt;/code&gt; 디렉토리에 압축이 풀려져 있지요.&lt;/p&gt;
&lt;p&gt;이에 따라 다음과 같이 명령줄을 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../geant4.10.06.p02 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.6.p02 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 명령어를 입력하면, 많은 내용이 출력되며 작업이 진행됩니다. 혹시라도 오타가 나면 이 부분에서 에러가 발생합니다. &lt;font color=&#34;red&#34;&gt;&lt;b&gt;오타가 나지 않도록 주의하세요! 복사-붙여넣기 추천!&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt; 부분은 앞서 설명한 바와 같이, 크로스섹션 데이터를 자동으로 다운받을지에 대한 옵션입니다. 사용자에 따라 &lt;code&gt;OFF&lt;/code&gt;로 하고 직접 다운로드 받아서 가져오는 경우도 있습니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 Geant4를 처음 설치하는 분들이 별도로 작업할 내용을 최소화하고자, 자동 다운로드 하는 방법으로 진행합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;ccmake&lt;/code&gt; (curses 기반 CMake)를 사용할 수 있는 분이라면, 이를 이용하는 편이 더욱 편할 수도 있습니다. 이에 관한 내용은 지면이 부족하여 생략합니다. :(far fa-grin-squint-tears):
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;다음과 같은 명령어와 함께 마무리되면 정상적으로 진행이 된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_done&#34; srcset=&#34;
               /g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_d962b0a01022ecdceb52d2963adad06b.png 400w,
               /g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_ecc011d54f915b53b9422d586ad841ca.png 760w,
               /g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_d962b0a01022ecdceb52d2963adad06b.png&#34;
               width=&#34;647&#34;
               height=&#34;76&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이어서 &lt;code&gt;make&lt;/code&gt; 명령어로 빌드를 진행하고, &lt;code&gt;make install&lt;/code&gt;로 설치를 마무리합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어는 &lt;code&gt;-j &amp;lt;쓰레드 수&amp;gt;&lt;/code&gt; 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어에서 &lt;code&gt;-j&lt;/code&gt; 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 &lt;code&gt;cc1plus&lt;/code&gt; 관련 에러가 발생할 수 있습니다. &lt;code&gt;-j&lt;/code&gt; 옵션에 적절한 숫자는 &lt;b&gt;자신의 쓰레드 수 * 1.2&lt;/b&gt; 입니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;환경변수-설정&#34;&gt;환경변수 설정&lt;/h2&gt;
&lt;p&gt;Geant4 툴킷을 설치하고나면 마지막으로 할 일이 있습니다. 바로 &lt;strong&gt;환경변수를 설정&lt;/strong&gt;하는 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4 사용을 위해 컴퓨터에게 알려줘야 하는 초기값들이 몇 가지 있습니다만, 이를 정리하여 한 번에 자동으로 설정이 되게끔하는 파일을 Geant4에서 제공하고 있습니다.&lt;/p&gt;
&lt;p&gt;설치경로의 내부에 &lt;code&gt;bin/geant4.sh&lt;/code&gt;라는 파일입니다. (C-shell을 이용하시는 분은 &lt;code&gt;bin/geant4.csh&lt;/code&gt;를 이용합니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Geant4가 여러 버전으로 설치되어 있는 경우, 원하는 버전의 &lt;code&gt;bin/geant4.sh&lt;/code&gt;를 실행함으로써 해당 버전으로 동작하도록 설정할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;실행을 위해서는 다음 명령어를 입력합니다. (&lt;code&gt;source&lt;/code&gt; 명령어 뒤에 오는 경로는 Geant4를 설치한 경로에 따라 바뀔 수 있습니다)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source /opt/geant4/10.6.p02/bin/geant4.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만, 이 명령어는 실행한 이후 해당 shell이 종료될 때까지만 그 효과가 지속됩니다. 즉, 터미널을 새로 연다거나 하면 다시 환경변수 설정이 사라지게 되죠.&lt;/p&gt;
&lt;p&gt;그래서 일반적으로는 터미널을 켤 때마다 자동으로 한 번 실행되는 파일인 &lt;code&gt;~/.bashrc&lt;/code&gt; 맨 밑에 위의 명령줄을 적어둡니다. vim이나 gedit 등을 이용하여 직접 입력하셔도 되고, 다음 명령줄을 이용하여 &lt;code&gt;~/.bashrc&lt;/code&gt; 파일 맨 밑에 해당 내용이 추가되도록 하셔도 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.6.p02/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;에 추가된 내용을 새로고침하기 위해 다음 줄까지 실행하고 넘어가겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;드디어 Geant4 설치가 끝났습니다!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;제대로-설치되었는지-확인하기&#34;&gt;제대로 설치되었는지 확인하기&lt;/h2&gt;
&lt;h3 id=&#34;환경변수-확인&#34;&gt;환경변수 확인&lt;/h3&gt;
&lt;p&gt;정상적으로 설치가 완료되고 &lt;code&gt;geant.sh&lt;/code&gt; 파일이 제대로 실행되었다면, &lt;code&gt;G4...&lt;/code&gt;와 같은 형태의 환경변수가 크로스섹션 데이터를 담은 경로를 가리키고 있어야 합니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 제대로 그 경로가 출력되는지 확인할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env | grep G4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;G4env&#34; srcset=&#34;
               /g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_17846bd6732ec660a369cf341d379ff4.png 400w,
               /g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_315effa2cd254d4fae4ed70d0ec45f7b.png 760w,
               /g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_17846bd6732ec660a369cf341d379ff4.png&#34;
               width=&#34;760&#34;
               height=&#34;237&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;예제-실행해보기&#34;&gt;예제 실행해보기&lt;/h3&gt;
&lt;h4 id=&#34;예제코드-복사해오기&#34;&gt;예제코드 복사해오기&lt;/h4&gt;
&lt;p&gt;예제코드는 &lt;strong&gt;소스 코드를 압축해제한 디렉토리 안&lt;/strong&gt;에 &lt;code&gt;examples&lt;/code&gt;이라는 디렉토리에 있습니다.&lt;/p&gt;
&lt;p&gt;우리의 경우에는 &lt;code&gt;/opt/geant4/10.6.p02/geant4.10.06.p02/examples&lt;/code&gt;이 되겠군요.&lt;/p&gt;
&lt;p&gt;테스트를 위해 &lt;code&gt;basic/B1&lt;/code&gt; 이라는 예제를 복사해오고, 복사해온 디렉토리 안으로 들어가봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -r /opt/geant4/10.6.p02/geant4.10.06.p02/examples/basic/B1 .
cd B1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;예제코드-실행하기-터미널-상에서-실행&#34;&gt;예제코드 실행하기 (터미널 상에서 실행)&lt;/h4&gt;
&lt;p&gt;예제 코드 B1에는 다음과 같은 파일 및 디렉토리들이 있을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;b1example&#34; srcset=&#34;
               /g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_7d4a7c3e709907a7410a44a847981e3a.png 400w,
               /g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_18ee76eaf7f4185acfb2c13e720c090b.png 760w,
               /g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_7d4a7c3e709907a7410a44a847981e3a.png&#34;
               width=&#34;760&#34;
               height=&#34;62&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 글에서는 코드를 살펴보지는 않고, 그냥 실행만 하겠습니다.&lt;/p&gt;
&lt;p&gt;우선 빌드를 하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cmake .
make -f Makefile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림과 같이 많은 줄이 출력된 뒤, &lt;code&gt;[100%] Built target exampleB1&lt;/code&gt;까지 나오면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_make&#34; srcset=&#34;
               /g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_17cd68d9b422eed5e6f3e4cafeb0f9a8.png 400w,
               /g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_dd048309e60202728a1ae6824433bfc2.png 760w,
               /g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_17cd68d9b422eed5e6f3e4cafeb0f9a8.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이어서 실행을 해봅니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1 run1.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림처럼 또 무언가 잔뜩 출력된 뒤, &lt;code&gt;RunManagerKernel is deleted. Good bye :)&lt;/code&gt;가 출력되었다면 잘 실행된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_runmac&#34; srcset=&#34;
               /g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_da6cd447281ce0174842e444ea297f69.png 400w,
               /g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_89286e8f8b48a21807266a0cd3ecea23.png 760w,
               /g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_da6cd447281ce0174842e444ea297f69.png&#34;
               width=&#34;760&#34;
               height=&#34;689&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;예제코드-실행하기-gui-띄우기&#34;&gt;예제코드 실행하기 (GUI 띄우기)&lt;/h4&gt;
&lt;p&gt;Geant4 설치 시 Qt5와 OpenGL 설치도 함께 진행했으므로, 여러분의 우분투에 X window 관련 설정이 잘 되어있다면 다음 명령어로 GUI창도 띄워볼 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잘 실행되었다면 다음과 같은 창이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_gui&#34; srcset=&#34;
               /g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_0699a45c49f2473aff9790f41f8902d1.png 400w,
               /g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_6a288eaaa576d22b6716c29439f2bb82.png 760w,
               /g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_0699a45c49f2473aff9790f41f8902d1.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기까지 되셨다면 설치와 테스트까지 성공적으로 하신 것입니다! 고생하셨습니다.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geant4.cern.ch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Geant4 Toolkit &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gcc.gnu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GNU Compiler Collection&lt;/a&gt;(GCC)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://libexpat.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/download-qt-for-application-development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qt5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opengl.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenGL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4 설치하기(10.7.p01, Ubuntu2004 LTS)</title>
      <link>https://evandde.github.io/g4install-107p1-ubt2004/</link>
      <pubDate>Mon, 15 Feb 2021 13:17:56 +0900</pubDate>
      <guid>https://evandde.github.io/g4install-107p1-ubt2004/</guid>
      <description>&lt;p&gt;이 글에서는 Linux계열 운영체제 중 하나인 &lt;strong&gt;Ubuntu 20.04 LTS&lt;/strong&gt;에서 &lt;strong&gt;Geant4 10.7 patch 01 버전&lt;/strong&gt;을 설치하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;설치-정보-요약&#34;&gt;설치 정보 요약&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;설치 환경&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제: Ubuntu 20.04 LTS&lt;/li&gt;
&lt;li&gt;인터넷 사용 가능&lt;/li&gt;
&lt;li&gt;관리자 권한 (&lt;code&gt;sudo&lt;/code&gt;) 이용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 대상&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geant4 10.7 patch 01 버전&lt;/li&gt;
&lt;li&gt;CLHep 라이브러리 별도 설치하여 연동&lt;/li&gt;
&lt;li&gt;Cross-section data 직접 다운로드하여 준비&lt;/li&gt;
&lt;li&gt;Multi-threading 기능 활성화&lt;/li&gt;
&lt;li&gt;UI 및 가시화 기능 활용을 위해 Qt5, X11 OpenGL 라이브러리 연동하여 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 경로&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;여러 버전의 CLHep를 설치할 경우를 고려하여, &lt;code&gt;/opt/clhep&lt;/code&gt; 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;여러 버전의 Geant4를 설치할 경우를 고려하여, &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;h3 id=&#34;geant4-관련-필수선택-라이브러리-설치&#34;&gt;Geant4 관련 필수/선택 라이브러리 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt; 패키지 매니저 최신화&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt;를 이용하여 다음 항목 설치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;CMake (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Expat (Linux, macOS에서 &lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Qt5, X11 OpenGL 라이브러리 설치 (&lt;font color=&#39;blue&#39;&gt;Geant4 설치 시 선택 라이브러리&lt;/font&gt;. GUI 등 그래픽 기반 기능 사용에 필요)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential cmake libexpat1-dev qt5-default libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;clhep-설치&#34;&gt;CLHep 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CLHep 라이브러리를 설치할 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/clhep
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, CLHep 소스코드 다운로드 (소스코드 용량 약 1.5 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/clhep
sudo wget https://proj-clhep.web.cern.ch/proj-clhep/dist1/clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;압축해제로 생성된 &lt;code&gt;2.4.4.0&lt;/code&gt; 디렉토리로 이동한 뒤, &lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 생성하고 그 안으로 이동&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd 2.4.4.0
sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 수행 (&lt;code&gt;make&lt;/code&gt; 명령은 인터넷 속도 및 cpu 성능에 따라 수 분가량 소요될 수 있음)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake를 이용하여 설정하는 방법은 본문을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../CLHEP -DCMAKE_INSTALL_PREFIX=/opt/clhep/2.4.4.0
sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cross-section-data-준비&#34;&gt;Cross-section data 준비&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geant4용 cross-section data를 넣을 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/geant4data
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, cross-section data 다운로드 (전체 데이터 용량 약 928 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/geant4data
sudo wget https://geant4-data.web.cern.ch/datasets/G4NDL.4.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4EMLOW.7.13.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PhotonEvaporation.5.7.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4RadioactiveDecay.5.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4SAIDDATA.2.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PARTICLEXS.3.1.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ABLA.3.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4INCL.1.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PII.1.3.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ENSDFSTATE.2.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제하고, 압축파일을 삭제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo find -name &amp;quot;*.gz&amp;quot; -exec tar -xf {} \;
sudo rm -rf *.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;geant4-설치&#34;&gt;Geant4 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geant4 툴킷을 설치할 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.7.p01
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, Geant4 소스코드 다운로드 (소스코드 용량 약 35 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.7.p01
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제 후 디렉토리명을 &lt;code&gt;source&lt;/code&gt;로 변경&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 만들고 안으로 이동&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 수행 (&lt;code&gt;make&lt;/code&gt; 명령은 인터넷 속도 및 cpu 성능에 따라 수 분~수 십분 소요될 수 있음)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake를 이용하여 설정하는 방법은 본문을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATADIR&lt;/code&gt;(크로스섹션 데이터 경로): &lt;code&gt;/opt/geant4/geant4data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_SYSTEM_CLHEP&lt;/code&gt;(직접 설치한 CLHep 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLHEP_DIR&lt;/code&gt;(CLHEP 경로): &lt;code&gt;/opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../geant4.10.07.p01 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.7.p01 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATADIR=/opt/geant4/geant4data -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON -DGEANT4_USE_SYSTEM_CLHEP=ON -DCLHEP_DIR=/opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0
sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;환경변수 세팅을 위해 &lt;code&gt;~/.bashrc&lt;/code&gt;에 내용 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.7.p01/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prerequisite-설치&#34;&gt;Prerequisite 설치&lt;/h2&gt;
&lt;p&gt;인터넷이 안된다거나, 관리자 권한을 사용할 수 없다거나, Ubuntu가 아니라면 이야기가 좀 달라지겠지만&amp;hellip;&lt;/p&gt;
&lt;p&gt;앞서 말한 5가지 준비물은 모두 Ubuntu에서 제공하는 패키지 관리자 &lt;code&gt;apt&lt;/code&gt;를 통해 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;(RedHat 계열의 리눅스에서도 패키지 관리자 &lt;code&gt;yum&lt;/code&gt;을 통해 유사한 명령어로 설치할 수 있습니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    패키지 관리자를 사용하기 전에 최신화를 해주세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    본인이 &lt;strong&gt;서버 등을 관리하는 사람&lt;/strong&gt;이라면, &lt;strong&gt;최신화를 할 때 주의&lt;/strong&gt;하세요. 이런 경우에는 전체 패키지를 최신화하기보다는 &lt;strong&gt;원하는 특정 패키지를 선별하여 최신화하기를 권장&lt;/strong&gt;합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;패키지-매니저-최신화&#34;&gt;패키지 매니저 최신화&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;c-컴파일러-및-표준-라이브러리-헤더-설치-gcc-등&#34;&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 설치 (GCC 등)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cmake-및-ccmake-설치&#34;&gt;CMake 및 CCMake 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y cmake cmake-curses-gui
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;expat-설치&#34;&gt;Expat 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libexpat1-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;qt5-설치&#34;&gt;Qt5 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y qt5-default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;x11-opengl-설치&#34;&gt;X11 OpenGL 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;clhep-설치하기&#34;&gt;CLHep 설치하기&lt;/h3&gt;
&lt;p&gt;이어서 CLHep을 설치합니다. CLHep 라이브러리의 경우에는, apt 레포지토리에 원하는 버전이 없는 경우가 대부분이므로 직접 소스코드를 컴파일하여 설치합니다.&lt;/p&gt;
&lt;p&gt;Geant4 10.7 버전은 CLHep 2.4.4.0 버전을 요구합니다만, Geant4 버전이 바뀜에 따라 상응하는 CLHep 버전도 변경되므로 버전별 관리를 하는 것이 추후 심신이 편합니다. 따라서, 여기서는 &lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;과 같이 버전별로 경로를 만들어 설치하도록 하겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;우선 CLHep 라이브러리를 설치할 디렉토리 생성합니다. (&lt;code&gt;/opt&lt;/code&gt;는 &lt;code&gt;sudo&lt;/code&gt; 권한이 있어야 수정할 수 있음)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/clhep
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, CLHep 소스코드를 다운로드합니다. (소스코드 용량 약 1.5 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/clhep
sudo wget https://proj-clhep.web.cern.ch/proj-clhep/dist1/clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://proj-clhep.web.cern.ch/proj-clhep/clhep23.html&#34;&gt;CLHep 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    본 글에서 다루는 2.4.4.0이 아닌 다른 버전을 설치하시는 경우에는, &lt;code&gt;wget&lt;/code&gt; 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2번 과정을 통해 받은 압축파일 &lt;code&gt;clhep-2.4.4.0.tgz&lt;/code&gt;을 압축해제합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;2.4.4.0&lt;/code&gt; 디렉토리가 생성되며 압축이 해제됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;생성된 &lt;code&gt;2.4.4.0&lt;/code&gt; 디렉토리로 이동합니다. 이어서, 빌드를 수행하며 생기는 부산물을 보관하기 위한 &lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 생성하고 그 안으로 이동합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd 2.4.4.0
sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ccmake&lt;/code&gt; 명령어를 통해 Makefile 생성 작업을 진행합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake란 cmake 작업에 요구되는 옵션을 UI형태로 보여주며 작업하게 해주는 프로그램입니다. 옵션명과 인자를 정확하게 알고있다면, &lt;code&gt;cmake&lt;/code&gt; 명령어를 이용하여 한번에 진행할 수도 있습니다. 이 명령줄은 위의 &lt;a href=&#34;#tldr&#34;&gt;TL;DR&lt;/a&gt; 부분을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;우선 ccmake를 실행하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ccmake ../CLHEP
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음과 같은 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;clhep_ccmake_01&#34; srcset=&#34;
               /g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_4e0cb3dd35c344d92562c60211fd0890.png 400w,
               /g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_c00be5ad0d5d99c9bc512fc1b0903376.png 760w,
               /g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_4e0cb3dd35c344d92562c60211fd0890.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;맨 처음 ccmake 프로그램을 실행하면, 기존 작업내용이 없어서 &lt;strong&gt;EMPTY CACHE&lt;/strong&gt;가 출력되고, 화면 아래에 보이는 바와 같이 키보드 [c]를 누르면 configure 작업이 수행되고, [q]를 누르면 종료되는 식입니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;이어서 다음의 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;clhep_ccmake_02&#34; srcset=&#34;
               /g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_3301190ac3c619396bee2b2a16c915ec.png 400w,
               /g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_32484eb861b4d0873ad6faa4cfe3b008.png 760w,
               /g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_3301190ac3c619396bee2b2a16c915ec.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; 항목이 CLHep을 설치할 경로를 설정하는 인자입니다. 우리는 이 값을 &lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;으로 변경하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;위아래 화살표키로 항목 간 이동이 가능하며, 엔터를 한 번 누르면 수정 모드로 변경되고, 내용 입력 후 다시 엔터를 한 번 누르면 확정됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;입력을 마친 뒤 [c] 키를 한번 더 누르면 다음과 같이 화면이 바뀝니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;clhep_ccmake_03&#34; srcset=&#34;
               /g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_f3dfa9ce4305f774982fd360bc78194b.png 400w,
               /g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_9ca136f51a35c446a4ab9ddc8b5ed1ca.png 760w,
               /g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_f3dfa9ce4305f774982fd360bc78194b.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;새로 생긴 &lt;b&gt;[g]&lt;/b&gt;를 눌러 Makefile을 생성합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 컴파일 및 설치작업을 진행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어는 &lt;code&gt;-j &amp;lt;쓰레드 수&amp;gt;&lt;/code&gt; 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어에서 &lt;code&gt;-j&lt;/code&gt; 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 &lt;code&gt;cc1plus&lt;/code&gt; 관련 에러가 발생할 수 있습니다. &lt;code&gt;-j&lt;/code&gt; 옵션에 적절한 숫자는 &lt;b&gt;자신의 쓰레드 수 * 1.2&lt;/b&gt; 입니다. 여기서는 사용자 컴퓨터의 쓰레드 수를 가져오는 명령어인 &lt;code&gt;grep -c processor /proc/cpuinfo&lt;/code&gt;를 이용하여 자동으로 숫자가 입력되게 하였습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt; 명령을 수행하면 퍼센트가 올라가며 컴파일이 수행될 것입니다. 이는 CPU 성능에 따라 수십 초 ~ 수 분 가량 소요될 수 있으니 잠시 휴식을 취하시면 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cross-section-data-준비하기&#34;&gt;Cross-section data 준비하기&lt;/h2&gt;
&lt;p&gt;Geant4를 설치하려면 cross-section data가 필요합니다. 이를 준비하는 방법은 두 가지 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;사용자가 직접 다운받아서 압축 풀어서 준비.&lt;/li&gt;
&lt;li&gt;설치 과정에서 자동으로 다운로드.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;무엇을 택하든 크게 상관은 없습니다만, 여기서는 1번 방법에 해당하는 직접 준비를 해보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;geant4-cross-section-data-디렉토리-생성&#34;&gt;Geant4 cross-section data 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;Cross-section data가 저장될 디렉토리를 생성한 뒤 이동합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/geant4data
cd /opt/geant4/geant4data
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;data-다운로드&#34;&gt;Data 다운로드&lt;/h3&gt;
&lt;p&gt;Cross-section data를 다운로드합니다. (총 10가지. 전체 데이터 용량 약 928 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo wget https://geant4-data.web.cern.ch/datasets/G4NDL.4.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4EMLOW.7.13.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PhotonEvaporation.5.7.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4RadioactiveDecay.5.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4SAIDDATA.2.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PARTICLEXS.3.1.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ABLA.3.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4INCL.1.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PII.1.3.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ENSDFSTATE.2.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34;&gt;Geant4 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;위에 적힌 10가지 외에 G4RealSurface, G4TENDL, LEND 데이터가 있습니다만, 이는 필수가 아닌 옵션이므로 여기서는 생략하겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;압축-해제&#34;&gt;압축 해제&lt;/h3&gt;
&lt;p&gt;10개의 파일을 하나하나 압축 해제하기 귀찮으므로, &lt;code&gt;find&lt;/code&gt; 명령어를 활용하여 일괄 해제 하는 명령어를 적어드립니다.&lt;/p&gt;
&lt;p&gt;이후 불필요한 압축파일(&lt;code&gt;*.gz&lt;/code&gt;)은 삭제해도 괜찮습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo find -name &amp;quot;*.gz&amp;quot; -exec tar -xf {} \;
sudo rm -rf *.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-설치하기&#34;&gt;Geant4 설치하기&lt;/h2&gt;
&lt;p&gt;이제 준비가 다 되었습니다. 이어서 Geant4를 설치해봅시다.&lt;/p&gt;
&lt;p&gt;우리가 설치하고자 하는 경로는 &lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;입니다. 앞서 말씀드린 것처럼, 여러 버전의 Geant4를 설치할 경우를 고려하여 &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전명에 해당하는 디렉토리를 두어 세분화한 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;설치를-위한-디렉토리-생성&#34;&gt;설치를 위한 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;우선 해당 디렉토리를 생성하기 위해 다음 명령어를 입력합니다. (&lt;code&gt;/opt&lt;/code&gt;는 관리자 권한이 있어야 수정할 수 있음)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.7.p01
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;geant4-소스코드-다운로드&#34;&gt;Geant4 소스코드 다운로드&lt;/h3&gt;
&lt;p&gt;이어서, 해당 디렉토리로 이동한 뒤 Geant4 소스코드를 다운 받겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.7.p01
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.07.p01.tar.gz 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34;&gt;Geant4 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    본 글에서 다루는 10.7.p01와 다른 버전을 설치하시는 경우에는, &lt;code&gt;wget&lt;/code&gt; 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;소스코드-압축-해제&#34;&gt;소스코드 압축 해제&lt;/h3&gt;
&lt;p&gt;위 과정을 통해 &lt;code&gt;geant4.10.07.p01.tar.gz&lt;/code&gt;라는 압축파일을 다운받으셨을 것입니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 해당 파일의 압축을 해제합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;geant4.10.07.p01&lt;/code&gt;라는 디렉토리가 생성되고 그 안에 압축이 풀리게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드를-위한-build-디렉토리-생성&#34;&gt;빌드를 위한 build 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;빌드를 수행하면 CMake와 관련된 잡다한 부산물이 생성됩니다. 관리의 용이성을 위해, 별도의 &lt;code&gt;build&lt;/code&gt;라는 디렉토리를 만들고 이 안에서 컴파일을 수행하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cmake-수행-ccmake-활용&#34;&gt;CMake 수행 (ccmake 활용)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ccmake&lt;/code&gt; 명령어를 통해 Makefile 생성 작업을 진행합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake란 cmake 작업에 요구되는 옵션을 UI형태로 보여주며 작업하게 해주는 프로그램입니다. 옵션명과 인자를 정확하게 알고있다면, &lt;code&gt;cmake&lt;/code&gt; 명령어를 이용하여 한번에 진행할 수도 있습니다. 이 명령줄은 위의 &lt;a href=&#34;#tldr&#34;&gt;TL;DR&lt;/a&gt; 부분을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;우선 ccmake를 실행하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ccmake ../geant4.10.07.p01
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음과 같은 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_01&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_76737fcb125ccdba69d2fa4b2cd05c16.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_2991042f60e0aee410ad5d4e0d6f3334.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_76737fcb125ccdba69d2fa4b2cd05c16.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;CLHep때와 마찬가지 모습입니다. &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;이어서 다음의 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_02&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_bd1863bbeb1656287ea49d5cc76aae9d.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_f757ab3b85d01d0e815e46918622d8e4.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_bd1863bbeb1656287ea49d5cc76aae9d.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Geant4 설치를 위한 cross-section data가 어디있는지 못찾겠다는 문구입니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[e]&lt;/b&gt;를 눌러 설정화면으로 돌아옵니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_03&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_72aa0aadff1cb612fb145844cd0a4c36.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_928b95ca5e79c61325eb0a96f35f1f0c.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_72aa0aadff1cb612fb145844cd0a4c36.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 화면에서 우리는 Geant4 설치에 관한 여러가지 인자를 조정할 수 있습니다. 이 글에서는 앞서 설명했던 설치조건에 맞추어 다음 항목들을 변경할 것입니다. 그림의 빨간 체크표시 된 값들을 참고하세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATADIR&lt;/code&gt;(크로스섹션 데이터 경로): &lt;code&gt;/opt/geant4/geant4data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_SYSTEM_CLHEP&lt;/code&gt;(직접 설치한 CLHep 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이후 &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;또 다른 에러가 뜰 것입니다. CLHep을 직접 설치한 것으로 연동하겠다고 하였는데, CLHep이 어디에 있는지 못찾겠다는 에러입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_04&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_dd82850956399746fdc560ead7ca52f5.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_dfe6d831f125d0bc7f245be19f22a297.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_dd82850956399746fdc560ead7ca52f5.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 그림과 같이 &lt;code&gt;CLHEP_DIR&lt;/code&gt;을 변경해줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_05&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_9c6c993b07dd993e1e1b203ef7c73bcb.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_40054a229e7220ff885bd3840c92b680.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_9c6c993b07dd993e1e1b203ef7c73bcb.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CLHEP_DIR&lt;/code&gt;(CLHEP 경로): &lt;code&gt;/opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이제 다시 &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행하면, 에러는 뜨지 않고 Qt5 관련 경로가 알아서 잡힌 모습이 뜨게 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_06&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_70d6973712e75ca60f2dd7c572ac00d0.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_9a355fb915cbea90489c74626f8cf484.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_70d6973712e75ca60f2dd7c572ac00d0.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;마지막으로 한번 더 &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다. 이제 드디어 &lt;b&gt;[g]&lt;/b&gt; 버튼이 나타났습니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[g]&lt;/b&gt;를 눌러 Makefile을 생성합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_07&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_bbc78dc6b0f753c56293c5c205abe5c5.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_888af432a20400bc53efcf854c2a2a6e.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_bbc78dc6b0f753c56293c5c205abe5c5.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;컴파일-및-설치작업&#34;&gt;컴파일 및 설치작업&lt;/h3&gt;
&lt;p&gt;이제 컴파일 및 설치작업을 진행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어는 &lt;code&gt;-j &amp;lt;쓰레드 수&amp;gt;&lt;/code&gt; 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어에서 &lt;code&gt;-j&lt;/code&gt; 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 &lt;code&gt;cc1plus&lt;/code&gt; 관련 에러가 발생할 수 있습니다. &lt;code&gt;-j&lt;/code&gt; 옵션에 적절한 숫자는 &lt;b&gt;자신의 쓰레드 수 * 1.2&lt;/b&gt; 입니다. 여기서는 사용자 컴퓨터의 쓰레드 수를 가져오는 명령어인 &lt;code&gt;grep -c processor /proc/cpuinfo&lt;/code&gt;를 이용하여 자동으로 숫자가 입력되게 하였습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt; 명령을 수행하면 퍼센트가 올라가며 컴파일이 수행될 것입니다. 이는 CPU 성능에 따라 수 분 ~ 수십 분 가량 소요될 수 있으니 푹 쉬고 오세요.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_make&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_3c06c5e6fcf6257e69fab880cffdc488.png 400w,
               /g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_6ae17510a0ce4e1dd6808c054a5bd49a.png 760w,
               /g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_3c06c5e6fcf6257e69fab880cffdc488.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;환경변수-설정&#34;&gt;환경변수 설정&lt;/h2&gt;
&lt;p&gt;Geant4 툴킷을 설치하고나면 마지막으로 할 일이 있습니다. 바로 &lt;strong&gt;환경변수를 설정&lt;/strong&gt;하는 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4 사용을 위해 컴퓨터에게 알려줘야 하는 초기값들이 몇 가지 있습니다만, 이를 정리하여 한 번에 자동으로 설정이 되게끔하는 파일을 Geant4에서 제공하고 있습니다.&lt;/p&gt;
&lt;p&gt;설치경로의 내부에 있는 &lt;code&gt;bin/geant4.sh&lt;/code&gt;라는 파일입니다. (C-shell을 이용하시는 분은 &lt;code&gt;bin/geant4.csh&lt;/code&gt;를 이용합니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Geant4가 여러 버전으로 설치되어 있는 경우, 원하는 버전의 &lt;code&gt;bin/geant4.sh&lt;/code&gt;를 실행함으로써 해당 버전으로 동작하도록 설정할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;실행을 위해서는 다음 명령어를 입력합니다. (&lt;code&gt;source&lt;/code&gt; 명령어 뒤에 오는 경로는 Geant4를 설치한 경로에 따라 바뀔 수 있습니다)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source /opt/geant4/10.7.p01/bin/geant4.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만, 이 명령어는 실행한 이후 해당 shell이 종료될 때까지만 그 효과가 지속됩니다. 즉, 터미널을 새로 연다거나 하면 다시 환경변수 설정이 사라지게 되죠.&lt;/p&gt;
&lt;p&gt;그래서 일반적으로는 터미널을 켤 때마다 자동으로 한 번 실행되는 파일인 &lt;code&gt;~/.bashrc&lt;/code&gt; 맨 밑에 위의 명령줄을 적어둡니다. vim이나 gedit 등을 이용하여 직접 입력하셔도 되고, 다음 명령줄을 이용하여 &lt;code&gt;~/.bashrc&lt;/code&gt; 파일 맨 밑에 해당 내용이 추가되도록 하셔도 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.7.p01/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;에 추가된 내용을 새로고침하기 위해 다음 줄까지 실행하고 넘어가겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;드디어 Geant4 설치가 끝났습니다!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;제대로-설치되었는지-확인하기&#34;&gt;제대로 설치되었는지 확인하기&lt;/h2&gt;
&lt;h3 id=&#34;환경변수-확인&#34;&gt;환경변수 확인&lt;/h3&gt;
&lt;p&gt;정상적으로 설치가 완료되고 &lt;code&gt;geant.sh&lt;/code&gt; 파일이 제대로 실행되었다면, &lt;code&gt;G4...&lt;/code&gt;와 같은 형태의 환경변수가 크로스섹션 데이터를 담은 경로를 가리키고 있어야 합니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 제대로 그 경로가 출력되는지 확인할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env | grep G4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;G4env&#34; srcset=&#34;
               /g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_16edc7888164cea188874f79172c5740.png 400w,
               /g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_4fb9ec7a8519c1ddf5ad065bb1f06e1a.png 760w,
               /g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_16edc7888164cea188874f79172c5740.png&#34;
               width=&#34;553&#34;
               height=&#34;207&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;예제-실행해보기&#34;&gt;예제 실행해보기&lt;/h3&gt;
&lt;h4 id=&#34;예제코드-복사해오기&#34;&gt;예제코드 복사해오기&lt;/h4&gt;
&lt;p&gt;예제코드는 &lt;strong&gt;소스 코드를 압축해제한 디렉토리 안&lt;/strong&gt;에 &lt;code&gt;examples&lt;/code&gt;이라는 디렉토리에 있습니다.&lt;/p&gt;
&lt;p&gt;우리의 경우에는 &lt;code&gt;/opt/geant4/10.7.p01/geant4.10.07.p01/examples&lt;/code&gt;이 되겠군요.&lt;/p&gt;
&lt;p&gt;테스트를 위해 &lt;code&gt;basic/B1&lt;/code&gt; 이라는 예제를 복사해오고, 복사해온 디렉토리 안으로 들어가봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -r /opt/geant4/10.7.p01/geant4.10.07.p01/examples/basic/B1 .
cd B1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;예제코드-실행하기-터미널-상에서-실행&#34;&gt;예제코드 실행하기 (터미널 상에서 실행)&lt;/h4&gt;
&lt;p&gt;예제 코드 B1에는 다음과 같은 파일 및 디렉토리들이 있을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;b1example&#34; srcset=&#34;
               /g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_b2cb51134c96c03949161a50675a23d6.png 400w,
               /g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_81d1e10585c322f0bfd9cb50d26864c6.png 760w,
               /g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_b2cb51134c96c03949161a50675a23d6.png&#34;
               width=&#34;760&#34;
               height=&#34;58&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 글에서는 코드를 살펴보지는 않고, 그냥 실행만 하겠습니다.&lt;/p&gt;
&lt;p&gt;우선 빌드를 하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cmake .
make -f Makefile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림과 같이 많은 줄이 출력된 뒤, &lt;code&gt;[100%] Built target exampleB1&lt;/code&gt;까지 나오면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_make&#34; srcset=&#34;
               /g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_6833b0b3a183e190c2bb5cb356d50674.png 400w,
               /g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_af4c9ae0e0bd3122b8dc2f296f621cbe.png 760w,
               /g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_6833b0b3a183e190c2bb5cb356d50674.png&#34;
               width=&#34;760&#34;
               height=&#34;710&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이어서 실행을 해봅니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1 run1.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림처럼 또 무언가 잔뜩 출력된 뒤, &lt;code&gt;RunManagerKernel is deleted. Good bye :)&lt;/code&gt;가 출력되었다면 잘 실행된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_runmac&#34; srcset=&#34;
               /g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_a68af86c674bbfccbc4b109ba308c75e.png 400w,
               /g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_ac95731d6ca0c981df40e5113eb6e252.png 760w,
               /g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_a68af86c674bbfccbc4b109ba308c75e.png&#34;
               width=&#34;760&#34;
               height=&#34;529&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;예제코드-실행하기-gui-띄우기&#34;&gt;예제코드 실행하기 (GUI 띄우기)&lt;/h4&gt;
&lt;p&gt;Geant4 설치 시 Qt5와 OpenGL 설치도 함께 진행했으므로, 여러분의 우분투에 X window 관련 설정이 잘 되어있다면 다음 명령어로 GUI창도 띄워볼 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잘 실행되었다면 다음과 같은 창이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_gui&#34; srcset=&#34;
               /g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_bc5709bcab8d2dd211fc73f6672ae9b1.png 400w,
               /g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_d6d3c1730a40ac97bcbc8f32c5d97d4f.png 760w,
               /g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_bc5709bcab8d2dd211fc73f6672ae9b1.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기까지 되셨다면 설치와 테스트까지 성공적으로 하신 것입니다! 고생하셨습니다.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geant4.cern.ch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Geant4 Toolkit &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gcc.gnu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GNU Compiler Collection&lt;/a&gt;(GCC)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://libexpat.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/download-qt-for-application-development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qt5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opengl.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenGL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
