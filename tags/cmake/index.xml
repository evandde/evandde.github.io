<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cmake | EvaNote</title>
    <link>https://evandde.github.io/tags/cmake/</link>
      <atom:link href="https://evandde.github.io/tags/cmake/index.xml" rel="self" type="application/rss+xml" />
    <description>cmake</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2022 Evan Kim</copyright><lastBuildDate>Fri, 07 Jan 2022 16:23:33 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>cmake</title>
      <link>https://evandde.github.io/tags/cmake/</link>
    </image>
    
    <item>
      <title>Visual Studio Code에서 MSVC 기반 C&#43;&#43;, CMake 환경 설정하기</title>
      <link>https://evandde.github.io/vscode-msvc/</link>
      <pubDate>Thu, 26 Aug 2021 10:05:15 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-msvc/</guid>
      <description>&lt;p&gt;VSCode에서 Microsoft Visual Studio 빌드 도구인 &lt;b&gt;MSVC&lt;/b&gt;를 이용하여 &lt;b&gt;C/C++ 언어&lt;/b&gt; 및 &lt;b&gt;CMake&lt;/b&gt;를 사용하기 위한 환경을 구축하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;VSCode 설치를 완료한 상태&lt;/b&gt;라고 가정합니다. VSCode 설치 및 기본 세팅은 &lt;a href=&#34;https://evandde.github.io/vscode/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    MSVC는 Windows에서만 이용 가능합니다. Linux나 Mac을 이용하시는 경우에는 &lt;b&gt;gcc&lt;/b&gt;와 같은 다른 대안을 이용하시기 바랍니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;vs2019-빌드-도구-설치&#34;&gt;VS2019 빌드 도구 설치&lt;/h2&gt;
&lt;p&gt;VSCode는 C 언어용 컴파일러나 디버거를 자체적으로 내장하고있지 않습니다. 때문에 C 언어를 VSCode에서 사용하려면, 컴파일러와 디버거를 직접 설치하고 이를 연동해주는 작업이 필요합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Extension을 설치한다고 해서 컴파일러나 디버거가 설치되는 것은 아닙니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;이 글에서는 Microsoft사에서 제공하는 MSVC(Microsoft Visual C++)를 이용하여 진행할 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;다운로드&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;Microsoft에서 제공하는 Visual Studio 2019용 Build Tools는 &lt;a href=&#34;https://visualstudio.microsoft.com/ko/downloads/#build-tools-for-visual-studio-2019&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 무료로 받을 수 있습니다. 아래 그림에서 보이는 다운로드 링크를 누르면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_download&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_df9e25f1c544aa68a78a92d89e0c13a0.png 400w,
               /vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_b06efe6e544273a41390ecc7e564f614.png 760w,
               /vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_df9e25f1c544aa68a78a92d89e0c13a0.png&#34;
               width=&#34;760&#34;
               height=&#34;135&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 뒤 실행하면, 아래 그림과 같은 창이 뜰 것입니다. 이 중 &lt;b&gt;C++를 사용한 데스크톱 개발&lt;/b&gt;을 클릭합니다. 오른쪽 설치 세부 정보에서, 자동으로 선택사항 중 일부가 선택될 것입니다. 혹시라도 &lt;b&gt;Windows용 C++ CMake 도구&lt;/b&gt;가 선택이 안되어있다면, &lt;b&gt;꼭 선택&lt;/b&gt;해주시기 바랍니다. 선택을 완료하셨다면 설치를 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_install&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_c5d8029504a4fb8ef927f8c6b3a180ce.png 400w,
               /vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_0b55a1d22f1be37baad8292a20a41ba4.png 760w,
               /vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_c5d8029504a4fb8ef927f8c6b3a180ce.png&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;제대로 설치가 되었는지 확인해보겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[S]&lt;/b&gt; 를 눌러 검색을 띄움&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;developer powershell&lt;/code&gt;을 입력하여 &lt;b&gt;Developer PowerShell for VS 2019&lt;/b&gt;를 찾은 뒤 실행&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_test1&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_226fbd82f31d51e44fa9627733e16400.png 400w,
               /vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_be659fa34a05acdcb7fbe530b7909974.png 760w,
               /vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_226fbd82f31d51e44fa9627733e16400.png&#34;
               width=&#34;760&#34;
               height=&#34;623&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cl&lt;/code&gt; 명령어와 &lt;code&gt;cmake&lt;/code&gt; 명령어를 입력하여, 다음 그림과 같이 사용법(usage)이 뜨는지 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_test2&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_2a6a75a7035c6176fb951ab1b20f22f7.png 400w,
               /vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_d0b2445390538f91ec4903fd6b0dd1b7.png 760w,
               /vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_2a6a75a7035c6176fb951ab1b20f22f7.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이제 여러분은 MSVC에 포함된 C/C++ 빌드 도구 및 CMake 도구를 사용할 수 있게 되었습니다.&lt;/p&gt;
&lt;h3 id=&#34;vscode-실행&#34;&gt;VSCode 실행&lt;/h3&gt;
&lt;p&gt;VSCode와 MSVC를 연동하여 사용하고자 하는 경우에는, &lt;b&gt;&lt;font color=red&gt;반드시 Developer PowerShell for VS 2019를 통해 VSCode를 실행시켜야만 합니다.&lt;/font&gt;&lt;/b&gt; 그렇지 않으면, VSCode에서 MSVC 관련 툴을 인지하지 못합니다.&lt;/p&gt;
&lt;p&gt;Developer PowerShell for VS 2019에서 VSCode를 실행시키는 법은 간단합니다. 다음 그림과 같이 &lt;code&gt;code&lt;/code&gt;라는 명령어만 실행시키시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_vscode&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_bfa1e99fb80419795fa53111b638bdeb.png 400w,
               /vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_1f77e81671e3dadffa69895898cd2817.png 760w,
               /vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_bfa1e99fb80419795fa53111b638bdeb.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;VSCode 창이 뜨면, &lt;b&gt;[File] - [Open Folder]&lt;/b&gt;를 선택하여, 작업을 진행할 폴더를 선택해주시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vscode_openfolder&#34; srcset=&#34;
               /vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_a42ed27b8f7572ec2f92b245192b2eee.png 400w,
               /vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_6c6f446b400d5cb8ef78e06bf19e9ada.png 760w,
               /vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_a42ed27b8f7572ec2f92b245192b2eee.png&#34;
               width=&#34;760&#34;
               height=&#34;647&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extension-설치&#34;&gt;Extension 설치&lt;/h2&gt;
&lt;p&gt;이제 VSCode에서 extension을 설치할 차례입니다.&lt;/p&gt;
&lt;h3 id=&#34;cc&#34;&gt;C/C++&lt;/h3&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 &amp;ldquo;&lt;strong&gt;c&lt;/strong&gt;&amp;ldquo;를 검색하세요. 맨 위에 C/C++ extension이 뜰 것입니다. Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_c&#34; srcset=&#34;
               /vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_6effe4ec295e401b02f8e8d25bd8cb0e.png 400w,
               /vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_d7e0729455c36626dfc5123f0d498ede.png 760w,
               /vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_6effe4ec295e401b02f8e8d25bd8cb0e.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;cmake&#34;&gt;CMake&lt;/h3&gt;
&lt;p&gt;이어서 CMake 관련 extension도 설치합니다.&lt;/p&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 “&lt;strong&gt;cmake&lt;/strong&gt;“를 검색하세요. 맨 위부터 &lt;strong&gt;CMake&lt;/strong&gt;와 &lt;strong&gt;CMake Tools&lt;/strong&gt;가 뜰 것입니다. 두 가지 모두 Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_cmake&#34; srcset=&#34;
               /vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png 400w,
               /vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_46089bc2159dbb4772073c745321d074.png 760w,
               /vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;각각의 용도는 이렇습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMake extension: CMake 명령어에 대한 자동완성 제공. CMakeLists.txt 파일 작성에 도움&lt;/li&gt;
&lt;li&gt;CMake Tools extension: CMake 기반 프로젝트를 관리하는데에 도움&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;테스트&#34;&gt;테스트&lt;/h2&gt;
&lt;p&gt;이제 제대로 설치가 되었는지 확인할 시간입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    경로에 &lt;strong&gt;한글&lt;/strong&gt;이 있으면 제대로 동작하지 않습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;hello-world-프로젝트-만들어보기&#34;&gt;Hello world 프로젝트 만들어보기&lt;/h3&gt;
&lt;p&gt;CMake Tools는 &lt;b&gt;CMake: Quick Start&lt;/b&gt;라는 기능을 제공합니다. 손쉽게 CMake 기반의 Hello world 프로젝트를 만들어주는 것이죠.&lt;/p&gt;
&lt;p&gt;적당한 경로에 빈 폴더를 만들어주고 다음과 같이 진행합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs1&#34; srcset=&#34;
               /vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png 400w,
               /vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_3da3f460f72e8cabaaf3889ef5780923.png 760w,
               /vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs2&#34; srcset=&#34;
               /vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png 400w,
               /vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_f9f11df871b2487e26ca5679338a6be8.png 760w,
               /vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs3&#34; srcset=&#34;
               /vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png 400w,
               /vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_c10044573126886eedd0e2d972091b76.png 760w,
               /vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs4&#34; srcset=&#34;
               /vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png 400w,
               /vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_8cd8b9516849d5a9d8d75ca9fb813464.png 760w,
               /vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs5&#34; srcset=&#34;
               /vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png 400w,
               /vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_2a9520c56ea9bd1f1d8c0f10ab602f8f.png 760w,
               /vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs6&#34; srcset=&#34;
               /vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png 400w,
               /vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_7c3275d6d1a0e5d48b7a79780d75038b.png 760w,
               /vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행-1&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 실행하시면 됩니다. 동일 폴더 내에 &lt;b&gt;.vscode&lt;/b&gt;라는 폴더가 생기고 그 안에 CMake 설정 등에 관한 &lt;code&gt;.json&lt;/code&gt; 파일이 자동으로 생성될 것입니다. 또한, &lt;b&gt;build&lt;/b&gt;라는 폴더가 생기고 그 안에 &lt;strong&gt;CMake를 통한 빌드 부산물 및 컴파일 결과물&lt;/strong&gt;이 자동으로 생성될 것입니다.&lt;/p&gt;
&lt;p&gt;이후 아래쪽의 &lt;strong&gt;TERMINAL&lt;/strong&gt; 탭을 확인하시면, 자동 생성된 main.cpp의 내용대로 Hello, world!가 출력되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run1&#34; srcset=&#34;
               /vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png 400w,
               /vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_0830794d6928faa454db44cb37713ac3.png 760w,
               /vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run2&#34; srcset=&#34;
               /vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png 400w,
               /vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_51d0b8047f56d8954d98888e1a03ec14.png 760w,
               /vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;디버깅&#34;&gt;디버깅&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 진행하여 디버깅도 가능합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    맨 처음 그림에서 보이는 바와 같이, CMake type을 Debug로 설정해야 함에 주의하세요!
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug1&#34; srcset=&#34;
               /vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png 400w,
               /vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_8bd4fe75f72748f2f1abec2b49ee6738.png 760w,
               /vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug2&#34; srcset=&#34;
               /vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png 400w,
               /vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_f9d287c1cb825e1f442a098e2e351024.png 760w,
               /vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug3&#34; srcset=&#34;
               /vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png 400w,
               /vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_7a86a29cff6db9ce2bed4c66f0c4ae71.png 760w,
               /vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug4&#34; srcset=&#34;
               /vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png 400w,
               /vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_dc1e0e7796f2a56584f0e24fc089a09d.png 760w,
               /vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug5&#34; srcset=&#34;
               /vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png 400w,
               /vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_48f79a1d99308f24c3c1818ab0a64c3b.png 760w,
               /vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;command-line-argument-설정&#34;&gt;Command line argument 설정&lt;/h3&gt;
&lt;p&gt;실행하거나 디버깅할 때, command line argument를 넘겨주도록 설정하고 싶을 때가 있습니다.&lt;/p&gt;
&lt;p&gt;이는 &lt;b&gt;.vscode/settings.json 파일을 생성&lt;/b&gt;해주고, 해당 파일에서 &lt;code&gt;cmake.debugConfig&lt;/code&gt;인자로서 입력해줘야 합니다.&lt;/p&gt;
&lt;h4 id=&#34;테스트-코드-수정&#34;&gt;테스트 코드 수정&lt;/h4&gt;
&lt;p&gt;그 전에 먼저 argument가 제대로 동작하는지 확인하기 위해 main.cpp 코드를 수정하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

int main(int argc, char**) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Hello, world!\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;argc: &amp;quot; &amp;lt;&amp;lt; argc &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 상태로 그냥 실행해보면 다음과 같이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg1&#34; srcset=&#34;
               /vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png 400w,
               /vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_f4a8f7ec275524a9111222bf92809d79.png 760w,
               /vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;settingsjson-설정-및-실행&#34;&gt;settings.json 설정 및 실행&lt;/h4&gt;
&lt;p&gt;이제 settings.json 파일을 만들어 보겠습니다. (이미 만들어져 있을 수도 있습니다만, 그대로 진행하시면 됩니다)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;다음 그림과 같이 File - Preferences - Settings를 클릭합니다. 단축키는 &lt;b&gt;[CTRL]+[,]&lt;/b&gt; 입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg2&#34; srcset=&#34;
               /vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png 400w,
               /vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_65c616437706abe59a2dbc43109e2633.png 760w,
               /vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 Workspace 탭을 클릭합니다. 이 프로젝트(workspace)에만 적용되는 설정항목이라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg3&#34; srcset=&#34;
               /vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png 400w,
               /vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_13eb3447d52efcc9587d006f0fe4e81b.png 760w,
               /vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상단 검색창에 &lt;code&gt;cmake.debugConfig&lt;/code&gt;를 검색한 뒤, &lt;u&gt;Edit in settings.json&lt;/u&gt; 부분을 클릭합니다. &lt;code&gt;cmake.debug&lt;/code&gt; 정도만 입력하셔도 바로 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg4&#34; srcset=&#34;
               /vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png 400w,
               /vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_748696740cce29f2715b14ab0cbbe055.png 760w,
               /vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클릭하시면 바로 다음과 같이 &lt;code&gt;.vscode/settings.json&lt;/code&gt; 폴더 및 파일이 생성되고, settings.json 파일이 열리며, 그 안에 다음 그림과 같은 내용이 자동으로 작성되어 있을 것입니다. (추가로 다른 내용이 더 쓰여있을 수도 있습니다.)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg5&#34; srcset=&#34;
               /vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png 400w,
               /vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_31882fb69a1599a520fda4d0b80951be.png 760w,
               /vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 이 안에 &lt;code&gt;args&lt;/code&gt; 항목을 만들어 command line argument를 설정합니다. 실행파일명 뒤에 이어질 추가적인 argument들만 적어주면 되며, 각 항목은 &amp;ldquo;&amp;quot;(double-quote)로 묶어주고 ,(comma)로 분리해주면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg6&#34; srcset=&#34;
               /vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png 400w,
               /vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_c9ff1596f853439e269c3e58da89d3ba.png 760w,
               /vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 저장한 뒤, 실행이나 디버깅을 해보면 다음과 같이 command line argument가 잘 반영된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg7&#34; srcset=&#34;
               /vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png 400w,
               /vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_193e7f64d30ffcba4b84ba7d57d00d13.png 760w,
               /vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code에서 CMake 환경 설정하기</title>
      <link>https://evandde.github.io/vscode-cmake/</link>
      <pubDate>Fri, 13 Nov 2020 10:04:24 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-cmake/</guid>
      <description>&lt;p&gt;VSCode에서 CMake 기반의 프로젝트를 만들고, 실행/디버깅 등이 가능한 환경을 구축하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 VSCode 설치 후, &lt;b&gt;C++ 언어를 사용하기 위한 환경 구축까지 완료한 상태&lt;/b&gt;라고 가정합니다. C++ 언어 사용을 위한 환경 구축은 &lt;a href=&#34;https://evandde.github.io/vscode-cpp/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;cmake-설치&#34;&gt;CMake 설치&lt;/h2&gt;
&lt;p&gt;VSCode는 CMake를 자체적으로 내장하고있지 않습니다. 때문에 CMake를 직접 설치하고 이를 연동해주는 작업이 필요합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Extension을 설치한다고 해서 CMake가 설치되는 것은 아닙니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;windows를-이용하는-경우&#34;&gt;Windows를 이용하는 경우&lt;/h3&gt;
&lt;p&gt;Chocolatey를 이용하면 쉽게 설치할 수 있습니다. 다만, chocolatey로 CMake를 설치하는 경우 &lt;code&gt;PATH&lt;/code&gt; 환경변수가 자동으로 잡히지 않아, 추가적인 명령어를 입력해주어야 합니다. 다음 명령어를 입력하세요.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Chocolatey는 Windows용 패키지 관리자입니다. 아직 사용 방법을 모르신다면, &lt;a href=&#34;https://evandde.github.io/chocolatey/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install cmake -y --installargs &#39;ADD_CMAKE_TO_PATH=System&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_windows&#34; srcset=&#34;
               /vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_9771e93ed3e87c576f6fb2867e7b5956.png 400w,
               /vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_f38a49ff98e14257a9b883dedfdabf5a.png 760w,
               /vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_9771e93ed3e87c576f6fb2867e7b5956.png&#34;
               width=&#34;760&#34;
               height=&#34;331&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 설치가 잘 되었는지 확인해보세요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake --version
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Chocolatey 특성 상, 설치한 직후에는 &lt;code&gt;cmake&lt;/code&gt; 명령어를 인식하지 못할 수 있습니다.&lt;/p&gt;
&lt;p&gt;PowerShell을 껐다 켜거나, &lt;code&gt;refreshenv&lt;/code&gt; 명령어를 활용하세요.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_version_windows&#34; srcset=&#34;
               /vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_0bc90b9ece12811ecdcb9939d2704be4.png 400w,
               /vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_afb26016a1a0ad67fc17e85ed1c59bba.png 760w,
               /vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_0bc90b9ece12811ecdcb9939d2704be4.png&#34;
               width=&#34;760&#34;
               height=&#34;122&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;linux를-이용하는-경우&#34;&gt;Linux를 이용하는 경우&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://salsa.debian.org/apt-team/apt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt(apt-get)&lt;/a&gt;나 &lt;a href=&#34;http://yum.baseurl.org/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;yum&lt;/a&gt;을 이용하면 쉽게 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 &lt;code&gt;apt&lt;/code&gt;를 이용하여 설치한다면 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install cmake -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_linux&#34; srcset=&#34;
               /vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_08db8804eb063c564c76702499a0f070.png 400w,
               /vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_68103a3937f845ce58583da48ddc4d0e.png 760w,
               /vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_08db8804eb063c564c76702499a0f070.png&#34;
               width=&#34;760&#34;
               height=&#34;300&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 설치가 잘 되었는지 확인해보세요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_version_linux&#34; srcset=&#34;
               /vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1a5c2e360d69d4f6e5ccd10c0e5ee3b7.png 400w,
               /vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1d69aa391dc32fc422821a292d815295.png 760w,
               /vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1a5c2e360d69d4f6e5ccd10c0e5ee3b7.png&#34;
               width=&#34;736&#34;
               height=&#34;77&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extension-설치&#34;&gt;Extension 설치&lt;/h2&gt;
&lt;p&gt;이제 VSCode에서 extension을 설치할 차례입니다.&lt;/p&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 “&lt;strong&gt;cmake&lt;/strong&gt;“를 검색하세요. 맨 위부터 &lt;strong&gt;CMake&lt;/strong&gt;와 &lt;strong&gt;CMake Tools&lt;/strong&gt;가 뜰 것입니다. 두 가지 모두 Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_cmake&#34; srcset=&#34;
               /vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png 400w,
               /vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_46089bc2159dbb4772073c745321d074.png 760w,
               /vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;각각의 용도는 이렇습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMake extension: CMake 명령어에 대한 자동완성 제공. CMakeLists.txt 파일 작성에 도움.&lt;/li&gt;
&lt;li&gt;CMake Tools extension: CMake 기반 프로젝트를 관리하는데에 도움.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;테스트&#34;&gt;테스트&lt;/h2&gt;
&lt;p&gt;이제 제대로 설치가 되었는지 확인할 시간입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    경로에 &lt;strong&gt;한글&lt;/strong&gt;이 있으면 제대로 동작하지 않습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;hello-world-프로젝트-만들어보기&#34;&gt;Hello world 프로젝트 만들어보기&lt;/h3&gt;
&lt;p&gt;CMake Tools는 &lt;b&gt;CMake: Quick Start&lt;/b&gt;라는 기능을 제공합니다. 손쉽게 CMake 기반의 Hello world 프로젝트를 만들어주는 것이죠.&lt;/p&gt;
&lt;p&gt;적당한 경로에 빈 폴더를 만들어주고 다음과 같이 진행합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs1&#34; srcset=&#34;
               /vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png 400w,
               /vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_3da3f460f72e8cabaaf3889ef5780923.png 760w,
               /vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs2&#34; srcset=&#34;
               /vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png 400w,
               /vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_f9f11df871b2487e26ca5679338a6be8.png 760w,
               /vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs3&#34; srcset=&#34;
               /vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png 400w,
               /vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_c10044573126886eedd0e2d972091b76.png 760w,
               /vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs4&#34; srcset=&#34;
               /vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png 400w,
               /vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_8cd8b9516849d5a9d8d75ca9fb813464.png 760w,
               /vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs5&#34; srcset=&#34;
               /vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png 400w,
               /vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_2a9520c56ea9bd1f1d8c0f10ab602f8f.png 760w,
               /vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs6&#34; srcset=&#34;
               /vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png 400w,
               /vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_7c3275d6d1a0e5d48b7a79780d75038b.png 760w,
               /vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 실행하시면 됩니다. 동일 폴더 내에 &lt;b&gt;.vscode&lt;/b&gt;라는 폴더가 생기고 그 안에 CMake 설정 등에 관한 &lt;code&gt;.json&lt;/code&gt; 파일이 자동으로 생성될 것입니다. 또한, &lt;b&gt;build&lt;/b&gt;라는 폴더가 생기고 그 안에 &lt;strong&gt;CMake를 통한 빌드 부산물 및 컴파일 결과물&lt;/strong&gt;이 자동으로 생성될 것입니다.&lt;/p&gt;
&lt;p&gt;이후 아래쪽의 &lt;strong&gt;TERMINAL&lt;/strong&gt; 탭을 확인하시면, 자동 생성된 main.cpp의 내용대로 Hello, world!가 출력되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run1&#34; srcset=&#34;
               /vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png 400w,
               /vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_0830794d6928faa454db44cb37713ac3.png 760w,
               /vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run2&#34; srcset=&#34;
               /vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png 400w,
               /vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_51d0b8047f56d8954d98888e1a03ec14.png 760w,
               /vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;디버깅&#34;&gt;디버깅&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 진행하여 디버깅도 가능합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    맨 처음 그림에서 보이는 바와 같이, CMake type을 Debug로 설정해야 함에 주의하세요!
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug1&#34; srcset=&#34;
               /vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png 400w,
               /vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_8bd4fe75f72748f2f1abec2b49ee6738.png 760w,
               /vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug2&#34; srcset=&#34;
               /vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png 400w,
               /vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_f9d287c1cb825e1f442a098e2e351024.png 760w,
               /vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug3&#34; srcset=&#34;
               /vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png 400w,
               /vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_7a86a29cff6db9ce2bed4c66f0c4ae71.png 760w,
               /vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug4&#34; srcset=&#34;
               /vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png 400w,
               /vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_dc1e0e7796f2a56584f0e24fc089a09d.png 760w,
               /vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug5&#34; srcset=&#34;
               /vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png 400w,
               /vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_48f79a1d99308f24c3c1818ab0a64c3b.png 760w,
               /vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;command-line-argument-설정&#34;&gt;Command line argument 설정&lt;/h3&gt;
&lt;p&gt;실행하거나 디버깅할 때, command line argument를 넘겨주도록 설정하고 싶을 때가 있습니다.&lt;/p&gt;
&lt;p&gt;이는 &lt;b&gt;.vscode/settings.json 파일을 생성&lt;/b&gt;해주고, 해당 파일에서 &lt;code&gt;cmake.debugConfig&lt;/code&gt;인자로서 입력해줘야 합니다.&lt;/p&gt;
&lt;h4 id=&#34;테스트-코드-수정&#34;&gt;테스트 코드 수정&lt;/h4&gt;
&lt;p&gt;그 전에 먼저 argument가 제대로 동작하는지 확인하기 위해 main.cpp 코드를 수정하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

int main(int argc, char**) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Hello, world!\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;argc: &amp;quot; &amp;lt;&amp;lt; argc &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 상태로 그냥 실행해보면 다음과 같이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg1&#34; srcset=&#34;
               /vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png 400w,
               /vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_f4a8f7ec275524a9111222bf92809d79.png 760w,
               /vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;settingsjson-설정-및-실행&#34;&gt;settings.json 설정 및 실행&lt;/h4&gt;
&lt;p&gt;이제 settings.json 파일을 만들어 보겠습니다. (이미 만들어져 있을 수도 있습니다만, 그대로 진행하시면 됩니다)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;다음 그림과 같이 File - Preferences - Settings를 클릭합니다. 단축키는 &lt;b&gt;[CTRL]+[,]&lt;/b&gt; 입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg2&#34; srcset=&#34;
               /vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png 400w,
               /vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_65c616437706abe59a2dbc43109e2633.png 760w,
               /vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 Workspace 탭을 클릭합니다. 이 프로젝트(workspace)에만 적용되는 설정항목이라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg3&#34; srcset=&#34;
               /vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png 400w,
               /vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_13eb3447d52efcc9587d006f0fe4e81b.png 760w,
               /vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상단 검색창에 &lt;code&gt;cmake.debugConfig&lt;/code&gt;를 검색한 뒤, &lt;u&gt;Edit in settings.json&lt;/u&gt; 부분을 클릭합니다. &lt;code&gt;cmake.debug&lt;/code&gt; 정도만 입력하셔도 바로 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg4&#34; srcset=&#34;
               /vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png 400w,
               /vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_748696740cce29f2715b14ab0cbbe055.png 760w,
               /vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클릭하시면 바로 다음과 같이 &lt;code&gt;.vscode/settings.json&lt;/code&gt; 폴더 및 파일이 생성되고, settings.json 파일이 열리며, 그 안에 다음 그림과 같은 내용이 자동으로 작성되어 있을 것입니다. (추가로 다른 내용이 더 쓰여있을 수도 있습니다.)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg5&#34; srcset=&#34;
               /vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png 400w,
               /vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_31882fb69a1599a520fda4d0b80951be.png 760w,
               /vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 이 안에 &lt;code&gt;args&lt;/code&gt; 항목을 만들어 command line argument를 설정합니다. 실행파일명 뒤에 이어질 추가적인 argument들만 적어주면 되며, 각 항목은 &amp;ldquo;&amp;quot;(double-quote)로 묶어주고 ,(comma)로 분리해주면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg6&#34; srcset=&#34;
               /vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png 400w,
               /vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_c9ff1596f853439e269c3e58da89d3ba.png 760w,
               /vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 저장한 뒤, 실행이나 디버깅을 해보면 다음과 같이 command line argument가 잘 반영된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg7&#34; srcset=&#34;
               /vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png 400w,
               /vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_193e7f64d30ffcba4b84ba7d57d00d13.png 760w,
               /vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/packages/cmake&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://chocolatey.org/packages/cmake&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vector-of-bool.github.io/docs/vscode-cmake-tools/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://vector-of-bool.github.io/docs/vscode-cmake-tools/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/settings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://code.visualstudio.com/docs/getstarted/settings&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 1. 실습환경 만들기</title>
      <link>https://evandde.github.io/praccpp-001-envsetting/</link>
      <pubDate>Fri, 24 Sep 2021 17:57:09 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-001-envsetting/</guid>
      <description>&lt;p&gt;&lt;b&gt;Windows 10&lt;/b&gt; 환경에서 Microsoft Visual C++ (MSVC)를 이용하여 C++ 및 CMake 개발 환경을 구축하고 VSCode를 설치하여 연동하는 방법을 살펴봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MSVC 설치&lt;/li&gt;
&lt;li&gt;VSCode 설치&lt;/li&gt;
&lt;li&gt;VSCode Extension (C/C++, CMake Tools, CMake) 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;microsoft-visual-c-설치&#34;&gt;Microsoft Visual C++ 설치&lt;/h2&gt;
&lt;h3 id=&#34;다운로드&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;현재 시점에서 최신 버전에 해당하는, &lt;b&gt;Visual Studio 2022용 Build Tools&lt;/b&gt;를 다운로드 받겠습니다.&lt;/p&gt;
&lt;p&gt;Microsoft에서 제공하는 Visual Studio 2022용 Build Tools는 &lt;a href=&#34;https://visualstudio.microsoft.com/ko/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 무료로 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;스크롤을 쭉 내려서 &lt;b&gt;Visual Studio 2022용 도구 목록&lt;/b&gt; 하위에 있는 &lt;b&gt;Visual Studio 2022용 빌드 도구&lt;/b&gt;의 다운로드 링크를 누르면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_vs2022buildtools_download&#34; srcset=&#34;
               /praccpp-001-envsetting/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_0406f3798f45b4354e3fa193794834cb.png 400w,
               /praccpp-001-envsetting/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_ce5d111b09146f914c28a5cee4e039f6.png 760w,
               /praccpp-001-envsetting/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_0406f3798f45b4354e3fa193794834cb.png&#34;
               width=&#34;760&#34;
               height=&#34;631&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 파일(&lt;code&gt;vs_buildtools_....exe&lt;/code&gt;)을 실행합니다. 다음 그림과 같은 창이 뜰 수 있습니다. &lt;b&gt;계속&lt;/b&gt; 버튼을 누르고 잠시 기다려줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_vs2019buildtools_install&#34; srcset=&#34;
               /praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_4efc43656ed797e74ddf58cb381dc51d.png 400w,
               /praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_7e57b38156a4bcbdd92e55c5a68a663a.png 760w,
               /praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_4efc43656ed797e74ddf58cb381dc51d.png&#34;
               width=&#34;480&#34;
               height=&#34;280&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다운로드를 마치고 설치 준비가 다 되면, 다음 그림과 같은 창이 뜰 것입니다. 이 중 &lt;b&gt;C++를 사용한 데스크톱 개발&lt;/b&gt;을 클릭합니다. 오른쪽 설치 세부 정보에서, 자동으로 선택사항 중 일부가 선택될 것입니다. 혹시라도 &lt;b&gt;Windows용 C++ CMake 도구&lt;/b&gt;가 선택이 안되어있다면, &lt;b&gt;꼭 선택&lt;/b&gt;해주시기 바랍니다. 선택을 완료하셨다면 &lt;b&gt;Install&lt;/b&gt; 버튼을 눌러 설치를 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_vs2022buildtools_install&#34; srcset=&#34;
               /praccpp-001-envsetting/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_f25b9112760d9b861a8f06cf4ae6a65b.png 400w,
               /praccpp-001-envsetting/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_8b54b94c5245c0a4a80fb14ac8956e4a.png 760w,
               /praccpp-001-envsetting/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_f25b9112760d9b861a8f06cf4ae6a65b.png&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;설치가 완료되었다면, 잘 실행되는지 테스트를 해보아야 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[S]&lt;/b&gt; 를 눌러 검색을 띄움&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;developer powershell&lt;/code&gt;을 입력하여 &lt;b&gt;Developer PowerShell for VS 2022&lt;/b&gt;를 찾은 뒤 실행&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_vs2022buildtools_test1&#34; srcset=&#34;
               /praccpp-001-envsetting/04_vs2022buildtools_test1_hu524c1eeeb92a7a9647dba47441c76b34_143589_8376a61aec355e6b8cf6fe811c980071.png 400w,
               /praccpp-001-envsetting/04_vs2022buildtools_test1_hu524c1eeeb92a7a9647dba47441c76b34_143589_8ec770e7bb90bc8fe15da9c18fa7ca04.png 760w,
               /praccpp-001-envsetting/04_vs2022buildtools_test1_hu524c1eeeb92a7a9647dba47441c76b34_143589_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/04_vs2022buildtools_test1_hu524c1eeeb92a7a9647dba47441c76b34_143589_8376a61aec355e6b8cf6fe811c980071.png&#34;
               width=&#34;760&#34;
               height=&#34;621&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cl&lt;/code&gt; 명령어와 &lt;code&gt;cmake&lt;/code&gt; 명령어를 각각 입력하여, 다음 그림과 같이 각각의 사용법(usage)이 뜨는지 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_vs2022buildtools_test2&#34; srcset=&#34;
               /praccpp-001-envsetting/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_822efe39862c06232a29d4c2431969a9.png 400w,
               /praccpp-001-envsetting/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_2107f35e4f83ab342cbab819ba2ec199.png 760w,
               /praccpp-001-envsetting/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_822efe39862c06232a29d4c2431969a9.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;잘 완료되었다면, 이 터미널은 닫으셔도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vscode-설치&#34;&gt;VSCode 설치&lt;/h2&gt;
&lt;h3 id=&#34;다운로드-1&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;공식 홈페이지&lt;/a&gt; 첫화면에 있는 다운로드 버튼을 누르면 설치 프로그램이 다운로드 됩니다.&lt;/p&gt;
&lt;p&gt;혹은, &lt;a href=&#34;https://code.visualstudio.com/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;다운로드 페이지&lt;/a&gt;를 이용하시면 좀 더 다양한 옵션의 설치 파일을 다운로드 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_vscode_mainpage_download&#34; srcset=&#34;
               /praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_5032079348e1f8b63c47acc58d00d188.png 400w,
               /praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_e485de552509a5a298763d268417dd8a.png 760w,
               /praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_5032079348e1f8b63c47acc58d00d188.png&#34;
               width=&#34;732&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치-1&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 파일(&lt;code&gt;VSCode...Setup-....exe&lt;/code&gt;)을 실행합니다.&lt;/p&gt;
&lt;p&gt;공식 홈페이지 첫화면에서 다운로드 버튼을 눌렀거나, User installer를 받으신 경우에는, 권한 이슈로 인해 다음과 같은 경고가 뜰 수 있습니다. 개인 컴퓨터에 작업을 수행하고 있는 일반적인 경우라면, &lt;b&gt;확인 &lt;/b&gt;버튼을 누르고 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_vscode_install_warning&#34; srcset=&#34;
               /praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_e0b102a8223aa77038f3df9aa151f1d9.png 400w,
               /praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_7a434070efdaae037b5a501caa1beeb9.png 760w,
               /praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_e0b102a8223aa77038f3df9aa151f1d9.png&#34;
               width=&#34;413&#34;
               height=&#34;185&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;설치 과정 중 다음과 같은 화면이 뜰 텐데, 여기서 다른 건 몰라도 &lt;b&gt;다음 그림에 표시한 세 가지 항목은 체크해 두시길 권장&lt;/b&gt;합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;08_vscode_install&#34; srcset=&#34;
               /praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_be0695542f04faefe9122a652983f34c.png 400w,
               /praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_c34c609d7dbcf724b827810f58fc9891.png 760w,
               /praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_be0695542f04faefe9122a652983f34c.png&#34;
               width=&#34;598&#34;
               height=&#34;464&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행-1&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;시작메뉴나 바탕화면에 있는 Visual Studio Code를 실행시키면 됩니다.&lt;/p&gt;
&lt;p&gt;다음과 같은 화면이 뜨면 잘 실행된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;10_vscode_run&#34; srcset=&#34;
               /praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_36f07cc44663cd8e4afc0ffeac1a0acb.png 400w,
               /praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_fb08da58e0a9a0a8779eb8abf404899d.png 760w,
               /praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_36f07cc44663cd8e4afc0ffeac1a0acb.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;필수-extension-설치&#34;&gt;필수 Extension 설치&lt;/h2&gt;
&lt;p&gt;이어서, 이 시리즈를 진행하기 위해 필수적인 &lt;strong&gt;VSCode의 extension들을 설치&lt;/strong&gt;하도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;Extension에 관한 내용을 살펴보기 위해서는, 첫 화면의 &lt;strong&gt;맨 왼쪽에 있는 아이콘 중 5번째에 있는 것&lt;/strong&gt;을 누르거나, 단축키 &lt;b&gt;[CTRL]+[SHIFT]+[X]&lt;/b&gt;를 누르면 됩니다. 이후, 검색 란에 키워드를 입력하여 원하는 extension을 찾아서 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;11_vscode_extension&#34; srcset=&#34;
               /praccpp-001-envsetting/11_vscode_extension_hua79e4ac25bcc1889071411ce591649da_143263_065250876e363ceba80f04bcf267c811.png 400w,
               /praccpp-001-envsetting/11_vscode_extension_hua79e4ac25bcc1889071411ce591649da_143263_d3b714f23fe078ee1c4c6572870fb957.png 760w,
               /praccpp-001-envsetting/11_vscode_extension_hua79e4ac25bcc1889071411ce591649da_143263_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/11_vscode_extension_hua79e4ac25bcc1889071411ce591649da_143263_065250876e363ceba80f04bcf267c811.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;extension-1-cc&#34;&gt;Extension 1: C/C++&lt;/h3&gt;
&lt;p&gt;&amp;quot;&lt;b&gt;C/C++&lt;/b&gt;&amp;quot;이라고 검색하시면 다음과 같은 extension이 뜹니다. &lt;strong&gt;Install&lt;/strong&gt; 버튼을 눌러 설치하시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 extension은 VSCode에서 C 언어 및 C++ 언어를 사용함에 있어, &lt;strong&gt;여러 C 언어 및 C++ 언어용 컴파일러 및 빌드도구와의 연동&lt;/strong&gt;이나 &lt;strong&gt;자동완성 기능&lt;/strong&gt; 등을 사용할 수 있게 해줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;12_vscode_ccpp_extension&#34; srcset=&#34;
               /praccpp-001-envsetting/12_vscode_ccpp_extension_hu114703246117f9ee3ec0c95693f134bb_116957_4c13d9c73e3a16a3befcca4640106e1a.png 400w,
               /praccpp-001-envsetting/12_vscode_ccpp_extension_hu114703246117f9ee3ec0c95693f134bb_116957_e4b20650c198d3cd81590a14f05a165d.png 760w,
               /praccpp-001-envsetting/12_vscode_ccpp_extension_hu114703246117f9ee3ec0c95693f134bb_116957_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/12_vscode_ccpp_extension_hu114703246117f9ee3ec0c95693f134bb_116957_4c13d9c73e3a16a3befcca4640106e1a.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;extension-2-cmake-tools-cmake&#34;&gt;Extension 2: CMake Tools (+CMake)&lt;/h3&gt;
&lt;p&gt;&amp;quot;&lt;b&gt;CMake Tools&lt;/b&gt;&amp;quot;이라고 검색하시면 다음과 같은 extension이 뜹니다. &lt;strong&gt;Install&lt;/strong&gt; 버튼을 눌러 설치하시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 extension은 VSCode에서 CMake를 바로 사용할 수 있도록 &lt;strong&gt;CMake와 연동&lt;/strong&gt;을 해주고, &lt;strong&gt;CMake 기반의 빌드 작업을 좀 더 쉽게 수행할 수 있도록 여러 UI를 제공&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;13_vscode_cmaketools_extension&#34; srcset=&#34;
               /praccpp-001-envsetting/13_vscode_cmaketools_extension_hu135c962e182735c05b83f1a7877aab93_153536_e009a687ecc1beb33f19cd98c42757c8.png 400w,
               /praccpp-001-envsetting/13_vscode_cmaketools_extension_hu135c962e182735c05b83f1a7877aab93_153536_45ce2078f5add597652348d7ebbcc091.png 760w,
               /praccpp-001-envsetting/13_vscode_cmaketools_extension_hu135c962e182735c05b83f1a7877aab93_153536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/13_vscode_cmaketools_extension_hu135c962e182735c05b83f1a7877aab93_153536_e009a687ecc1beb33f19cd98c42757c8.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이걸 깔면, 바로 밑에 있는 &lt;b&gt;&amp;quot;CMake&amp;quot;&lt;/b&gt; extension도 알아서 자동으로 설치될텐데요, &lt;b&gt;그냥 같이 깔리게 두시면 됩니다&lt;/b&gt;. 이 extension은 CMake Tools에서 제공하지 않는, &lt;strong&gt;CMake 스크립트 작성 시 도움을 주는 여러 기능&lt;/strong&gt;이나 &lt;b&gt;문법에 따른 강조기능(Syntax Highlighting)&lt;/b&gt; 등을 제공합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이 글에서는 MSVC의 구성요소인 C++ 빌드 도구와 CMake를 설치하였고, IDE로서 활용할 수 있는 VSCode를 설치 및 세팅하였습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-09-24: 최초 게시&lt;/li&gt;
&lt;li&gt;2021-10-06: 필수 Extension 설치 내용 추가&lt;/li&gt;
&lt;li&gt;2021-10-21: Code 실행 시 Developer PowerShell for VS 2019를 통해 실행할 필요가 없어서, 해당 내용 삭제&lt;/li&gt;
&lt;li&gt;2021-11-10: Visual Studio 2022 버전 출시에 따른 내용 수정&lt;/li&gt;
&lt;li&gt;2021-11-11: TL;DR 추가&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 2. 실습환경 테스트하기</title>
      <link>https://evandde.github.io/praccpp-002-envtest/</link>
      <pubDate>Wed, 06 Oct 2021 17:01:14 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-002-envtest/</guid>
      <description>&lt;p&gt;앞서 구축한 실습 환경이 제대로 동작하는지 테스트 해봅시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VSCode - CMake Tools Extension이 제공하는 CMake: Quick Start로 Hello World 프로젝트 만들기&lt;/li&gt;
&lt;li&gt;VSCode로 프로젝트 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;작업공간-만들기&#34;&gt;작업공간 만들기&lt;/h2&gt;
&lt;p&gt;일단, &lt;strong&gt;작업을 진행할 폴더를 자유롭게 하나 준비&lt;/strong&gt;합니다. 저는 &lt;code&gt;C:\&lt;/code&gt; 하위에 &lt;code&gt;cpp\helloworld&lt;/code&gt;라는 폴더를 만들고, 여기서 작업을 진행해보도록 하겠습니다. 즉, &lt;strong&gt;제 작업공간의 경로&lt;/strong&gt;는 &lt;code&gt;C:\cpp\helloworld&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    경로에 한글이 들어가면 안됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_workspace&#34; srcset=&#34;
               /praccpp-002-envtest/01_workspace_hu641ea03d319e1089a74265e11b66e829_38953_2cbe2e9d7537dfd0e216ac2956ffbe79.png 400w,
               /praccpp-002-envtest/01_workspace_hu641ea03d319e1089a74265e11b66e829_38953_37ac8ee78c888a0c71d844514b567102.png 760w,
               /praccpp-002-envtest/01_workspace_hu641ea03d319e1089a74265e11b66e829_38953_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/01_workspace_hu641ea03d319e1089a74265e11b66e829_38953_2cbe2e9d7537dfd0e216ac2956ffbe79.png&#34;
               width=&#34;760&#34;
               height=&#34;503&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vscode에서-작업공간-열기&#34;&gt;VSCode에서 작업공간 열기&lt;/h2&gt;
&lt;p&gt;VSCode에서 앞서 만들어둔 작업공간 폴더를 열어보겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;위쪽의 메뉴바에서 &lt;b&gt;File - Open Folder&lt;/b&gt;를 누릅니다. 단축키로는 &lt;b&gt;[CTRL]+[K],[O]&lt;/b&gt;입니다(&lt;b&gt;[CTRL]키를 누른상태&lt;/b&gt;로 &lt;b&gt;[K]키와 [O]키를 순서대로&lt;/b&gt; 누르면 됩니다).&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_openfolder&#34; srcset=&#34;
               /praccpp-002-envtest/03_openfolder_hu13531afdd7e4b083ed7b7cd9cda49e8d_94490_c0d564ecee8b7855cf855352bb861fdb.png 400w,
               /praccpp-002-envtest/03_openfolder_hu13531afdd7e4b083ed7b7cd9cda49e8d_94490_4a6a2db05367aac2714939c10b26d887.png 760w,
               /praccpp-002-envtest/03_openfolder_hu13531afdd7e4b083ed7b7cd9cda49e8d_94490_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/03_openfolder_hu13531afdd7e4b083ed7b7cd9cda49e8d_94490_c0d564ecee8b7855cf855352bb861fdb.png&#34;
               width=&#34;760&#34;
               height=&#34;569&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이어서 뜨는 폴더 선택창에서, 앞서 만들어둔 작업공간 경로로 이동하여 &lt;b&gt;폴더 선택&lt;/b&gt;을 해주시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_openfolder&#34; srcset=&#34;
               /praccpp-002-envtest/04_openfolder_hufe142dfb0759ebf76758db51702f088d_19129_c46d49204a05ec5753d882c3b5a7fb53.png 400w,
               /praccpp-002-envtest/04_openfolder_hufe142dfb0759ebf76758db51702f088d_19129_52f494c42a24c87ff9d7ba47bd9a563a.png 760w,
               /praccpp-002-envtest/04_openfolder_hufe142dfb0759ebf76758db51702f088d_19129_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/04_openfolder_hufe142dfb0759ebf76758db51702f088d_19129_c46d49204a05ec5753d882c3b5a7fb53.png&#34;
               width=&#34;760&#34;
               height=&#34;457&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음과 같은 경고창이 뜰 수도 있습니다. VSCode에서 이 폴더 안에 있는 실행파일을 실행할 수도 있으니, 이 폴더가 신뢰해도 되는 폴더인지 확인하라는 경고창입니다. 직접 만든 폴더이므로 당연히 신뢰할 수 있겠죠.&lt;/p&gt;
&lt;p&gt;체크박스는, 이 폴더의 상위폴더도 신뢰할 수 있는 폴더인지를 묻는 것입니다. 저는 향후 &lt;code&gt;C:\cpp&lt;/code&gt; 하위에 새로운 프로젝트를 만들어 나갈 예정이므로, 체크박스까지 체크해준 뒤 진행하도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_openfolder&#34; srcset=&#34;
               /praccpp-002-envtest/05_openfolder_hub1590651155a5b37883bc96eab199e52_68304_5442964e1457da565ed2e67909ee50c1.png 400w,
               /praccpp-002-envtest/05_openfolder_hub1590651155a5b37883bc96eab199e52_68304_e50b0322ea2de6d7cdd90052da50d47d.png 760w,
               /praccpp-002-envtest/05_openfolder_hub1590651155a5b37883bc96eab199e52_68304_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/05_openfolder_hub1590651155a5b37883bc96eab199e52_68304_5442964e1457da565ed2e67909ee50c1.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;완료되었다면, 다음 그림과 같이 &lt;b&gt;탐색기 항목의 최상위부분이 폴더명으로 변경된 것을 확인&lt;/b&gt;할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_openfolder&#34; srcset=&#34;
               /praccpp-002-envtest/06_openfolder_hub0d43befaf7fab2573941462c41bf3a0_59150_4d1fd6bb0b02bc2c16a9a5fead66cf23.png 400w,
               /praccpp-002-envtest/06_openfolder_hub0d43befaf7fab2573941462c41bf3a0_59150_741d2e5af3b39fa76489bc50ba4f9ada.png 760w,
               /praccpp-002-envtest/06_openfolder_hub0d43befaf7fab2573941462c41bf3a0_59150_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/06_openfolder_hub0d43befaf7fab2573941462c41bf3a0_59150_4d1fd6bb0b02bc2c16a9a5fead66cf23.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cmake-quick-start&#34;&gt;CMake: Quick Start&lt;/h2&gt;
&lt;p&gt;지난 글에서 설치한 extension 중, CMake Tools가 제공하는 기능을 활용하여 Hello World 프로젝트를 만들어 보겠습니다.&lt;/p&gt;
&lt;p&gt;CMake Tools는 &lt;b&gt;CMake: Quick Start&lt;/b&gt;라는 기능을 제공합니다. 이는, Hello World를 출력하는 간단한 예제 프로젝트를 자동으로 생성해주는 기능입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;위쪽의 메뉴바에서 &lt;b&gt;View - Command Palette&lt;/b&gt;를 누릅니다. 단축키로는 &lt;b&gt;[CTRL]+[SHIFT]+[P]&lt;/b&gt;입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_cqs&#34; srcset=&#34;
               /praccpp-002-envtest/07_cqs_hu3f4709795be6401f50a9d4c5ae7541a9_44735_3d64ca3b2895a1ceea1a4bc9b903326e.png 400w,
               /praccpp-002-envtest/07_cqs_hu3f4709795be6401f50a9d4c5ae7541a9_44735_2f98a3fba0df0dd872d4588287c2bd21.png 760w,
               /praccpp-002-envtest/07_cqs_hu3f4709795be6401f50a9d4c5ae7541a9_44735_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/07_cqs_hu3f4709795be6401f50a9d4c5ae7541a9_44735_3d64ca3b2895a1ceea1a4bc9b903326e.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위쪽에 작은 명령창이 뜨고, &lt;code&gt;&amp;gt;&lt;/code&gt; 표시가 적혀있을 것입니다. 뒤에 이어서 &lt;b&gt;cmake quick start&lt;/b&gt;라고 적으면, 하단에 &lt;b&gt;CMake: Quick Start&lt;/b&gt;라는 항목이 검색되어 나타날 것입니다. 이를 클릭합니다. (간단하게 &lt;b&gt;cqs&lt;/b&gt;라고만 적어도 검색됩니다)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;08_cqs&#34; srcset=&#34;
               /praccpp-002-envtest/08_cqs_hu295d22ffc740697df9751216a6db0bfa_31971_cf41b9cdca8281be99b2302f26ffca39.png 400w,
               /praccpp-002-envtest/08_cqs_hu295d22ffc740697df9751216a6db0bfa_31971_87c6115ae3e313cfc241d9ac655bc24f.png 760w,
               /praccpp-002-envtest/08_cqs_hu295d22ffc740697df9751216a6db0bfa_31971_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/08_cqs_hu295d22ffc740697df9751216a6db0bfa_31971_cf41b9cdca8281be99b2302f26ffca39.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경우에 따라, 다음 그림과 같이 &lt;b&gt;컴파일러 선택 요청&lt;/b&gt;이 뜰 수도 있습니다. VSCode가 탐지한 빌드 도구가 모두 나타나는 것이므로, 여러분의 화면에 나타난 항목이 저와 약간 다를 수도 있습니다.&lt;/p&gt;
&lt;p&gt;이 중에서 &lt;b&gt;Visual Studio Build Tools 2022 Release - amd64&lt;/b&gt;가 있다면 이것을 클릭하시면 됩니다. 만약 이 항목이 없는 경우에는 Visual Studio Build Tools 2022 Release - x86으로 진행하셔도 큰 차이는 없습니다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;09_cqs_2022&#34; srcset=&#34;
               /praccpp-002-envtest/09_cqs_2022_hu86cf694f904f238465c0eed7f0d4ba5d_57442_a0e50705504b05a3c858d90b4901cc9f.png 400w,
               /praccpp-002-envtest/09_cqs_2022_hu86cf694f904f238465c0eed7f0d4ba5d_57442_3890175aa65cd2d48f76ad8490973a34.png 760w,
               /praccpp-002-envtest/09_cqs_2022_hu86cf694f904f238465c0eed7f0d4ba5d_57442_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/09_cqs_2022_hu86cf694f904f238465c0eed7f0d4ba5d_57442_a0e50705504b05a3c858d90b4901cc9f.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이어서, 다음 그림과 같이 &lt;b&gt;새 프로젝트의 이름을 적으라는 요청&lt;/b&gt;이 뜹니다. &lt;b&gt;아무거나 자유롭게 적으시면 됩니다&lt;/b&gt;. 여기서는 &lt;b&gt;helloworld&lt;/b&gt;라고 적겠습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;10_cqs_2022&#34; srcset=&#34;
               /praccpp-002-envtest/10_cqs_2022_hu3575ee1eecae407ca06b8c0c576b404f_46364_47bcc8686d2d1975e0d0bf290afdcbb3.png 400w,
               /praccpp-002-envtest/10_cqs_2022_hu3575ee1eecae407ca06b8c0c576b404f_46364_2c5512f12849fb0a53e83911b9e01b56.png 760w,
               /praccpp-002-envtest/10_cqs_2022_hu3575ee1eecae407ca06b8c0c576b404f_46364_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/10_cqs_2022_hu3575ee1eecae407ca06b8c0c576b404f_46364_47bcc8686d2d1975e0d0bf290afdcbb3.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;마지막으로, &lt;b&gt;라이브러리를 만들 것인지 실행파일을 만들 것인지 선택하라는 요청&lt;/b&gt;이 뜹니다. 여기서는 실행파일을 만들 것이므로, &lt;b&gt;Executable&lt;/b&gt;을 선택합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;11_cqs_2022&#34; srcset=&#34;
               /praccpp-002-envtest/11_cqs_2022_hub2218299f068a7f3659f7a180554b42c_45794_21df6095a17e29985924a1c7665fa697.png 400w,
               /praccpp-002-envtest/11_cqs_2022_hub2218299f068a7f3659f7a180554b42c_45794_b338db60a4753ce5ca3eeeb5c6d81177.png 760w,
               /praccpp-002-envtest/11_cqs_2022_hub2218299f068a7f3659f7a180554b42c_45794_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/11_cqs_2022_hub2218299f068a7f3659f7a180554b42c_45794_21df6095a17e29985924a1c7665fa697.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그러면 하단부의 &lt;b&gt;OUTPUT&lt;/b&gt; 탭에서 뭔가 많은 문구가 올라가며 여러 작업이 자동으로 진행된 뒤, 다음과 같은 폴더와 파일들이 생성될 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; 폴더&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서는 각 파일에 쓰여있는 내용을 설명하진 않을 것입니다. 이 파일들이 다음 그림처럼 &lt;b&gt;잘 만들어져 있는지만 확인&lt;/b&gt;해봅니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;12_cqs_2022&#34; srcset=&#34;
               /praccpp-002-envtest/12_cqs_2022_hud837c933b9ae765c8898d89d21bb7bd1_95575_20a907af7c224475099fc20dbdbe2a83.png 400w,
               /praccpp-002-envtest/12_cqs_2022_hud837c933b9ae765c8898d89d21bb7bd1_95575_b638a7c8f1f9c9c10e85a3e663f0e9bb.png 760w,
               /praccpp-002-envtest/12_cqs_2022_hud837c933b9ae765c8898d89d21bb7bd1_95575_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/12_cqs_2022_hud837c933b9ae765c8898d89d21bb7bd1_95575_20a907af7c224475099fc20dbdbe2a83.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 실행이 잘 되는지 확인해보겠습니다. 실행은 창 맨 밑의 파란색 상태표시줄에서 &lt;b&gt;재생버튼(▷) 모양&lt;/b&gt;을 눌러주시면 됩니다.&lt;/p&gt;
&lt;p&gt;이번에도 OUTPUT 탭에서 여러 문구가 올라가며 진행이 된 뒤, &lt;b&gt;TERMINAL 탭&lt;/b&gt;으로 자동 전환되며 다음 그림과 같은 &lt;b&gt;Hello, world!&lt;/b&gt; 문구가 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;여기까지 확인하셨다면, 작업 환경이 모두 정상적으로 세팅된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;13_cqs_2022&#34; srcset=&#34;
               /praccpp-002-envtest/13_cqs_2022_hu3af5c1500b73b905238db0350c34ae0e_89321_512efb0e520100c41b52bb8716257cf9.png 400w,
               /praccpp-002-envtest/13_cqs_2022_hu3af5c1500b73b905238db0350c34ae0e_89321_87bd20f862218555489c052aaa29e9f5.png 760w,
               /praccpp-002-envtest/13_cqs_2022_hu3af5c1500b73b905238db0350c34ae0e_89321_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/13_cqs_2022_hu3af5c1500b73b905238db0350c34ae0e_89321_512efb0e520100c41b52bb8716257cf9.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이번 글에서는 앞서 구축한 VSCode와 MSVC를 기반으로 한 작업환경이 정상적으로 작동하는지 테스트해보았습니다.&lt;/p&gt;
&lt;p&gt;앞으로 강의를 진행하며 좀 더 세부적인 옵션을 설정하는 방법에 대해 배워나가겠지만, 프로젝트를 만들고 실행하는 큰 흐름은 이번 글에서 진행한 바와 거의 유사합니다. 그러므로, 이번 글에서 했던 작업이 &lt;b&gt;익숙해지실 수 있도록 꼭 한 번 이상 실습을 해보시길 권장&lt;/b&gt;합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-10-12: 최초 게시&lt;/li&gt;
&lt;li&gt;2021-10-21: Code 실행 시 Developer PowerShell for VS 2019를 통해 실행할 필요가 없어서, 해당 내용 삭제&lt;/li&gt;
&lt;li&gt;2021-11-10: Visual Studio 2022 버전 출시에 따른 내용 수정&lt;/li&gt;
&lt;li&gt;2021-11-11: TL;DR 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;이는 엄밀히 말하면, 여러분이 작업을 진행하시는 컴퓨터 환경과 프로그램을 실행하게 될 컴퓨터 환경의 비트수를 고려하여 선택하는 부분입니다. 무슨 말인지 잘 모르시겠다면, &lt;b&gt;요즘 사용하시는 컴퓨터는 대부분 64 bit일 것이므로 그냥 64 bit용에 해당하는 amd64를 선택하여 진행&lt;/b&gt;하시면 됩니다. 참고로 현재 사용 중인 컴퓨터 환경의 비트수는 [WIN]+[R]을 눌러 실행 창을 연 뒤, &lt;code&gt;msinfo32&lt;/code&gt;를 입력하여 실행하여 시스템 정보 창을 띄우고, 여기서 시스템 종류 항목을 확인하면 알 수 있습니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - *. 실습환경 만들기(VSCode를 안쓰는 경우)</title>
      <link>https://evandde.github.io/praccpp-000-env_general/</link>
      <pubDate>Wed, 10 Nov 2021 20:50:10 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-000-env_general/</guid>
      <description>&lt;p&gt;이 글에서는 MSVC &amp;amp; VSCode 환경을 사용하지 않는 분들이 향후 수업을 따라오기 위해 어떻게 준비해야 하는지를 다룹니다.&lt;/p&gt;
&lt;p&gt;앞서 예시로 보여드린 MSVC &amp;amp; VSCode 환경을 그대로 따라서 사용하신다면 굳이 이 글을 읽지 않아도 괜찮습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hello World 프로젝트용 파일 준비 (&lt;code&gt;main.cpp&lt;/code&gt;, &lt;code&gt;CMakeLists.txt&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;C++ 빌드 도구, CMake, IDE 사용환경 준비&lt;/li&gt;
&lt;li&gt;&lt;code&gt;helloworld.exe&lt;/code&gt; 실행해보기&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;예제-코드-준비&#34;&gt;예제 코드 준비&lt;/h2&gt;
&lt;p&gt;앞서 &lt;a href=&#34;https://evandde.github.io/praccpp-002-envtest/&#34;&gt;실습환경 테스트하기&lt;/a&gt;에서 CMake: Quick Start를 통해 만들어지는 파일과 동일한 파일을 준비하면 됩니다.&lt;/p&gt;
&lt;p&gt;CMake: Quick Start로 만들어지는 두 개의 파일을 올려드리니, 둘 다 다운받아서 여러분이 원하는 작업공간에 넣어주시면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://evandde.github.io/uploads/main.cpp&#34; target=&#34;_blank&#34;&gt;main.cpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://evandde.github.io/uploads/CMakeLists.txt&#34; target=&#34;_blank&#34;&gt;CMakeLists.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;c-빌드-도구&#34;&gt;C++ 빌드 도구&lt;/h2&gt;
&lt;p&gt;C++ 코드를 이용하여 빌드하기 위한 &lt;b&gt;빌드 도구&lt;/b&gt;가 있어야 합니다.&lt;/p&gt;
&lt;p&gt;대표적으로 다음과 같은 것들이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Visual C++ 빌드 도구 (이 시리즈에서 사용하고 있는 것)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mingw-w64.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mingw-w64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/kr/xcode/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각자 운영체제와 사용환경에 따라 적합한 것을 선택하여 진행하시면 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cmake&#34;&gt;CMake&lt;/h2&gt;
&lt;p&gt;CMake는 사용환경과 상관없이 설치해서 이용하시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 시리즈에서 소개한 방법처럼 MSVC를 이용하여 한 번에 설치할 수도 있습니다만, 그렇지 않은 경우에는 따로 설치해주시면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cmake.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake 홈페이지&lt;/a&gt;에서 직접 받아서 설치하시거나, &lt;a href=&#34;https://github.com/microsoft/winget-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;winget&lt;/a&gt;, &lt;a href=&#34;https://wiki.debian.org/Apt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt&lt;/a&gt;, &lt;a href=&#34;https://brew.sh/index_ko&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;brew&lt;/a&gt; 등 패키지관리자를 통해서도 설치하실 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;버전은 3.0 이상&lt;/b&gt;으로 설치하시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;통합개발환경ide&#34;&gt;통합개발환경(IDE)&lt;/h2&gt;
&lt;p&gt;통합개발환경도 다양한 선택지가 있습니다. 대표적으로 다음과 같은 것들이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VSCode (이 시리즈에서 사용하고 있는 것)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/ko/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eclipse.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/kr/xcode/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/ko-kr/product/development-tools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qt Creator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codeblocks.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code::Blocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ 코드 자동완성, 빌더/디버거 연동 등의 기능을 제공한다면 어떤 것을 사용하셔도 괜찮습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;빌드-및-실행&#34;&gt;빌드 및 실행&lt;/h2&gt;
&lt;p&gt;빌드는 어느 디렉토리(폴더)에서 수행해도 상관없습니다만, 전통적인 관례를 따라 &lt;code&gt;build&lt;/code&gt; 디렉토리(폴더)를 만들고 그 안에 빌드 결과물이 담기도록 하시는 것을 권장합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;위에서 받은 &lt;code&gt;main.cpp&lt;/code&gt; 파일과 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일이 있는 곳에 &lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리(폴더)를 새로 만듭니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMake를 이용하여 &lt;code&gt;build&lt;/code&gt; 디렉토리(폴더)에 결과물이 담기도록, 작업공간 디렉토리(폴더)에 대해 cmake와 빌드를 수행합니다.&lt;/p&gt;
&lt;p&gt;터미널을 이용할 수 있다면, &lt;b&gt;&lt;code&gt;build&lt;/code&gt; 디렉토리(폴더)로 이동한 상태에서 다음과 같이 입력&lt;/b&gt;하면 &lt;b&gt;빌드가 수행&lt;/b&gt;됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake ..
cmake --build . --config Release
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; 디렉토리 내에 있는 &lt;code&gt;helloworld.exe&lt;/code&gt; 파일을 실행해서 프로그램이 제대로 작동하는지 확인합니다.&lt;/p&gt;
&lt;p&gt;경우에 따라, &lt;code&gt;build/Release&lt;/code&gt; 내에 &lt;code&gt;helloworld.exe&lt;/code&gt; 파일이 존재할 수도 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-11-10: 최초 게시&lt;/li&gt;
&lt;li&gt;2021-11-11: TL;DR 추가&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 3. 빌드, 컴파일, 링크</title>
      <link>https://evandde.github.io/praccpp-003-whatisbuild/</link>
      <pubDate>Wed, 10 Nov 2021 16:32:26 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-003-whatisbuild/</guid>
      <description>&lt;p&gt;이 글에서는 &lt;b&gt;빌드&lt;/b&gt;/&lt;b&gt;컴파일&lt;/b&gt;/&lt;b&gt;링크&lt;/b&gt;가 무엇인지 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;컴파일은 번역하는 과정, 링크는 번역된 파일을 묶는 과정, 그리고 빌드는 컴파일과 링크를 합쳐서 부르는 것&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일이 프로그램의 실질적 동작을 설명하는 C++로 된 코드&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; 폴더는 빌드를 통해 나온 결과물이 담긴 폴더&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-설명&#34;&gt;용어 설명&lt;/h2&gt;
&lt;h3 id=&#34;컴파일&#34;&gt;컴파일&lt;/h3&gt;
&lt;p&gt;컴파일이란 사람의 언어로 작성된 코드(e.g. &lt;code&gt;main.cpp&lt;/code&gt;)를 컴퓨터가 사용하는 언어로 &lt;b&gt;번역&lt;/b&gt;하는 과정을 의미합니다.&lt;/p&gt;
&lt;p&gt;컴퓨터는 C++로 작성된 파일을 해석할 수 없습니다. 그래서 이 파일을 컴퓨터가 사용하는 이진수(binary) 기반의 언어로 번역하는 단계가 필요합니다. 이 과정을 &lt;b&gt;컴파일(compile)&lt;/b&gt;이라 부르고, 컴파일을 수행해주는 도구를 &lt;b&gt;컴파일러(compiler)&lt;/b&gt;라고 합니다.&lt;/p&gt;
&lt;p&gt;번역기도 파파고나 구글번역기 등 여러가지가 있고 각각의 결과물도 다르고 성능도 다르듯, 컴파일러도 여러가지 종류가 있고 각각의 특징이나 장단점이 있습니다. 이 시리즈에서는 그 중 Microsoft에서 제공하는 컴파일러를 이용하고 있는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;링크&#34;&gt;링크&lt;/h3&gt;
&lt;p&gt;링크란 여러 개의 파일들을 &lt;strong&gt;한데 묶어서&lt;/strong&gt; 하나의 실행용 프로그램(e.g. &lt;code&gt;.exe&lt;/code&gt; 파일)을 만들어내는 과정을 의미합니다.&lt;/p&gt;
&lt;p&gt;지금 우리는 C++ 코드가 &lt;code&gt;main.cpp&lt;/code&gt; 파일 하나만 가지고 있지만, 앞으로 C++을 배워나가다 보면 더 많은 파일을 이용하여 이들을 모아 하나의 프로그램을 만들어야 할 일이 생길 것입니다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. 마치 요리를 할 때 메인 재료 이외에도 다른 부가적인 재료와 양념이 들어가듯 말이죠. 이 때, 여러 개의 파일들을 유기적으로 잘 엮어서 하나의 완성된 프로그램으로 만들어내는 과정을 &lt;b&gt;링크(link)&lt;/b&gt;라고 부르고, 링크를 수행해주는 도구를 &lt;b&gt;링커(linker)&lt;/b&gt;라고 합니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드&#34;&gt;빌드&lt;/h3&gt;
&lt;p&gt;빌드란 컴파일과 링크의 두 과정을 합친 것입니다.&lt;/p&gt;
&lt;p&gt;순서 상으로는, &lt;b&gt;컴파일&lt;/b&gt;을 먼저 한 뒤에, 번역된 파일들을 &lt;b&gt;링크&lt;/b&gt;하는 과정을 거쳐 프로그램이 만들어집니다. 이 일련의 과정을 &lt;b&gt;빌드(build)&lt;/b&gt;라고 하고, 빌드를 수행해주는 도구를 &lt;b&gt;빌더(builder)&lt;/b&gt;라고 하는 것이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;b&gt;컴파일&lt;/b&gt;이라는 용어를 &lt;b&gt;빌드의 뜻&lt;/b&gt;으로 사용하는 경우가 꽤나 자주 있으니 그러려니 하고 넘어가시면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;cmake-quick-start-프로젝트-파일구조&#34;&gt;CMake: Quick Start 프로젝트 파일구조&lt;/h2&gt;
&lt;p&gt;지난 번 글에서 만든 &lt;a href=&#34;https://evandde.github.io/praccpp-002-envtest/#cmake-quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake: Quick Start 프로젝트&lt;/a&gt;를 살펴보며 설명을 이어가도록 하겠습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    만약 다른 IDE를 사용하고 있어 CMake: Quick Start를 실습하지 못하는 분은, 그냥 &lt;b&gt;이론적인 부분만 보고 넘어가셔도 괜찮습니다&lt;/b&gt;.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;CMake: Quick Start 프로젝트를 만든 폴더에는 다음과 같은 내용물이 만들어져 있을 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; 폴더&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vscode&lt;/code&gt; 폴더(이 폴더는 있을 수도 있고, 없을 수도 있습니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각에 대해 간단히 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;maincpp-파일&#34;&gt;main.cpp 파일&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일은 프로그램이 &lt;b&gt;실제로 어떤 일을 수행할 지&lt;/b&gt;에 대해 &lt;b&gt;C++ 언어&lt;/b&gt;로 적혀있는 파일로, 가장 핵심이 되는 파일입니다.&lt;/p&gt;
&lt;p&gt;앞으로 우리가 이 시리즈를 진행함에 있어, 계속 수정하며 살펴볼 파일입니다.&lt;/p&gt;
&lt;h3 id=&#34;build-폴더&#34;&gt;build 폴더&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; 폴더는 빌드를 수행하여 나온 결과물이 담긴 폴더입니다.&lt;/p&gt;
&lt;p&gt;빌드 결과물을 담는 경로는 자유롭게 변경 가능하지만, 이처럼 &lt;code&gt;build&lt;/code&gt;라는 이름의 폴더를 만들고 그 안에 결과물을 담는 것이 일반적입니다. 이 시리즈와 같이 환경을 구셩하셨다면, 자동으로 이 관례에 따라 저장될 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;cmakeliststxt-파일&#34;&gt;CMakeLists.txt 파일&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일은 CMake라는 프로그램을 활용하기 위해 필요한 파일입니다. 이는 나중에 CMake에 대해 다룰 때 다시 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;vscode-폴더&#34;&gt;.vscode 폴더&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.vscode&lt;/code&gt; 폴더는 &lt;b&gt;VSCode라는 IDE를 사용할 때의 설정 값 등이 저장되는 폴더&lt;/b&gt;로, CMake 기반의 프로젝트와는 아무런 관계가 없는 폴더입니다.&lt;/p&gt;
&lt;p&gt;나중에 여러가지 설정을 조정할 때 쓰일 일이 있으니, 그 때 다시 살펴보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-11-10: 최초 게시&lt;/li&gt;
&lt;li&gt;2021-11-11: TL;DR 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;사실 지금처럼 &lt;code&gt;main.cpp&lt;/code&gt; 파일 하나만으로 프로그램을 만들 때에도, 눈에 보이지 않는 수많은 다른 파일들이 엮어져서 프로그램이 만들어지게 됩니다. 이는 C++ 프로그램을 만들 때 알아서 엮어지도록 되어 있어서 직접 보이지 않을 뿐입니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 4. #include</title>
      <link>https://evandde.github.io/praccpp-004-whatisinclude/</link>
      <pubDate>Sun, 21 Nov 2021 19:15:06 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-004-whatisinclude/</guid>
      <description>&lt;p&gt;이 글에서는 &lt;b&gt;include&lt;/b&gt;의 역할과 &lt;strong&gt;헤더파일&lt;/strong&gt;에 대한 간단한 개념을 알아봅니다.&lt;/p&gt;
&lt;p&gt;지난 글에서 Helloworld 프로젝트를 구성하는 각 파일/폴더의 역할을 알아보았으니, 이제부터 당분간은 가장 핵심이되는 &lt;code&gt;main.cpp&lt;/code&gt; 파일을 뜯어보겠습니다.&lt;/p&gt;
&lt;p&gt;이번 글에서는 그 &lt;code&gt;main.cpp&lt;/code&gt; 파일의 첫 줄인 &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;에 대한 이야기를 다뤄봅시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#include&lt;/code&gt;의 역할은 사실상 &lt;b&gt;복사-붙여넣기&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;아무파일에나 쓸 수 있는 건 아니고, &lt;strong&gt;헤더파일&lt;/strong&gt;에만 쓸 수 있음.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iostream&lt;/code&gt;이라는 헤더파일은 &lt;b&gt;C++ 프로그램에서 기본적인 입력과 출력을 수행하기 위해 필요&lt;/b&gt;한 녀석임&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;include의-역할&#34;&gt;#include의 역할&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;#include&lt;/code&gt;은 &lt;b&gt;파일의 내용을 그대로 복사해서 그 자리에 붙여넣는 기능&lt;/b&gt;을 수행합니다.&lt;/p&gt;
&lt;p&gt;즉, &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;이 수행하는 내용은 &lt;b&gt;iostream이라는 파일의 내용&lt;/b&gt;을 그대로 복사해서, &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt; &lt;b&gt;줄이 있던 자리에 그대로 바꿔치기&lt;/b&gt;하는 것이지요.&lt;/p&gt;
&lt;p&gt;아무 파일이나 다 사용할 수 있는 것은 아니고, &lt;b&gt;헤더파일&lt;/b&gt;이라는 것에만 사용할 수 있습니다. 헤더파일이 무엇인지는 나중에 자세히 살펴보겠습니다. 여기서는 일단, 헤더파일이란 &lt;b&gt;이 코드에 어떤 내용이 들어있는지 목차가 정리되어있는 파일&lt;/b&gt;이다 정도로 기억하고 넘어갑시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;iostream&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;이라는 파일은 &lt;b&gt;C++에서 표준 입출력과 관련한 기능&lt;/b&gt;을 수행하기 위해 필요한 헤더파일입니다. 예를 들면, &lt;b&gt;어떤 내용을 컴퓨터 화면(터미널 창)에 출력&lt;/b&gt;하거나 &lt;b&gt;컴퓨터 화면(터미널 창)에서 어떤 내용을 입력&lt;/b&gt; 받는 기능을 제공하는 것이지요.&lt;/p&gt;
&lt;p&gt;이 안에 무슨 내용이 있는지 살짝 구경해보고 싶으시다면, 코드에서 &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 부분을 &lt;b&gt;[CTRL] 키를 누른 상태에서 마우스 왼쪽 클릭(L-Click)&lt;/b&gt; 해보시기 바랍니다. VSCode는 물론이며, 이 외에도 대부분의 IDE가 [CTRL]+[L-Click] 기능을 제공합니다. 이는 &lt;b&gt;파일의 내용을 살펴보거나, 함수 및 변수의 원형 등을 살펴볼 때 사용&lt;/b&gt;할 수 있습니다. 앞으로도 자주 사용할 기능이니 기억해두시는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_iostream&#34; srcset=&#34;
               /praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_1203280c4031feed97fe60b7e74a4243.png 400w,
               /praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_975a47bb619b9ff2c34901f80d250224.png 760w,
               /praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_1203280c4031feed97fe60b7e74a4243.png&#34;
               width=&#34;760&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;클릭해보면 다음과 같이 상당한 양의 내용이 담긴 파일이 새로 열리는 것을 확인할 수 있을 것입니다. 이것이 &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 헤더파일의 내용입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_iostream&#34; srcset=&#34;
               /praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_6318d2900035f405ddc0545a615d562a.png 400w,
               /praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_2e6a44e5cdf7dc202d82c9c51aedec3e.png 760w,
               /praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_6318d2900035f405ddc0545a615d562a.png&#34;
               width=&#34;760&#34;
               height=&#34;583&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;앞서 &lt;code&gt;#include&lt;/code&gt;의 역할은 이 파일의 내용을 &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;이 써있던 자리에 그대로 복사-붙여넣기 하는 것이라고 했으니, 이 내용 전부를 복사-붙여넣기하여 대체하셔도 당연히 프로그램은 정상적으로 동작할 것입니다. 궁금하신 분은 직접 실습해보시면 좋겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-12-09: 최초 게시&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4 설치하기(10.6.p02, Ubuntu2004 LTS)</title>
      <link>https://evandde.github.io/g4install-106p2-ubt2004/</link>
      <pubDate>Sun, 01 Nov 2020 16:17:56 +0900</pubDate>
      <guid>https://evandde.github.io/g4install-106p2-ubt2004/</guid>
      <description>&lt;p&gt;이 글에서는 Linux계열 운영체제 중 하나인 &lt;strong&gt;Ubuntu 20.04 LTS&lt;/strong&gt;에서 &lt;strong&gt;Geant4 10.6 patch 02 버전&lt;/strong&gt;을 설치하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;설치-정보-요약&#34;&gt;설치 정보 요약&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;설치 환경&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제: Ubuntu 20.04 LTS&lt;/li&gt;
&lt;li&gt;인터넷 사용 가능&lt;/li&gt;
&lt;li&gt;관리자 권한 (&lt;code&gt;sudo&lt;/code&gt;) 이용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 대상&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geant4 10.6 patch 02 버전&lt;/li&gt;
&lt;li&gt;Multi-threading 기능 활성화&lt;/li&gt;
&lt;li&gt;UI 및 가시화 기능 활용을 위해 Qt5, X11 OpenGL 라이브러리 연동하여 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 경로&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;여러 버전의 Geant4를 설치할 경우를 고려하여, &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;h3 id=&#34;geant4-관련-필수선택-라이브러리-설치&#34;&gt;Geant4 관련 필수/선택 라이브러리 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt; 패키지 매니저 최신화&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt;를 이용하여 다음 항목 설치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;CMake (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Expat (Linux, macOS에서 &lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Qt5, X11 OpenGL 라이브러리 설치 (&lt;font color=&#39;blue&#39;&gt;Geant4 설치 시 선택 라이브러리&lt;/font&gt;. GUI 등 그래픽 기반 기능 사용에 필요)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential cmake libexpat1-dev qt5-default libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;geant4-설치&#34;&gt;Geant4 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geant4 툴킷을 설치할 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.6.p02
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, Geant4 소스코드 다운로드 (소스코드 용량 약 40 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.6.p02
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.06.p02.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.06.p02.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 만들고 안으로 이동&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 수행 (&lt;code&gt;make&lt;/code&gt; 명령은 인터넷 속도 및 cpu 성능에 따라 수 분~수 십분 소요될 수 있음)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt;(크로스섹션 데이터 자동설치 여부): ON (데이터 총 용량 약 900 MB)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../geant4.10.06.p02 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.6.p02 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON
sudo make -j `grep -c processor /proc/cpuinfo`
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;환경변수 세팅을 위해 &lt;code&gt;~/.bashrc&lt;/code&gt;에 내용 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.6.p02/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prerequisite-설치&#34;&gt;Prerequisite 설치&lt;/h2&gt;
&lt;p&gt;인터넷이 안된다거나, 관리자 권한을 사용할 수 없다거나, Ubuntu가 아니라면 이야기가 좀 달라지겠지만&amp;hellip;&lt;/p&gt;
&lt;p&gt;앞서 말한 5가지 준비물은 모두 Ubuntu에서 제공하는 패키지 관리자 &lt;code&gt;apt&lt;/code&gt;를 통해 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;(RedHat 계열의 리눅스에서도 패키지 관리자 &lt;code&gt;yum&lt;/code&gt;을 통해 유사한 명령어로 설치할 수 있습니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    패키지 관리자를 사용하기 전에 최신화를 해주세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    본인이 &lt;strong&gt;서버 등을 관리하는 사람&lt;/strong&gt;이라면, &lt;strong&gt;최신화를 할 때 주의&lt;/strong&gt;하세요. 이런 경우에는 전체 패키지를 최신화하기보다는 &lt;strong&gt;원하는 특정 패키지를 선별하여 최신화하기를 권장&lt;/strong&gt;합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;패키지-매니저-최신화&#34;&gt;패키지 매니저 최신화&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;c-컴파일러-및-표준-라이브러리-헤더-설치-gcc-등&#34;&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 설치 (GCC 등)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cmake-설치&#34;&gt;CMake 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y cmake
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;expat-설치&#34;&gt;Expat 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libexpat1-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;qt5-설치&#34;&gt;Qt5 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y qt5-default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;x11-opengl-설치&#34;&gt;X11 OpenGL 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-설치하기&#34;&gt;Geant4 설치하기&lt;/h2&gt;
&lt;p&gt;이제 준비가 다 되었습니다. 이어서 Geant4를 설치해봅시다.&lt;/p&gt;
&lt;p&gt;우리가 설치하고자 하는 경로는 &lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;입니다. 앞서 말씀드린 것처럼, 여러 버전의 Geant4를 설치할 경우를 고려하여 &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전명에 해당하는 디렉토리를 두어 세분화한 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;설치를-위한-디렉토리-생성&#34;&gt;설치를 위한 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;우선 해당 디렉토리를 생성하기 위해 다음 명령어를 입력합니다. (&lt;code&gt;/opt&lt;/code&gt;는 관리자 권한이 있어야 수정할 수 있음)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.6.p02
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;geant4-소스코드-다운로드&#34;&gt;Geant4 소스코드 다운로드&lt;/h3&gt;
&lt;p&gt;이어서, 해당 디렉토리로 이동한 뒤 Geant4 소스코드를 다운 받겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.6.p02
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.06.p02.tar.gz 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34;&gt;Geant4 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    본 글에서 다루는 10.6.p02와 다른 버전을 설치하시는 경우에는, &lt;code&gt;wget&lt;/code&gt; 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;소스코드-압축-해제&#34;&gt;소스코드 압축 해제&lt;/h3&gt;
&lt;p&gt;위 과정을 통해 &lt;code&gt;geant4.10.06.p02.tar.gz&lt;/code&gt;라는 압축파일을 다운받으셨을 것입니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 해당 파일의 압축을 해제합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.06.p02.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;geant4.10.06.p02&lt;/code&gt;라는 디렉토리가 생성되고 그 안에 압축이 풀리게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드를-위한-build-디렉토리-생성&#34;&gt;빌드를 위한 build 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;빌드를 수행하면 CMake와 관련된 잡다한 부산물이 생성됩니다. 관리의 용이성을 위해, 별도의 &lt;code&gt;build&lt;/code&gt;라는 디렉토리를 만들고 이 안에서 컴파일을 수행하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;빌드-수행&#34;&gt;빌드 수행&lt;/h3&gt;
&lt;p&gt;우리는 빌드를 진행할 때 다음과 같은 옵션을 설정할 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt;(크로스섹션 데이터 자동설치 여부): ON (데이터 총 용량 약 900 MB)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 우리의 소스 코드는 &lt;code&gt;../geant4.10.06.p02&lt;/code&gt; 디렉토리에 압축이 풀려져 있지요.&lt;/p&gt;
&lt;p&gt;이에 따라 다음과 같이 명령줄을 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../geant4.10.06.p02 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.6.p02 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 명령어를 입력하면, 많은 내용이 출력되며 작업이 진행됩니다. 혹시라도 오타가 나면 이 부분에서 에러가 발생합니다. &lt;font color=&#34;red&#34;&gt;&lt;b&gt;오타가 나지 않도록 주의하세요! 복사-붙여넣기 추천!&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt; 부분은 앞서 설명한 바와 같이, 크로스섹션 데이터를 자동으로 다운받을지에 대한 옵션입니다. 사용자에 따라 &lt;code&gt;OFF&lt;/code&gt;로 하고 직접 다운로드 받아서 가져오는 경우도 있습니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 Geant4를 처음 설치하는 분들이 별도로 작업할 내용을 최소화하고자, 자동 다운로드 하는 방법으로 진행합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;ccmake&lt;/code&gt; (curses 기반 CMake)를 사용할 수 있는 분이라면, 이를 이용하는 편이 더욱 편할 수도 있습니다. 이에 관한 내용은 지면이 부족하여 생략합니다. :(far fa-grin-squint-tears):
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;다음과 같은 명령어와 함께 마무리되면 정상적으로 진행이 된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_done&#34; srcset=&#34;
               /g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_d962b0a01022ecdceb52d2963adad06b.png 400w,
               /g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_ecc011d54f915b53b9422d586ad841ca.png 760w,
               /g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_d962b0a01022ecdceb52d2963adad06b.png&#34;
               width=&#34;647&#34;
               height=&#34;76&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이어서 &lt;code&gt;make&lt;/code&gt; 명령어로 빌드를 진행하고, &lt;code&gt;make install&lt;/code&gt;로 설치를 마무리합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어는 &lt;code&gt;-j &amp;lt;쓰레드 수&amp;gt;&lt;/code&gt; 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어에서 &lt;code&gt;-j&lt;/code&gt; 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 &lt;code&gt;cc1plus&lt;/code&gt; 관련 에러가 발생할 수 있습니다. &lt;code&gt;-j&lt;/code&gt; 옵션에 적절한 숫자는 &lt;b&gt;자신의 쓰레드 수 * 1.2&lt;/b&gt; 입니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;환경변수-설정&#34;&gt;환경변수 설정&lt;/h2&gt;
&lt;p&gt;Geant4 툴킷을 설치하고나면 마지막으로 할 일이 있습니다. 바로 &lt;strong&gt;환경변수를 설정&lt;/strong&gt;하는 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4 사용을 위해 컴퓨터에게 알려줘야 하는 초기값들이 몇 가지 있습니다만, 이를 정리하여 한 번에 자동으로 설정이 되게끔하는 파일을 Geant4에서 제공하고 있습니다.&lt;/p&gt;
&lt;p&gt;설치경로의 내부에 &lt;code&gt;bin/geant4.sh&lt;/code&gt;라는 파일입니다. (C-shell을 이용하시는 분은 &lt;code&gt;bin/geant4.csh&lt;/code&gt;를 이용합니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Geant4가 여러 버전으로 설치되어 있는 경우, 원하는 버전의 &lt;code&gt;bin/geant4.sh&lt;/code&gt;를 실행함으로써 해당 버전으로 동작하도록 설정할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;실행을 위해서는 다음 명령어를 입력합니다. (&lt;code&gt;source&lt;/code&gt; 명령어 뒤에 오는 경로는 Geant4를 설치한 경로에 따라 바뀔 수 있습니다)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source /opt/geant4/10.6.p02/bin/geant4.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만, 이 명령어는 실행한 이후 해당 shell이 종료될 때까지만 그 효과가 지속됩니다. 즉, 터미널을 새로 연다거나 하면 다시 환경변수 설정이 사라지게 되죠.&lt;/p&gt;
&lt;p&gt;그래서 일반적으로는 터미널을 켤 때마다 자동으로 한 번 실행되는 파일인 &lt;code&gt;~/.bashrc&lt;/code&gt; 맨 밑에 위의 명령줄을 적어둡니다. vim이나 gedit 등을 이용하여 직접 입력하셔도 되고, 다음 명령줄을 이용하여 &lt;code&gt;~/.bashrc&lt;/code&gt; 파일 맨 밑에 해당 내용이 추가되도록 하셔도 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.6.p02/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;에 추가된 내용을 새로고침하기 위해 다음 줄까지 실행하고 넘어가겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;드디어 Geant4 설치가 끝났습니다!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;제대로-설치되었는지-확인하기&#34;&gt;제대로 설치되었는지 확인하기&lt;/h2&gt;
&lt;h3 id=&#34;환경변수-확인&#34;&gt;환경변수 확인&lt;/h3&gt;
&lt;p&gt;정상적으로 설치가 완료되고 &lt;code&gt;geant.sh&lt;/code&gt; 파일이 제대로 실행되었다면, &lt;code&gt;G4...&lt;/code&gt;와 같은 형태의 환경변수가 크로스섹션 데이터를 담은 경로를 가리키고 있어야 합니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 제대로 그 경로가 출력되는지 확인할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env | grep G4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;G4env&#34; srcset=&#34;
               /g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_17846bd6732ec660a369cf341d379ff4.png 400w,
               /g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_315effa2cd254d4fae4ed70d0ec45f7b.png 760w,
               /g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_17846bd6732ec660a369cf341d379ff4.png&#34;
               width=&#34;760&#34;
               height=&#34;237&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;예제-실행해보기&#34;&gt;예제 실행해보기&lt;/h3&gt;
&lt;h4 id=&#34;예제코드-복사해오기&#34;&gt;예제코드 복사해오기&lt;/h4&gt;
&lt;p&gt;예제코드는 &lt;strong&gt;소스 코드를 압축해제한 디렉토리 안&lt;/strong&gt;에 &lt;code&gt;examples&lt;/code&gt;이라는 디렉토리에 있습니다.&lt;/p&gt;
&lt;p&gt;우리의 경우에는 &lt;code&gt;/opt/geant4/10.6.p02/geant4.10.06.p02/examples&lt;/code&gt;이 되겠군요.&lt;/p&gt;
&lt;p&gt;테스트를 위해 &lt;code&gt;basic/B1&lt;/code&gt; 이라는 예제를 복사해오고, 복사해온 디렉토리 안으로 들어가봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -r /opt/geant4/10.6.p02/geant4.10.06.p02/examples/basic/B1 .
cd B1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;예제코드-실행하기-터미널-상에서-실행&#34;&gt;예제코드 실행하기 (터미널 상에서 실행)&lt;/h4&gt;
&lt;p&gt;예제 코드 B1에는 다음과 같은 파일 및 디렉토리들이 있을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;b1example&#34; srcset=&#34;
               /g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_7d4a7c3e709907a7410a44a847981e3a.png 400w,
               /g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_18ee76eaf7f4185acfb2c13e720c090b.png 760w,
               /g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_7d4a7c3e709907a7410a44a847981e3a.png&#34;
               width=&#34;760&#34;
               height=&#34;62&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 글에서는 코드를 살펴보지는 않고, 그냥 실행만 하겠습니다.&lt;/p&gt;
&lt;p&gt;우선 빌드를 하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cmake .
make -f Makefile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림과 같이 많은 줄이 출력된 뒤, &lt;code&gt;[100%] Built target exampleB1&lt;/code&gt;까지 나오면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_make&#34; srcset=&#34;
               /g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_17cd68d9b422eed5e6f3e4cafeb0f9a8.png 400w,
               /g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_dd048309e60202728a1ae6824433bfc2.png 760w,
               /g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_17cd68d9b422eed5e6f3e4cafeb0f9a8.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이어서 실행을 해봅니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1 run1.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림처럼 또 무언가 잔뜩 출력된 뒤, &lt;code&gt;RunManagerKernel is deleted. Good bye :)&lt;/code&gt;가 출력되었다면 잘 실행된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_runmac&#34; srcset=&#34;
               /g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_da6cd447281ce0174842e444ea297f69.png 400w,
               /g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_89286e8f8b48a21807266a0cd3ecea23.png 760w,
               /g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_da6cd447281ce0174842e444ea297f69.png&#34;
               width=&#34;760&#34;
               height=&#34;689&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;예제코드-실행하기-gui-띄우기&#34;&gt;예제코드 실행하기 (GUI 띄우기)&lt;/h4&gt;
&lt;p&gt;Geant4 설치 시 Qt5와 OpenGL 설치도 함께 진행했으므로, 여러분의 우분투에 X window 관련 설정이 잘 되어있다면 다음 명령어로 GUI창도 띄워볼 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잘 실행되었다면 다음과 같은 창이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_gui&#34; srcset=&#34;
               /g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_0699a45c49f2473aff9790f41f8902d1.png 400w,
               /g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_6a288eaaa576d22b6716c29439f2bb82.png 760w,
               /g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_0699a45c49f2473aff9790f41f8902d1.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기까지 되셨다면 설치와 테스트까지 성공적으로 하신 것입니다! 고생하셨습니다.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geant4.cern.ch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Geant4 Toolkit &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gcc.gnu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GNU Compiler Collection&lt;/a&gt;(GCC)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://libexpat.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/download-qt-for-application-development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qt5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opengl.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenGL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 5. main 함수</title>
      <link>https://evandde.github.io/praccpp-005-whatismainfunc/</link>
      <pubDate>Thu, 16 Dec 2021 16:37:27 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-005-whatismainfunc/</guid>
      <description>&lt;p&gt;이 글에서는 함수에 대한 기본적인 이해와 더불어 main 함수의 역할을 알아봅니다.&lt;/p&gt;
&lt;p&gt;일단 이 글에서는 함수에 관한 문법적인 요소는 다 빼고, 개념부터 잡겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;함수(function)란, 일련의 작업과정을 하나로 묶은 것&lt;/li&gt;
&lt;li&gt;프로그램(program)이라는 것도 결국에는 그 프로그램이 수행하고자 하는 일련의 작업과정을 하나로 묶은 것이므로, &lt;strong&gt;함수&lt;/strong&gt;라고 볼 수 있음&lt;/li&gt;
&lt;li&gt;C++에서는 하나의 프로그램에 해당하는 작업과정을 하나로 묶어 &lt;b&gt;&amp;quot;main&amp;quot;&lt;/b&gt;이라는 이름의 함수로 부르자고 정해져 있음. 따라서 모든 C++ 프로그램은 &lt;strong&gt;하나의 main 함수&lt;/strong&gt;를 무조건 가지며, 컴퓨터가 &lt;strong&gt;어떤 프로그램을 실행&lt;/strong&gt;한다는 것은 &lt;strong&gt;그 프로그램의 main 함수를 실행하는 것과 동일&lt;/strong&gt;한 의미임&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;함수function&#34;&gt;함수(function)&lt;/h2&gt;
&lt;h3 id=&#34;기본이론&#34;&gt;기본이론&lt;/h3&gt;
&lt;p&gt;함수란 일련의 작업과정을 하나로 묶어서 부르는 것을 말합니다.&lt;/p&gt;
&lt;p&gt;간단한 예시로, 볼펜의 무게를 재는 방법을 &lt;b&gt;대학원생 A&lt;/b&gt;에게 설명한다고 생각해봅시다. 이 대학원생 A는 비록 아직 할 줄 아는 일은 없지만, 한 번 가르쳐주면 가르쳐준대로 완벽하게 따르는 훌륭한(?) 친구입니다.&lt;/p&gt;
&lt;p&gt;이 친구에게 볼펜의 무게를 재는 방법을 알려주기 위해 다음과 같이 말을 해주면 되겠군요.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저울을 꺼낸다.&lt;/li&gt;
&lt;li&gt;저울의 영점을 맞춘다.&lt;/li&gt;
&lt;li&gt;저울 위에 볼펜을 올린다.&lt;/li&gt;
&lt;li&gt;저울이 가리키는 값을 읽는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그런데, 볼펜의 무게를 재야 할 때마다 위와 같은 네 단계를 매 번 말해주는 것이 여간 귀찮은 일이 아닙니다. 그래서 이 네 단계의 과정을 &amp;quot;볼펜의 무게 재기&amp;quot;라는 하나의 이름으로 묶어서 말하기로 약속해 보았습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;볼펜의 무게 재기&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저울을 꺼낸다.&lt;/li&gt;
&lt;li&gt;저울의 영점을 맞춘다.&lt;/li&gt;
&lt;li&gt;저울 위에 볼펜을 올린다.&lt;/li&gt;
&lt;li&gt;저울이 가리키는 값을 읽는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;이제는 A에게 &lt;b&gt;&amp;quot;볼펜의 무게를 재라&amp;quot;&lt;/b&gt;라고만 말하면, A는 위의 네 단계를 수행할 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;이것이 함수입니다. 우리는 방금 &amp;quot;볼펜의 무게 재기&amp;quot;라는 함수를 만들었습니다.&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;함수의-입력인자&#34;&gt;함수의 입력인자&lt;/h3&gt;
&lt;p&gt;볼펜 말고도, 연필의 무게도 재볼 수 있겠군요. &amp;quot;연필의 무게 재기&amp;quot; 함수를 다음과 같이 만들면 될 것 같습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;연필의 무게 재기&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저울을 꺼낸다.&lt;/li&gt;
&lt;li&gt;저울의 영점을 맞춘다.&lt;/li&gt;
&lt;li&gt;저울 위에 &lt;strong&gt;연필&lt;/strong&gt;을 올린다.&lt;/li&gt;
&lt;li&gt;저울이 가리키는 값을 읽는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;그런데 이 함수를 만들고나서 살펴보니, &amp;quot;볼펜의 무게 재기&amp;quot;랑 거의 비슷하군요. 사실상 &lt;strong&gt;볼펜&lt;/strong&gt;을 &lt;strong&gt;연필&lt;/strong&gt;로만 바꾸었을 뿐, 다른 부분은 똑같이 반복되고 있습니다. 게다가 좀 더 생각해보면, 볼펜이나 연필 말고도 &lt;strong&gt;임의의 물건&lt;/strong&gt;에 대해 무게를 잴 때 &lt;b&gt;위와 같은 과정을 그대로 사용&lt;/b&gt;할 수 있을 것 같습니다.&lt;/p&gt;
&lt;p&gt;그래서 이렇게 바꿔보았습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;(물건)의 무게 재기&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저울을 꺼낸다.&lt;/li&gt;
&lt;li&gt;저울의 영점을 맞춘다.&lt;/li&gt;
&lt;li&gt;저울 위에 &lt;b&gt;(물건)&lt;/b&gt;을 올린다.&lt;/li&gt;
&lt;li&gt;저울이 가리키는 값을 읽는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;이렇게 좀 더 일반화된 무게 재기 함수인 &amp;quot;(물건)의 무게 재기&amp;quot;를 만들었습니다. 함수를 여러 개 만들다보면, 지금 보신 것처럼 같은 기능을 하는데 어떤 대상에 대해 수행할 지만 다른 경우가 생깁니다. 이럴 때는 &lt;strong&gt;그 대상을 일반화&lt;/strong&gt;해서 그 대상에 해당하는 부분만 바꿔 쓸 수 있도록 만들어 준 뒤, 함수를 사용할 때 &lt;b&gt;&amp;quot;~~의 무게를 재라&amp;quot;&lt;/b&gt;와 같은 방식으로 &lt;b&gt;그 대상을 집어넣어서 사용&lt;/b&gt;하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;이처럼 함수를 사용할 때 집어넣는 대상을 함수의 입력인자라고 합니다.&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;함수의-출력인자&#34;&gt;함수의 출력인자&lt;/h3&gt;
&lt;p&gt;앞서 만들어 본 &amp;quot;(물건)의 무게 재기&amp;quot;함수를 사용하여 대학원생 A에게 일을 시킵니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;나: 이 지우개의 무게를 재오세요.&lt;br&gt;
대학원생 A: 네.&lt;br&gt;
(잠시 후)&lt;br&gt;
나: 무게 재오라니까 왜 안 재오세요&amp;hellip;?&lt;br&gt;
대학원생 A: &amp;hellip;? 쟀는데요?&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;대학원생 A는 분명 지우개의 무게를 쟀습니다. 그럼에도 &amp;quot;나&amp;quot;의 요구사항은 딱히 충족된 것 같지 않군요. 그 이유는 무엇일까요? 지우개의 무게를 재고서 그 값을 대학원생 A가 읽기만하고, &lt;b&gt;&amp;quot;나&amp;quot;에게는 그 결과를 알려주지 않았기 때문&lt;/b&gt;입니다.&lt;/p&gt;
&lt;p&gt;생각해보면 앞서 만든 &amp;quot;(물건)의 무게 재기&amp;quot;라는 함수는 &lt;b&gt;무게를 재는 행위만 하고 끝날 것이 아니라&lt;/b&gt;, 측정 결과인 &lt;b&gt;무게가 얼마인지 알려줘야 할 것&lt;/b&gt; 같습니다.&lt;/p&gt;
&lt;p&gt;그래서 함수를 다음과 같이 바꿔보았습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;(물건)의 무게 재기&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저울을 꺼낸다.&lt;/li&gt;
&lt;li&gt;저울의 영점을 맞춘다.&lt;/li&gt;
&lt;li&gt;저울 위에 &lt;b&gt;(물건)&lt;/b&gt;을 올린다.&lt;/li&gt;
&lt;li&gt;저울이 가리키는 값을 읽는다.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;무게를 재달라고 한 요청자에게 저울에서 읽은 값을 알려준다.&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;이처럼 어떤 함수들은, 일련의 과정을 수행하고 나서 &lt;b&gt;그 결과로 무언가를 되돌려 줄 수 있습니다&lt;/b&gt;.
&lt;font color=red&gt;&lt;b&gt;이렇게 함수가 요청자에게 되돌려주는 결과를 함수의 출력인자라고 합니다.&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;main-함수&#34;&gt;main 함수&lt;/h2&gt;
&lt;p&gt;컴퓨터 프로그램이란 &lt;b&gt;&amp;quot;어떤 문제를 해결하기 위한 일련의 작업과정을 기술한 명령문의 집합&amp;quot;&lt;/b&gt;입니다. 가만히 생각해보면, 앞서 대학원생 A에게 했던 것과 다를 바가 없습니다. &lt;b&gt;프로그램도 결국에는 함수로 생각할 수 있다는 것&lt;/b&gt;입니다.&lt;/p&gt;
&lt;p&gt;C++ 언어에서는, 하나의 프로그램에 해당하는 작업과정을 묶어서 &lt;strong&gt;main&lt;/strong&gt;이라는 이름의 함수로 부르자고 약속을 하였습니다. 즉, C++ 언어로 만들어진 프로그램이라면, &lt;font color=red&gt;&lt;b&gt;무조건 그 프로그램의 코드에는 main 함수가 한 개 존재&lt;/b&gt;&lt;/font&gt;할 것이며, &lt;font color=red&gt;&lt;b&gt;그 프로그램이 하는 일은 main 함수에 적혀있는 일&lt;/b&gt;&lt;/font&gt;이라는 뜻입니다.&lt;/p&gt;
&lt;h3 id=&#34;main-함수의-입력인자와-출력인자&#34;&gt;main 함수의 입력인자와 출력인자&lt;/h3&gt;
&lt;p&gt;main 함수도 입력인자와 출력인자를 가지고 있습니다. 이를 임의로 바꿀 수는 없고, C++ 언어의 약속으로서 정해져 있습니다.&lt;/p&gt;
&lt;p&gt;입력인자는 그 프로그램을 실행할 때의 실행 명령 문구에 관한 정보들입니다. 이에 관해서는 좀 더 나중에 자세히 살펴보겠습니다. 생략되는 경우도 있습니다.&lt;/p&gt;
&lt;p&gt;출력인자는 그 프로그램이 맡은 일련의 작업을 다 수행한 뒤, 프로그램이 정상적으로 작동 후 종료되었는지의 여부를 알려주는 정보입니다. 생략되는 경우도 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;helloworld-프로젝트의-main-함수&#34;&gt;Helloworld 프로젝트의 main 함수&lt;/h2&gt;
&lt;p&gt;이 시리즈에서 앞서 만들었던 Helloworld 프로젝트도 하나의 C++ 프로그램입니다. 따라서, 여기에도 이 프로그램이 수행하는 내용이 담긴 &lt;b&gt;main 함수가 한 개 존재&lt;/b&gt;합니다.&lt;/p&gt;
&lt;p&gt;main 함수는 다음 그림과 같이 main이라는 이름으로 적혀있으며, main 함수가 수행할 내용은 중괄호(&lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;)로 감싸져 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_main&#34; srcset=&#34;
               /praccpp-005-whatismainfunc/01_main_hu6996c337777a651c6c691bff9186eff8_28720_a4572a3c5c648139c5497986ee6ab4ad.png 400w,
               /praccpp-005-whatismainfunc/01_main_hu6996c337777a651c6c691bff9186eff8_28720_ef909a1d5e92b2a4e4ae8bad3384b6fe.png 760w,
               /praccpp-005-whatismainfunc/01_main_hu6996c337777a651c6c691bff9186eff8_28720_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-005-whatismainfunc/01_main_hu6996c337777a651c6c691bff9186eff8_28720_a4572a3c5c648139c5497986ee6ab4ad.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 Helloworld 프로젝트의 main 함수에는 딱 한 줄만 적혀있네요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;std::cout &amp;lt;&amp;lt; &amp;quot;Hello, world!\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;우리는 이미 Helloworld 프로젝트를 실행해봤으므로, 문법을 모르더라도 이 줄이 하는 일이 무엇인지 예상할 수 있습니다. &lt;b&gt;이 줄이 하는 일은 &amp;quot;터미널 화면에 &amp;quot;Hello, world!&amp;quot;라는 문구를 출력하라&amp;quot;라는 내용이겠지요.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;지금은 이정도만 이해하셔도 충분합니다. 좀 더 문법적인 내용은 뒤에서 자세히 살펴봅시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-12-16: 최초 게시&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4 설치하기(10.7.p01, Ubuntu2004 LTS)</title>
      <link>https://evandde.github.io/g4install-107p1-ubt2004/</link>
      <pubDate>Mon, 15 Feb 2021 13:17:56 +0900</pubDate>
      <guid>https://evandde.github.io/g4install-107p1-ubt2004/</guid>
      <description>&lt;p&gt;이 글에서는 Linux계열 운영체제 중 하나인 &lt;strong&gt;Ubuntu 20.04 LTS&lt;/strong&gt;에서 &lt;strong&gt;Geant4 10.7 patch 01 버전&lt;/strong&gt;을 설치하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;설치-정보-요약&#34;&gt;설치 정보 요약&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;설치 환경&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제: Ubuntu 20.04 LTS&lt;/li&gt;
&lt;li&gt;인터넷 사용 가능&lt;/li&gt;
&lt;li&gt;관리자 권한 (&lt;code&gt;sudo&lt;/code&gt;) 이용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 대상&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geant4 10.7 patch 01 버전&lt;/li&gt;
&lt;li&gt;CLHep 라이브러리 별도 설치하여 연동&lt;/li&gt;
&lt;li&gt;Cross-section data 직접 다운로드하여 준비&lt;/li&gt;
&lt;li&gt;Multi-threading 기능 활성화&lt;/li&gt;
&lt;li&gt;UI 및 가시화 기능 활용을 위해 Qt5, X11 OpenGL 라이브러리 연동하여 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 경로&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;여러 버전의 CLHep를 설치할 경우를 고려하여, &lt;code&gt;/opt/clhep&lt;/code&gt; 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;여러 버전의 Geant4를 설치할 경우를 고려하여, &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;h3 id=&#34;geant4-관련-필수선택-라이브러리-설치&#34;&gt;Geant4 관련 필수/선택 라이브러리 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt; 패키지 매니저 최신화&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt;를 이용하여 다음 항목 설치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;CMake (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Expat (Linux, macOS에서 &lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Qt5, X11 OpenGL 라이브러리 설치 (&lt;font color=&#39;blue&#39;&gt;Geant4 설치 시 선택 라이브러리&lt;/font&gt;. GUI 등 그래픽 기반 기능 사용에 필요)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential cmake libexpat1-dev qt5-default libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;clhep-설치&#34;&gt;CLHep 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CLHep 라이브러리를 설치할 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/clhep
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, CLHep 소스코드 다운로드 (소스코드 용량 약 1.5 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/clhep
sudo wget https://proj-clhep.web.cern.ch/proj-clhep/dist1/clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;압축해제로 생성된 &lt;code&gt;2.4.4.0&lt;/code&gt; 디렉토리로 이동한 뒤, &lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 생성하고 그 안으로 이동&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd 2.4.4.0
sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 수행 (&lt;code&gt;make&lt;/code&gt; 명령은 인터넷 속도 및 cpu 성능에 따라 수 분가량 소요될 수 있음)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake를 이용하여 설정하는 방법은 본문을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../CLHEP -DCMAKE_INSTALL_PREFIX=/opt/clhep/2.4.4.0
sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cross-section-data-준비&#34;&gt;Cross-section data 준비&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geant4용 cross-section data를 넣을 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/geant4data
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, cross-section data 다운로드 (전체 데이터 용량 약 928 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/geant4data
sudo wget https://geant4-data.web.cern.ch/datasets/G4NDL.4.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4EMLOW.7.13.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PhotonEvaporation.5.7.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4RadioactiveDecay.5.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4SAIDDATA.2.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PARTICLEXS.3.1.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ABLA.3.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4INCL.1.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PII.1.3.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ENSDFSTATE.2.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제하고, 압축파일을 삭제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo find -name &amp;quot;*.gz&amp;quot; -exec tar -xf {} \;
sudo rm -rf *.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;geant4-설치&#34;&gt;Geant4 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geant4 툴킷을 설치할 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.7.p01
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, Geant4 소스코드 다운로드 (소스코드 용량 약 35 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.7.p01
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제 후 디렉토리명을 &lt;code&gt;source&lt;/code&gt;로 변경&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 만들고 안으로 이동&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 수행 (&lt;code&gt;make&lt;/code&gt; 명령은 인터넷 속도 및 cpu 성능에 따라 수 분~수 십분 소요될 수 있음)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake를 이용하여 설정하는 방법은 본문을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATADIR&lt;/code&gt;(크로스섹션 데이터 경로): &lt;code&gt;/opt/geant4/geant4data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_SYSTEM_CLHEP&lt;/code&gt;(직접 설치한 CLHep 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLHEP_DIR&lt;/code&gt;(CLHEP 경로): &lt;code&gt;/opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../geant4.10.07.p01 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.7.p01 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATADIR=/opt/geant4/geant4data -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON -DGEANT4_USE_SYSTEM_CLHEP=ON -DCLHEP_DIR=/opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0
sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;환경변수 세팅을 위해 &lt;code&gt;~/.bashrc&lt;/code&gt;에 내용 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.7.p01/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prerequisite-설치&#34;&gt;Prerequisite 설치&lt;/h2&gt;
&lt;p&gt;인터넷이 안된다거나, 관리자 권한을 사용할 수 없다거나, Ubuntu가 아니라면 이야기가 좀 달라지겠지만&amp;hellip;&lt;/p&gt;
&lt;p&gt;앞서 말한 5가지 준비물은 모두 Ubuntu에서 제공하는 패키지 관리자 &lt;code&gt;apt&lt;/code&gt;를 통해 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;(RedHat 계열의 리눅스에서도 패키지 관리자 &lt;code&gt;yum&lt;/code&gt;을 통해 유사한 명령어로 설치할 수 있습니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    패키지 관리자를 사용하기 전에 최신화를 해주세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    본인이 &lt;strong&gt;서버 등을 관리하는 사람&lt;/strong&gt;이라면, &lt;strong&gt;최신화를 할 때 주의&lt;/strong&gt;하세요. 이런 경우에는 전체 패키지를 최신화하기보다는 &lt;strong&gt;원하는 특정 패키지를 선별하여 최신화하기를 권장&lt;/strong&gt;합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;패키지-매니저-최신화&#34;&gt;패키지 매니저 최신화&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;c-컴파일러-및-표준-라이브러리-헤더-설치-gcc-등&#34;&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 설치 (GCC 등)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cmake-및-ccmake-설치&#34;&gt;CMake 및 CCMake 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y cmake cmake-curses-gui
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;expat-설치&#34;&gt;Expat 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libexpat1-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;qt5-설치&#34;&gt;Qt5 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y qt5-default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;x11-opengl-설치&#34;&gt;X11 OpenGL 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;clhep-설치하기&#34;&gt;CLHep 설치하기&lt;/h3&gt;
&lt;p&gt;이어서 CLHep을 설치합니다. CLHep 라이브러리의 경우에는, apt 레포지토리에 원하는 버전이 없는 경우가 대부분이므로 직접 소스코드를 컴파일하여 설치합니다.&lt;/p&gt;
&lt;p&gt;Geant4 10.7 버전은 CLHep 2.4.4.0 버전을 요구합니다만, Geant4 버전이 바뀜에 따라 상응하는 CLHep 버전도 변경되므로 버전별 관리를 하는 것이 추후 심신이 편합니다. 따라서, 여기서는 &lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;과 같이 버전별로 경로를 만들어 설치하도록 하겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;우선 CLHep 라이브러리를 설치할 디렉토리 생성합니다. (&lt;code&gt;/opt&lt;/code&gt;는 &lt;code&gt;sudo&lt;/code&gt; 권한이 있어야 수정할 수 있음)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/clhep
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, CLHep 소스코드를 다운로드합니다. (소스코드 용량 약 1.5 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/clhep
sudo wget https://proj-clhep.web.cern.ch/proj-clhep/dist1/clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://proj-clhep.web.cern.ch/proj-clhep/clhep23.html&#34;&gt;CLHep 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    본 글에서 다루는 2.4.4.0이 아닌 다른 버전을 설치하시는 경우에는, &lt;code&gt;wget&lt;/code&gt; 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2번 과정을 통해 받은 압축파일 &lt;code&gt;clhep-2.4.4.0.tgz&lt;/code&gt;을 압축해제합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;2.4.4.0&lt;/code&gt; 디렉토리가 생성되며 압축이 해제됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;생성된 &lt;code&gt;2.4.4.0&lt;/code&gt; 디렉토리로 이동합니다. 이어서, 빌드를 수행하며 생기는 부산물을 보관하기 위한 &lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 생성하고 그 안으로 이동합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd 2.4.4.0
sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ccmake&lt;/code&gt; 명령어를 통해 Makefile 생성 작업을 진행합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake란 cmake 작업에 요구되는 옵션을 UI형태로 보여주며 작업하게 해주는 프로그램입니다. 옵션명과 인자를 정확하게 알고있다면, &lt;code&gt;cmake&lt;/code&gt; 명령어를 이용하여 한번에 진행할 수도 있습니다. 이 명령줄은 위의 &lt;a href=&#34;#tldr&#34;&gt;TL;DR&lt;/a&gt; 부분을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;우선 ccmake를 실행하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ccmake ../CLHEP
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음과 같은 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;clhep_ccmake_01&#34; srcset=&#34;
               /g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_4e0cb3dd35c344d92562c60211fd0890.png 400w,
               /g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_c00be5ad0d5d99c9bc512fc1b0903376.png 760w,
               /g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_4e0cb3dd35c344d92562c60211fd0890.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;맨 처음 ccmake 프로그램을 실행하면, 기존 작업내용이 없어서 &lt;strong&gt;EMPTY CACHE&lt;/strong&gt;가 출력되고, 화면 아래에 보이는 바와 같이 키보드 [c]를 누르면 configure 작업이 수행되고, [q]를 누르면 종료되는 식입니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;이어서 다음의 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;clhep_ccmake_02&#34; srcset=&#34;
               /g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_3301190ac3c619396bee2b2a16c915ec.png 400w,
               /g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_32484eb861b4d0873ad6faa4cfe3b008.png 760w,
               /g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_3301190ac3c619396bee2b2a16c915ec.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; 항목이 CLHep을 설치할 경로를 설정하는 인자입니다. 우리는 이 값을 &lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;으로 변경하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;위아래 화살표키로 항목 간 이동이 가능하며, 엔터를 한 번 누르면 수정 모드로 변경되고, 내용 입력 후 다시 엔터를 한 번 누르면 확정됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;입력을 마친 뒤 [c] 키를 한번 더 누르면 다음과 같이 화면이 바뀝니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;clhep_ccmake_03&#34; srcset=&#34;
               /g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_f3dfa9ce4305f774982fd360bc78194b.png 400w,
               /g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_9ca136f51a35c446a4ab9ddc8b5ed1ca.png 760w,
               /g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_f3dfa9ce4305f774982fd360bc78194b.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;새로 생긴 &lt;b&gt;[g]&lt;/b&gt;를 눌러 Makefile을 생성합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 컴파일 및 설치작업을 진행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어는 &lt;code&gt;-j &amp;lt;쓰레드 수&amp;gt;&lt;/code&gt; 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어에서 &lt;code&gt;-j&lt;/code&gt; 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 &lt;code&gt;cc1plus&lt;/code&gt; 관련 에러가 발생할 수 있습니다. &lt;code&gt;-j&lt;/code&gt; 옵션에 적절한 숫자는 &lt;b&gt;자신의 쓰레드 수 * 1.2&lt;/b&gt; 입니다. 여기서는 사용자 컴퓨터의 쓰레드 수를 가져오는 명령어인 &lt;code&gt;grep -c processor /proc/cpuinfo&lt;/code&gt;를 이용하여 자동으로 숫자가 입력되게 하였습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt; 명령을 수행하면 퍼센트가 올라가며 컴파일이 수행될 것입니다. 이는 CPU 성능에 따라 수십 초 ~ 수 분 가량 소요될 수 있으니 잠시 휴식을 취하시면 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cross-section-data-준비하기&#34;&gt;Cross-section data 준비하기&lt;/h2&gt;
&lt;p&gt;Geant4를 설치하려면 cross-section data가 필요합니다. 이를 준비하는 방법은 두 가지 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;사용자가 직접 다운받아서 압축 풀어서 준비.&lt;/li&gt;
&lt;li&gt;설치 과정에서 자동으로 다운로드.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;무엇을 택하든 크게 상관은 없습니다만, 여기서는 1번 방법에 해당하는 직접 준비를 해보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;geant4-cross-section-data-디렉토리-생성&#34;&gt;Geant4 cross-section data 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;Cross-section data가 저장될 디렉토리를 생성한 뒤 이동합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/geant4data
cd /opt/geant4/geant4data
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;data-다운로드&#34;&gt;Data 다운로드&lt;/h3&gt;
&lt;p&gt;Cross-section data를 다운로드합니다. (총 10가지. 전체 데이터 용량 약 928 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo wget https://geant4-data.web.cern.ch/datasets/G4NDL.4.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4EMLOW.7.13.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PhotonEvaporation.5.7.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4RadioactiveDecay.5.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4SAIDDATA.2.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PARTICLEXS.3.1.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ABLA.3.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4INCL.1.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PII.1.3.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ENSDFSTATE.2.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34;&gt;Geant4 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;위에 적힌 10가지 외에 G4RealSurface, G4TENDL, LEND 데이터가 있습니다만, 이는 필수가 아닌 옵션이므로 여기서는 생략하겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;압축-해제&#34;&gt;압축 해제&lt;/h3&gt;
&lt;p&gt;10개의 파일을 하나하나 압축 해제하기 귀찮으므로, &lt;code&gt;find&lt;/code&gt; 명령어를 활용하여 일괄 해제 하는 명령어를 적어드립니다.&lt;/p&gt;
&lt;p&gt;이후 불필요한 압축파일(&lt;code&gt;*.gz&lt;/code&gt;)은 삭제해도 괜찮습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo find -name &amp;quot;*.gz&amp;quot; -exec tar -xf {} \;
sudo rm -rf *.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-설치하기&#34;&gt;Geant4 설치하기&lt;/h2&gt;
&lt;p&gt;이제 준비가 다 되었습니다. 이어서 Geant4를 설치해봅시다.&lt;/p&gt;
&lt;p&gt;우리가 설치하고자 하는 경로는 &lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;입니다. 앞서 말씀드린 것처럼, 여러 버전의 Geant4를 설치할 경우를 고려하여 &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전명에 해당하는 디렉토리를 두어 세분화한 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;설치를-위한-디렉토리-생성&#34;&gt;설치를 위한 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;우선 해당 디렉토리를 생성하기 위해 다음 명령어를 입력합니다. (&lt;code&gt;/opt&lt;/code&gt;는 관리자 권한이 있어야 수정할 수 있음)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.7.p01
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;geant4-소스코드-다운로드&#34;&gt;Geant4 소스코드 다운로드&lt;/h3&gt;
&lt;p&gt;이어서, 해당 디렉토리로 이동한 뒤 Geant4 소스코드를 다운 받겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.7.p01
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.07.p01.tar.gz 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34;&gt;Geant4 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    본 글에서 다루는 10.7.p01와 다른 버전을 설치하시는 경우에는, &lt;code&gt;wget&lt;/code&gt; 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;소스코드-압축-해제&#34;&gt;소스코드 압축 해제&lt;/h3&gt;
&lt;p&gt;위 과정을 통해 &lt;code&gt;geant4.10.07.p01.tar.gz&lt;/code&gt;라는 압축파일을 다운받으셨을 것입니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 해당 파일의 압축을 해제합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;geant4.10.07.p01&lt;/code&gt;라는 디렉토리가 생성되고 그 안에 압축이 풀리게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드를-위한-build-디렉토리-생성&#34;&gt;빌드를 위한 build 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;빌드를 수행하면 CMake와 관련된 잡다한 부산물이 생성됩니다. 관리의 용이성을 위해, 별도의 &lt;code&gt;build&lt;/code&gt;라는 디렉토리를 만들고 이 안에서 컴파일을 수행하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cmake-수행-ccmake-활용&#34;&gt;CMake 수행 (ccmake 활용)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ccmake&lt;/code&gt; 명령어를 통해 Makefile 생성 작업을 진행합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake란 cmake 작업에 요구되는 옵션을 UI형태로 보여주며 작업하게 해주는 프로그램입니다. 옵션명과 인자를 정확하게 알고있다면, &lt;code&gt;cmake&lt;/code&gt; 명령어를 이용하여 한번에 진행할 수도 있습니다. 이 명령줄은 위의 &lt;a href=&#34;#tldr&#34;&gt;TL;DR&lt;/a&gt; 부분을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;우선 ccmake를 실행하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ccmake ../geant4.10.07.p01
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음과 같은 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_01&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_76737fcb125ccdba69d2fa4b2cd05c16.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_2991042f60e0aee410ad5d4e0d6f3334.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_76737fcb125ccdba69d2fa4b2cd05c16.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;CLHep때와 마찬가지 모습입니다. &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;이어서 다음의 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_02&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_bd1863bbeb1656287ea49d5cc76aae9d.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_f757ab3b85d01d0e815e46918622d8e4.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_bd1863bbeb1656287ea49d5cc76aae9d.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Geant4 설치를 위한 cross-section data가 어디있는지 못찾겠다는 문구입니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[e]&lt;/b&gt;를 눌러 설정화면으로 돌아옵니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_03&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_72aa0aadff1cb612fb145844cd0a4c36.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_928b95ca5e79c61325eb0a96f35f1f0c.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_72aa0aadff1cb612fb145844cd0a4c36.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 화면에서 우리는 Geant4 설치에 관한 여러가지 인자를 조정할 수 있습니다. 이 글에서는 앞서 설명했던 설치조건에 맞추어 다음 항목들을 변경할 것입니다. 그림의 빨간 체크표시 된 값들을 참고하세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATADIR&lt;/code&gt;(크로스섹션 데이터 경로): &lt;code&gt;/opt/geant4/geant4data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_SYSTEM_CLHEP&lt;/code&gt;(직접 설치한 CLHep 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이후 &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;또 다른 에러가 뜰 것입니다. CLHep을 직접 설치한 것으로 연동하겠다고 하였는데, CLHep이 어디에 있는지 못찾겠다는 에러입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_04&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_dd82850956399746fdc560ead7ca52f5.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_dfe6d831f125d0bc7f245be19f22a297.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_dd82850956399746fdc560ead7ca52f5.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 그림과 같이 &lt;code&gt;CLHEP_DIR&lt;/code&gt;을 변경해줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_05&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_9c6c993b07dd993e1e1b203ef7c73bcb.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_40054a229e7220ff885bd3840c92b680.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_9c6c993b07dd993e1e1b203ef7c73bcb.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CLHEP_DIR&lt;/code&gt;(CLHEP 경로): &lt;code&gt;/opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이제 다시 &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행하면, 에러는 뜨지 않고 Qt5 관련 경로가 알아서 잡힌 모습이 뜨게 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_06&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_70d6973712e75ca60f2dd7c572ac00d0.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_9a355fb915cbea90489c74626f8cf484.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_70d6973712e75ca60f2dd7c572ac00d0.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;마지막으로 한번 더 &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다. 이제 드디어 &lt;b&gt;[g]&lt;/b&gt; 버튼이 나타났습니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[g]&lt;/b&gt;를 눌러 Makefile을 생성합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_07&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_bbc78dc6b0f753c56293c5c205abe5c5.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_888af432a20400bc53efcf854c2a2a6e.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_bbc78dc6b0f753c56293c5c205abe5c5.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;컴파일-및-설치작업&#34;&gt;컴파일 및 설치작업&lt;/h3&gt;
&lt;p&gt;이제 컴파일 및 설치작업을 진행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어는 &lt;code&gt;-j &amp;lt;쓰레드 수&amp;gt;&lt;/code&gt; 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어에서 &lt;code&gt;-j&lt;/code&gt; 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 &lt;code&gt;cc1plus&lt;/code&gt; 관련 에러가 발생할 수 있습니다. &lt;code&gt;-j&lt;/code&gt; 옵션에 적절한 숫자는 &lt;b&gt;자신의 쓰레드 수 * 1.2&lt;/b&gt; 입니다. 여기서는 사용자 컴퓨터의 쓰레드 수를 가져오는 명령어인 &lt;code&gt;grep -c processor /proc/cpuinfo&lt;/code&gt;를 이용하여 자동으로 숫자가 입력되게 하였습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt; 명령을 수행하면 퍼센트가 올라가며 컴파일이 수행될 것입니다. 이는 CPU 성능에 따라 수 분 ~ 수십 분 가량 소요될 수 있으니 푹 쉬고 오세요.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_make&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_3c06c5e6fcf6257e69fab880cffdc488.png 400w,
               /g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_6ae17510a0ce4e1dd6808c054a5bd49a.png 760w,
               /g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_3c06c5e6fcf6257e69fab880cffdc488.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;환경변수-설정&#34;&gt;환경변수 설정&lt;/h2&gt;
&lt;p&gt;Geant4 툴킷을 설치하고나면 마지막으로 할 일이 있습니다. 바로 &lt;strong&gt;환경변수를 설정&lt;/strong&gt;하는 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4 사용을 위해 컴퓨터에게 알려줘야 하는 초기값들이 몇 가지 있습니다만, 이를 정리하여 한 번에 자동으로 설정이 되게끔하는 파일을 Geant4에서 제공하고 있습니다.&lt;/p&gt;
&lt;p&gt;설치경로의 내부에 있는 &lt;code&gt;bin/geant4.sh&lt;/code&gt;라는 파일입니다. (C-shell을 이용하시는 분은 &lt;code&gt;bin/geant4.csh&lt;/code&gt;를 이용합니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Geant4가 여러 버전으로 설치되어 있는 경우, 원하는 버전의 &lt;code&gt;bin/geant4.sh&lt;/code&gt;를 실행함으로써 해당 버전으로 동작하도록 설정할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;실행을 위해서는 다음 명령어를 입력합니다. (&lt;code&gt;source&lt;/code&gt; 명령어 뒤에 오는 경로는 Geant4를 설치한 경로에 따라 바뀔 수 있습니다)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source /opt/geant4/10.7.p01/bin/geant4.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만, 이 명령어는 실행한 이후 해당 shell이 종료될 때까지만 그 효과가 지속됩니다. 즉, 터미널을 새로 연다거나 하면 다시 환경변수 설정이 사라지게 되죠.&lt;/p&gt;
&lt;p&gt;그래서 일반적으로는 터미널을 켤 때마다 자동으로 한 번 실행되는 파일인 &lt;code&gt;~/.bashrc&lt;/code&gt; 맨 밑에 위의 명령줄을 적어둡니다. vim이나 gedit 등을 이용하여 직접 입력하셔도 되고, 다음 명령줄을 이용하여 &lt;code&gt;~/.bashrc&lt;/code&gt; 파일 맨 밑에 해당 내용이 추가되도록 하셔도 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.7.p01/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;에 추가된 내용을 새로고침하기 위해 다음 줄까지 실행하고 넘어가겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;드디어 Geant4 설치가 끝났습니다!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;제대로-설치되었는지-확인하기&#34;&gt;제대로 설치되었는지 확인하기&lt;/h2&gt;
&lt;h3 id=&#34;환경변수-확인&#34;&gt;환경변수 확인&lt;/h3&gt;
&lt;p&gt;정상적으로 설치가 완료되고 &lt;code&gt;geant.sh&lt;/code&gt; 파일이 제대로 실행되었다면, &lt;code&gt;G4...&lt;/code&gt;와 같은 형태의 환경변수가 크로스섹션 데이터를 담은 경로를 가리키고 있어야 합니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 제대로 그 경로가 출력되는지 확인할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env | grep G4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;G4env&#34; srcset=&#34;
               /g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_16edc7888164cea188874f79172c5740.png 400w,
               /g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_4fb9ec7a8519c1ddf5ad065bb1f06e1a.png 760w,
               /g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_16edc7888164cea188874f79172c5740.png&#34;
               width=&#34;553&#34;
               height=&#34;207&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;예제-실행해보기&#34;&gt;예제 실행해보기&lt;/h3&gt;
&lt;h4 id=&#34;예제코드-복사해오기&#34;&gt;예제코드 복사해오기&lt;/h4&gt;
&lt;p&gt;예제코드는 &lt;strong&gt;소스 코드를 압축해제한 디렉토리 안&lt;/strong&gt;에 &lt;code&gt;examples&lt;/code&gt;이라는 디렉토리에 있습니다.&lt;/p&gt;
&lt;p&gt;우리의 경우에는 &lt;code&gt;/opt/geant4/10.7.p01/geant4.10.07.p01/examples&lt;/code&gt;이 되겠군요.&lt;/p&gt;
&lt;p&gt;테스트를 위해 &lt;code&gt;basic/B1&lt;/code&gt; 이라는 예제를 복사해오고, 복사해온 디렉토리 안으로 들어가봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -r /opt/geant4/10.7.p01/geant4.10.07.p01/examples/basic/B1 .
cd B1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;예제코드-실행하기-터미널-상에서-실행&#34;&gt;예제코드 실행하기 (터미널 상에서 실행)&lt;/h4&gt;
&lt;p&gt;예제 코드 B1에는 다음과 같은 파일 및 디렉토리들이 있을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;b1example&#34; srcset=&#34;
               /g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_b2cb51134c96c03949161a50675a23d6.png 400w,
               /g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_81d1e10585c322f0bfd9cb50d26864c6.png 760w,
               /g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_b2cb51134c96c03949161a50675a23d6.png&#34;
               width=&#34;760&#34;
               height=&#34;58&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 글에서는 코드를 살펴보지는 않고, 그냥 실행만 하겠습니다.&lt;/p&gt;
&lt;p&gt;우선 빌드를 하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cmake .
make -f Makefile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림과 같이 많은 줄이 출력된 뒤, &lt;code&gt;[100%] Built target exampleB1&lt;/code&gt;까지 나오면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_make&#34; srcset=&#34;
               /g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_6833b0b3a183e190c2bb5cb356d50674.png 400w,
               /g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_af4c9ae0e0bd3122b8dc2f296f621cbe.png 760w,
               /g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_6833b0b3a183e190c2bb5cb356d50674.png&#34;
               width=&#34;760&#34;
               height=&#34;710&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이어서 실행을 해봅니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1 run1.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림처럼 또 무언가 잔뜩 출력된 뒤, &lt;code&gt;RunManagerKernel is deleted. Good bye :)&lt;/code&gt;가 출력되었다면 잘 실행된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_runmac&#34; srcset=&#34;
               /g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_a68af86c674bbfccbc4b109ba308c75e.png 400w,
               /g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_ac95731d6ca0c981df40e5113eb6e252.png 760w,
               /g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_a68af86c674bbfccbc4b109ba308c75e.png&#34;
               width=&#34;760&#34;
               height=&#34;529&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;예제코드-실행하기-gui-띄우기&#34;&gt;예제코드 실행하기 (GUI 띄우기)&lt;/h4&gt;
&lt;p&gt;Geant4 설치 시 Qt5와 OpenGL 설치도 함께 진행했으므로, 여러분의 우분투에 X window 관련 설정이 잘 되어있다면 다음 명령어로 GUI창도 띄워볼 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잘 실행되었다면 다음과 같은 창이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_gui&#34; srcset=&#34;
               /g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_bc5709bcab8d2dd211fc73f6672ae9b1.png 400w,
               /g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_d6d3c1730a40ac97bcbc8f32c5d97d4f.png 760w,
               /g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_bc5709bcab8d2dd211fc73f6672ae9b1.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기까지 되셨다면 설치와 테스트까지 성공적으로 하신 것입니다! 고생하셨습니다.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geant4.cern.ch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Geant4 Toolkit &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gcc.gnu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GNU Compiler Collection&lt;/a&gt;(GCC)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://libexpat.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/download-qt-for-application-development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qt5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opengl.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenGL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 6. 주석(comment)</title>
      <link>https://evandde.github.io/praccpp-006-comment/</link>
      <pubDate>Fri, 07 Jan 2022 16:23:33 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-006-comment/</guid>
      <description>&lt;p&gt;이 글에서는 C++ 코드에서의 주석에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;주석(Comment)이란 사람만 볼 수 있게끔 적는 메모&lt;/li&gt;
&lt;li&gt;한 줄짜리 주석은 &lt;code&gt;//&lt;/code&gt; 표시를 이용. &lt;code&gt;//&lt;/code&gt; 표시 이후 그 줄이 끝날 때까지의 내용이 주석처리되는 식. 예를 들면, &lt;code&gt;// 주석으로 적을 내용&lt;/code&gt;의 형태로 작성&lt;/li&gt;
&lt;li&gt;여러 줄짜리 주석은 &lt;code&gt;/*&lt;/code&gt;과 &lt;code&gt;*/&lt;/code&gt; 표시를 이용. &lt;code&gt;/*&lt;/code&gt; 표시 이후부터 &lt;code&gt;*/&lt;/code&gt; 표시 이전까지의 내용이 주석처리되는 식. 예를 들면, &lt;code&gt;/* 주석으로 적을 내용 */&lt;/code&gt;의 형태로 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;주석comment&#34;&gt;주석(Comment)&lt;/h2&gt;
&lt;p&gt;주석이란 &lt;strong&gt;사람이 C++ 코드를 이해하기 쉽도록 돕기 위해 적어놓는 설명&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;C++ 코드를 보자마자 코드의 구조, 내용, 원리가 한 눈에 들어오는 능력자도 있겠지만, 저처럼 코드를 한참 들여다봐야 간신히 그 내용이 이해가 되는 불쌍한 중생도 있겠지요. 만약 코드에 대한 설명을 사람의 언어(한국어든 영어든)로 풀어서 메모해 둔다면, 누가 그 코드를 보더라도 그 코드가 무슨 역할을 하기 위해 작성된 것인지 금방 이해할 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;이런 메모는 C++ 언어가 아니라 사람의 언어로 적을 것이므로, 컴파일러가 이 메모를 무시하도록 해 주어야합니다. 그렇지 않으면 &amp;quot;이 내용은 C++ 문법에 맞지 않습니다&amp;quot;라며 에러를 띄울 것이기 때문이죠.&lt;/p&gt;
&lt;p&gt;이렇게 컴파일러는 내용을 무시하고 넘어가게끔 하되 &lt;strong&gt;사람만 알아볼 수 있도록 적어두는 메모&lt;/strong&gt;를 &lt;strong&gt;주석&lt;/strong&gt;이라고 합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;간혹, 한글로 주석을 적을 경우 유니코드 관련 문제로 인해 오류가 발생하거나 폰트가 깨지는 등의 문제가 발생할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 이해를 돕고자 한글 주석을 사용하지만, 이후에는 되도록 영어 주석으로 진행할 예정입니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;한-줄짜리-주석&#34;&gt;한 줄짜리 주석(&lt;code&gt;//&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;한 줄짜리 주석은 &lt;code&gt;//&lt;/code&gt; 표시를 이용하여 작성합니다. 줄의 어느 위치에서든 쓸 수 있으며, &lt;code&gt;//&lt;/code&gt; 표시 이후로 그 줄이 끝날 때(줄바꿈)까지의 모든 내용이 주석처리됩니다. 예를 들어 코드로 보면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

int main(int, char**) {
    // 이 부분은 주석입니다.
    // 다음 줄은 화면에 Hello, world!라는 문구를 표시하는 코드입니다.
    std::cout &amp;lt;&amp;lt; &amp;quot;Hello, world!\n&amp;quot;; // 이렇게 코드에 이어서 쓸 수도 있습니다.
}

// main 함수 바깥에도 쓸 수 있습니다.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_linecomment&#34; srcset=&#34;
               /praccpp-006-comment/01_linecomment_hu0dae6e31c7be37e1bd58b130fff5cb0f_17491_710e1e859819b5680fe86bf7766fc58f.png 400w,
               /praccpp-006-comment/01_linecomment_hu0dae6e31c7be37e1bd58b130fff5cb0f_17491_36a5465a5f08e0586a47e3884a960932.png 760w,
               /praccpp-006-comment/01_linecomment_hu0dae6e31c7be37e1bd58b130fff5cb0f_17491_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-006-comment/01_linecomment_hu0dae6e31c7be37e1bd58b130fff5cb0f_17491_710e1e859819b5680fe86bf7766fc58f.png&#34;
               width=&#34;744&#34;
               height=&#34;271&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이와 같이 작성하고 실행해보시면, 이전과 완전히 동일한 결과를 얻을 것입니다.
컴파일러는 주석을 무시하기 때문에 코드 내용 상 변화가 없는 것이나 마찬가지이기 때문입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_runresult&#34; srcset=&#34;
               /praccpp-006-comment/03_runresult_hud82ddfc522d9f9665387429ccfb8dde0_8358_e0ea3814e5e5bba50823e3efef8d029d.png 400w,
               /praccpp-006-comment/03_runresult_hud82ddfc522d9f9665387429ccfb8dde0_8358_a036bfc9d6e36b6e528ef8706fd8eb5e.png 760w,
               /praccpp-006-comment/03_runresult_hud82ddfc522d9f9665387429ccfb8dde0_8358_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-006-comment/03_runresult_hud82ddfc522d9f9665387429ccfb8dde0_8358_e0ea3814e5e5bba50823e3efef8d029d.png&#34;
               width=&#34;601&#34;
               height=&#34;207&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;여러-줄짜리-주석-&#34;&gt;여러 줄짜리 주석(&lt;code&gt;/*&lt;/code&gt;, &lt;code&gt;*/&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;여러 줄짜리 주석은 &lt;code&gt;/*&lt;/code&gt; 표시로 시작하여 &lt;code&gt;*/&lt;/code&gt; 표시로 끝나는 형태로 작성합니다. &lt;code&gt;/*&lt;/code&gt;와 &lt;code&gt;*/&lt;/code&gt; 표시는 어느 위치에서든 쓸 수 있으며, 그 사이의 모든 내용이 주석처리됩니다. 예를 들어 코드로 보면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

/* 이 부분은 주석처리 되는 부분입니다.
이렇게 줄바꿈을 해도 여전히 주석입니다.
계속 주석처리 되고 있는 중입니다.
...
이제 주석을 끝내보겠습니다. */

int main(int, char**) {
    /* 이렇게 한 줄만 주석처리해도 됩니다.*/
    std::cout &amp;lt;&amp;lt; &amp;quot;Hello, world!\n&amp;quot;;
    /*
    여러 줄로 
    길게 설명을 
    해야 할 때에 
    활용해보세요
    */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_multilinecomment&#34; srcset=&#34;
               /praccpp-006-comment/02_multilinecomment_hua4ceae26b126b6f82fe045fd7f397d2f_14699_7fab626627f22095aeb132322df6851c.png 400w,
               /praccpp-006-comment/02_multilinecomment_hua4ceae26b126b6f82fe045fd7f397d2f_14699_9d331d04c1015dbd4586a113e0c72681.png 760w,
               /praccpp-006-comment/02_multilinecomment_hua4ceae26b126b6f82fe045fd7f397d2f_14699_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-006-comment/02_multilinecomment_hua4ceae26b126b6f82fe045fd7f397d2f_14699_7fab626627f22095aeb132322df6851c.png&#34;
               width=&#34;462&#34;
               height=&#34;479&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;마찬가지로, 실행해보시면 동일한 결과를 얻을 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_runresult&#34; srcset=&#34;
               /praccpp-006-comment/03_runresult_hud82ddfc522d9f9665387429ccfb8dde0_8358_e0ea3814e5e5bba50823e3efef8d029d.png 400w,
               /praccpp-006-comment/03_runresult_hud82ddfc522d9f9665387429ccfb8dde0_8358_a036bfc9d6e36b6e528ef8706fd8eb5e.png 760w,
               /praccpp-006-comment/03_runresult_hud82ddfc522d9f9665387429ccfb8dde0_8358_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-006-comment/03_runresult_hud82ddfc522d9f9665387429ccfb8dde0_8358_e0ea3814e5e5bba50823e3efef8d029d.png&#34;
               width=&#34;601&#34;
               height=&#34;207&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2022-01-07: 최초 게시&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 7. 자료형(type)</title>
      <link>https://evandde.github.io/praccpp-007-type/</link>
      <pubDate>Thu, 30 Dec 2021 10:28:53 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-007-type/</guid>
      <description>&lt;p&gt;이 글에서는 C++의 근간이 되는 개념인 &lt;strong&gt;자료형&lt;/strong&gt;에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++은 자료형 기반의 언어임. C++에서 사용되는 모든 데이터는 어떤 자료형인지 명확하게 정해져 있어야만 함&lt;/li&gt;
&lt;li&gt;대표적인 기본 자료형 &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;std::string&lt;/code&gt;  정도는 기억할 것&lt;/li&gt;
&lt;li&gt;대부분의 경우, 숫자 형태의 데이터는 &lt;code&gt;int&lt;/code&gt;나 &lt;code&gt;double&lt;/code&gt;로, 문자 형태의 데이터는 &lt;code&gt;&amp;quot;&lt;/code&gt;(큰따옴표)로 묶어서 &lt;code&gt;std::string&lt;/code&gt; 자료형으로 다룸&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;자료형&#34;&gt;자료형&lt;/h2&gt;
&lt;p&gt;C++에서 &lt;b&gt;자료형(type)&lt;/b&gt;이라는 개념은 매우 중요합니다. C++ 언어로 짜여진 코드를 컴파일 하기 위해서는, 코드 내의 모든 변수, 함수의 입력인자, 함수의 출력인자의 자료형이 정해져 있어야만 합니다.&lt;/p&gt;
&lt;p&gt;자료형이란 말그대로 데이터가 어떤 종류의 자료인지를 설명하는 것입니다. 예를 들어 &lt;code&gt;3&lt;/code&gt;은 &lt;strong&gt;정수&lt;/strong&gt;라는 종류로, &lt;code&gt;-1.8&lt;/code&gt;은 &lt;strong&gt;실수&lt;/strong&gt;라는 종류로, &lt;code&gt;&#39;c&#39;&lt;/code&gt;는 &lt;strong&gt;문자&lt;/strong&gt;라는 종류로 분류해볼 수 있겠네요. 이렇게 분류에 사용한 개념인 &lt;b&gt;정수, 실수, 문자&lt;/b&gt;같은 것을 자료형이라고 합니다.&lt;/p&gt;
&lt;p&gt;C++에는 언어 자체적으로 제공하는 몇 가지의 기본자료형(built-in type)이 있어, 간단한 데이터에 대해서는 이 기본자료형으로 자료형을 정해줄 수 있습니다.&lt;/p&gt;
&lt;p&gt;만약 기본자료형으로 부족함을 느끼신다면, 여러분이 직접 자료형을 만들어서 사용할 수도 있습니다. 이를 클래스(class)라고 합니다. 이에 대해서는 나중에 다루겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;기본자료형&#34;&gt;기본자료형&lt;/h2&gt;
&lt;p&gt;기본자료형에도 많은 종류가 있습니다. 예를 들면 정수를 저장하더라도, 크기가 작은 정수를 저장할 때에는 메모리 공간을 조금만 써도 되니 일종의 &lt;b&gt;작은 정수&lt;/b&gt;라는 자료형도 있고, 크기가 큰 정수를 저장해야 할 때에는 &lt;b&gt;큰 정수&lt;/b&gt;라는 자료형에 저장하는 식입니다.&lt;/p&gt;
&lt;p&gt;하지만 이 시리즈에서는 그렇게 세세하게 다 살펴보지는 않을 것입니다. 그냥 대중적으로 쓰이는 &lt;b&gt;기본자료형 5가지만 기억&lt;/b&gt;하고 가겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;bool&#34;&gt;bool&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bool&lt;/code&gt;은 &lt;b&gt;참(true)&lt;/b&gt;과 &lt;b&gt;거짓(false)&lt;/b&gt;이라는 두 가지 데이터를 담당하는 자료형입니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;b&gt;&amp;quot;3은 5보다 작다&amp;quot;&lt;/b&gt;라는 내용이 있다면, 우리는 이것을 보고 참(true)이라고 생각할 것입니다. 그렇다면 &lt;b&gt;&amp;quot;3은 5보다 작다&amp;quot;&lt;/b&gt;라는 내용은 &lt;code&gt;bool&lt;/code&gt; 자료형의 데이터라고 볼 수 있는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;int&#34;&gt;int&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt;는 &lt;strong&gt;정수&lt;/strong&gt;를 담당하는 자료형입니다. &lt;code&gt;-153&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;22&lt;/code&gt;, &amp;hellip; 등 소수점 이하를 가지지 않는 정수를 C++에서는 &lt;code&gt;int&lt;/code&gt; 자료형으로 구분합니다.&lt;/p&gt;
&lt;h3 id=&#34;double&#34;&gt;double&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;double&lt;/code&gt;은 &lt;strong&gt;실수&lt;/strong&gt;를 담당하는 자료형입니다. &lt;code&gt;-3.2&lt;/code&gt;, &lt;code&gt;0.72351&lt;/code&gt;, &amp;hellip; 등 소수점 이하를 가지는 실수를 C++에서는 &lt;code&gt;double&lt;/code&gt; 자료형으로 구분합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;수학적으로는 정수 값이라고 여겨지더라도, C++에서는 소수점 이하를 가진다면 &lt;code&gt;int&lt;/code&gt;가 아니라 &lt;code&gt;double&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;3&lt;/code&gt;은 &lt;code&gt;int&lt;/code&gt; 자료형이지만, &lt;code&gt;3.0&lt;/code&gt;은 &lt;code&gt;double&lt;/code&gt; 자료형입니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;char&#34;&gt;char&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;char&lt;/code&gt;는 한 글자의 문자를 담당하는 자료형입니다. &lt;code&gt;&#39;&lt;/code&gt;(작은따옴표) 표시로 감싸진 한 글자의 문자만 이에 해당합니다.&lt;/p&gt;
&lt;p&gt;예를 들면, &lt;code&gt;&#39;a&#39;&lt;/code&gt;, &lt;code&gt;&#39;T&#39;&lt;/code&gt;, &lt;code&gt;&#39;1&#39;&lt;/code&gt;, &lt;code&gt;&#39;.&#39;&lt;/code&gt;, &amp;hellip; 등과 같은 데이터가 &lt;code&gt;char&lt;/code&gt; 자료형입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;code&gt;1&lt;/code&gt;과 &lt;code&gt;1.0&lt;/code&gt;과 &lt;code&gt;&#39;1&#39;&lt;/code&gt;은 C++ 입장에서 전혀 다른 데이터입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1&lt;/code&gt;은 정수 1로서, &lt;code&gt;int&lt;/code&gt; 자료형입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.0&lt;/code&gt;은 실수 1.0으로서, &lt;code&gt;double&lt;/code&gt; 자료형입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;1&#39;&lt;/code&gt;은 1이라는 모양을 가진 글자 한 개로서, &lt;code&gt;char&lt;/code&gt; 자료형입니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;stdstring&#34;&gt;std::string&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;std::string&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;은 문자들로 구성된 글 데이터를 담당하는 자료형입니다. &lt;code&gt;&amp;quot;&lt;/code&gt;(큰따옴표) 표시로 감싸진 문자들을 말합니다. 이를 프로그래밍에서는 &lt;strong&gt;문자열&lt;/strong&gt;이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;예를 들면, &lt;code&gt;&amp;quot;ABC&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Hi.&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Hello, world!&amp;quot;&lt;/code&gt;, &amp;hellip; 등과 같은 데이터가 &lt;code&gt;std::string&lt;/code&gt; 자료형입니다.&lt;/p&gt;
&lt;p&gt;최근의 C++에서 글자로 구성된 데이터를 다룰 때에는 대부분 &lt;code&gt;std::string&lt;/code&gt;을 쓰는 추세입니다. 심지어 한 글자의 문자를 저장할 때에도, &lt;code&gt;char&lt;/code&gt;보다는 &lt;code&gt;std::string&lt;/code&gt; 자료형을 사용하지요.
&lt;code&gt;char&lt;/code&gt;이라는 자료형은 &lt;b&gt;이 데이터는 무조건 한 글자의 문자&lt;/b&gt;라는 것이 명확한 경우에 사용될 뿐, 대부분 문자 형태의 데이터를 다룰 때에는 &lt;code&gt;std::string&lt;/code&gt; 자료형을 쓴다고 보시면 됩니다.&lt;/p&gt;
&lt;p&gt;다만, 최적화의 목적등을 위해 사용하는 경우도 있고, 혹은 이전부터 사용하던 함수에서 &lt;code&gt;char&lt;/code&gt;을 보게 될 일도 꽤 많으므로, 둘 다 기억해두시기 바랍니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;C++에서는 &lt;code&gt;&#39;&lt;/code&gt;(작은따옴표)로 감싼 문자와 &lt;code&gt;&amp;quot;&lt;/code&gt;(큰따옴표)로 감싼 문자는 완전히 다릅니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;&#39;a&#39;&lt;/code&gt;은 &lt;code&gt;char&lt;/code&gt; 자료형이지만, &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;은 &lt;code&gt;std::string&lt;/code&gt; 자료형입니다.&lt;/p&gt;
&lt;p&gt;또한, &lt;code&gt;&amp;quot;&lt;/code&gt;로는 &lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt;와 같이 여러 개의 문자들을 한 번에 묶어서 감쌀 수 있지만, &lt;code&gt;&#39;&lt;/code&gt;로는 &lt;code&gt;&#39;abc&#39;&lt;/code&gt;와 같이 사용하실 수 없으며 무조건 한 개의 문자만 감싸는 형태로 사용하셔야 합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;chanagelog&#34;&gt;Chanagelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-12-30: 최초 게시&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;엄밀히는 &lt;code&gt;std&lt;/code&gt; 부분은 namespace라고 하는 것이고, &lt;code&gt;std::string&lt;/code&gt;이라는 표현은 &lt;code&gt;std&lt;/code&gt;에 소속된 &lt;code&gt;string&lt;/code&gt;이라는 자료형의 의미입니다. 다만, 이런 문법은 나중에 살펴보기로 하고, 여기서는 &lt;code&gt;std::string&lt;/code&gt;이라는 것을 통째로 기억하시길 권해드립니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
  </channel>
</rss>
