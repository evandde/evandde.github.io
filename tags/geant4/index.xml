<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geant4 | EvaNote</title>
    <link>https://evandde.github.io/tags/geant4/</link>
      <atom:link href="https://evandde.github.io/tags/geant4/index.xml" rel="self" type="application/rss+xml" />
    <description>Geant4</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2022 Evan Kim</copyright><lastBuildDate>Fri, 04 Feb 2022 15:42:18 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>Geant4</title>
      <link>https://evandde.github.io/tags/geant4/</link>
    </image>
    
    <item>
      <title>Geant4 11.0 릴리즈노트 살펴보기</title>
      <link>https://evandde.github.io/geant4-v110-releasenote/</link>
      <pubDate>Fri, 04 Feb 2022 15:42:18 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-v110-releasenote/</guid>
      <description>&lt;p&gt;2021년 12월 10일 새로이 출시된 &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 11.0 버전의 릴리즈노트&lt;/a&gt;를 살펴봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr-역자-주관적&#34;&gt;TL;DR (역자 주관적)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17 기반으로 변경&lt;/li&gt;
&lt;li&gt;G4String 관련 기능 변경&lt;/li&gt;
&lt;li&gt;G4PhysicsVector 관련 기능 변경&lt;/li&gt;
&lt;li&gt;기존의 g4csv.hh, g4root.hh 등의 분석클래스가 G4AnalysisManger(혹은 이와 동일한 G4GenericAnalysisManager) 클래스로 통합됨에 따라 사용자 코드 수정이 필요함. 파일명에 확장자까지 입력하면 알아서 해당 파일형식으로 기록해줌&lt;/li&gt;
&lt;li&gt;Optical 물질 특성 정의와 관련한 함수 개선&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;역자서문&#34;&gt;역자서문&lt;/h2&gt;
&lt;p&gt;Geant4 10.x의 버전을 뒤로하고, 새로운 메이저버전인 11.x의 시대가 열렸습니다.&lt;/p&gt;
&lt;p&gt;겸사겸사 릴리즈노트를 번역하며 살펴보고자 글을 작성하였습니다.&lt;/p&gt;
&lt;p&gt;전체 내용을 번역하기에는 너무 내용이 방대하기에, 전체적인 내용을 요약한 앞부분만 번역하였습니다.&lt;/p&gt;
&lt;p&gt;일부 오역이 존재할 수 있습니다. 발견하시면 댓글이나 메일(&lt;a href=&#34;mailto:evandde@gmail.com&#34;&gt;evandde@gmail.com&lt;/a&gt;)로 알려주시면 감사하겠습니다.&lt;/p&gt;
&lt;p&gt;이하는 원문에 대한 번역입니다. 일부 이탤릭체로 표시된 내용은, 번역이 어렵거나 마땅한 번역이 떠오르지 않아 원문을 옮겨적은 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;서문&#34;&gt;서문&lt;/h2&gt;
&lt;p&gt;지원하는 시스템에 대한 소스코드 및 실행파일 등은 &lt;a href=&#34;http://cern.ch/geant4/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;소스 코드 웹페이지&lt;/a&gt;를 통해 이용 가능합니다.&lt;/p&gt;
&lt;p&gt;여러 이슈에 대해 상세한 피드백과 종합적인 문건을 통해 보고해주신 Geant4 사용자 여러분의 노력에 깊은 감사를 표합니다. 특히, 이번 릴리즈의 수정, 개선, 개발에 기여한 분들께 감사드립니다.&lt;/p&gt;
&lt;p&gt;자세한 사항은 &lt;a href=&#34;http://cern.ch/geant4/support/user_documentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 User Documentation&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;목차&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;지원하는 플랫폼 및 테스트된 환경&lt;/li&gt;
&lt;li&gt;지원하는 CLHEP 및 VecGeom 버전&lt;/li&gt;
&lt;li&gt;사용자 코드를 새 버전으로 마이그레이션 할 때 살펴야 할 항목&lt;/li&gt;
&lt;li&gt;새로운 기능&lt;/li&gt;
&lt;li&gt;Physics와 성능에 관해 기대되는 효과&lt;/li&gt;
&lt;li&gt;알려진 실행 상의 문제 및 한계점&lt;/li&gt;
&lt;li&gt;컴파일 경고&lt;/li&gt;
&lt;li&gt;Geant4 소프트웨어 라이센스&lt;/li&gt;
&lt;li&gt;변경사항 및 수정사항의 세부 목록&lt;/li&gt;
&lt;li&gt;부록&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-지원하는-플랫폼-및-테스트된-환경&#34;&gt;1. 지원하는 플랫폼 및 테스트된 환경&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;플랫폼&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux, gcc-8.3.1
CERN CentOS Linux 8 (CentOS Linux 8 기반), 64 bit 아키텍처(Intel, AMD) 상에서 테스트 수행&lt;/li&gt;
&lt;li&gt;macOS 12.01 Monterey, Apple LLVM/Clang-13
64 bit 아키텍처(Intel, Apple Silicon) 상에서 테스트 수행&lt;/li&gt;
&lt;li&gt;Windows 10, Visual C++ 14.29 (Visual Studio 2019)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;추가적으로 검증/테스트된 조합 (64 bit)&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux, gcc-9.3/10.2/11.2, clang-9/10/11&lt;/li&gt;
&lt;li&gt;Linux, Intel-icc 2021.4&lt;/li&gt;
&lt;li&gt;macOS 10.15 Catalina, Apple LLVM/Clang-12&lt;/li&gt;
&lt;li&gt;macOS 11.6 Big Sur, Apple LLVM/Clang-12&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-지원하는-clhep-및-vecgeom-버전&#34;&gt;2. 지원하는 CLHEP 및 VecGeom 버전&lt;/h2&gt;
&lt;p&gt;이번 Geant4 릴리즈는 &lt;a href=&#34;http://cern.ch/clhep/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CLHEP&lt;/a&gt; &lt;b&gt;2.4.5.1&lt;/b&gt; 버전을 요구하며, 이 버전으로 검증이 이루어졌습니다. 다른 버전의 CLHEP을 사용하는 경우 전산모사 결과가 부정확할 수 있습니다.&lt;/p&gt;
&lt;p&gt;NOTE: Geant4에서 내부적으로 활용하는 CLHEP 클래스 모듈이 기본적으로 제공됩니다. 혹은, 사용자가 직접 CLHEP 라이브러리를 설치하여 연동할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;Geant4 설치 시 옵션을 통해 &lt;a href=&#34;https://gitlab.cern.ch/VecGeom/VecGeom/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VecGeom&lt;/a&gt; 라이브러리를 Geant4 솔리드보다 우선하여 사용할 지에 대해 설정할 수 있습니다. 이 설정을 사용하기 위해서는 VecGeom 버전 &lt;b&gt;1.1.18&lt;/b&gt;이 요구됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-사용자-코드를-새-버전으로-마이그레이션-할-때-살펴야-할-항목&#34;&gt;3. 사용자 코드를 새 버전으로 마이그레이션 할 때 살펴야 할 항목&lt;/h2&gt;
&lt;p&gt;다음은 이 릴리즈의 개발사항에 관련한 몇 가지 정보입니다. 새로운 버전의 적용을 위해, 모든 사용자는 Geant4 라이브러리의 전체 재설치(전체 재컴파일)를 수행해야 하며, 사용자 코드 각각에 대해서도 재컴파일을 수행해야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;일반&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11/17에 맞추어 G4String 인터페이스 및 구현의 단순화. 오래되어 사용되지 않거나 std::string의 멤버함수와 기능이 중복되거나 std::string의 멤버함수가 아닌 함수를 제거하거나 G4StrUtil 네임스페이스를 통해 새로이 제공되는 함수로 대체하였음. 사용자 코드에서 G4String의 멤버함수를 명시적으로 사용한 사항이 있다면 수정을 해야 할 수도 있음. 자세한 사항은 &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html#string-migration-notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10. 부록&lt;/a&gt;을 참고&lt;/li&gt;
&lt;li&gt;G4PhysicsVector와 관련 클래스에 대한 대규모 업데이트를 수행함. 새로운 public 접근 함수를 도입하고, 사용되지 않는 기능을 제거하였으며, 다른 Spline 기법을 사용할 수 있도록 하였음&lt;/li&gt;
&lt;li&gt;사용되지 않는 클래스인 G4LPhysicsFreeVector와 G4PhysicsLnVector를 제거하였음. G4PhysicsOrderedFreeVector는 G4PhysicsFreeVector로 리디렉션됨&lt;/li&gt;
&lt;li&gt;Physics model의 카탈로그에 관한 클래스인 G4PhysicsModelCatalog 클래스 개선. Physics model 각각에 대해 고유한 정수 ID에 해당하는 modelID를 도입하여, 유사하거나 관련성이 있는 physics model 간에 비슷한 정수 값이 부여되도록 하였음. 또한, 모든 application이나 physics list나 향후 Geant4 버전에 대해 동일한 modelID가 동일한 physics model에 상응하도록 수정함&lt;/li&gt;
&lt;li&gt;Geant4 컴파일 및 application 컴파일을 위한 최소 ISO C++ 표준을 C++17으로 설정&lt;/li&gt;
&lt;li&gt;Geant4 빌드 시 multithreading 옵션이 기본적으로 활성화됨&lt;/li&gt;
&lt;li&gt;Geant4 빌드를 위한 최소 CMake 버전을 3.16으로 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analysis 클래스에 대한 대규모 개편. 모든 analysis manager 클래스와 reader 클래스의 G4ThreadLocalSingleton에 대한 마이그레이션이 이루어졌음. 이제 싱글톤 객체는 Geant4 커널에 의해 자동으로 해제(delete)됨. 따라서 사용자가 코드 상에서 명시적으로 객체의 해제를 수행했던 내용이 있다면 삭제해야 함&lt;/li&gt;
&lt;li&gt;G4AnalysisManager를 G4GenericAnalysisManager로 정의함. G4GenericAnalysisManager 클래스가 모든 지원되는 파일포맷을 전부 핸들링하는 식으로 변경됨. 따라서, 파일 이름을 제공할 때 확장자(.csv, .hdf5, .root, .xml)까지 제공하거나, 새로운 멤버함수인 SetDefaultFiletype() 멤버함수를 통해 확장자를 명시해주어야 함. 이에 따라 기존의 각 확장자에 따른 헤더파일은 삭제되었음&lt;/li&gt;
&lt;li&gt;G4Analysis::MasterInstance() 팩토리메서드와 g4analysis.hh 헤더가 삭제되었음&lt;/li&gt;
&lt;li&gt;프로그램 종료 전이나 모든 reader의 구현 시 사용자에 의해 호출 가능한 public 함수인 CloseFiles()를 G4VAnalysisReader에 추가하였음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;지오메트리, field, transportation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4Sphere와 G4Tubs에 대한 미사용 접근자를 제거하였음&lt;/li&gt;
&lt;li&gt;G4[Partial]PhantomParameterization에서 일관성을 위해 Get/SetNoVoxel*() 접근자를 Get/SetNoVoxels*()로 변경하였음. 사용자 코드에서 변경이 필요할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;EM, optical physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4EmProcessOptions 클래스를 제거하였음. 이를 이용하여 사용자 physics-list를 만든 경우, 수정이 필요할 수 있음&lt;/li&gt;
&lt;li&gt;G4Scintillation에서 사용되지 않는 material properties를 제거하였음. 이제 10.7 버전의 &amp;ldquo;enhanced&amp;rdquo; time constant를 이용한 방법을 통해서만 scintillation 특성을 정의할 수 있음&lt;/li&gt;
&lt;li&gt;material property 이름에 대해 오탈자 방지를 위한 기능을 추가하였음. 이제 사용자가 직접 정의하는 material property나 material constant property를 사용하는 경우에는 Add(Const)Property() 함수의 입력인자로 createNewKey=true를 추가해야 함&lt;/li&gt;
&lt;li&gt;중복되는 optical UI 명령어를 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hadronic physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Constructors for inelastic processes have changed signature, as well as for elastic and inelastic cross-sections.&lt;/em&gt; 이는 physics-list의 내부 구성에 영향을 미칠 수 있으므로, &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html#hadronic-migration-notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10. 부록&lt;/a&gt;을 참고하여 사용자 physics-list를 수정해야 할 수 있음&lt;/li&gt;
&lt;li&gt;NeutronHP, ParticleHP, Radioactive Decay에서 사용되지 않는 환경변수를 제거하였음. 이는 동일한 기능을 수행하는 UI command로 대체되었음. 해당 UI command는 이전 버전에서 도입되었으므로 해당 내용 참고&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;가시화 및 모델링&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 릴리즈에서 권장하며 지원되는 Open Inventor 드라이버는 Qt 기반의 드라이버임 (OIQt 뷰어 옵션). Xt/Xm 드라이버(OIX, OIXE)도 여전히 사용가능하나, 향후 릴리즈에서 제거될 예정임&lt;/li&gt;
&lt;li&gt;Qt 드라이버는 Qt-5 플랫폼 기반이며, Qt-6는 아직 지원하지 않음&lt;/li&gt;
&lt;li&gt;G4VModel의 인터페이스를 단순화함. transformation과 extent에 대한 책임을 각각의 개별 모델로 위임시켰음. 이에 따라, 예를 들면 G4VModel::GetTransformedExtent()와 같은 메서드는 더이상 존재하지 않으며, 구체화된 클래스가 직접 transformation이나 extent를 유지/관리하고 GetExtent() 등의 메서드를 통해 현재 상태를 반환하도록 해야함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;데이터 셋&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새로운 버전의 데이터 셋을 제공함. 자세한 사항은 &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html#data-notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;9. 변경사항 및 수정사항의 세부 목록&lt;/a&gt;을 참고
&lt;ul&gt;
&lt;li&gt;G4EMLOW-8.0, G4PARTICLEXS-4.0&lt;/li&gt;
&lt;li&gt;하전입자에 대해 ParticleHP를 사용하려면, 선택적 데이터 셋인 G4TENDL-1.4가 필요함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-새로운-기능&#34;&gt;4. 새로운 기능&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;일반&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PTL (Parallel Tasking Library) v2.0.0 기반의 작업관리 시스템이 multi-threading의 병렬연산에 있어 기본 방식으로 사용됨. 이에 상응하는 run manager 클래스 (G4TaskRunManager)와 factory 클래스 (G4RunManagerFactory)가 제공되어, 이벤트 루프에 대한 작업 제어가 가능하도록 하였음. 작업관리 시스템은 Intel TBB와도 완벽하게 호환되며, 이는 Geant4 라이브러리 설치 시 CMake 인자로서 GEANT4_USE_TBB=ON으로 설정하여 configure를 수행하면 됨. 기본적으로는 내부 쓰레드 풀과 작업 큐에 작업을 보내 수행하도록 하는 방식을 취함&lt;/li&gt;
&lt;li&gt;G4SteppingVerboseWithUnits 클래스를 새로이 도입하였음. 이는 기존 G4SteppingVerbose 클래스의 대체제로, verbose에 적절한 단위계가 함께 출력되도록 함. 모든 sequential, MT 등 모든 작업 방식에서 공통적으로 사용할 수 있는 간단한 방법이 될 것임.&lt;/li&gt;
&lt;li&gt;G4VTrackingManager 클래스를 신규 도입. 이는 하나 이상의 입자 유형에 특화되어 사용자가 구현 가능한 tracking manager 인터페이스임. 이러한 사용자 tracking manager는 G4VUserPhysicsList에 등록하여 사용할 수 있음. 만약 어떤 입자에 대해 사용자의 tracking manager 클래스가 등록되어 있다면, G4EventManager가 track에 관한 정보를 해당 클래스에 전달해주는 방식으로 작동함&lt;/li&gt;
&lt;li&gt;새로운 난수 엔진인 Ranlux++가 추가됨&lt;/li&gt;
&lt;li&gt;G4String이 G4StrUtil이라는 네임스페이스를 제공하며, 이에 포함된 간단한 문자열조작, 왼쪽/오른쪽 스트리핑(stripping), 대소문자 변환, 검색 등의 기능을 수행하는 함수를 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4VAnalysisManager 클래스의 새로운 public 멤버함수 Reset()과 Clear()가 제공되며, 이는 할당된 analysis 객체를 reset하거나 해제(delete)하도록 하며, 이들이 수집한 데이터들을 지우는 기능을 수행함. (&lt;em&gt;New public functions G4VAnalysisManager::Reset() and Clear() allowing resetting and deleting all allocated analysis objects and clearing their collections.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;String vector로 구성된 n-tuple 열에 대해, G4VAnalysisManager와 G4VAnalysisReader의 public 멤버함수를 통한 지원을 추가&lt;/li&gt;
&lt;li&gt;CSV 출력 형태에 대해, 파일시스템 디렉토리를 지원. 만약 디렉토리명이 설정되어 있고, 파일시스템에 해당 이름의 디렉토리가 존재한다면, 히스토그램과 n-tuple 파일이 해당 디렉토리 내에 저장되도록 함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Digitization, Hits &amp;amp; Scoring&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tube 및 분할된 tube 형태의 원통형 scoring 메쉬기능 확장&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;지오메트리 및 field&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map을 도입하여, 이름을 기반으로한 solid, region, volume store에서의 검색 속도를 향상시킴&lt;/li&gt;
&lt;li&gt;복셀화/최적화된 지오메트리에 대한 navigation 알고리즘을 G4VoxelNavigation 클래스와 같이 대체하여 사용할 수 있게 하였음&lt;/li&gt;
&lt;li&gt;VecGeom navigator 시연에 관한 예제를 추가하였음 (beta)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;매질&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4Material에서의 G4Exception을 수정하고 개편하여, 좀 더 완전한 정보를 제공하고 개선된 진단이 가능하도록 하였음&lt;/li&gt;
&lt;li&gt;G4Material 업데이트: 필요에 따라 G4Element의 const pointer를 사용하도록 함&lt;/li&gt;
&lt;li&gt;G4OpticalMaterialProperties 클래스를 신규로 도입하여, optical material property를 저장하고 이미 정의된 항목을 사용할 수 있도록 함&lt;/li&gt;
&lt;li&gt;G4MaterialPropertiesTable 클래스에서, material property나 material const property를 작성할 때 std::map 대신 std::vector를 사용하도록 함. 이를 통해 map 내 요소를 검색할 필요성을 배제시킴&lt;/li&gt;
&lt;/ul&gt;
&lt;i&gt;
&lt;p&gt;&lt;strong&gt;Electromagnetic physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General code cleanup in EM modules; removed obsolete models and processes, removed G4EmProcessOptions class.&lt;/li&gt;
&lt;li&gt;Updates to G4GammaGeneralProcess: exclude gamma-nuclear from the 2nd energy area.&lt;/li&gt;
&lt;li&gt;Fixed model per region definition for all base processes G4VEmProcess, G4VMultipleScattering, G4VEnergyLossProcess; removed sub-cut facility for energy loss processes but left G4VSubCutProducer interface.&lt;/li&gt;
&lt;li&gt;Updated EM integral approach by introduction of a cross-section shape type including cross-section shape with 2 maxima.&lt;/li&gt;
&lt;li&gt;Reviewed EM part of G4PhysicsModelCatalog to adopt new numbering convention. Created new enum for low-energy electromagnetic process sub-types.&lt;/li&gt;
&lt;li&gt;Updated G4UrbanMscModel to not apply energy correction at small steps below 1% of a particle range.&lt;/li&gt;
&lt;li&gt;G4VEmFluctuationModel: changed interface; both cut value and max energy transfer are parameters of main methods.&lt;/li&gt;
&lt;li&gt;In G4UniversalFluctuation, substantially simplified sampling algorithm for faster computation.&lt;/li&gt;
&lt;li&gt;Updated Livermore models to use EPICS2017 data.&lt;/li&gt;
&lt;li&gt;Included new PIXE data libraries following ANSTO recommendations.&lt;/li&gt;
&lt;li&gt;New data structure for ICRU73 and ICRU90 ion stopping power data shared between threads and used in G4LinhardSorensenIonModel.&lt;/li&gt;
&lt;li&gt;Implement and use base material approach only if base materials are defined, this should bring a minor speedup of the code and little reduction of memory.&lt;/li&gt;
&lt;li&gt;Enable synchrotron radiation only for electrons, positrons, muons, protons, and anti-protons.&lt;/li&gt;
&lt;li&gt;Introducing quantum entanglement of e+ annihilation. Currently implemented only in G4eplusAnnihilation and G4LivermorePolarizedComptonModel.&lt;/li&gt;
&lt;li&gt;New class G4OpticalMaterialProperties, a store for optical material properties and allow use of predefined optical material properties.&lt;/li&gt;
&lt;li&gt;Added new IRT-syn model for DNA.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hadronic physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General code clean-up in hadronic processes and models; removed obsolete and deprecated classes; removed obsolete &amp;ldquo;rpg&amp;rdquo; model.&lt;/li&gt;
&lt;li&gt;Introduced a new threshold parameter in radioactive-decay for analogue mode to kill very long radioactive decays at rest of nuclides happening later than such threshold.&lt;/li&gt;
&lt;li&gt;Introduced six light hypernuclei and their corresponding antiparticles (for the time being, only electromagnetic interactions of these particles are available, but switched off by default).&lt;/li&gt;
&lt;li&gt;Extended the interface of hadronic models for projectile hypernuclei and anti-hypernuclei (but not yet hadronic physics for these particles).&lt;/li&gt;
&lt;li&gt;Added implementation of hypercluster emission in INCLXX.&lt;/li&gt;
&lt;li&gt;Extended interface of the Fritiof (FTF) string model to get the number of projectile/target spectator nucleons, number of nucleon-nucleon collisions and impact parameter (see example Hadr09).&lt;/li&gt;
&lt;/ul&gt;
&lt;/i&gt;
&lt;p&gt;&lt;strong&gt;Physics List&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;버보스 관점에서 균일한 접근이 이루어지도록 physics list를 수정하였음 (&lt;em&gt;Updated physics lists to use a uniform approach for verbosity.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Light hypernuclei에 대한 EM physics (기본적으로는 꺼져 있음)는 어떠한 physics list에도 C++ 인터페이스를 통해 실행하도록 설정할 수 있음 (G4HadronicParameters::Instance()-&amp;gt;SetEnableHyperNuclei(true))&lt;/li&gt;
&lt;li&gt;원자의 안정화(de-excitation)에 대한 ANSTO 데이터 옵션은 C++ 인터페이스나 UI command(권장)를 통해 어떠한 physics list에도 실행하도록 설정할 수 있음&lt;/li&gt;
&lt;li&gt;Livermore 감마 반응에 대해 EPICS2017 parameterisation이 활성화될 수 있음&lt;/li&gt;
&lt;li&gt;Tau 쌍에 대한 양전자의 annihilation이 활성화될 수 있음&lt;/li&gt;
&lt;li&gt;LinhardSorensenlonModel을 G4EmStandardPhysicsWVI 생성자와 함께 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;i&gt;
&lt;p&gt;&lt;strong&gt;Visualization and Interfaces&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New ToolsSG (TSG) visualisation package based on g4tools, providing four new (mutually exclusive) visualisation drivers: TOOLSSG_X11_GLES, TOOLSSG_WINDOWS_GLES, TOOLSSG_XT_GLES and TOOLSSG_QT_GLE.&lt;/li&gt;
&lt;li&gt;New VtkQt and VtkNative visualisation drivers.&lt;/li&gt;
&lt;li&gt;Introducing in-app plotting with visualization and related UI command.&lt;/li&gt;
&lt;li&gt;Introducing G4Mesh, a light class that encapsulates and validates visualisation of a nested parameterisation.&lt;/li&gt;
&lt;li&gt;Extended G4UIWin32 driver with new features.&lt;/li&gt;
&lt;li&gt;Revised all visualisation models, to have G4PhysicalVolumeModel taking care of the transformation of any primitives that it generates.&lt;/li&gt;
&lt;li&gt;Removed obsolete network visualisation options for VRML driver and FukuiRenderer driver.&lt;/li&gt;
&lt;li&gt;Removed obsolete GAG/Gain/MOMO and HepRep(WIRED) modules/driver.&lt;/li&gt;
&lt;li&gt;Removed deprecated functions in visualization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CaTS - New application implementing a flexible and extendable framework for the simulation of calorimeter and tracking detectors. It also demonstrates how to use &lt;a href=&#34;https://bitbucket.org/simoncblyth/opticks.git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Opticks&lt;/a&gt; for the creation and propagation of optical photons.&lt;/li&gt;
&lt;li&gt;pythia/py8decayer - New example demonstrating how to outfit Pythia8-based decay features to those resonances in Geant4 where decay tables are not implemented by default. In addition, it shows how to replace existing Geant4 decay tables to such resonances as tau+/- or B+/- with the Pythia8-based ones.&lt;/li&gt;
&lt;li&gt;geometry/VecGeomNavigation - New example demonstrating integration of VecGeom navigation, based on the prototype package G4VecGeomNav, being integrated in the example at build time.&lt;/li&gt;
&lt;li&gt;hadronic/Hadr05 - New example demonstrating how to collect energy deposition in a sampling calorimeter and how to survey energy flow.&lt;/li&gt;
&lt;li&gt;hadronic/Hadr10 - New hadronic example aimed to exercise the decay of tau leptons, as well as charmed and bottom hadrons.&lt;/li&gt;
&lt;li&gt;parameterisations/Par04 - New example demonstrating how to use the Machine Learning (ML) inference to create energy deposits as a fast simulation model using ONNX runtime and LWTNN libraries.&lt;/li&gt;
&lt;li&gt;runAndEvent/RE07 - New example demonstrating how to register specialized tracking managers for a particle or a set of particles.&lt;/li&gt;
&lt;li&gt;dna/AuNP - New example simulating the track-structure of electrons in microscopic gold volume. Also simulating that in liquid water medium surrounding the gold volume.&lt;/li&gt;
&lt;li&gt;dna/scavenger - New example showing how to activate the scavenging process in chemistry using the deterministic treatment of the IRT model.&lt;/li&gt;
&lt;li&gt;visualization/movies - New example illustrating how to make a movie with /vis/viewer/save and /vis/viewer/interpolate UI commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;/i&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-physics와-성능에-관해-기대되는-효과&#34;&gt;5. Physics와 성능에 관해 기대되는 효과&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;지오메트리&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복셀 최적화 구조에 대해 G4Allocator를 사용하여 노드와 프록시를 동적으로 할당. 이는 메모리 단편화(memory fragmentation)를 줄이는 데에 도움을 줄 것임&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;EM physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EM 전산모사에 있어 수% 수준의 속도 향상이 기대됨. 10.6이나 10.7 버전에서의 calorimeter 모사를 기반으로 비교한 결과임&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hadronic physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10.7 버전에 비해, 일반적으로 모든 hadronic physics의 관측가능량에 대해 (특히 calorimeter에서의 hadronic shower) 보다 안정적인 결과를 제공할 것으로 기대됨&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-알려진-실행-상의-문제-및-한계점&#34;&gt;6. 알려진 실행 상의 문제 및 한계점&lt;/h2&gt;
&lt;p&gt;미해결된 실행 상의 문제점 목록을 확인하거나 여러분이 겪은 실행 상의 문제점을 제출하려면, &lt;a href=&#34;http://cern.ch/geant4/problemreport&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Problem Reporting System&lt;/a&gt;을 이용해 주세요.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;7-컴파일-경고&#34;&gt;7. 컴파일 경고&lt;/h2&gt;
&lt;p&gt;일부 플랫폼의 경우 컴파일 시 경고가 발생할 수 있습니다. 다만, 이들이 실행 상에 문제를 야기하지는 않을 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;8-geant4-소프트웨어-라이센스&#34;&gt;8. Geant4 소프트웨어 라이센스&lt;/h2&gt;
&lt;p&gt;A Software License applies to the Geant4 code. Users must accept this license in order to use it.
The details and the list of copyright holders is available at &lt;a href=&#34;http://cern.ch/geant4/license&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://cern.ch/geant4/license&lt;/a&gt; and also in the text file LICENSE distributed with the source code.&lt;/p&gt;
&lt;p&gt;역자 주석: 이 항목은 라이센스 내용이기에 따로 번역하지 않았습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;9-변경사항-및-수정사항의-세부-목록&#34;&gt;9. 변경사항 및 수정사항의 세부 목록&lt;/h2&gt;
&lt;p&gt;역자 주석: 이 항목은 내용이 너무 많아 번역하지 않습니다. &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html#9.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;원문&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;10-부록&#34;&gt;10. 부록&lt;/h2&gt;
&lt;p&gt;역자 주석: 이 항목은 내용이 너무 많아 번역하지 않습니다. &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html#10.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;원문&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 11.0 Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2022-02-04: 최초 게시. 1절 ~ 3절 번역&lt;/li&gt;
&lt;li&gt;2022-02-07: 글 교정. 4절 이후 번역내용 추가&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4용 개선된 ParticleGun 클래스(지오메트리 선원항/타겟 설정, 동위원소 모델링)</title>
      <link>https://evandde.github.io/advancedparticlegun/</link>
      <pubDate>Thu, 25 Nov 2021 16:03:52 +0900</pubDate>
      <guid>https://evandde.github.io/advancedparticlegun/</guid>
      <description>&lt;p&gt;Geant4에서 기본 제공하는 G4ParticleGun 클래스보다 좀 더 많은 기능이 필요해서 제가 직접 만들어 쓰고 있는 &lt;b&gt;AdvancedParticleGun 클래스&lt;/b&gt;를 소개합니다. &lt;b&gt;특정 지오메트리를 선원항으로 사용&lt;/b&gt;하려는 경우, &lt;b&gt;특정 지오메트리 방향으로만 방사선을 방출&lt;/b&gt;시키고자 하는 경우, &lt;b&gt;방사성동위원소&lt;/b&gt;를 선원으로 설정하려는 경우에 유용하게 사용할 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;h3 id=&#34;용도&#34;&gt;용도&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;00_advpg&#34;
           src=&#34;https://evandde.github.io/advancedparticlegun/00_advpg.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이미 모사해 둔 &lt;b&gt;지오메트리 중 하나를 선원항으로 지정&lt;/b&gt;하고 싶을 때&lt;/li&gt;
&lt;li&gt;방사선이 방출되는 &lt;b&gt;방향을 특정 지오메트리 쪽으로 제한&lt;/b&gt;하고 싶을 때&lt;/li&gt;
&lt;li&gt;방사성동위원소가 방출하는 &lt;b&gt;감마선 및 엑스선&lt;/b&gt;만을 선원항으로 두고 싶을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;다운로드-경로&#34;&gt;다운로드 경로&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;필요한 항목만 압축한 파일: &lt;a href=&#34;https://evandde.github.io/uploads/advpg.zip&#34; target=&#34;_blank&#34;&gt;advpg.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;예제가 담긴 GitHub repository: &lt;a href=&#34;https://github.com/evandde/example_advpg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;evandde/example_advpg: Example of Advanced Particle Gun class for Geant4. (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;예제 압축파일 다운 링크(GitHub repository에서 받는 것과 동일): &lt;a href=&#34;https://github.com/evandde/example_advpg/archive/refs/heads/main.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example_advpg.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;사용방법&#34;&gt;사용방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;위에서 advpg.zip을 다운받아, 압축을 풀어서 나오는 3개 폴더(ICRP07DATA, include, src)를 프로젝트에 붙여넣기 (Geant4의 일반적인 디렉토리 구성을 따른다고 가정)&lt;/li&gt;
&lt;li&gt;사용자의 PrimaryGeneratorAction에서, ParticleGun 대신 AdvancedParticleGun 객체를 만들어서 사용&lt;/li&gt;
&lt;li&gt;기존 ParticleGun의 기능은 그대로 사용 가능&lt;/li&gt;
&lt;li&gt;추가적으로 다음의 멤버함수를 사용 가능
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void SetNuclideSource(G4String nuclideName)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void SetMinPhotonEnergy(G4double minPhotonEnergy)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void SetSourceVolume(G4String sourceVolName)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void SetTargetVolume(G4String targetVolName, G4double margin)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기능에 따라 초기 입자의 가중치(weight)가 조절될 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;다운로드&#34;&gt;다운로드&lt;/h2&gt;
&lt;p&gt;여러분의 Geant4 프로젝트는 다음과 같은 일반적인 디렉토리 구성을 따른다고 가정하여 진행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;projectDirectory
|- main.cc
|- include/
|  |- .hh
|  |- ...
|- src/
|  |- .cc
|  |- ...
|- CMakeLists.txt
|- .mac
|- ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;일단, &lt;a href=&#34;https://evandde.github.io/uploads/advpg.zip&#34; target=&#34;_blank&#34;&gt;advpg.zip&lt;/a&gt; 파일을 다운로드 받습니다. 제공해드리는 advpg.zip 압축파일에는 다음과 같은 내용물이 들어 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ICRP07DATA/
|- ICRP-07.NDX	# ICRP107 제공; Index File
|- ICRP-07.RAD	# ICRP107 제공; Radiation File
include/
|- AdvancedParticleGun.hh
|- ICRP07Manager.hh
src/
|- AdvancedParticleGun.cc
|- ICRP07Manager.cc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이를 그대로 여러분의 프로젝트에 옮겨 넣으시면, &lt;code&gt;ICRP07DATA&lt;/code&gt;라는 디렉토리가 추가로 생기고, &lt;code&gt;include&lt;/code&gt;와 &lt;code&gt;src&lt;/code&gt; 디렉토리는 기존의 것과 합쳐져 &lt;code&gt;AdvancedParticleGun&lt;/code&gt;과 &lt;code&gt;ICRP07Manager&lt;/code&gt;클래스에 관한 두 개씩의 파일만 추가될 것입니다.&lt;/p&gt;
&lt;p&gt;최종적으로 여러분의 프로젝트가 다음과 같이 되어있으면 세팅은 끝입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;projectDirectory
|- main.cc
|- ICRP07DATA/
|  |- ICRP-07.NDX
|  |- ICRP-07.RAD
|- include/
|  |- AdvancedParticleGun.hh
|  |- ICRP07Manager.hh
|  |- ...
|- src/
|  |- AdvancedParticleGun.cc
|  |- ICRP07Manager.cc
|  |- ...
|- CMakeLists.txt
|- .mac
|- ...
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;클래스-설명&#34;&gt;클래스 설명&lt;/h2&gt;
&lt;h3 id=&#34;advancedparticlegun-클래스&#34;&gt;AdvancedParticleGun 클래스&lt;/h3&gt;
&lt;p&gt;AdvancedParticleGun 클래스는 Geant4에서 공식으로 제공하는 G4ParticleGun 클래스를 public으로 상속받아 만들어진 클래스입니다. 따라서 여러분이 기존에 G4ParticleGun 클래스를 사용하던 방식과 동일하게 AdvancedParticleGun 클래스를 사용하시면 됩니다. 여러분이 G4VUserPrimaryGeneratorAction 클래스를 상속받아 만든 클래스 내에서 AdvancedParticleGun 클래스의 객체를 만들고, 기존과 동일한 방법으로 GeneratePrimaryVertex() 멤버함수를 이용하여 초기 입자를 생성할 수 있습니다.&lt;/p&gt;
&lt;p&gt;G4ParticleGun 클래스가 제공하는 다음과 같은 멤버함수도 동일하게 사용 가능합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SetParticleDefinition()&lt;/li&gt;
&lt;li&gt;SetParticleCharge()&lt;/li&gt;
&lt;li&gt;SetParticleEnergy()&lt;/li&gt;
&lt;li&gt;SetParticleMomentumDirection()&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이와 더불어, AdvancedParticleGun 클래스는 추가적으로 다음과 같은 멤버함수를 제공합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SetSourceVolume()&lt;/li&gt;
&lt;li&gt;GetSourceVolume()&lt;/li&gt;
&lt;li&gt;SetTargetVolume()&lt;/li&gt;
&lt;li&gt;GetTargetVolume()&lt;/li&gt;
&lt;li&gt;SetTargetVolumeMargin()&lt;/li&gt;
&lt;li&gt;GetTargetVolumeMargin()&lt;/li&gt;
&lt;li&gt;SetNuclideSource()&lt;/li&gt;
&lt;li&gt;GetNuclideSource()&lt;/li&gt;
&lt;li&gt;SetMinPhotonEnergy()&lt;/li&gt;
&lt;li&gt;GetMinPhotonEnergy()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;icrp07manager-클래스&#34;&gt;ICRP07Manager 클래스&lt;/h3&gt;
&lt;p&gt;ICRP07Manager 클래스는 &lt;code&gt;ICRP07DATA&lt;/code&gt; 디렉토리 내에 존재하는 ICRP Publication 107의 데이터를 읽어오고 활용하기 위한 클래스입니다.&lt;/p&gt;
&lt;p&gt;사용자가 ICRP07Manager 클래스를 직접 핸들링할 필요는 없으며, ICRP07Manager 클래스의 기능 중 사용자가 필요한 기능은 AdvancedParticleGun 클래스를 통해 사용할 수 있도록 포장(wrapping)해 두었습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;사용방법-상세&#34;&gt;사용방법 상세&lt;/h2&gt;
&lt;h3 id=&#34;지오메트리를-선원항으로-설정&#34;&gt;지오메트리를 선원항으로 설정&lt;/h3&gt;
&lt;p&gt;사용자가 만들어 둔 &lt;b&gt;G4VPhysicalVolume 클래스의 객체 중 하나&lt;/b&gt;를 &lt;b&gt;균일하게 방사선을 방출하는 선원항으로 설정&lt;/b&gt;합니다. 이 기능을 사용하면 다음 그림과 같이 특정 지오메트리를 선원항으로 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_source&#34;
           src=&#34;https://evandde.github.io/advancedparticlegun/01_source.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 SetSourceVolume() 함수를 사용합니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetSourceVolume(G4VPhysicalVolume *sourceVol);
void SetSourceVolume(G4String sourceVolName);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사용자는 SetSourceVolume() 함수의 입력인자로 G4VPhysicalVolume 클래스 객체의 포인터를 직접 입력할 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은, 해당 객체의 이름(Geant4 내에서 명명된 G4String형 이름)이 유일하다면, 포인터 대신 이름만 입력할 수도 있습니다. 이 경우에는 G4PhysicalVolumeStore 클래스를 활용하여, 해당 이름을 갖는 G4VPhysicalVolume 클래스의 객체를 자동으로 찾아옵니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    G4PhysicalVolumeStore 클래스의 특성 상, 이름이 중복되는 경우에는 그 중 먼저 검색된 하나의 객체만을 반환합니다. 이 경우, 의도와 달리 동작할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;선원항으로 사용할 G4VPhysicalVolume 클래스 객체가 선택되면, 앞으로 AdvancedParticleGun 클래스는 &lt;b&gt;선원의 위치를 해당 선원 객체 내부의 임의의 지점으로 균일하게 샘플링&lt;/b&gt;합니다. 샘플링 방식은 해당 지오메트리를 감싸는 직육면체를 상정하여 샘플링한 뒤, rejection method 기법을 활용합니다. 따라서, 지오메트리의 형태에 따라 선원의 위치를 샘플링하는 데에 소요되는 시간이 상이할 수 있습니다.&lt;/p&gt;
&lt;p&gt;만약 해당 기능을 해제하여 사용하지 않고자 하는 경우에는, SetSourceVolume() 함수의 입력인자로 &lt;code&gt;nullptr&lt;/code&gt;을 넣어주시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 기능은 선원의 위치를 지정하므로, SetParticlePosition() 함수와 기능상 충돌합니다. 만약 SetSourceVolume() 함수를 통해 유효한 G4VPhysicalVolume 객체로 선원항이 설정된 상태라면, &lt;b&gt;SetParticlePosition() 함수를 무시하고 이 함수로 설정된 지오메트리를 우선&lt;/b&gt;합니다. 이를 원치 않는다면 반드시 SetSourceVolume() 함수의 기능을 해제하셔야 합니다.&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 GetSourceVolume() 함수를 사용하면, 현재 설정된 선원 지오메트리의 G4VPhysicalVolume 클래스 객체의 포인터를 확인할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4VPhysicalVolume *GetSourceVolume() const;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;지오메트리를-타겟으로-설정&#34;&gt;지오메트리를 타겟으로 설정&lt;/h3&gt;
&lt;p&gt;사용자가 만들어 둔 &lt;b&gt;G4VPhysicalVolume 클래스의 객체 중 하나&lt;/b&gt;를 &lt;b&gt;방사선이 도달할 타겟으로 설정&lt;/b&gt;합니다. 이 기능을 사용하면 다음 그림과 같이 특정 지오메트리를 타겟으로 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_target&#34;
           src=&#34;https://evandde.github.io/advancedparticlegun/02_target.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 SetTargetVolume() 함수를 사용합니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetTargetVolume(G4VPhysicalVolume *targetVol, G4double margin = 0.);
void SetTargetVolume(G4String targetVolName, G4double margin = 0.);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사용자는 SetTargetVolume() 함수의 입력인자로 G4VPhysicalVolume 클래스 객체의 포인터를 직접 입력할 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은, 해당 객체의 이름(Geant4 내에서 명명된 G4String형 이름)이 유일하다면, 포인터 대신 이름만 입력할 수도 있습니다. 이 경우에는 G4PhysicalVolumeStore 클래스를 활용하여, 해당 이름을 갖는 G4VPhysicalVolume 클래스의 객체를 자동으로 찾아옵니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    G4PhysicalVolumeStore 클래스의 특성 상, 이름이 중복되는 경우에는 그 중 먼저 검색된 하나의 객체만을 반환합니다. 이 경우, 의도와 달리 동작할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;타겟으로 사용할 G4VPhysicalVolume 클래스 객체가 선택되면, 앞으로 AdvancedParticleGun 클래스는 &lt;b&gt;현재 선원의 위치로부터 해당 타겟 객체를 완전히 감싸는 원뿔 내부의 임의의 방향으로 균일하게 샘플링&lt;/b&gt;합니다. 샘플링 방식은 한 지점으로부터 isotropic한 방향을 샘플링하되 공간각을 원뿔 내부로 제한하는 방식을 사용합니다.&lt;/p&gt;
&lt;p&gt;추가적으로 SetTargetVolume() 함수는 두 번째 인자로 &lt;b&gt;길이 형태(G4double 자료형)의 &lt;code&gt;margin&lt;/code&gt; 값을 입력&lt;/b&gt;받습니다. 이는 타겟 G4VPhysicalVolume 객체를 딱 맞게 감싸는 원뿔을 기준으로, 이보다 좀 더 여유를 두어 공간각이 큰 원뿔로 방향을 설정하고자 할 때 사용합니다. 사용자는 &lt;code&gt;margin&lt;/code&gt;값을 별도로 입력하지 않아도 되며, 이 경우 &lt;b&gt;기본값은 0&lt;/b&gt;이 되어 타겟 G4VPhysicalVolume 객체를 딱 맞게 감싸는 원뿔로 방향이 설정됩니다.&lt;/p&gt;
&lt;p&gt;만약 &lt;code&gt;margin&lt;/code&gt; 값만 바꾸고 싶은 경우에는, SetTargetVolumeMargin() 멤버함수를 사용할 수도 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetTargetVolumeMargin(G4double margin);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;만약 해당 기능을 해제하여 사용하지 않고자 하는 경우에는, SetTargetVolume() 함수의 입력인자로 &lt;code&gt;nullptr&lt;/code&gt;을 넣어주시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 기능은 선원의 방향을 지정하므로, SetParticleMomentumDirection() 함수와 기능상 충돌합니다. 만약 SetTargetVolume() 함수를 통해 유효한 G4VPhysicalVolume 객체로 선원항이 설정된 상태라면, &lt;b&gt;SetParticleMomentumDirection() 함수를 무시하고 이 함수로 설정된 지오메트리를 우선&lt;/b&gt;합니다. 이를 원치 않는다면 반드시 SetTargetVolume() 함수의 기능을 해제하셔야 합니다.&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 GetTargetVolume() 함수를 사용하면, 현재 설정된 타겟 지오메트리의 G4VPhysicalVolume 클래스 객체의 포인터를 확인할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4VPhysicalVolume *GetTargetVolume() const;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;더불어, GetTargetVolumeMargin() 함수를 사용하면, 현재 설정된 &lt;code&gt;margin&lt;/code&gt; 값을 확인할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4double GetTargetVolumeMargin() const;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;가중치-변화&#34;&gt;가중치 변화&lt;/h4&gt;
&lt;p&gt;SetTargetVolume() 함수의 주요한 특징 중 하나는 초기입자의 가중치(weight)를 변화시킨다는 것입니다.&lt;/p&gt;
&lt;p&gt;전 방향($\Omega=4\pi$)으로의 등방적(isotropic) 방향분포가 기본이라고 보았을 때, 이 함수가 제공하는 기능은 방향분포를 일부 공간각으로 편향(bias)시키는 효과가 있습니다. 따라서, 등방적 방향분포가 제공하는 결과값과 비교하여, 변화된 공간각의 비율만큼 달라질 수 있습니다. 이를 보정하기 위해, 초기입자의 가중치를 변화시킬 필요가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;SetTargetVolume() 함수는 이 작업을 자동으로 수행&lt;/b&gt;합니다.&lt;/p&gt;
&lt;p&gt;SetTargetVolume() 함수를 통해 결정된 원뿔의 공간각을 $\Omega$라 할 때, 초기입자의 가중치는 $\frac{\Omega}{4\pi}$배가 됩니다. 이를 통해, 공간각을 제한함으로써 결과값이 커지는 영향을 정확하게 보상해줍니다.&lt;/p&gt;
&lt;p&gt;이렇게 변화된 가중치는 G4Track 클래스의 멤버함수인 GetWeight() 함수 등을 통해 확인할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;방사성동위원소를-선원항으로-설정&#34;&gt;방사성동위원소를 선원항으로 설정&lt;/h3&gt;
&lt;p&gt;선원항의 초기입자를 &lt;b&gt;특정 방사성동위원소가 붕괴되며 방출하는 감마선 및 엑스선으로 설정&lt;/b&gt;합니다. 방사성동위원소의 핵종을 결정하면, 그 핵종이 붕괴하며 방출하는 감마선과 엑스선의 방출률(yield)을 반영하여 자동으로 초기입자가 샘플링됩니다. 붕괴된 딸핵종이 불안정한 핵종인 경우에는 딸핵종이 붕괴하며 방출하는 감마선과 엑스선도 붕괴확률 및 방출률을 반영하여 초기입자 군에 포함됩니다. 이때 붕괴도식, 붕괴확률, 방출률 등의 정보는 &lt;a href=&#34;https://www.icrp.org/publication.asp?id=ICRP%20Publication%20107&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ICRP Publication 107&lt;/a&gt;의 정보를 따릅니다.&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 SetNuclideSource() 함수를 사용합니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetNuclideSource(G4String nuclideName);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사용자는 SetNuclideSource() 함수의 입력인자로 G4String 형 데이터인 핵종명(&lt;code&gt;nuclideName&lt;/code&gt;)을 입력할 수 있습니다. 이 때 핵종명은 &amp;quot;Cs-137&amp;quot;, &amp;quot;Co-60&amp;quot; 등과 같이, &amp;quot;{원소기호}-{질량수}&amp;quot;의 형태로 입력해야 합니다.&lt;/p&gt;
&lt;p&gt;ICRP Publication 107에서 제공하는 데이터가 존재하는 유효한 방사성동위원소가 선택된 경우, 앞으로 AdvancedParticleGun 클래스는 &lt;b&gt;초기입자를 광자(G4Gamma)로 고정하고, 매 초기입자를 발생시킬 때마다 광자의 에너지를 붕괴도식, 붕괴확률, 방출률에 따라 샘플링&lt;/b&gt;합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;이 기능은 모든 붕괴도식에 대해 단순히 각 딸핵종으로의 붕괴 확률만 고려합니다.&lt;/p&gt;
&lt;p&gt;반감기, 모핵종/딸핵종 간의 방사능 비율, 시간에 따른 방사능 변화 등은 반영하지 않습니다.&lt;/p&gt;
&lt;p&gt;따라서, 영년평형(secular equilibrium)을 이루지 않는 핵종의 경우에는 의도하지 않은 결과가 도출될 수 있음에 주의하시기 바랍니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;만약 해당 기능을 해제하여 사용하지 않고자 하는 경우에는, SetNuclideSource() 함수의 입력인자로 빈 스트링(&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;)을 넣어주시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 기능은 선원의 입자와 에너지를 지정하므로, SetParticleDefinition() 함수 및 SetParticleEnergy() 함수와 기능상 충돌합니다. 만약 SetNuclideSource() 함수를 통해 유효한 방사성동위원소로 선원항이 설정된 상태라면, &lt;b&gt;SetParticleDefinition() 함수와 SetParticleEnergy() 함수를 무시하고 이 함수로 설정된 선원항 정보를 우선&lt;/b&gt;합니다. 이를 원치 않는다면 반드시 SetNuclideSource() 함수의 기능을 해제하셔야 합니다.&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 GetNuclideSource() 함수를 사용하면, 현재 설정된 방사성동위원소의 핵종명을 확인할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4String GetNuclideSource() const;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;에너지-하한선-설정&#34;&gt;에너지 하한선 설정&lt;/h4&gt;
&lt;p&gt;추가적으로, 사용자가 저에너지 엑스선의 방출을 원하지 않는 경우에는 AdvancedParticleGun 클래스의 멤버함수인 SetMinPhotonEnergy() 함수를 통해, 발생하게 될 감마선과 엑스선의 에너지 하한선을 설정할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetMinPhotonEnergy(G4double minPhotonEnergy);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;만약 별도로 이를 설정하지 않은 경우에는 에너지 하한선(&lt;code&gt;minPhotonEnergy&lt;/code&gt;)이 0으로 설정된 것으로 간주하며, ICRP Publication 107 데이터에 제시된 모든 감마선과 엑스선이 선원항으로 설정됩니다.&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 GetMinPhotonEnergy() 함수를 사용하면, 현재 설정된 에너지 하한선의 값을 확인할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4double GetMinPhotonEnergy() const;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;가중치-변화-1&#34;&gt;가중치 변화&lt;/h4&gt;
&lt;p&gt;SetNuclideSource() 함수의 주요한 특징 중 하나는 초기입자의 가중치(weight)를 변화시킨다는 것입니다.&lt;/p&gt;
&lt;p&gt;방사성동위원소의 핵이 한 번 붕괴하는 것을 하나의 초기입자로 보았을 때, 이 함수가 제공하는 기능은 붕괴를 통해 발생되는 감마선(혹은 엑스선) 자체를 하나의 초기입자로 설정한다는 편향(bias)이 발생합니다.&lt;/p&gt;
&lt;p&gt;예를 들어, Co-60과 같이 1회의 붕괴로 1.173 MeV의 감마선과 1.332 MeV의 감마선이 각각 1.0의 Yield로 발생하는 경우를 생각해봅시다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Co-60 핵 하나가 붕괴하였다면 하나의 초기입자로부터 감마선의 &lt;b&gt;Yield의 총 합인 2.0개 만큼&lt;/b&gt;의 감마선이 나와야 합니다. 그러나 AdvancedParticleGun 클래스의 SetNuclideSource() 함수를 사용하면, 1.173 MeV의 감마선과 1.332 MeV의 감마선 중 &lt;b&gt;한 개만 살아남아&lt;/b&gt; 초기입자가 될 것입니다. 따라서, 하나의 감마선이 &lt;b&gt;Yield의 총 합인 2.0만큼&lt;/b&gt;의 가중치(weight)를 가지고 수송이 이루어져야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;SetNuclideSource() 함수는 이에 따른 가중치 변화를 자동으로 수행&lt;/b&gt;합니다.&lt;/p&gt;
&lt;p&gt;SetNuclideSource() 함수를 통해 발생되는 초기입자는, 설정된 방사성동위원소가 방출하는 &lt;b&gt;모든 감마선과 엑스선의 방출률(Yield)의 총 합만큼 곱해진 가중치&lt;/b&gt;를 가지게 됩니다. 위에서 예로 들은 Co-60라면, 각 감마선은 원래 가중치의 두 배로 설정되는 것입니다.&lt;/p&gt;
&lt;p&gt;만약, 사용자가 SetMinPhotonEnergy() 함수를 통해 에너지 하한선을 설정하였다면, 이로 인해 &lt;b&gt;배제되는 감마선과 엑스선의 방출률은 제외&lt;/b&gt;하고 총 합을 구하게 됩니다.&lt;/p&gt;
&lt;p&gt;이렇게 변화된 가중치는 G4Track 클래스의 멤버함수인 GetWeight() 함수 등을 통해 확인할 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright (C) 2021, Evan Kim (&lt;a href=&#34;mailto:evandde@gmail.com&#34;&gt;evandde@gmail.com&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;All files except &lt;code&gt;ICRP07DATA&lt;/code&gt; directory and its inside are licensed under a Creative Commons license: &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://creativecommons.org/licenses/by-nc-sa/4.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The files in &lt;code&gt;ICRP07DATA&lt;/code&gt; directory is from ICRP 107 copyright 2008 Eckerman and Endo. This data is provided with the following text in the license.txt file:&lt;/p&gt;
&lt;p&gt;ICRP-07 Data Files Copyright Notice&lt;/p&gt;
&lt;p&gt;Copyright (C) 2008 A. Endo and K.F. Eckerman, Authors. All Rights Reserved.&lt;/p&gt;
&lt;p&gt;Permission is hereby granted to any person obtaining a copies of the ICRP-07 data files and associated documentation to use, copy, and distribute these materials and the documentation for educational, research, and not-for-profit purposes, without fee and without a signed licensing agreement provided that the file LICENSE.TXT containing the above copyright notice, this paragraph and the following two paragraphs appears in all copies, modifications, and distributions.&lt;/p&gt;
&lt;p&gt;IN NO EVENT SHALL THE AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THE SOFTWARE, ITS DATA FILES, AND THE DOCUMENTATION.&lt;/p&gt;
&lt;p&gt;THE AUTHORS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE, DATA FILES AND ACCOMPANYING DOCUMENTATION PROVIDED HEREUNDER IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;. THE AUTHORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, FUTURE UPDATES, ENHANCEMENTS, OR MODIFICATIONS TO THE SOFTWARE.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;계산의 편의를 위해 Yield값을 근사적으로 이용하였으며 엑스선의 방출률을 무시했습니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Geant4 Version에 따라 동작을 달리하도록 코딩하는 법</title>
      <link>https://evandde.github.io/geant4-coding-asversion/</link>
      <pubDate>Fri, 24 Sep 2021 10:05:36 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-coding-asversion/</guid>
      <description>&lt;p&gt;Geant4 코드 작성 시, 연동되는 Geant4의 버전을 확인하고 버전에 따라 동작을 달리 하도록 코딩하는 방법을 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;G4Version.hh 헤더를 포함시킴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;#define&lt;/code&gt; 전처리기를 통해 정의되는 &lt;code&gt;G4VERSION_NUMBER&lt;/code&gt; 매크로상수를 이용하여 Geant4의 &lt;strong&gt;버전 번호&lt;/strong&gt; 확인&lt;/p&gt;
&lt;p&gt;버전 번호는 정수값으로 부여되며 다음의 규칙을 따름&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;A&lt;/font&gt;&lt;font color=blue&gt;B&lt;/font&gt;&lt;font color=green&gt;C&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;A&lt;/font&gt;: Major version number&lt;/p&gt;
&lt;p&gt;&lt;font color=blue&gt;B&lt;/font&gt;: Minor version number&lt;/p&gt;
&lt;p&gt;&lt;font color=green&gt;C&lt;/font&gt;: patch number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예시&lt;/p&gt;
&lt;p&gt;Geant4 Version &lt;font color=red&gt;9&lt;/font&gt;.&lt;font color=blue&gt;6&lt;/font&gt;의 &lt;code&gt;G4VERSION_NUMBER&lt;/code&gt;는 &lt;font color=red&gt;9&lt;/font&gt;&lt;font color=blue&gt;6&lt;/font&gt;&lt;font color=green&gt;0&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;Geant4 Version &lt;font color=red&gt;10&lt;/font&gt;.&lt;font color=blue&gt;7&lt;/font&gt; patch 0&lt;font color=green&gt;2&lt;/font&gt;의 &lt;code&gt;G4VERSION_NUMBER&lt;/code&gt;는 &lt;font color=red&gt;10&lt;/font&gt;&lt;font color=blue&gt;7&lt;/font&gt;&lt;font color=green&gt;2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 외, &lt;code&gt;G4VERSION_TAG&lt;/code&gt; 매크로상수나, G4String 자료형의 &lt;code&gt;G4Version&lt;/code&gt;, &lt;code&gt;G4Date&lt;/code&gt; 변수를 이용할 수도 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;g4versionhh&#34;&gt;G4Version.hh&lt;/h2&gt;
&lt;p&gt;Geant4에서는 현재 이용중인 Geant4 라이브러리의 버전 정보를 담고있는 G4Version.hh 헤더를 제공합니다.&lt;/p&gt;
&lt;p&gt;사용자는, 코드 어느 곳에서든 이 헤더를 포함시켜서 Geant4의 버전 정보를 이용할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;g4version_number&#34;&gt;G4VERSION_NUMBER&lt;/h3&gt;
&lt;p&gt;가장 많이 쓰일 것으로 생각되는 매크로상수입니다.&lt;/p&gt;
&lt;p&gt;G4Version.hh 파일 내에서, 다음과 같은 코드를 통해 정의되어 있습니다. (Version 10.7 patch 02 기준)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#ifndef G4VERSION_NUMBER
	#define G4VERSION_NUMBER 1072
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;G4VERSION_NUMBER&lt;/code&gt;라는 매크로상수는 Geant4의 버전 번호를 의미하는 정수값으로 부여되며 다음의 규칙을 따릅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=red&gt;A&lt;/font&gt;&lt;font color=blue&gt;B&lt;/font&gt;&lt;font color=green&gt;C&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;A&lt;/font&gt;: Major version number&lt;/p&gt;
&lt;p&gt;&lt;font color=blue&gt;B&lt;/font&gt;: Minor version number&lt;/p&gt;
&lt;p&gt;&lt;font color=green&gt;C&lt;/font&gt;: patch number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;예를 들어 Geant4 Version &lt;font color=red&gt;9&lt;/font&gt;.&lt;font color=blue&gt;6&lt;/font&gt;의 &lt;code&gt;G4VERSION_NUMBER&lt;/code&gt;는 &lt;font color=red&gt;9&lt;/font&gt;&lt;font color=blue&gt;6&lt;/font&gt;&lt;font color=green&gt;0&lt;/font&gt;이 됩니다. (patch 번호가 없으면 0번으로 붙게됩니다)&lt;/p&gt;
&lt;p&gt;또 다른 예로, Geant4 Version &lt;font color=red&gt;10&lt;/font&gt;.&lt;font color=blue&gt;7&lt;/font&gt; patch 0&lt;font color=green&gt;2&lt;/font&gt;의 &lt;code&gt;G4VERSION_NUMBER&lt;/code&gt;는 &lt;font color=red&gt;10&lt;/font&gt;&lt;font color=blue&gt;7&lt;/font&gt;&lt;font color=green&gt;2&lt;/font&gt;가 됩니다. (10.x 버전 이후의 경우에는 major version number가 두자리수가 됩니다)&lt;/p&gt;
&lt;p&gt;사용자는 이 매크로상수를 다음과 같이 활용할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;G4Version.hh&amp;quot;

// ...

if(G4VERSION_NUMBER &amp;gt;= 1000)
{
	// What to do when the version is 10.x
}
else
{
	// What to do when the version is 9.x
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;g4version_tag&#34;&gt;G4VERSION_TAG&lt;/h3&gt;
&lt;p&gt;이 매크로상수는 G4Version.hh 파일 내에서, 다음과 같은 코드를 통해 정의되어 있습니다. (Version 10.7 patch 02 기준)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#ifndef G4VERSION_TAG
	#define G4VERSION_TAG &amp;quot;$Name: geant4-10-07-patch-02 $&amp;quot;
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Geant4의 버전명이 보다 상세하게 풀어서 쓰여있습니다.&lt;/p&gt;
&lt;h3 id=&#34;g4version&#34;&gt;G4Version&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;G4Version&lt;/code&gt;은 G4Version.hh에 정의된 G4String형 변수입니다. 다음과 같은 코드를 통해 정의되어 있습니다. (Version 10.7 patch 02 기준)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#ifdef G4MULTITHREADED
static const G4String G4Version = &amp;quot;$Name: geant4-10-07-patch-02 [MT]$&amp;quot;;
#else
static const G4String G4Version = &amp;quot;$Name: geant4-10-07-patch-02 $&amp;quot;;
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;G4VERSION_TAG&lt;/code&gt; 매크로상수와 기본적으로 같은 값을 가집니다만, Multi-threading 옵션을 켜고 설치한 Geant4의 경우에는 &lt;code&gt;G4Version&lt;/code&gt;변수의 끝에 &lt;code&gt;[MT]&lt;/code&gt; 표시가 추가됩니다.&lt;/p&gt;
&lt;h3 id=&#34;g4date&#34;&gt;G4Date&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;G4Date&lt;/code&gt;은 G4Version.hh에 정의된 G4String형 변수입니다. 다음과 같은 코드를 통해 정의되어 있습니다. (Version 10.7 patch 02 기준)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;static const G4String G4Date = &amp;quot;(11-June-2021)&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;해당 버전이 출시된 날짜가 저장되어 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 UI command 소개 - 반복문</title>
      <link>https://evandde.github.io/geant4-uicommand-loop/</link>
      <pubDate>Mon, 05 Apr 2021 17:13:04 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-uicommand-loop/</guid>
      <description>&lt;p&gt;Geant4 UI command에서 활용 가능한 반복문. &lt;code&gt;/control/loop&lt;/code&gt;와 &lt;code&gt;/control/foreach&lt;/code&gt;에 대해 알아봅니다.&lt;/p&gt;
&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;Geant4에서 built-in UI command로 제공하는 반복문은 두 가지입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/control/loop&lt;/li&gt;
&lt;li&gt;/control/foreach&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 반복문의 중요한 특징은 &amp;ldquo;&lt;strong&gt;다른 매크로파일을 반복적으로 실행시킨다&lt;/strong&gt;&amp;ldquo;는 점입니다.&lt;/p&gt;
&lt;p&gt;각각의 용법과 함께 좀 더 자세히 살펴보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controlloop&#34;&gt;/control/loop&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/loop&lt;/code&gt; 반복문은 대개의 프로그래밍 언어가 제공하는 for문과 유사합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;시작&lt;/strong&gt;, &lt;strong&gt;끝&lt;/strong&gt;, &lt;strong&gt;간격&lt;/strong&gt;을 입력하여 &lt;strong&gt;카운터를 증감&lt;/strong&gt;시키며 &lt;strong&gt;다른 매크로파일을 실행&lt;/strong&gt;시켜줍니다.&lt;/p&gt;
&lt;h3 id=&#34;사용법&#34;&gt;사용법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/control/loop 매크로파일명 카운터변수명 시작값 끝값 간격&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;이 때, &lt;code&gt;매크로파일명&lt;/code&gt;과 &lt;code&gt;카운터변수명&lt;/code&gt;은 문자열(string)로 인식하고, &lt;code&gt;시작값&lt;/code&gt;, &lt;code&gt;끝값&lt;/code&gt;, &lt;code&gt;간격&lt;/code&gt;은 실수형(double)으로 인식합니다.&lt;/p&gt;
&lt;p&gt;이렇게 입력하면, &lt;code&gt;매크로파일&lt;/code&gt;에서 &lt;code&gt;카운터변수&lt;/code&gt;를 &lt;code&gt;시작&lt;/code&gt;~&lt;code&gt;끝&lt;/code&gt;값으로 aliasing 시켜줍니다. 즉, &lt;code&gt;매크로파일&lt;/code&gt; 내에서는 &lt;code&gt;{카운터변수}&lt;/code&gt;와 같이 입력하면 되는 것이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;간격&lt;/code&gt; 값은 생략 가능합니다. 생략할 경우 기본값으로 &lt;strong&gt;1&lt;/strong&gt;이 사용됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;사용예시&#34;&gt;사용예시&lt;/h3&gt;
&lt;p&gt;다음과 같은 매크로를 만들어봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/energy 10. MeV
/run/beamOn 10000

/gun/energy 12. MeV
/run/beamOn 10000

/gun/energy 14. MeV
/run/beamOn 10000

/gun/energy 16. MeV
/run/beamOn 10000

/gun/energy 18. MeV
/run/beamOn 10000

/gun/energy 20. MeV
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 에너지 값이 10~20으로 2씩 바뀌고 있을 뿐, 나머지는 반복됩니다.&lt;/p&gt;
&lt;p&gt;이 경우 다음과 같이 두 개의 파일로 나누어 작성하면 동일하게 동작합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;주 매크로파일&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/loop myRun.mac ene 10. 20. 2.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;myRun.mac&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/energy {ene} MeV
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controlforeach&#34;&gt;/control/foreach&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/foreach&lt;/code&gt; 반복문은 대개의 프로그래밍 언어가 제공하는 range-based for문과 유사합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;카운터&lt;/strong&gt;를 &lt;strong&gt;제시된 목록의 각 값&lt;/strong&gt;으로 바꾸어가며 &lt;strong&gt;다른 매크로파일을 반복적으로 실행&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;h3 id=&#34;사용법-1&#34;&gt;사용법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/control/foreach 매크로파일명 카운터변수명 &amp;quot;반복할값목록&amp;quot;&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;여기서 &lt;code&gt;&amp;quot;반복할값목록&amp;quot;&lt;/code&gt;을 &lt;font color=red&gt;입력할 때 주의점&lt;/font&gt;이 두 가지 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;목록 전체를 반드시 &amp;quot;&amp;quot;(double-quote)로 감쌀 것&lt;/li&gt;
&lt;li&gt;목록의 각 값은 띄어쓰기로 구분할 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 입력하면, &lt;code&gt;매크로파일&lt;/code&gt;에서 &lt;code&gt;카운터변수&lt;/code&gt;를 &lt;code&gt;&amp;quot;반복할값목록&amp;quot;&lt;/code&gt;에 적힌 각각의 값으로 aliasing 시켜줍니다. 즉, &lt;code&gt;매크로파일&lt;/code&gt; 내에서는 &lt;code&gt;{카운터변수}&lt;/code&gt;와 같이 입력하면 되는 것이죠.&lt;/p&gt;
&lt;h3 id=&#34;사용예시-1&#34;&gt;사용예시&lt;/h3&gt;
&lt;p&gt;다음과 같은 매크로를 만들어 봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/particle p
/run/beamOn 10000

/gun/particle e-
/run/beamOn 10000

/gun/particle e+
/run/beamOn 10000

/gun/particle gamma
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서는 입자가 p, e-, e+, gamma로 바뀌고 있을 뿐, 나머지는 반복됩니다.&lt;/p&gt;
&lt;p&gt;이 경우 다음과 같이 두 개의 파일로 나누어 작성하면 동일하게 동작합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;주 매크로파일&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/foreach myRun.mac pname &amp;quot;p e- e+ gamma&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;myRun.mac&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/particle {pname}
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4 UI command 소개 - /control/alias</title>
      <link>https://evandde.github.io/geant4-uicommand-alias/</link>
      <pubDate>Mon, 05 Apr 2021 15:20:37 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-uicommand-alias/</guid>
      <description>&lt;p&gt;Geant4 UI command 중, 자주 반복되는 문구를 간단하게 줄여주는 명령어. &amp;ldquo;/control/alias&amp;quot;에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/alias&lt;/code&gt; 명령어는 &lt;strong&gt;특정 문구를 반복적으로 사용&lt;/strong&gt;해야 할 때, 별명을 지어주는 명령어입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;사용법&#34;&gt;사용법&lt;/h2&gt;
&lt;h3 id=&#34;별명-지어주기&#34;&gt;별명 지어주기&lt;/h3&gt;
&lt;p&gt;별명을 지어줄 때에는 &lt;code&gt;/control/alias 별명 원래내용&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;/tracking/verbose&lt;/code&gt;라는 명령어를 &lt;code&gt;tv&lt;/code&gt;로 줄여서 사용하고 싶다면 다음과 같이 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/alias tv /tracking/verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    만약 입력하는 내용에 띄어쓰기가 포함되어 있다면, &amp;ldquo;&amp;quot;(double-quote)로 묶어서 입력합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;별명-사용하기&#34;&gt;별명 사용하기&lt;/h3&gt;
&lt;p&gt;앞서 부여한 별명을 사용할 때에는 &lt;code&gt;{별명}&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;예를 &lt;code&gt;tv&lt;/code&gt;에 대해 위에서처럼 별명을 붙여줬다면, &lt;code&gt;/tracking/verbose 1&lt;/code&gt;을 다음과 같이 줄여서 사용할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /tracking/verbose 1
{tv} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;중요한-특징&#34;&gt;중요한 특징&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;alias로 호출되어 불려온 값은 무조건 string 형태로 인식합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;명령어만 별명을 부여할 수 있는 것이 아닙니다. 어떤 문자열이든 별명을 부여해줄 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;alias된 값을 중첩하여 불러올 수도 있습니다.&lt;/p&gt;
&lt;p&gt;예시)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/alias file1 /diskA/dirX/fileXX.dat
/control/alias file2 /diskA/dirY/fileYY.dat
/control/alias run 1

# /myDirectory/myCommand /diskA/dirX/fileXX.dat
# /myDirectory/myCommand {file1}
/myDirectory/myCommand {file{run}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;/control/loop, /control/foreach 명령어와 조합하여 응용하면 상당히 강력한 효과를 얻을 수 있습니다.&lt;/b&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4의 UI Command 기초 이론</title>
      <link>https://evandde.github.io/geant4-uicommand-basic/</link>
      <pubDate>Mon, 22 Mar 2021 11:06:31 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-uicommand-basic/</guid>
      <description>&lt;p&gt;Geant4는 UI command라는 개념을 통해 C++ 언어로 하드코딩 하지 않고도 시뮬레이션 전반을 핸들링하거나 모니터링할 수 있도록 합니다. 이 글에서는 Geant4의 UI Command 사용에 대한 기초 이론을 다룹니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ui-command-개념&#34;&gt;UI Command 개념&lt;/h2&gt;
&lt;p&gt;Geant4는 시뮬레이션 이전, 도중, 이후에 시뮬레이션의 조건 등을 조작하거나 정보를 추출하는 등의 다양한 기능을 수행할 수 있도록 UI Command라는 기능을 제공합니다.&lt;/p&gt;
&lt;p&gt;UI Command는 Geant4에서 &lt;strong&gt;기본적으로 제공&lt;/strong&gt;하는 &lt;strong&gt;built-in command&lt;/strong&gt;와, &lt;strong&gt;사용자가 직접 만들어 사용&lt;/strong&gt;하는 &lt;strong&gt;messenger 기반 command&lt;/strong&gt;로 구분할 수 있습니다. 둘 다 사용방법과 기본 이론은 동일합니다.&lt;/p&gt;
&lt;h3 id=&#34;built-in-command-일람&#34;&gt;Built-in Command 일람&lt;/h3&gt;
&lt;p&gt;Built-in command 목록을 확인하는 방법을 소개합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;공식 홈페이지에서 제공하는 &lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/Control/AllResources/Control/UIcommands/_.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;웹페이지&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qt 기반 GUI 형식으로 Geant4 어플리케이션을 실행한 뒤 &lt;strong&gt;왼쪽 부분의 Help 탭&lt;/strong&gt; 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qtui-help&#34; srcset=&#34;
               /geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_5c66d9ea9836c7cb1e4822537a16e814.png 400w,
               /geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_e44cb3a007f6c0ef711f95fe22458759.png 760w,
               /geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_5c66d9ea9836c7cb1e4822537a16e814.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ui-command의-구성&#34;&gt;UI Command의 구성&lt;/h2&gt;
&lt;h3 id=&#34;기본-요소&#34;&gt;기본 요소&lt;/h3&gt;
&lt;p&gt;UI Command는 다음의 세 가지로 구성됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=blue&gt;Command directory&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=green&gt;Command&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=red&gt;Parameter(s)&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실제 예시는 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/&lt;font color=blue&gt;run&lt;/font&gt;/&lt;font color=green&gt;verbose&lt;/font&gt; &lt;font color=red&gt;1&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;/&lt;font color=blue&gt;vis&lt;/font&gt;/&lt;font color=blue&gt;viewer&lt;/font&gt;/&lt;font color=green&gt;flush&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 &lt;font color=red&gt;Parameter(s)&lt;/font&gt;가 여러 개 사용될 경우 각각을 구분하는 구분자는 &lt;strong&gt;공백&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    공백이 있는 string을 파라미터로 사용해야 하는 경우에는, &amp;ldquo;&amp;quot;(double-quote)로 묶어줍니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Command 중에는 일부 parameter의 기본값이 존재해서 생략할 수 있는 경우도 있습니다. 만약 앞의 값을 생략하고 뒤의 값만 입력하려면, 생략할 값에 &lt;code&gt;!&lt;/code&gt;를 적으면 됩니다. 예를 들어, 처음 값을 생략하여 기본값을 사용하고, 두번째 값만 직접 입력한다면 다음과 같이 적을 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/directory/command ! second
&lt;/code&gt;&lt;/pre&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;주석&#34;&gt;주석&lt;/h3&gt;
&lt;p&gt;각 줄마다, &lt;code&gt;#&lt;/code&gt; 표시 이후는 주석처리됩니다.&lt;/p&gt;
&lt;p&gt;예를 들면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# This line will be commented
/run/verbose 1
/run/verbose 2 # After # mark will be commented.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ui-command의-입력&#34;&gt;UI Command의 입력&lt;/h2&gt;
&lt;p&gt;UI Command는 다음의 방법을 통해 입력 가능합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++ 코드 상에서 직접 입력&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;외부 파일을 통한 입력&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그램 실행 후, (G)UI 명령줄을 통한 입력&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c-코드-상에서-입력하기&#34;&gt;C++ 코드 상에서 입력하기&lt;/h3&gt;
&lt;p&gt;G4UImanager라는 클래스가 관련 기능을 담당합니다.&lt;/p&gt;
&lt;p&gt;이 클래스는 singleton 형태로 짜여있으며, GetUIpointer()라는 static 멤버함수를 통해 클래스 객체를 가져올 수 있습니다.&lt;/p&gt;
&lt;p&gt;멤버함수 중 ApplyCommand() 함수를 활용하면 UI command를 실행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 함수의 원형은 G4int ApplyCommand(const G4String&amp;amp; aCommand)로, 문자열을 입력으로 받고, 실행 결과를 정수값으로 반환합니다.&lt;/p&gt;
&lt;p&gt;사용 예시는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;G4UImanager::GetUIPointer()-&amp;gt;ApplyCommand(&amp;quot;/run/verbose 1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;ApplyCommand() 함수는 정상 실행 시 &lt;code&gt;0&lt;/code&gt;을 반환하고, 오류가 있을 시 &lt;code&gt;xyy&lt;/code&gt;형태의 양의 정수로 오류코드를 반환합니다. &lt;code&gt;x&lt;/code&gt;는 G4UIcommandStatus.hh의 enum에 정의된 값이고, &lt;code&gt;yy&lt;/code&gt;는 문제를 일으킨 첫 parameter의 번호입니다. 다음은 10.7 버전의 G4UIcommandStatus 클래스에서 발췌한 내용입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;enum G4UIcommandStatus
{
  fCommandSucceeded         = 0,
  fCommandNotFound          = 100,
  fIllegalApplicationState  = 200,
  fParameterOutOfRange      = 300,
  fParameterUnreadable      = 400,
  fParameterOutOfCandidates = 500,
  fAliasNotFound            = 600
};
&lt;/code&gt;&lt;/pre&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    ApplyCommand() 함수로 UI command 실행을 시도하였다가 모종의 문제로 인해 &lt;strong&gt;실행을 실패하더라도&lt;/strong&gt;, &lt;strong&gt;프로그램은 아무런 알림 없이 그냥 진행됩니다&lt;/strong&gt;. 필요하다면 코드 작성 시 반환되는 오류코드 값에 따라 대응하도록 &lt;strong&gt;직접&lt;/strong&gt; 코딩해주셔야 합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;외부-파일을-통한-입력&#34;&gt;외부 파일을 통한 입력&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;대부분의 경우&lt;/strong&gt; UI command는 이 방법을 통해 입력됩니다.&lt;/p&gt;
&lt;p&gt;이 방식을 이용하기 위해서는, 사용할 UI command를 ASCII 형태로 입력해 둔 파일이 필요합니다. 이 파일을 일반적으로 &lt;strong&gt;매크로파일&lt;/strong&gt;이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;이 방법의 가장 큰 장점은 &lt;strong&gt;소스코드를 다시 컴파일하지 않고도 수정 가능&lt;/strong&gt;하다는 점입니다.&lt;/p&gt;
&lt;p&gt;특정 인자를 약간씩 바꿔가며 여러 번 시뮬레이션을 돌려야하는 등의 작업을 수행할 때, 컴파일을 한 번만 해서 실행파일을 생성한 뒤 매크로파일만 수정하며 손쉽게 여러 조건의 시뮬레이션을 돌릴 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;사용을 위해서는 두 가지 준비가 필요합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;소스코드에서 매크로 파일을 사용하겠다는 선언 (UI command 중 &lt;code&gt;/control/execute 매크로파일명&lt;/code&gt; 이용)&lt;/p&gt;
&lt;p&gt;예를 들어, 일련의 UI command를 적어둔 파일 이름이 &lt;b&gt;run.mac&lt;/b&gt;이라면 다음과 같이 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;G4UImanager::GetUIPointer()-&amp;gt;ApplyCommand(&amp;quot;/control/execute run.mac&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매크로파일 작성 (&lt;b&gt;run.mac&lt;/b&gt; 파일의 예시)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/run/verbose 1
/tracking/verbose 1

# empty line will be ignored.

# You can also call another macro file here.
/control/execute run2.mac

/run/beamOn 100
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;매크로파일을 사용할 때의 주의사항은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;매크로파일 내의 내용 중 실행할 수 없는 명령줄을 만나면, &lt;code&gt;COMMAND NOT FOUND&lt;/code&gt; 경고문구가 발생하고 해당 매크로파일을 읽는 작업을 중단한 뒤 건너뜁니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매크로파일에 사용되는 명령어는 full-path로 작성해야 합니다. cd 등으로 경로이동을 시도하거나, 경로 정보 없이 command만 입력하면 오류가 발생합니다. 다음은 &lt;font color=red&gt;잘못된 사용 예&lt;/font&gt;입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /run/ # A macro file cannot contain &amp;quot;cd&amp;quot; command.
verbose 1 # &amp;quot;verbose&amp;quot; does not contain its path.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매크로파일의 경로가 프로그램 실행파일의 경로와 다를 경우, 경로까지 입력해줘야 합니다. 예를 들어, 한 단계 상위 디렉토리(&lt;code&gt;../&lt;/code&gt;)에 있는 &lt;b&gt;run.mac&lt;/b&gt; 파일을 이용하려면 다음과 같이 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;G4UImanager::GetUIPointer()-&amp;gt;ApplyCommand(&amp;quot;/control/execute ../run.mac&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gui-명령줄을-통한-입력&#34;&gt;(G)UI 명령줄을 통한 입력&lt;/h3&gt;
&lt;p&gt;프로그램을 실행한 뒤, GUI 혹은 UI 상에서 직접 명령줄을 통해 입력할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;여기에서는 마치 linux 상에서 디렉토리를 탐색하듯, &lt;code&gt;cd&lt;/code&gt; 명령어와 &lt;code&gt;ls&lt;/code&gt; 명령어 등도 이용 가능합니다.&lt;/p&gt;
&lt;p&gt;다음은 가장 많이 사용되는 Qt 기반 GUI에서 UI command를 입력하는 모습입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qtui-session&#34; srcset=&#34;
               /geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_eae5d0d054764d04283735ee9729f478.png 400w,
               /geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_b033bd2a7e94d3ad6d02f24eb48ee3ef.png 760w,
               /geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_eae5d0d054764d04283735ee9729f478.png&#34;
               width=&#34;751&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 공식 설치가이드 요약</title>
      <link>https://evandde.github.io/geant4-install/</link>
      <pubDate>Mon, 15 Feb 2021 12:45:56 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-install/</guid>
      <description>&lt;p&gt;이 글에서는 Geant4 공식 홈페이지에서 제공하는 설치가이드를 살펴보고, 대표적으로 사용되는 주요 옵션들에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;공식-설치가이드-위치&#34;&gt;공식 설치가이드 위치&lt;/h2&gt;
&lt;p&gt;제가 각 설치환경에서의 예시 글을 통해 설명드릴 수 있는 내용은 제한적입니다. 그러므로 공식 설치가이드가 어디에 있으며, 그 가이드에서 무엇을 살펴봐야 하는지 알려드리도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;우선 설치가이드는 다음의 과정을 따라가시면 확인할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://geant4.web.cern.ch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 공식 홈페이지&lt;/a&gt; 접속&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;화면 중간의 &lt;strong&gt;User Support&lt;/strong&gt; 탭에 있는 &lt;a href=&#34;http://geant4.web.cern.ch/support/user_documentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;guides&lt;/a&gt; 클릭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이후 나오는 User Documentation 페이지에서, &lt;a href=&#34;http://geant4-userdoc.web.cern.ch/geant4-userdoc/UsersGuides/InstallationGuide/html/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Installation Guide: For setting up Geant4 in your computing environment&lt;/a&gt;를 클릭 (pdf로 다운받거나, 혹은 이전 버전의 것을 볼 수도 있음)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설치가이드에 도착!&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;G4InstallGuide&#34; srcset=&#34;
               /geant4-install/G4InstallGuide_hu4de46dcaec84922cf7a201198da5b837_159320_b29519200c07ff596506457ef85eaa8a.png 400w,
               /geant4-install/G4InstallGuide_hu4de46dcaec84922cf7a201198da5b837_159320_183948af928f984c05dc5fb4d7acedcf.png 760w,
               /geant4-install/G4InstallGuide_hu4de46dcaec84922cf7a201198da5b837_159320_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/geant4-install/G4InstallGuide_hu4de46dcaec84922cf7a201198da5b837_159320_b29519200c07ff596506457ef85eaa8a.png&#34;
               width=&#34;760&#34;
               height=&#34;643&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;설치-필수선택사항-확인&#34;&gt;설치 필수/선택사항 확인&lt;/h2&gt;
&lt;p&gt;이 가이드에서 가장 먼저 보셔야할 부분은 &lt;strong&gt;Getting Started&lt;/strong&gt; 탭입니다. 이 곳에는 설치에 필요한 &lt;strong&gt;필수 사항&lt;/strong&gt;과, 꼭 필요하지는 않지만 편의에 따라 연동 가능한 &lt;strong&gt;선택 사항&lt;/strong&gt;에 대한 요구조건이 적혀있습니다.&lt;/p&gt;
&lt;h3 id=&#34;필수-사항&#34;&gt;필수 사항&lt;/h3&gt;
&lt;p&gt;맨처음에 나오는 &lt;strong&gt;OS/Software Prerequisites&lt;/strong&gt;는 &lt;strong&gt;필수 사항&lt;/strong&gt;에 대한 설명입니다.&lt;/p&gt;
&lt;p&gt;몇 가지 부분만 추려서 적어보겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;OS/Software Prerequisites&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geant4 Toolkit &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ 컴파일러 및 C++11 표준을 지원하는 표준 라이브러리
&lt;ul&gt;
&lt;li&gt;Linux의 경우에는 &lt;a href=&#34;http://gcc.gnu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GNU Compiler Collection&lt;/a&gt;(GCC) 4.9.3 이상
&lt;ul&gt;
&lt;li&gt;패키지 관리 시스템에서 기본 제공하는 GCC 컴파일러를 사용할 것을 강력히 권장함 (기본 제공 컴파일러가 버전 미달이면 따로 설치)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake&lt;/a&gt; 3.8 이상
&lt;ul&gt;
&lt;li&gt;패키지 관리 시스템에서 기본 제공하는 CMake를 사용할 것을 권장함 (기본 제공 CMake가 버전 미달이면 따로 설치하되, &lt;a href=&#34;https://cmake.org/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake 공식 다운로드 페이지&lt;/a&gt;에서 제공하는 binary 실행파일을 통한 최신버전 설치를 권장함)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;선택-사항&#34;&gt;선택 사항&lt;/h3&gt;
&lt;p&gt;다음으로 살펴야 할 내용은 &lt;strong&gt;Prerequisites for Optional Components of Geant4&lt;/strong&gt; 입니다. 이는 &lt;strong&gt;선택 사항&lt;/strong&gt;에 대한 설명입니다. 연동하여 설치할 수 있는 다양한 라이브러리가 제시되어 있습니다.&lt;/p&gt;
&lt;p&gt;먼저 CLHEP, Expat, zlib 관련 내용입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CLHEP, Expat and zlib Support Libraries&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cern.ch/clhep/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CLHEP&lt;/a&gt;, &lt;a href=&#34;https://libexpat.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expat&lt;/a&gt;, &lt;a href=&#34;https://zlib.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;zlib&lt;/a&gt;의 경우, Geant4에서 요구하는 최소한의 내용은 내장되어 있음&lt;/li&gt;
&lt;li&gt;다만 Linux와 macOS용 버전에는 Expat이 내장되어 있지 않으므로 별도 설치가 요구됨&lt;/li&gt;
&lt;li&gt;사용자가 해당 라이브러리의 기능을 더욱 확장하여 사용하고자 하는 경우 추가적으로 연동하여 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;위 내용 상, Linux에서 Geant4를 설치하는 경우에는 &lt;strong&gt;Expat은 필수 사항&lt;/strong&gt;으로 봐도 무방합니다.&lt;/p&gt;
&lt;p&gt;다음은 GDML 부분(&lt;strong&gt;GDML XML Geometry Support&lt;/strong&gt;)입니다. 이는 Geometry 입출력을 위한 라이브러리 중 하나입니다만, 여기서는 생략하겠습니다.&lt;/p&gt;
&lt;p&gt;다음은 그래픽 및 UI 사용을 위해 대부분 연동하여 설치하는 UI 및 가시화 관련 내용(&lt;strong&gt;User Interface and Visualization Drivers&lt;/strong&gt;)입니다.&lt;/p&gt;
&lt;p&gt;여기서는 대표적으로 많이 사용되는 Qt 라이브러리 관련 내용만 적겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;User Interface and Visualization Drivers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;아래에 나열한 패키지의 설치와 더불어, 사용자 시스템에 사용된 그래픽카드(NVIDIA 등)의 드라이버를 설치할 것을 강력히 권고합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qt UI 및 가시화 관련(모든 플랫폼)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/download-qt-for-application-development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qt5&lt;/a&gt; 헤더 및 라이브러리(Qt4는 이제 사용하지 않음)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opengl.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenGL&lt;/a&gt; 혹은 &lt;a href=&#34;https://www.mesa3d.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MesaGL&lt;/a&gt;의 헤더 및 라이브러리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X11 OpenGL 가시화 관련(Linux, macOS)
&lt;ul&gt;
&lt;li&gt;X11 헤더 및 라이브러리&lt;/li&gt;
&lt;li&gt;혹은 &lt;a href=&#34;https://www.mesa3d.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MesaGL&lt;/a&gt;의 헤더 및 라이브러리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 외에도 다양한 UI 및 가시화 옵션이 있으니 참고하시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;설치-옵션-확인하기&#34;&gt;설치 옵션 확인하기&lt;/h2&gt;
&lt;p&gt;설치가이드에서 다음으로 확인하셔야 할 부분은 &lt;strong&gt;Building and Installing&lt;/strong&gt; 탭입니다. 이 곳에는 여러분이 설치를 진행할 때, 어떤 옵션을 어떻게 주어야 원하는 조건에 따라 설치가 가능한 지에 대해 설명되어 있습니다.&lt;/p&gt;
&lt;p&gt;운영체제에 따라 핵심적인 설치 방법이 따로 정리되어 있습니다.&lt;/p&gt;
&lt;p&gt;특히, &lt;strong&gt;Geant4 Build Option&lt;/strong&gt; 이하의 내용에 추가옵션을 설정하는 방법이 기재되어 있습니다. 세부적인 설정을 변경하는 방법을 찾으신다면 이 부분을 살펴보시는 것도 좋습니다.&lt;/p&gt;
&lt;p&gt;여기서는 자주 사용되는 몇 가지만 다루겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Geant4 Build Option&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;설치 시 다양한 옵션을 &lt;code&gt;cmake&lt;/code&gt; 명령어에서 &lt;code&gt;-D&lt;/code&gt; 플래그를 통해 설정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들면, 다음과 같이 명령줄을 입력하면 설치경로(&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;)를 &lt;code&gt;/opt/geant4&lt;/code&gt;로 설정하고, GDML을 지원하게끔 설치하게 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -DCMAKE_INSTALL_PREFIX=/opt/geant4 -DGEANT4_USE_GDML=ON /path/to/geant4-source
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;CMake는 Curses (UNIX 한정)나 Qt (UNIX 혹은 Windows) 기반의 터미널/GUI 형태의 인터페이스도 제공하고 있으므로, 이를 활용하여 다양한 옵션을 살펴보고 설정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Standard Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Geant4가 설치될 경로. Autotools에서의 &lt;code&gt;--prefix&lt;/code&gt;와 동일.&lt;/li&gt;
&lt;li&gt;Unix 시스템의 기본값은 &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;절대경로로 입력하기를 권장.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;기본값은 &lt;code&gt;OFF&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ON&lt;/code&gt;으로 설정되면, Geant4 라이브러리가 multi-threading을 지원하도록 빌드함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;기본값은 &lt;code&gt;OFF&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ON&lt;/code&gt;으로 설정되면, Geant4 설치 및 사용에 필요한 크로스섹션 데이터를 &lt;code&gt;GEANT4_INSTALL_DATADIR&lt;/code&gt;에서 찾아본 뒤, 부족한 데이터를 자동으로 인터넷에서 다운받은 뒤 압축을 풀어 &lt;code&gt;GEANT4_INSTALL_DATADIR&lt;/code&gt;에 넣고 설치를 진행함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATADIR&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;기본값은 &lt;code&gt;CMAKE_INSTALL_DATAROOTDIR&lt;/code&gt;. 설치경로의 &lt;code&gt;share/&lt;/code&gt; 임.&lt;/li&gt;
&lt;li&gt;Geant4 설치 및 사용에 필요한 크로스섹션 데이터를 이 경로에서 탐색함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;기본값은 &lt;code&gt;OFF&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ON&lt;/code&gt;으로 설정되면, Qt5 UI 및 가시화 라이브러리를 연동하여 빌드함.&lt;/li&gt;
&lt;li&gt;경로 관련 문제가 발생하면, Advanced Options 부분의 &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt; 항목을 참고.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;기본값은 &lt;code&gt;OFF&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ON&lt;/code&gt;으로 설정되면, X11 OpenGL 가시화 라이브러리를 연동하여 빌드함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Geant4 Windows 10에 설치 무작정 따라하기(초보자용)</title>
      <link>https://evandde.github.io/g4install-107p2-win10basic/</link>
      <pubDate>Thu, 15 Jul 2021 21:41:51 +0900</pubDate>
      <guid>https://evandde.github.io/g4install-107p2-win10basic/</guid>
      <description>&lt;p&gt;이 글은 Geant4 초보자 혹은 Geant4를 처음 사용하시는 분들에게, &lt;b&gt;Windows 10을 사용하는 개인 컴퓨터 환경&lt;/b&gt;에서 Geant4를 최대한 쉽게 설치하는 방법을 전달하기 위해 작성하였습니다. &lt;b&gt;(인터넷 연결 필요)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;이 글에서 제시하는 방향보다, 각자에게 더 적합한 Geant4 설치 방향이 있을 수 있습니다.&lt;/p&gt;
&lt;p&gt;하지만, 이 글은 &lt;b&gt;배경지식 없이도 실무에 사용 가능한 수준으로 Geant4를 설치하는 것을 목적&lt;/b&gt;으로 하기 때문에, 작업 난이도 측면에서 쉬운 방향을 택하였습니다.&lt;/p&gt;
&lt;p&gt;다양한 설치 옵션을 입맛에 맞게 변경하기보다는, &amp;ldquo;&lt;strong&gt;우선 Geant4라는걸 써봐야겠다&lt;/strong&gt;&amp;rdquo; 라는 분에게 권장합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;작업-흐름-요약&#34;&gt;작업 흐름 요약&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Windows 10에 Microsoft Visual Studio 2019에 포함된 빌드 도구를 설치합니다.&lt;/li&gt;
&lt;li&gt;Microsoft Visual Studio 2019 빌드 도구에 호환되는 Qt5 라이브러리를 설치합니다.&lt;/li&gt;
&lt;li&gt;Windows 10에 Geant4를 설치합니다.
&lt;ul&gt;
&lt;li&gt;크로스섹션 데이터는 설치과정에서 자동으로 다운되도록 할 예정이므로 인터넷 연결이 필요합니다.&lt;/li&gt;
&lt;li&gt;CLHep은 내장된 사양만 사용하며, 따로 설치하지 않을 것입니다.&lt;/li&gt;
&lt;li&gt;그래픽 라이브러리로 Qt5를 연동하여 설치합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Geant4 예제를 실행시켜, 잘 설치되었는지 확인합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vs2019-빌드-도구-설치&#34;&gt;VS2019 빌드 도구 설치&lt;/h2&gt;
&lt;p&gt;이 글에서는 Geant4 설치를 위한 빌드 도구로 gcc보다는 MSVC(Microsoft Visual C++)를 이용하여 진행할 예정입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/InstallationGuide/html/installguide.html#on-windows-platforms&#34;&gt;공식 가이드&lt;/a&gt;에 따르면, Cygwin이나 MinGW도 테스트를 해보거나 직접적인 지원을 하는건 아니지만 Unix 플랫폼에서와 유사하게 진행하면 될 것이라고 합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Builds of Geant4 using Cygwin or MinGW with their own compilers or the Microsoft C++ Compiler are neither supported or tested, though the CMake system is expected to work under these toolchains. If you are using these tools via their native shells and with their own versions of CMake, then the instructions for building and installing on Unix platforms &lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/InstallationGuide/html/installguide.html#unixbuild&#34;&gt;On Unix Platforms&lt;/a&gt; can be used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;제 경험상으로는 Linux/Unix 환경에서 gcc를 사용했던 경험에 비해 그리 시원치 않아서, 개인적으로 Windows 10에서 설치 시에는 MSVC를 추천합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;다운로드&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;Microsoft에서 제공하는 Visual Studio 2019용 Build Tools는 &lt;a href=&#34;https://visualstudio.microsoft.com/ko/downloads/#build-tools-for-visual-studio-2019&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 무료로 받을 수 있습니다. 아래 그림에서 보이는 다운로드 링크를 누르면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_download&#34; srcset=&#34;
               /g4install-107p2-win10basic/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_df9e25f1c544aa68a78a92d89e0c13a0.png 400w,
               /g4install-107p2-win10basic/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_b06efe6e544273a41390ecc7e564f614.png 760w,
               /g4install-107p2-win10basic/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_df9e25f1c544aa68a78a92d89e0c13a0.png&#34;
               width=&#34;760&#34;
               height=&#34;135&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 뒤 실행하면, 아래 그림과 같은 창이 뜰 것입니다. 이 중 &lt;b&gt;C++를 사용한 데스크톱 개발&lt;/b&gt;을 클릭합니다. 오른쪽 설치 세부 정보에서, 자동으로 선택사항 중 일부가 선택될 것입니다. 혹시라도 &lt;b&gt;Windows용 C++ CMake 도구&lt;/b&gt;가 선택이 안되어있다면, &lt;b&gt;꼭 선택&lt;/b&gt;해주시기 바랍니다. 선택을 완료하셨다면 설치를 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_install&#34; srcset=&#34;
               /g4install-107p2-win10basic/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_c5d8029504a4fb8ef927f8c6b3a180ce.png 400w,
               /g4install-107p2-win10basic/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_0b55a1d22f1be37baad8292a20a41ba4.png 760w,
               /g4install-107p2-win10basic/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_c5d8029504a4fb8ef927f8c6b3a180ce.png&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치여부-확인&#34;&gt;설치여부 확인&lt;/h3&gt;
&lt;p&gt;제대로 설치가 되었는지 확인해보겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[S]&lt;/b&gt; 를 눌러 검색을 띄움&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;developer powershell&lt;/code&gt;을 입력하여 &lt;b&gt;Developer PowerShell for VS 2019&lt;/b&gt;를 찾은 뒤 실행&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_test1&#34; srcset=&#34;
               /g4install-107p2-win10basic/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_226fbd82f31d51e44fa9627733e16400.png 400w,
               /g4install-107p2-win10basic/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_be659fa34a05acdcb7fbe530b7909974.png 760w,
               /g4install-107p2-win10basic/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_226fbd82f31d51e44fa9627733e16400.png&#34;
               width=&#34;760&#34;
               height=&#34;623&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cl&lt;/code&gt;을 입력하여, 다음 그림과 같이 사용법(usage)이 뜨는지 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_test2&#34; srcset=&#34;
               /g4install-107p2-win10basic/vs2019buildtools_test2_hub7498eb52e09045178598a550d3695f5_15086_9269aa39a59933636d852135180485aa.png 400w,
               /g4install-107p2-win10basic/vs2019buildtools_test2_hub7498eb52e09045178598a550d3695f5_15086_4c3b6009b4d76a83b68f225ace1e4e45.png 760w,
               /g4install-107p2-win10basic/vs2019buildtools_test2_hub7498eb52e09045178598a550d3695f5_15086_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/vs2019buildtools_test2_hub7498eb52e09045178598a550d3695f5_15086_9269aa39a59933636d852135180485aa.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;확인이 끝난 뒤에는, &lt;b&gt;Developer PowerShell을 일단 종료&lt;/b&gt;(Qt 설치 시 충돌 방지)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;qt5-라이브러리-설치&#34;&gt;Qt5 라이브러리 설치&lt;/h2&gt;
&lt;p&gt;Qt는 Geant4에서 GUI를 띄우기 위해 필요한 라이브러리입니다. Qt는 라이센스 이슈 때문인지, 설치하려면 &lt;b&gt;Qt 계정 회원가입 및 로그인이 필요&lt;/b&gt;합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Qt는 무료로 이용하고자 할 경우,  &lt;a href=&#34;https://www.qt.io/licensing/open-source-lgpl-obligations?hsLang=en&#34;&gt;(L)GPL 라이센스 규약&lt;/a&gt;을 따를 것을 요구하니, 라이센스에 관한 정보가 필요하신 분은 참고하시기 바랍니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;다운로드-1&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;일단 &lt;a href=&#34;https://www.qt.io/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 Qt online installer를 다운받을 수 있습니다. 처음 들어오시면 헤매실까봐 눌러야하는 링크 순서를 보여드리니, 아래 그림을 참고해서 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_download1&#34; srcset=&#34;
               /g4install-107p2-win10basic/qt_download1_hu7c615b8709f940ffa5bb13f451cd49f9_26021_d55bd4dfc6220172c0712e02e46f26f3.png 400w,
               /g4install-107p2-win10basic/qt_download1_hu7c615b8709f940ffa5bb13f451cd49f9_26021_4bc597226c2518d91ab75a8608765824.png 760w,
               /g4install-107p2-win10basic/qt_download1_hu7c615b8709f940ffa5bb13f451cd49f9_26021_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/qt_download1_hu7c615b8709f940ffa5bb13f451cd49f9_26021_d55bd4dfc6220172c0712e02e46f26f3.png&#34;
               width=&#34;625&#34;
               height=&#34;293&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_download2&#34; srcset=&#34;
               /g4install-107p2-win10basic/qt_download2_hu61e4050399c5055af5f56e9b4d4c2f15_36717_a356c2ea2431d6ff850205a5495bc8f6.png 400w,
               /g4install-107p2-win10basic/qt_download2_hu61e4050399c5055af5f56e9b4d4c2f15_36717_0bf0974ceadca9bbee6f8e96b3469f0e.png 760w,
               /g4install-107p2-win10basic/qt_download2_hu61e4050399c5055af5f56e9b4d4c2f15_36717_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/qt_download2_hu61e4050399c5055af5f56e9b4d4c2f15_36717_a356c2ea2431d6ff850205a5495bc8f6.png&#34;
               width=&#34;760&#34;
               height=&#34;184&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_download3&#34; srcset=&#34;
               /g4install-107p2-win10basic/qt_download3_huea4d9f6c97de37a43c8a70ad4330f089_230053_4610af1c0ea0314a73cac61bbb438dd3.png 400w,
               /g4install-107p2-win10basic/qt_download3_huea4d9f6c97de37a43c8a70ad4330f089_230053_475143fb405d8d23955cf331866192f7.png 760w,
               /g4install-107p2-win10basic/qt_download3_huea4d9f6c97de37a43c8a70ad4330f089_230053_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/qt_download3_huea4d9f6c97de37a43c8a70ad4330f089_230053_4610af1c0ea0314a73cac61bbb438dd3.png&#34;
               width=&#34;760&#34;
               height=&#34;450&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치-1&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;설치파일을 다운받은 뒤 실행하시면, 다음과 같이 계정을 입력하라는 창이 뜹니다. 이미 가입하셨다면 Qt 계정을 입력하여 로그인하시고, 계정이 없으시다면 &lt;u&gt;Sign up&lt;/u&gt;을 눌러 계정을 생성한 뒤 입력하시면 됩니다. 가입 시 이메일 인증절차가 필요합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install1&#34; srcset=&#34;
               /g4install-107p2-win10basic/qt_install1_hu818c53db882509e75ab7777b3766b47b_210990_96e11dcb13e813affb7354c64a6a85d9.png 400w,
               /g4install-107p2-win10basic/qt_install1_hu818c53db882509e75ab7777b3766b47b_210990_e514343e94719cdac1452220c0bdca59.png 760w,
               /g4install-107p2-win10basic/qt_install1_hu818c53db882509e75ab7777b3766b47b_210990_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/qt_install1_hu818c53db882509e75ab7777b3766b47b_210990_96e11dcb13e813affb7354c64a6a85d9.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;이어서 라이센스 동의 관련 내용이 뜹니다. 첫 번째 체크박스는 라이센스에 동의하겠다는 것이니 체크를 반드시 하셔야 합니다. 두 번째 네모상자 및 체크박스는 사용자가 기관인지 개인인지를 확인하는 란입니다. 기관이시면 기관명을 적고, 개인이시면 체크박스에 체크를 하면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install2&#34; srcset=&#34;
               /g4install-107p2-win10basic/qt_install2_hu1ab13f0541a3679f75fdc0602ad75b9d_222457_d3ea5d1287a138a47c5a5fff5719b2cf.png 400w,
               /g4install-107p2-win10basic/qt_install2_hu1ab13f0541a3679f75fdc0602ad75b9d_222457_ae8408564ab169f580a24fcb3d8ed46f.png 760w,
               /g4install-107p2-win10basic/qt_install2_hu1ab13f0541a3679f75fdc0602ad75b9d_222457_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/qt_install2_hu1ab13f0541a3679f75fdc0602ad75b9d_222457_d3ea5d1287a138a47c5a5fff5719b2cf.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Next 버튼을 누르다보면, Qt 발전을 위해 정보 제공 동의를 하는 내용이 나오는데, 이는 자유롭게 선택하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install3&#34; srcset=&#34;
               /g4install-107p2-win10basic/qt_install3_hufbf6bdf32d1a86c543ce2016bcb78281_215592_70a047b113f0c9a1c187bc348f5ec37b.png 400w,
               /g4install-107p2-win10basic/qt_install3_hufbf6bdf32d1a86c543ce2016bcb78281_215592_17f72271658d23736c74ed2bbf5abc69.png 760w,
               /g4install-107p2-win10basic/qt_install3_hufbf6bdf32d1a86c543ce2016bcb78281_215592_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/qt_install3_hufbf6bdf32d1a86c543ce2016bcb78281_215592_70a047b113f0c9a1c187bc348f5ec37b.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;다음으로 설치경로 및 설치유형 선택이 나옵니다.&lt;/p&gt;
&lt;p&gt;일단, 이 글에서 설치 경로는 기본경로인 &lt;code&gt;C:\Qt&lt;/code&gt;로 가겠습니다.&lt;/p&gt;
&lt;p&gt;설치 유형은 &lt;b&gt;Custom Installation&lt;/b&gt;이 선택된대로 놔두시면 됩니다.&lt;/p&gt;
&lt;p&gt;맨 아래의 &lt;b&gt;Associate common file types with Qt Creator.&lt;/b&gt; 체크박스의 경우에는, 여러분이 Qt Creator라는 IDE를 사용하실 예정이라면 체크하시고, 사용할 계획이 없으시다면 체크를 해제하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install4&#34; srcset=&#34;
               /g4install-107p2-win10basic/qt_install4_hu6fadece4545434b2bd1de367d689d836_217054_da82cc6fb696fae419854f86e54d98b8.png 400w,
               /g4install-107p2-win10basic/qt_install4_hu6fadece4545434b2bd1de367d689d836_217054_4bb97a509b5925af6d4dfd08b704b460.png 760w,
               /g4install-107p2-win10basic/qt_install4_hu6fadece4545434b2bd1de367d689d836_217054_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/qt_install4_hu6fadece4545434b2bd1de367d689d836_217054_da82cc6fb696fae419854f86e54d98b8.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Next를 누르면 설치할 항목을 고르는 부분이 나옵니다. &lt;strong&gt;여기가 중요&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;p&gt;일단 &lt;font color=red&gt;&lt;b&gt;Deselect All을 눌러 모든 항목을 선택 해제&lt;/b&gt;&lt;/font&gt;합니다.&lt;/p&gt;
&lt;p&gt;그리고나서, &lt;font color=red&gt;&lt;b&gt;Qt &amp;gt; Qt 5.15.2 &amp;gt; MSVC 2019 64-bit만 선택&lt;/b&gt;&lt;/font&gt;합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install5&#34; srcset=&#34;
               /g4install-107p2-win10basic/qt_install5_hu8f5585a5cecf2d574b31193e653d9b9b_338720_f4fb1ddb13462f603f3617aba2cfe245.png 400w,
               /g4install-107p2-win10basic/qt_install5_hu8f5585a5cecf2d574b31193e653d9b9b_338720_c7a57905a445f6007c66d75b27901a42.png 760w,
               /g4install-107p2-win10basic/qt_install5_hu8f5585a5cecf2d574b31193e653d9b9b_338720_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/qt_install5_hu8f5585a5cecf2d574b31193e653d9b9b_338720_f4fb1ddb13462f603f3617aba2cfe245.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install6&#34; srcset=&#34;
               /g4install-107p2-win10basic/qt_install6_huae82795004dd959b0cfea99e55d4e897_232833_a1a4e1aa6c9d5afeec0f3073dceae221.png 400w,
               /g4install-107p2-win10basic/qt_install6_huae82795004dd959b0cfea99e55d4e897_232833_3ac31b79246178d43e43c7f88f59e230.png 760w,
               /g4install-107p2-win10basic/qt_install6_huae82795004dd959b0cfea99e55d4e897_232833_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/qt_install6_huae82795004dd959b0cfea99e55d4e897_232833_a1a4e1aa6c9d5afeec0f3073dceae221.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;현재 Qt 최신버전은 6.x 버전입니다만, Geant4에서 아직 Qt5까지만 지원합니다.&lt;/p&gt;
&lt;p&gt;그리고 Qt를 설치할 때 사용하는 컴파일러에 맞추어 설치해야 합니다. 저희는 MSVC를 이용하므로 이에 맞추어 설치를 진행합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;이제 설치가 완료될 때까지 기다리시면 됩니다. Qt쪽 서버와 한국간 통신이 느려서 그런지 생각보다 오래 걸리더군요.&lt;/p&gt;
&lt;h3 id=&#34;환경변수-설정&#34;&gt;환경변수 설정&lt;/h3&gt;
&lt;p&gt;설치가 끝났다면 환경변수를 설정하는 과정이 필요합니다. &lt;code&gt;Path&lt;/code&gt; 환경변수에 Qt가 설치된 경로의 bin 폴더를 추가해주어야 합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    기본경로인 &lt;code&gt;C:\Qt&lt;/code&gt;가 아닌 다른 곳에 설치하셨다면, 맞추어 경로를 바꿔서 입력하셔야 합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;PowerShell을 관리자 권한으로 열어, 명령어를 통해 설정하도록 하겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[R]&lt;/b&gt;을 눌러 실행 창 열기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;powershell&lt;/code&gt; 입력 후 &lt;b&gt;[CTRL]+[SHIFT]+[ENTER]&lt;/b&gt;를 눌러 관리자 권한으로 powershell 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Environment]::SetEnvironmentVariable(&amp;quot;Path&amp;quot;, $env:Path+&amp;quot;;C:\Qt\5.15.2\msvc2019_64\bin&amp;quot;, &amp;quot;Machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;설치여부-확인-1&#34;&gt;설치여부 확인&lt;/h3&gt;
&lt;p&gt;방금 열어둔 PowerShell에서 &lt;code&gt;qmake&lt;/code&gt;라고 입력한 뒤 사용법(usage)이 뜨는지 확인합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_test&#34; srcset=&#34;
               /g4install-107p2-win10basic/qt_test_hubf3ba68a4e76097738b05b1a7f5af941_39351_98e0d27ee8767c51c93a00408c2df775.png 400w,
               /g4install-107p2-win10basic/qt_test_hubf3ba68a4e76097738b05b1a7f5af941_39351_3e2a6b6a81c8c65d8c2d38c93fec61a9.png 760w,
               /g4install-107p2-win10basic/qt_test_hubf3ba68a4e76097738b05b1a7f5af941_39351_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/qt_test_hubf3ba68a4e76097738b05b1a7f5af941_39351_98e0d27ee8767c51c93a00408c2df775.png&#34;
               width=&#34;760&#34;
               height=&#34;648&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-설치&#34;&gt;Geant4 설치&lt;/h2&gt;
&lt;h3 id=&#34;다운로드-2&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;Geant4 소스코드는 &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 다운받을 수 있습니다. 위의 &lt;b&gt;Source files&lt;/b&gt;라고 되어있는 항목 중 &lt;b&gt;ZIP format 파일&lt;/b&gt;을 받으면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_download&#34; srcset=&#34;
               /g4install-107p2-win10basic/geant4_download_hu183cf2b1eeb3561d9817d0692bb26a75_27109_40e4803680c078ad27da5177d06f8d63.png 400w,
               /g4install-107p2-win10basic/geant4_download_hu183cf2b1eeb3561d9817d0692bb26a75_27109_47895efb1b1bc708b1ccd2292f8d0336.png 760w,
               /g4install-107p2-win10basic/geant4_download_hu183cf2b1eeb3561d9817d0692bb26a75_27109_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/geant4_download_hu183cf2b1eeb3561d9817d0692bb26a75_27109_40e4803680c078ad27da5177d06f8d63.png&#34;
               width=&#34;760&#34;
               height=&#34;272&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치-2&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;이 글에서는 &lt;code&gt;C:\Geant4&lt;/code&gt; 폴더를 만들어 여기에 설치를 하도록 하겠습니다. 경로는 자유롭게 하셔도 됩니다만, 추후 환경변수 등을 설정할 때 경로를 맞추어 변경해주셔야 하니 주의하시기 바랍니다.&lt;/p&gt;
&lt;p&gt;이제 다음과 같이 순서대로 진행하시면 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;위에서 다운받은 압축파일(geant4_10_07_p02.zip)을 &lt;code&gt;C:\Geant4&lt;/code&gt; 폴더에 옮기고, 압축을 풀어줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_install1&#34; srcset=&#34;
               /g4install-107p2-win10basic/geant4_install1_hu9513900efb93424c56c4af938a2a81cd_26224_e5de6750bdddb6b8a8df5a6b8ac14daa.png 400w,
               /g4install-107p2-win10basic/geant4_install1_hu9513900efb93424c56c4af938a2a81cd_26224_de2d0a6224d4664c519adab116794a5e.png 760w,
               /g4install-107p2-win10basic/geant4_install1_hu9513900efb93424c56c4af938a2a81cd_26224_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/geant4_install1_hu9513900efb93424c56c4af938a2a81cd_26224_e5de6750bdddb6b8a8df5a6b8ac14daa.png&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;압축을 풀어 생긴 geant4_10_07_p02 폴더에 들어가서, &lt;b&gt;&lt;code&gt;build&lt;/code&gt; 폴더와 &lt;code&gt;install&lt;/code&gt; 폴더를 새로 만들어줍니다&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; 폴더는 cmake를 통해 생성되는 컴파일 결과가 보관될 폴더입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;install&lt;/code&gt;폴더는 Geant4가 최종적으로 설치될 폴더입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_install2&#34; srcset=&#34;
               /g4install-107p2-win10basic/geant4_install2_hua77048e5d1921956f160189de712b8f3_41530_a2daf3210fa7ee251d4a0ba48eeeb61c.png 400w,
               /g4install-107p2-win10basic/geant4_install2_hua77048e5d1921956f160189de712b8f3_41530_8daeabc94eb674fbd290e9a8ce6333d7.png 760w,
               /g4install-107p2-win10basic/geant4_install2_hua77048e5d1921956f160189de712b8f3_41530_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/geant4_install2_hua77048e5d1921956f160189de712b8f3_41530_a2daf3210fa7ee251d4a0ba48eeeb61c.png&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;Developer PowerShell for VS 2019&lt;/b&gt;를 실행합니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[S]&lt;/b&gt; 를 눌러 검색을 띄우고, &lt;code&gt;developer powershell&lt;/code&gt;을 입력하여 &lt;b&gt;Developer PowerShell for VS 2019&lt;/b&gt;를 찾은 뒤 실행하면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_test1&#34; srcset=&#34;
               /g4install-107p2-win10basic/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_226fbd82f31d51e44fa9627733e16400.png 400w,
               /g4install-107p2-win10basic/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_be659fa34a05acdcb7fbe530b7909974.png 760w,
               /g4install-107p2-win10basic/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_226fbd82f31d51e44fa9627733e16400.png&#34;
               width=&#34;760&#34;
               height=&#34;623&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PowerShell 상에서 &lt;code&gt;cd&lt;/code&gt; 명령어를 이용하여, 앞서 만든 &lt;code&gt;build &lt;/code&gt;폴더 위치로 이동합니다.&lt;/p&gt;
&lt;p&gt;예를 들어 이 글에서와 같이 &lt;code&gt;C:\Geant4\geant4_10_07_p02\build&lt;/code&gt;로 이동해야 하는 경우에는, 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cd C:\Geant4\geant4_10_07_p02\build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_install3&#34; srcset=&#34;
               /g4install-107p2-win10basic/geant4_install3_hu85977aa02ce51a3886646f5bcd943b8b_11100_35045bc0eab59368fe1b41b175827b45.png 400w,
               /g4install-107p2-win10basic/geant4_install3_hu85977aa02ce51a3886646f5bcd943b8b_11100_70743a14b5d9cf2c11ad3e65e3c18a87.png 760w,
               /g4install-107p2-win10basic/geant4_install3_hu85977aa02ce51a3886646f5bcd943b8b_11100_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/geant4_install3_hu85977aa02ce51a3886646f5bcd943b8b_11100_35045bc0eab59368fe1b41b175827b45.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 그대로 입력하여 &lt;code&gt;cmake&lt;/code&gt; 작업을 수행합니다. 오탈자 방지를 위해 복사-붙여넣기를 권장합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake .. -DCMAKE_INSTALL_PREFIX=&amp;quot;C:\Geant4\geant4_10_07_p02\install&amp;quot; -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_BUILD_MSVC_MP=ON -DGEANT4_USE_QT=ON
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;각 옵션의 의미는 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMAKE_INSTALL_PREFIX: Geant4가 설치될 폴더의 경로.&lt;/li&gt;
&lt;li&gt;GEANT4_BUILD_MULTITHREADED: Geant4에서 MultiThreading이 가능하도록 설치할 지에 대한 여부. 기본값은 OFF.&lt;/li&gt;
&lt;li&gt;GEANT4_INSTALL_DATA: Geant4 설치 시 크로스섹션 데이터를 자동으로 다운로드할 지에 대한 여부. 기본값은 OFF.&lt;/li&gt;
&lt;li&gt;GEANT4_BUILD_MSVC_MP: Windows에서 MSVC 빌드 도구를 통해 설치할 때 Multiprocessing을 통해 설치 속도를 빠르게 할 지에 대한 여부. 기본값은 OFF.&lt;/li&gt;
&lt;li&gt;GEANT4_USE_QT: Geant4에서 Qt5 기반의 GUI를 사용할 수 있도록 설치할 지에 대한 여부. 기본값은 OFF.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다음 그림과 같이 &lt;b&gt;Configuring done&lt;/b&gt;과 &lt;b&gt;Generating done&lt;/b&gt; 문구를 확인하였다면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_install4&#34; srcset=&#34;
               /g4install-107p2-win10basic/geant4_install4_hu043c7cfde1e15baae59434bc37191b66_74610_8cf3f8525f5cadfb3a3c191bbb552242.png 400w,
               /g4install-107p2-win10basic/geant4_install4_hu043c7cfde1e15baae59434bc37191b66_74610_a553107361dda28ddd59717ca95be535.png 760w,
               /g4install-107p2-win10basic/geant4_install4_hu043c7cfde1e15baae59434bc37191b66_74610_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/geant4_install4_hu043c7cfde1e15baae59434bc37191b66_74610_8cf3f8525f5cadfb3a3c191bbb552242.png&#34;
               width=&#34;531&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 그대로 입력하여 빌드 및 설치 작업을 수행합니다. 오탈자 방지를 위해 복사-붙여넣기를 권장합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake --build . --config Release --target install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;수행 중에 유니코드 이슈와 관련하여 warning C4819가 뜰 수 있습니다만, 무시하고 진행하셔도 괜찮습니다.&lt;/p&gt;
&lt;p&gt;최종적으로 아래 그림과 같이 &lt;code&gt;-- Installing: ...&lt;/code&gt; 내역이 쭉 뜨고 끝나면 정상적으로 종료된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_install5&#34; srcset=&#34;
               /g4install-107p2-win10basic/geant4_install5_hude43c227001a54a767c1baedb2329d83_56181_19e0f88803e50475bc722e700e86d8e8.png 400w,
               /g4install-107p2-win10basic/geant4_install5_hude43c227001a54a767c1baedb2329d83_56181_33892bb46b3d1146dc3532feee154461.png 760w,
               /g4install-107p2-win10basic/geant4_install5_hude43c227001a54a767c1baedb2329d83_56181_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/geant4_install5_hude43c227001a54a767c1baedb2329d83_56181_19e0f88803e50475bc722e700e86d8e8.png&#34;
               width=&#34;760&#34;
               height=&#34;448&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;환경변수-설정-1&#34;&gt;환경변수 설정&lt;/h3&gt;
&lt;p&gt;설치가 끝났다면 환경변수를 설정하는 과정이 필요합니다.&lt;/p&gt;
&lt;p&gt;먼저, PowerShell을 관리자 권한으로 실행합니다. &lt;font color=red&gt;&lt;b&gt;방금까지 Geant4 설치에 이용하던 Developer PowerShell for VS 2019에서 하는 것이 아님에 주의&lt;/b&gt;&lt;/font&gt;하세요. 권한이 없어서 명령어가 제대로 실행되지 않을 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[R]&lt;/b&gt;을 눌러 실행 창 열기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;powershell&lt;/code&gt; 입력 후 &lt;b&gt;[CTRL]+[SHIFT]+[ENTER]&lt;/b&gt;를 눌러 관리자 권한으로 powershell 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어 입력&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; 환경변수에 Geant4가 설치된 경로의 &lt;code&gt;bin&lt;/code&gt; 폴더를 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Environment]::SetEnvironmentVariable(&amp;quot;Path&amp;quot;, $env:Path+&amp;quot;;C:\Geant4\geant4_10_07_p02\install\bin&amp;quot;, &amp;quot;Machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Geant4_DIR&lt;/code&gt;이라는 환경변수를 만들어 Geant4가 설치된 경로의 &lt;code&gt;lib\Geant4-10.7.2&lt;/code&gt; 폴더를 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Environment]::SetEnvironmentVariable(&amp;quot;Geant4_DIR&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\lib\Geant4-10.7.2&amp;quot;, &amp;quot;Machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;크로스섹션 데이터 경로 설정을 위한 환경변수 설정 (참고: &lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/InstallationGuide/html/postinstall.html#environment-variables-for-datasets&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Postinstall Setup — Geant4 Installation Guide 10.7 documentation (cern.ch)&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Environment]::SetEnvironmentVariable(&amp;quot;G4ABLADATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\G4ABLA3.1&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4ENSDFSTATEDATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\G4ENSDFSTATE2.3&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4INCLDATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\G4INCL1.0&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4LEDATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\G4EMLOW7.13&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4LEVELGAMMADATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\PhotonEvaporation5.7&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4NEUTRONHPDATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\G4NDL4.6&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4PARTICLEXSDATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\G4PARTICLEXS3.1.1&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4PIIDATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\G4PII1.3&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4RADIOACTIVEDATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\RadioactiveDecay5.6&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4REALSURFACEDATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\RealSurface2.2&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4SAIDXSDATA&amp;quot;, &amp;quot;C:\Geant4\geant4_10_07_p02\install\share\Geant4-10.7.2\data\G4SAIDDATA2.0&amp;quot;, &amp;quot;Machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-예제-실행해보기&#34;&gt;Geant4 예제 실행해보기&lt;/h2&gt;
&lt;p&gt;Geant4 설치를 완료했으니 이제 실행을 해봐야겠죠.&lt;/p&gt;
&lt;p&gt;Windows에서 Geant4 라이브러리 기반의 코드를 빌드하려면 &lt;b&gt;&lt;font color=red&gt;Developer PowerShell for VS 2019를 통해 진행&lt;/font&gt;&lt;/b&gt;하셔야 합니다.&lt;/p&gt;
&lt;p&gt;예제파일은 소스코드의 압축을 풀었던 곳에 있는 &lt;code&gt;examples&lt;/code&gt; 폴더에 있습니다. 여기서는 제일 기본예제인 &lt;code&gt;examples\basic\B1&lt;/code&gt;을 테스트 해보겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;B1&lt;/code&gt; 폴더를 &lt;b&gt;폴더 째로 복사&lt;/b&gt;하여 원하는 곳에 가져옵니다. 저는 &lt;code&gt;C:\Geant4\B1&lt;/code&gt;으로 복사해왔습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;복사해온 &lt;code&gt;B1&lt;/code&gt; 폴더 안에 &lt;b&gt;&lt;code&gt;build&lt;/code&gt;라는 폴더를 새로 만듭니다&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;example1&#34; srcset=&#34;
               /g4install-107p2-win10basic/example1_huf71dc8f726b0bf69733721115d598312_45478_2271b60d0b0f68d1a65438b36778b1e8.png 400w,
               /g4install-107p2-win10basic/example1_huf71dc8f726b0bf69733721115d598312_45478_1196a18e54132938e17d36258bc891d4.png 760w,
               /g4install-107p2-win10basic/example1_huf71dc8f726b0bf69733721115d598312_45478_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/example1_huf71dc8f726b0bf69733721115d598312_45478_2271b60d0b0f68d1a65438b36778b1e8.png&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;복사해온 B1 폴더 안에 있는 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일을 열어, 파일의 맨 위에 다음 내용을 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;#----------------------------------------------------------------------------
# Set build output directory to be ./build 
# rather than ./build/Release or ./build/RelWithDebInfo
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE &amp;quot;${CMAKE_BINARY_DIR}&amp;quot;)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO &amp;quot;${CMAKE_BINARY_DIR}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;example2&#34; srcset=&#34;
               /g4install-107p2-win10basic/example2_hu5bc646f33e70b300bacd657798df2033_61231_4a8011c4ce801c6fee4a30ce57387679.png 400w,
               /g4install-107p2-win10basic/example2_hu5bc646f33e70b300bacd657798df2033_61231_6985b1e2e3a785ed7191d5a48e73ecde.png 760w,
               /g4install-107p2-win10basic/example2_hu5bc646f33e70b300bacd657798df2033_61231_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/example2_hu5bc646f33e70b300bacd657798df2033_61231_4a8011c4ce801c6fee4a30ce57387679.png&#34;
               width=&#34;760&#34;
               height=&#34;640&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Geant4 코드는 init_vis.mac, vis.mac,&amp;hellip;과 같은 *.mac 파일을 불러와서 이를 연동하여 실행하는 경우가 많습니다.&lt;/p&gt;
&lt;p&gt;일반적으로 UNIX/LINUX 환경에서는 실행파일과 *.mac 파일이 동일한 경로에 존재하도록 빌드를 수행하기 때문에, 대부분의 Geant4 코드는 이들의 위치가 동일하게 &lt;code&gt;build&lt;/code&gt; 폴더에 있으리라는 가정 하에 작성되어 있습니다. 그러나 MSVC를 이용하여 빌드를 수행할 경우에는, *.mac 파일은 &lt;code&gt;build&lt;/code&gt; 폴더에 있지만, 실행파일(*.exe)은 &lt;code&gt;build\Release&lt;/code&gt;나 &lt;code&gt;build\RelWithDebInfo&lt;/code&gt; 폴더 안에 생성됩니다.&lt;/p&gt;
&lt;p&gt;위의 코드를 &lt;code&gt;CMakeLists.txt&lt;/code&gt;에 추가하면, 실행파일이 *.mac 파일의 위치와 동일한 &lt;code&gt;build&lt;/code&gt; 폴더에 생성되어 이 문제를 해결할 수 있습니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developer PowerShell for VS 2019를 실행합니다. (앞서 켜둔 것이 있다면 그대로 쓰시면 됩니다)&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[S]&lt;/b&gt; 를 눌러 검색을 띄우고, &lt;code&gt;developer powershell&lt;/code&gt;을 입력하여 &lt;b&gt;Developer PowerShell for VS 2019&lt;/b&gt;를 찾은 뒤 실행하면 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; 명령어를 이용하여, 예제 코드를 복사해온 경로의 &lt;code&gt;build&lt;/code&gt; 폴더로 이동합니다. 이 글에서처럼 &lt;code&gt;C:\Geant4\B1&lt;/code&gt;으로 복사하였다면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cd C:\Geant4\B1\build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 입력하여 빌드를 수행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake ..
cmake --build . --config Release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;example3&#34; srcset=&#34;
               /g4install-107p2-win10basic/example3_hu888d8b771db12f7f66c26db0f32a15ea_33726_621f437ff057ed4f1f7c887063813c41.png 400w,
               /g4install-107p2-win10basic/example3_hu888d8b771db12f7f66c26db0f32a15ea_33726_cfa3ba22d9eee1b9be958a931ab96906.png 760w,
               /g4install-107p2-win10basic/example3_hu888d8b771db12f7f66c26db0f32a15ea_33726_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/example3_hu888d8b771db12f7f66c26db0f32a15ea_33726_621f437ff057ed4f1f7c887063813c41.png&#34;
               width=&#34;760&#34;
               height=&#34;524&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;명령줄에 &lt;code&gt;./exampleB1.exe&lt;/code&gt;를 입력하여 실행하거나, &lt;code&gt;build&lt;/code&gt; 폴더 안에 있는 &lt;code&gt;exampleB1.exe&lt;/code&gt;파일을 더블클릭하여 실행합니다.&lt;/p&gt;
&lt;p&gt;다음과 같은 GUI 창이 뜨면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;example4&#34; srcset=&#34;
               /g4install-107p2-win10basic/example4_hu2dde95ccbb0280d046477ee6b83126df_52878_f0e99116c4388a90fb871222be01af9f.png 400w,
               /g4install-107p2-win10basic/example4_hu2dde95ccbb0280d046477ee6b83126df_52878_eb06ba973e5be284bd1deb4b513e8a64.png 760w,
               /g4install-107p2-win10basic/example4_hu2dde95ccbb0280d046477ee6b83126df_52878_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p2-win10basic/example4_hu2dde95ccbb0280d046477ee6b83126df_52878_f0e99116c4388a90fb871222be01af9f.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Geant4 설치하기(11.0, Windows 11)</title>
      <link>https://evandde.github.io/g4install-110-win11/</link>
      <pubDate>Tue, 21 Dec 2021 23:15:29 +0900</pubDate>
      <guid>https://evandde.github.io/g4install-110-win11/</guid>
      <description>&lt;p&gt;이 글에서는 &lt;strong&gt;Windows 11 운영체제&lt;/strong&gt; 하에서 &lt;strong&gt;Geant4 11.0 버전&lt;/strong&gt;을 설치하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;2021년 12월 10일, Geant4 11.0 버전이 출시되었습니다. Windows 11과 Visual Studio 2022도 최근에 나왔기에, 최신 환경에서 최신 버전의 Geant4를 깔아보려 합니다.&lt;/p&gt;
&lt;p&gt;설치과정 자체는 Geant4 10.x 버전에서 바뀐 점이 거의 없으므로, 이전 글들도 함께 참고하실 수 있으리라 생각합니다. 또한, 이 글에서 설명하는 방법을 동일하게 Windows 10에서도 이용할 수 있을 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;설치-정보-요약&#34;&gt;설치 정보 요약&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;설치 환경&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제: Windows 11 Pro 21H2&lt;/li&gt;
&lt;li&gt;인터넷 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 대상&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geant4 11.0 버전&lt;/li&gt;
&lt;li&gt;Cross-section data 직접 다운로드하여 준비&lt;/li&gt;
&lt;li&gt;Multi-threading 기능 활성화&lt;/li&gt;
&lt;li&gt;UI 및 가시화 기능 활용을 위해, Qt5 라이브러리 별도 설치하여 연동&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 경로&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Geant4 cross-section data: &lt;code&gt;$env:USERPROFILE\Geant4\data\&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(e.g. &lt;code&gt;C:\Users\Evan\Geant4\data\&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Geant4: &lt;code&gt;$env:USERPROFILE\Geant4\geant4-v11.0.0\&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(e.g. &lt;code&gt;C:\Users\Evan\Geant4\geant4-v11.0.0\&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;MSVC (Visual Studio Build Tools 2022) 설치&lt;/li&gt;
&lt;li&gt;Qt5 설치&lt;/li&gt;
&lt;li&gt;Geant4 설치&lt;/li&gt;
&lt;li&gt;예제 실행&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;msvc-설치&#34;&gt;MSVC 설치&lt;/h2&gt;
&lt;p&gt;MSVC란 Microsoft사에서 제공하는 Microsoft Visual C++이라는 C++ 컴파일러를 비롯한 개발도구입니다. 익숙하게 알고 계시는 Visual Studio라는 이름의 통합개발환경(IDE)을 설치하시면서 함께 설치할 수도 있습니다. 다만 이 글에서는 Visual Studio는 빼고, 실제로 필요한 MSVC 부분만 따로 설치하는 방식으로 진행하겠습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/InstallationGuide/html/gettingstarted.html#os-software-prerequisites&#34;&gt;공식 가이드&lt;/a&gt;에 따르면, Windows의 경우 Visual Studio 2019, Community version or higher라고 되어있습니다. 다만, 위에서 말씀드린 바와 같이, 이 글에서는 Visual Studio 대신 그 안의 빌드도구만 설치하는 방식으로 진행합니다. 또한 공식 가이드에는 2019 버전만 기재되어 있습니다만, 2022로도 설치 및 실행이 정상적으로 이루어지는 것으로 판단되어, 이 글에서는 2019 버전 대신 2022 버전으로 진행합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/InstallationGuide/html/installguide.html#on-windows-platforms&#34;&gt;공식 가이드&lt;/a&gt;에 따르면, Cygwin이나 MinGW도 테스트를 해보거나 직접적인 지원을 하는건 아니지만 Unix 플랫폼에서와 유사하게 진행하면 될 것이라고 합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Builds of Geant4 using Cygwin or MinGW with their own compilers or the Microsoft C++ Compiler are neither supported or tested, though the CMake system is expected to work under these toolchains. If you are using these tools via their native shells and with their own versions of CMake, then the instructions for building and installing on Unix platforms &lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/InstallationGuide/html/installguide.html#unixbuild&#34;&gt;On Unix Platforms&lt;/a&gt; can be used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다만, 제 경험상으로는 Linux/Unix 환경에서 gcc를 사용했던 경험에 비해 그리 시원치 않아서, 개인적으로 Windows에서 설치 시에는 MSVC를 추천합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;다운로드&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;현재 시점에서 최신 버전에 해당하는, &lt;b&gt;Visual Studio 2022용 Build Tools&lt;/b&gt;를 다운로드 받겠습니다. Microsoft에서 제공하는 Visual Studio 2022용 Build Tools는 &lt;a href=&#34;https://visualstudio.microsoft.com/ko/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 무료로 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;스크롤을 쭉 내려서 &lt;b&gt;Visual Studio 2022용 도구 목록&lt;/b&gt; 하위에 있는 &lt;b&gt;Visual Studio 2022용 빌드 도구&lt;/b&gt;의 다운로드 링크를 누르면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_vs2022buildtools_download&#34; srcset=&#34;
               /g4install-110-win11/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_0406f3798f45b4354e3fa193794834cb.png 400w,
               /g4install-110-win11/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_ce5d111b09146f914c28a5cee4e039f6.png 760w,
               /g4install-110-win11/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_0406f3798f45b4354e3fa193794834cb.png&#34;
               width=&#34;760&#34;
               height=&#34;631&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 파일(&lt;code&gt;vs_buildtools_....exe&lt;/code&gt;)을 실행합니다. 다음 그림과 같은 창이 뜰 수 있습니다. &lt;b&gt;계속&lt;/b&gt; 버튼을 누르고 잠시 기다려줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_vs2019buildtools_install&#34; srcset=&#34;
               /g4install-110-win11/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_4efc43656ed797e74ddf58cb381dc51d.png 400w,
               /g4install-110-win11/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_7e57b38156a4bcbdd92e55c5a68a663a.png 760w,
               /g4install-110-win11/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_4efc43656ed797e74ddf58cb381dc51d.png&#34;
               width=&#34;480&#34;
               height=&#34;280&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다운로드를 마치고 설치 준비가 다 되면, 다음 그림과 같은 창이 뜰 것입니다. 이 중 &lt;b&gt;C++를 사용한 데스크톱 개발&lt;/b&gt;을 클릭합니다. 오른쪽 설치 세부 정보에서, 자동으로 선택사항 중 일부가 선택될 것입니다. 혹시라도 &lt;b&gt;Windows용 C++ CMake 도구&lt;/b&gt;가 선택이 안되어있다면, &lt;b&gt;꼭 선택&lt;/b&gt;해주시기 바랍니다. 선택을 완료하셨다면 &lt;b&gt;Install&lt;/b&gt; 버튼을 눌러 설치를 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_vs2022buildtools_install&#34; srcset=&#34;
               /g4install-110-win11/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_f25b9112760d9b861a8f06cf4ae6a65b.png 400w,
               /g4install-110-win11/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_8b54b94c5245c0a4a80fb14ac8956e4a.png 760w,
               /g4install-110-win11/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_f25b9112760d9b861a8f06cf4ae6a65b.png&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;설치가 완료되었다면, 잘 실행되는지 테스트를 해보아야 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[S]&lt;/b&gt; 를 눌러 검색을 띄움&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;developer powershell&lt;/code&gt;을 입력하여 &lt;b&gt;Developer PowerShell for VS 2022&lt;/b&gt;를 찾은 뒤 실행&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_vs2022buildtools_test1&#34; srcset=&#34;
               /g4install-110-win11/04_vs2022buildtools_test1_hu2dd0a711a40a3d4140deacbce299c2b9_530191_625c4305a7a755dc2cd89ef0535addc3.png 400w,
               /g4install-110-win11/04_vs2022buildtools_test1_hu2dd0a711a40a3d4140deacbce299c2b9_530191_55ce527040ccae2d1003ebe3ae47638a.png 760w,
               /g4install-110-win11/04_vs2022buildtools_test1_hu2dd0a711a40a3d4140deacbce299c2b9_530191_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/04_vs2022buildtools_test1_hu2dd0a711a40a3d4140deacbce299c2b9_530191_625c4305a7a755dc2cd89ef0535addc3.png&#34;
               width=&#34;754&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cl&lt;/code&gt; 명령어와 &lt;code&gt;cmake&lt;/code&gt; 명령어를 각각 입력하여, 다음 그림과 같이 각각의 사용법(usage)이 뜨는지 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_vs2022buildtools_test2&#34; srcset=&#34;
               /g4install-110-win11/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_822efe39862c06232a29d4c2431969a9.png 400w,
               /g4install-110-win11/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_2107f35e4f83ab342cbab819ba2ec199.png 760w,
               /g4install-110-win11/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_822efe39862c06232a29d4c2431969a9.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;qt5-라이브러리-설치&#34;&gt;Qt5 라이브러리 설치&lt;/h2&gt;
&lt;p&gt;Qt는 Geant4에서 GUI를 띄우기 위해 필요한 라이브러리입니다. Qt는 라이센스 이슈 때문인지, 설치하려면 &lt;b&gt;Qt 계정 회원가입 및 로그인이 필요&lt;/b&gt;합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Qt는 무료로 이용하고자 할 경우,  &lt;a href=&#34;https://www.qt.io/licensing/open-source-lgpl-obligations?hsLang=en&#34;&gt;(L)GPL 라이센스 규약&lt;/a&gt;을 따를 것을 요구하니, 라이센스에 관한 정보가 필요하신 분은 참고하시기 바랍니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;다운로드-1&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;일단 &lt;a href=&#34;https://www.qt.io/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 Qt online installer를 다운받을 수 있습니다. 처음 들어오시면 헤매실까봐 눌러야하는 링크 순서를 보여드리니, 아래 그림을 참고해서 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_download1&#34; srcset=&#34;
               /g4install-110-win11/qt_download1_hu7c615b8709f940ffa5bb13f451cd49f9_26021_d55bd4dfc6220172c0712e02e46f26f3.png 400w,
               /g4install-110-win11/qt_download1_hu7c615b8709f940ffa5bb13f451cd49f9_26021_4bc597226c2518d91ab75a8608765824.png 760w,
               /g4install-110-win11/qt_download1_hu7c615b8709f940ffa5bb13f451cd49f9_26021_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/qt_download1_hu7c615b8709f940ffa5bb13f451cd49f9_26021_d55bd4dfc6220172c0712e02e46f26f3.png&#34;
               width=&#34;625&#34;
               height=&#34;293&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_download2&#34; srcset=&#34;
               /g4install-110-win11/qt_download2_hu61e4050399c5055af5f56e9b4d4c2f15_36717_a356c2ea2431d6ff850205a5495bc8f6.png 400w,
               /g4install-110-win11/qt_download2_hu61e4050399c5055af5f56e9b4d4c2f15_36717_0bf0974ceadca9bbee6f8e96b3469f0e.png 760w,
               /g4install-110-win11/qt_download2_hu61e4050399c5055af5f56e9b4d4c2f15_36717_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/qt_download2_hu61e4050399c5055af5f56e9b4d4c2f15_36717_a356c2ea2431d6ff850205a5495bc8f6.png&#34;
               width=&#34;760&#34;
               height=&#34;184&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_download3&#34; srcset=&#34;
               /g4install-110-win11/qt_download3_huea4d9f6c97de37a43c8a70ad4330f089_230053_4610af1c0ea0314a73cac61bbb438dd3.png 400w,
               /g4install-110-win11/qt_download3_huea4d9f6c97de37a43c8a70ad4330f089_230053_475143fb405d8d23955cf331866192f7.png 760w,
               /g4install-110-win11/qt_download3_huea4d9f6c97de37a43c8a70ad4330f089_230053_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/qt_download3_huea4d9f6c97de37a43c8a70ad4330f089_230053_4610af1c0ea0314a73cac61bbb438dd3.png&#34;
               width=&#34;760&#34;
               height=&#34;450&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치-1&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;설치파일을 다운받은 뒤 실행하시면, 다음과 같이 계정을 입력하라는 창이 뜹니다. 이미 가입하셨다면 Qt 계정을 입력하여 로그인하시고, 계정이 없으시다면 &lt;u&gt;Sign up&lt;/u&gt;을 눌러 계정을 생성한 뒤 입력하시면 됩니다. 가입 시 이메일 인증절차가 필요합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install1&#34; srcset=&#34;
               /g4install-110-win11/qt_install1_hu818c53db882509e75ab7777b3766b47b_210990_96e11dcb13e813affb7354c64a6a85d9.png 400w,
               /g4install-110-win11/qt_install1_hu818c53db882509e75ab7777b3766b47b_210990_e514343e94719cdac1452220c0bdca59.png 760w,
               /g4install-110-win11/qt_install1_hu818c53db882509e75ab7777b3766b47b_210990_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/qt_install1_hu818c53db882509e75ab7777b3766b47b_210990_96e11dcb13e813affb7354c64a6a85d9.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;이어서 라이센스 동의 관련 내용이 뜹니다. 첫 번째 체크박스는 라이센스에 동의하겠다는 것이니 체크를 반드시 하셔야 합니다. 두 번째 네모상자 및 체크박스는 사용자가 기관인지 개인인지를 확인하는 란입니다. 기관이시면 기관명을 적고, 개인이시면 체크박스에 체크를 하면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install2&#34; srcset=&#34;
               /g4install-110-win11/qt_install2_hu1ab13f0541a3679f75fdc0602ad75b9d_222457_d3ea5d1287a138a47c5a5fff5719b2cf.png 400w,
               /g4install-110-win11/qt_install2_hu1ab13f0541a3679f75fdc0602ad75b9d_222457_ae8408564ab169f580a24fcb3d8ed46f.png 760w,
               /g4install-110-win11/qt_install2_hu1ab13f0541a3679f75fdc0602ad75b9d_222457_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/qt_install2_hu1ab13f0541a3679f75fdc0602ad75b9d_222457_d3ea5d1287a138a47c5a5fff5719b2cf.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Next 버튼을 누르다보면, Qt 발전을 위해 정보 제공 동의를 하는 내용이 나오는데, 이는 자유롭게 선택하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install3&#34; srcset=&#34;
               /g4install-110-win11/qt_install3_hufbf6bdf32d1a86c543ce2016bcb78281_215592_70a047b113f0c9a1c187bc348f5ec37b.png 400w,
               /g4install-110-win11/qt_install3_hufbf6bdf32d1a86c543ce2016bcb78281_215592_17f72271658d23736c74ed2bbf5abc69.png 760w,
               /g4install-110-win11/qt_install3_hufbf6bdf32d1a86c543ce2016bcb78281_215592_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/qt_install3_hufbf6bdf32d1a86c543ce2016bcb78281_215592_70a047b113f0c9a1c187bc348f5ec37b.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;다음으로 설치경로 및 설치유형 선택이 나옵니다.&lt;/p&gt;
&lt;p&gt;일단, 이 글에서 설치 경로는 기본경로인 &lt;code&gt;C:\Qt&lt;/code&gt;로 가겠습니다.&lt;/p&gt;
&lt;p&gt;설치 유형은 &lt;b&gt;Custom Installation&lt;/b&gt;이 선택된대로 놔두시면 됩니다.&lt;/p&gt;
&lt;p&gt;맨 아래의 &lt;b&gt;Associate common file types with Qt Creator.&lt;/b&gt; 체크박스의 경우에는, 여러분이 Qt Creator라는 IDE를 사용하실 예정이라면 체크하시고, 사용할 계획이 없으시다면 체크를 해제하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install4&#34; srcset=&#34;
               /g4install-110-win11/qt_install4_hu6fadece4545434b2bd1de367d689d836_217054_da82cc6fb696fae419854f86e54d98b8.png 400w,
               /g4install-110-win11/qt_install4_hu6fadece4545434b2bd1de367d689d836_217054_4bb97a509b5925af6d4dfd08b704b460.png 760w,
               /g4install-110-win11/qt_install4_hu6fadece4545434b2bd1de367d689d836_217054_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/qt_install4_hu6fadece4545434b2bd1de367d689d836_217054_da82cc6fb696fae419854f86e54d98b8.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Next를 누르면 설치할 항목을 고르는 부분이 나옵니다. &lt;strong&gt;여기가 중요&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;p&gt;일단 &lt;font color=red&gt;&lt;b&gt;Deselect All을 눌러 모든 항목을 선택 해제&lt;/b&gt;&lt;/font&gt;합니다.&lt;/p&gt;
&lt;p&gt;그리고나서, &lt;font color=red&gt;&lt;b&gt;Qt &amp;gt; Qt 5.15.2 &amp;gt; MSVC 2019 64-bit만 선택&lt;/b&gt;&lt;/font&gt;합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install5&#34; srcset=&#34;
               /g4install-110-win11/qt_install5_hu8f5585a5cecf2d574b31193e653d9b9b_338720_f4fb1ddb13462f603f3617aba2cfe245.png 400w,
               /g4install-110-win11/qt_install5_hu8f5585a5cecf2d574b31193e653d9b9b_338720_c7a57905a445f6007c66d75b27901a42.png 760w,
               /g4install-110-win11/qt_install5_hu8f5585a5cecf2d574b31193e653d9b9b_338720_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/qt_install5_hu8f5585a5cecf2d574b31193e653d9b9b_338720_f4fb1ddb13462f603f3617aba2cfe245.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_install6&#34; srcset=&#34;
               /g4install-110-win11/qt_install6_huae82795004dd959b0cfea99e55d4e897_232833_a1a4e1aa6c9d5afeec0f3073dceae221.png 400w,
               /g4install-110-win11/qt_install6_huae82795004dd959b0cfea99e55d4e897_232833_3ac31b79246178d43e43c7f88f59e230.png 760w,
               /g4install-110-win11/qt_install6_huae82795004dd959b0cfea99e55d4e897_232833_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/qt_install6_huae82795004dd959b0cfea99e55d4e897_232833_a1a4e1aa6c9d5afeec0f3073dceae221.png&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;현재 Qt 최신버전은 6.x 버전입니다만, Geant4에서 아직 Qt5까지만 지원합니다.&lt;/p&gt;
&lt;p&gt;그리고 Qt를 설치할 때 사용하는 컴파일러에 맞추어 설치해야 합니다. 저희는 MSVC를 이용하므로 이에 맞추어 설치를 진행합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;이제 설치가 완료될 때까지 기다리시면 됩니다. Qt쪽 서버와 한국간 통신이 느려서 그런지 생각보다 오래 걸리더군요.&lt;/p&gt;
&lt;h3 id=&#34;환경변수-설정&#34;&gt;환경변수 설정&lt;/h3&gt;
&lt;p&gt;설치가 끝났다면 환경변수를 설정하는 과정이 필요합니다. &lt;code&gt;Path&lt;/code&gt; 환경변수에 Qt가 설치된 경로의 bin 폴더를 추가해주어야 합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    기본경로인 &lt;code&gt;C:\Qt&lt;/code&gt;가 아닌 다른 곳에 설치하셨다면, 맞추어 경로를 바꿔서 입력하셔야 합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;PowerShell을 관리자 권한으로 열어, 명령어를 통해 설정하도록 하겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[R]&lt;/b&gt;을 눌러 실행 창 열기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;powershell&lt;/code&gt; 입력 후 &lt;b&gt;[CTRL]+[SHIFT]+[ENTER]&lt;/b&gt;를 눌러 관리자 권한으로 powershell 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Environment]::SetEnvironmentVariable(&amp;quot;Path&amp;quot;, $env:Path+&amp;quot;;C:\Qt\5.15.2\msvc2019_64\bin&amp;quot;, &amp;quot;Machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;설치여부-확인&#34;&gt;설치여부 확인&lt;/h3&gt;
&lt;p&gt;방금 열어둔 PowerShell에서 &lt;code&gt;qmake&lt;/code&gt;라고 입력한 뒤 사용법(usage)이 뜨는지 확인합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qt_test&#34; srcset=&#34;
               /g4install-110-win11/qt_test_hubf3ba68a4e76097738b05b1a7f5af941_39351_98e0d27ee8767c51c93a00408c2df775.png 400w,
               /g4install-110-win11/qt_test_hubf3ba68a4e76097738b05b1a7f5af941_39351_3e2a6b6a81c8c65d8c2d38c93fec61a9.png 760w,
               /g4install-110-win11/qt_test_hubf3ba68a4e76097738b05b1a7f5af941_39351_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/qt_test_hubf3ba68a4e76097738b05b1a7f5af941_39351_98e0d27ee8767c51c93a00408c2df775.png&#34;
               width=&#34;760&#34;
               height=&#34;648&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-설치&#34;&gt;Geant4 설치&lt;/h2&gt;
&lt;p&gt;이 글에서는 &lt;code&gt;$env:USERPROFILE\Geant4\&lt;/code&gt; 폴더를 만들어 이 경로 하에 Geant4를 설치하는 방식으로 진행합니다. 경로는 이 글과 다르게 자유롭게 하셔도 됩니다만, 추후 설치경로 입력이나 환경변수 등을 설정할 때 이에 맞추어 변경하실 필요가 있으니 주의하시기 바랍니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;$env:USERPROFILE&lt;/code&gt;은 &lt;code&gt;C:\Users\Evan&lt;/code&gt;과 같은 사용자의 기본 폴더를 말합니다. 각자의 사용자계정명에 따라 경로가 다르기 때문에, &lt;code&gt;$env:USERPROFILE&lt;/code&gt;이라는 환경변수를 이용하여 설명합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;cross-section-data-준비&#34;&gt;Cross-section data 준비&lt;/h3&gt;
&lt;p&gt;Geant4를 설치하기 위해서는 cross-section data와의 연동이 필수적입니다.&lt;/p&gt;
&lt;p&gt;Geant4 설치 시, 설치 인자를 통해 필수요구 cross-section data를 자동으로 설치하도록 할 수 있습니다. 다만, 필수가 아닌 cross-section data를 연동하고 싶거나 cross-section data의 경로를 직접 관리하고자 하는 경우에는, 따로 다운로드하여 준비한 뒤 이를 연동할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 cross-section data를 직접 다운받아 준비한 뒤 연동하도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;Geant4의 cross-section data는 &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;의 &lt;strong&gt;Data files 부분&lt;/strong&gt;에서 다운받을 수 있습니다.
총 10개의 필수요구 데이터와 2개의 선택사항 데이터(G4RealSurface, G4TENDL)가 있습니다. 위의 10개는 필수이므로 무조건 다 받으시고, 아래의 2개는 필요에 따라 다운받으시면 됩니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Geant4 cross-section data 압축파일이나 소스코드 압축파일이 크롬 등의 웹브라우저에서 &lt;strong&gt;안전하지 않은 파일로 인식&lt;/strong&gt;하여 다운로드가 진행이 안되는 경우가 있는 것을 확인했습니다.&lt;/p&gt;
&lt;p&gt;해당 차단옵션을 끄거나, 다른 브라우저를 사용하셔야 할 수도 있습니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;각 파일들은 &lt;code&gt;.tar.gz&lt;/code&gt; 확장자를 가지고 있습니다. 이는 일종의 압축파일입니다. &lt;a href=&#34;https://kr.bandisoft.com/bandizip/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bandizip&lt;/a&gt;이나 &lt;a href=&#34;https://www.7-zip.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;7-zip&lt;/a&gt;과 같은 압축 관련 유틸리티를 통해 압축을 풀 수 있습니다.&lt;/p&gt;
&lt;p&gt;모두 다운받으셨다면, 전부 각각의 파일명이 폴더명이 되도록 압축을 해제합니다. (e.g. &lt;code&gt;G4ABLA3.1&lt;/code&gt; 폴더 내에 &lt;code&gt;defo.dat&lt;/code&gt;, &amp;hellip; 등이 있도록)&lt;/p&gt;
&lt;p&gt;이렇게 압축까지 해제하셨다면, 이 &lt;b&gt;10~12개의 데이터 폴더들을 원하는 경로에 보관&lt;/b&gt;해두시면 됩니다. 이 글에서는 &lt;code&gt;$env:USERPROFILE\Geant4\data\&lt;/code&gt; 경로에 두도록 하겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;소스코드-다운로드&#34;&gt;소스코드 다운로드&lt;/h3&gt;
&lt;p&gt;Geant4는 설치프로그램을 이용하는 식으로 설치할 수는 없습니다. 소스코드를 받아서 직접 컴파일하는 방식으로 설치해주어야 합니다.&lt;/p&gt;
&lt;p&gt;Geant4 소스코드는 &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;의 &lt;strong&gt;Source files&lt;/strong&gt;부분에서 다운받을 수 있습니다. Windows에서 설치를 진행하고 있으므로, &lt;strong&gt;ZIP format&lt;/strong&gt;을 받으시면 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;설치-2&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다음의 순서에 따라 진행합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$env:USERPROFILE\Geant4\&lt;/code&gt; 폴더를 만듭니다. (탐색기를 열고, 주소창에 &lt;code&gt;%USERPROFILE%&lt;/code&gt;이라고 쓰면 &lt;code&gt;$env:USERPROFILE&lt;/code&gt; 위치로 들어갈 수 있습니다)&lt;/li&gt;
&lt;li&gt;다운받은 &lt;code&gt;geant4-v11.0.0.zip&lt;/code&gt; 파일의 압축을 풀어, 내용물을 &lt;code&gt;$env:USERPROFILE\Geant4\&lt;/code&gt;에 담습니다. &lt;code&gt;$env:USERPROFILE\Geant4\&lt;/code&gt; 폴더 안에는 이제 &lt;code&gt;geant4-v11.0.0&lt;/code&gt;이라는 폴더가 생겼을 것입니다. (&lt;code&gt;$env:USERPROFILE\Geant4\&lt;/code&gt;에는 앞서 data를 저장해둔 &lt;code&gt;data&lt;/code&gt; 폴더도 있었을 것입니다)
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_unzip&#34; srcset=&#34;
               /g4install-110-win11/geant4_unzip_hu086911d5ec27245b1117d73aa29be0a3_20072_2e14c0baaf87cb8768b023ff1e2f2340.png 400w,
               /g4install-110-win11/geant4_unzip_hu086911d5ec27245b1117d73aa29be0a3_20072_79cede1b7a8741db15d024377d9e7f8f.png 760w,
               /g4install-110-win11/geant4_unzip_hu086911d5ec27245b1117d73aa29be0a3_20072_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/geant4_unzip_hu086911d5ec27245b1117d73aa29be0a3_20072_2e14c0baaf87cb8768b023ff1e2f2340.png&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$env:USERPROFILE\Geant4\geant4-v11.0.0\&lt;/code&gt;로 들어갑니다. 이 폴더 안에 이미 여러가지 폴더와 파일이 있을 것입니다. 이 위치에 추가로 &lt;code&gt;build&lt;/code&gt;라는 이름의 폴더와 &lt;code&gt;install&lt;/code&gt;이라는 이름의 폴더를 만듭니다. 여기서 &lt;code&gt;build&lt;/code&gt; 폴더는 소스코드를 컴파일하는 준비단계에 사용할 폴더이며, &lt;code&gt;install&lt;/code&gt; 폴더는 컴파일하여 설치한 결과물이 담기게 될 폴더입니다.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_folder&#34; srcset=&#34;
               /g4install-110-win11/geant4_folder_huf38059a8e36111c5084d262e96ed7a1b_36827_5a688db5dfb8a383d49ffc9050092178.png 400w,
               /g4install-110-win11/geant4_folder_huf38059a8e36111c5084d262e96ed7a1b_36827_8d0f570ff7a3f3274d91354b132770e5.png 760w,
               /g4install-110-win11/geant4_folder_huf38059a8e36111c5084d262e96ed7a1b_36827_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/geant4_folder_huf38059a8e36111c5084d262e96ed7a1b_36827_5a688db5dfb8a383d49ffc9050092178.png&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;앞서 실행해 봤던 &lt;font color=red&gt;&lt;b&gt;Developer PowerShell for VS 2022&lt;/b&gt;&lt;/font&gt;를 실행합니다. 이미 켜져있는 창이 있다면, 그대로 이용하셔도 됩니다.&lt;/li&gt;
&lt;li&gt;다음 명령어를 이용하여 앞서 만든 &lt;code&gt;$env:USERPROFILE\Geant4\geant4-v11.0.0\build&lt;/code&gt; 폴더로 이동합니다.
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cd &amp;quot;$env:USERPROFILE\Geant4\geant4-v11.0.0\build&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;다음 명령어를 입력하여 &lt;code&gt;cmake&lt;/code&gt; 작업을 수행합니다. 사양에 따라 다릅니다만 시간이 꽤 많이 걸립니다 (수 분 내지 수 십분).
오탈자 방지를 위해 복사-붙여넣기를 권장합니다. 경우에 따라 경로 부분은 변경하여 사용하시기 바랍니다.
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake .. -DCMAKE_INSTALL_PREFIX=&amp;quot;$env:USERPROFILE\Geant4\geant4-v11.0.0\install&amp;quot; -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATADIR=&amp;quot;$env:USERPROFILE\Geant4\data&amp;quot; -DGEANT4_BUILD_MSVC_MP=ON -DGEANT4_USE_QT=ON
&lt;/code&gt;&lt;/pre&gt;
위에서 &lt;code&gt;-D&lt;/code&gt; 뒤에 이어지는 항목이 추가옵션에 해당하는 인자이며, 여기서 사용된 옵션의 의미는 다음과 같습니다.
&lt;ul&gt;
&lt;li&gt;CMAKE_INSTALL_PREFIX: Geant4가 설치될 폴더의 경로&lt;/li&gt;
&lt;li&gt;GEANT4_BUILD_MULTITHREADED: Geant4에서 MultiThreading이 가능하도록 설치할 지에 대한 여부. 기본값은 OFF&lt;/li&gt;
&lt;li&gt;GEANT4_INSTALL_DATADIR: 사용자가 준비해둔 cross-section data가 담긴 폴더의 경로&lt;/li&gt;
&lt;li&gt;GEANT4_BUILD_MSVC_MP: Windows에서 MSVC 빌드 도구를 통해 설치할 때 Multiprocessing을 통해 설치 속도를 빠르게 할 지에 대한 여부. 기본값은 OFF (이 옵션을 ON으로 하면, 컴퓨터 최대성능을 다 끌어다 써서, 설치 중에 컴퓨터가 버벅일 수 있습니다)&lt;/li&gt;
&lt;li&gt;GEANT4_USE_QT: Geant4에서 Qt5 기반의 GUI를 사용할 수 있도록 설치할 지에 대한 여부. 기본값은 OFF
다음 그림과 같이 &lt;b&gt;Configuring done&lt;/b&gt;과 &lt;b&gt;Generating done&lt;/b&gt; 문구를 확인하였다면 성공입니다.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_cmake&#34; srcset=&#34;
               /g4install-110-win11/geant4_cmake_hu3536fb1fe120c6b839af5af438373af9_62981_d6cb76e0508d862abf25d0f1cd354ca6.png 400w,
               /g4install-110-win11/geant4_cmake_hu3536fb1fe120c6b839af5af438373af9_62981_87bfdb3715efed3986024f3f8c4525df.png 760w,
               /g4install-110-win11/geant4_cmake_hu3536fb1fe120c6b839af5af438373af9_62981_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/geant4_cmake_hu3536fb1fe120c6b839af5af438373af9_62981_d6cb76e0508d862abf25d0f1cd354ca6.png&#34;
               width=&#34;760&#34;
               height=&#34;426&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다음 명령어를 입력하여 빌드 및 설치 작업을 수행합니다. 오탈자 방지를 위해 복사-붙여넣기를 권장합니다.
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake --build . --config Release --target install
&lt;/code&gt;&lt;/pre&gt;
다음 그림과 같이 &lt;b&gt;&amp;ndash; Installing: &amp;hellip;&lt;/b&gt; 문구가 쭉 뜨는 걸 확인하였다면 성공입니다.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_make&#34; srcset=&#34;
               /g4install-110-win11/geant4_make_hu5391949d00ddb8908414ae06fddc7569_61429_35ceb5e84ded85d596c916c7d33eedbf.png 400w,
               /g4install-110-win11/geant4_make_hu5391949d00ddb8908414ae06fddc7569_61429_c3aae7c42774539f1adc2051eee785b7.png 760w,
               /g4install-110-win11/geant4_make_hu5391949d00ddb8908414ae06fddc7569_61429_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/geant4_make_hu5391949d00ddb8908414ae06fddc7569_61429_35ceb5e84ded85d596c916c7d33eedbf.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;환경변수-설정-1&#34;&gt;환경변수 설정&lt;/h3&gt;
&lt;p&gt;설치가 끝났다면, 환경변수를 설정하는 과정이 필요합니다.&lt;/p&gt;
&lt;p&gt;먼저, PowerShell을 관리자 권한으로 실행합니다. &lt;font color=red&gt;&lt;b&gt;방금까지 Geant4 설치에 이용하던 Developer PowerShell for VS 2022에서 하는 것이 아님에 주의&lt;/b&gt;&lt;/font&gt;하세요. 권한이 없어서 명령어가 제대로 실행되지 않을 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[R]&lt;/b&gt;을 눌러 실행 창 열기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;powershell&lt;/code&gt; 입력 후 &lt;b&gt;[CTRL]+[SHIFT]+[ENTER]&lt;/b&gt;를 눌러 관리자 권한으로 powershell 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어 입력&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Path&lt;/code&gt; 환경변수에 Geant4가 설치된 경로의 &lt;code&gt;bin&lt;/code&gt; 폴더를 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Environment]::SetEnvironmentVariable(&amp;quot;Path&amp;quot;, $env:Path+&amp;quot;;$env:USERPROFILE\Geant4\geant4-v11.0.0\install\bin&amp;quot;, &amp;quot;Machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Geant4_DIR&lt;/code&gt;이라는 환경변수를 만들어 Geant4가 설치된 경로의 &lt;code&gt;lib\Geant4-11.0.0&lt;/code&gt; 폴더를 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Environment]::SetEnvironmentVariable(&amp;quot;Geant4_DIR&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\geant4-v11.0.0\install\lib\Geant4-11.0.0&amp;quot;, &amp;quot;Machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;크로스섹션 데이터 경로 설정을 위한 환경변수 설정 (참고: &lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/InstallationGuide/html/postinstall.html#environment-variables-for-datasets&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Postinstall Setup — Geant4 Installation Guide 11.0 documentation (cern.ch)&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Environment]::SetEnvironmentVariable(&amp;quot;G4ABLADATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\G4ABLA3.1&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4ENSDFSTATEDATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\G4ENSDFSTATE2.3&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4INCLDATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\G4INCL1.0&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4LEDATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\G4EMLOW8.0&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4LEVELGAMMADATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\PhotonEvaporation5.7&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4NEUTRONHPDATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\G4NDL4.6&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4PARTICLEXSDATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\G4PARTICLEXS4.0&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4PIIDATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\G4PII1.3&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4RADIOACTIVEDATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\RadioactiveDecay5.6&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4REALSURFACEDATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\RealSurface2.2&amp;quot;, &amp;quot;Machine&amp;quot;)
[Environment]::SetEnvironmentVariable(&amp;quot;G4SAIDXSDATA&amp;quot;, &amp;quot;$env:USERPROFILE\Geant4\data\G4SAIDDATA2.0&amp;quot;, &amp;quot;Machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_env&#34; srcset=&#34;
               /g4install-110-win11/geant4_env_hu7d8de67f5ccd75df8e6a5094896a1b93_126340_f8c0577ee85510f2d6fabc8f122775e5.png 400w,
               /g4install-110-win11/geant4_env_hu7d8de67f5ccd75df8e6a5094896a1b93_126340_3814ba1eaa79034378ceab2210cfd144.png 760w,
               /g4install-110-win11/geant4_env_hu7d8de67f5ccd75df8e6a5094896a1b93_126340_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/geant4_env_hu7d8de67f5ccd75df8e6a5094896a1b93_126340_f8c0577ee85510f2d6fabc8f122775e5.png&#34;
               width=&#34;760&#34;
               height=&#34;519&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-예제-실행해보기&#34;&gt;Geant4 예제 실행해보기&lt;/h2&gt;
&lt;p&gt;Geant4 설치를 완료했으니 이제 실행을 해봐야겠죠. 예제파일은 앞서 소스코드의 압축을 풀었던 곳에 가보시면 &lt;code&gt;$env:USERPROFILE\Geant4\geant4-v11.0.0\examples&lt;/code&gt; 폴더에 있습니다. 여기서는 제일 기본예제인 &lt;code&gt;examples\basic\B1&lt;/code&gt;을 테스트 해보겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;B1&lt;/code&gt; 폴더를 &lt;b&gt;폴더 째로 복사&lt;/b&gt;하여 원하는 곳에 가져옵니다. 저는 &lt;code&gt;$env:USERPROFILE\Geant4_Project\B1&lt;/code&gt;으로 복사해왔습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;복사해온 &lt;code&gt;B1&lt;/code&gt; 폴더 안에 &lt;b&gt;&lt;code&gt;build&lt;/code&gt;라는 폴더를 새로 만듭니다&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;example1&#34; srcset=&#34;
               /g4install-110-win11/example1_hubdc9534a4a46994054d25e4af0379e86_49779_5a6fa6518c9aa69681a141c54b77043a.png 400w,
               /g4install-110-win11/example1_hubdc9534a4a46994054d25e4af0379e86_49779_294ef3fa457c9a85f2c22b2e2aba82eb.png 760w,
               /g4install-110-win11/example1_hubdc9534a4a46994054d25e4af0379e86_49779_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/example1_hubdc9534a4a46994054d25e4af0379e86_49779_5a6fa6518c9aa69681a141c54b77043a.png&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;복사해온 B1 폴더 안에 있는 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일을 열어, 파일의 맨 위에 다음 내용을 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;#----------------------------------------------------------------------------
# Set build output directory to be ./build 
# rather than ./build/Release or ./build/RelWithDebInfo
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE &amp;quot;${CMAKE_BINARY_DIR}&amp;quot;)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO &amp;quot;${CMAKE_BINARY_DIR}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;example2&#34; srcset=&#34;
               /g4install-110-win11/example2_hu5bc646f33e70b300bacd657798df2033_61231_4a8011c4ce801c6fee4a30ce57387679.png 400w,
               /g4install-110-win11/example2_hu5bc646f33e70b300bacd657798df2033_61231_6985b1e2e3a785ed7191d5a48e73ecde.png 760w,
               /g4install-110-win11/example2_hu5bc646f33e70b300bacd657798df2033_61231_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/example2_hu5bc646f33e70b300bacd657798df2033_61231_4a8011c4ce801c6fee4a30ce57387679.png&#34;
               width=&#34;760&#34;
               height=&#34;640&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Geant4 코드는 init_vis.mac, vis.mac,&amp;hellip;과 같은 *.mac 파일을 불러와서 이를 연동하여 실행하는 경우가 많습니다.&lt;/p&gt;
&lt;p&gt;일반적으로 UNIX/LINUX 환경에서는 실행파일과 *.mac 파일이 동일한 경로에 존재하도록 빌드를 수행하기 때문에, 대부분의 Geant4 코드는 이들의 위치가 동일하게 &lt;code&gt;build&lt;/code&gt; 폴더에 있으리라는 가정 하에 작성되어 있습니다. 그러나 MSVC를 이용하여 빌드를 수행할 경우에는, *.mac 파일은 &lt;code&gt;build&lt;/code&gt; 폴더에 있지만, 실행파일(*.exe)은 &lt;code&gt;build\Release&lt;/code&gt;나 &lt;code&gt;build\RelWithDebInfo&lt;/code&gt; 폴더 안에 생성됩니다.&lt;/p&gt;
&lt;p&gt;위의 코드를 &lt;code&gt;CMakeLists.txt&lt;/code&gt;에 추가하면, 실행파일이 *.mac 파일의 위치와 동일한 &lt;code&gt;build&lt;/code&gt; 폴더에 생성되어 이 문제를 해결할 수 있습니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developer PowerShell for VS 2022를 실행합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;반드시, Developer PowerShell for VS 2022 창을 &lt;b&gt;새로 켜서 진행&lt;/b&gt;하시기 바랍니다! 기존에 켜져 있던 창에서는 환경변수를 설정한 내용이 반영되지 않아 오류가 생길 수 있습니다.&lt;/p&gt;
&lt;p&gt;환경변수를 설정했던, 일반 PowerShell에서는 &lt;code&gt;cmake&lt;/code&gt;와 같은 명령어가 동작하지 않습니다. 반드시 Developer PowerShell for VS 2022에서 진행하세요.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; 명령어를 이용하여, 예제 코드를 복사해온 경로의 &lt;code&gt;build&lt;/code&gt; 폴더로 이동합니다. 이 글에서처럼 &lt;code&gt;B1&lt;/code&gt;을 &lt;code&gt;$env:USERPROFILE\Geant4_Project\B1&lt;/code&gt;으로 복사하였다면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cd &amp;quot;$env:USERPROFILE\Geant4_Project\B1\build&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 입력하여 빌드를 수행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake ..
cmake --build . --config Release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;example3&#34; srcset=&#34;
               /g4install-110-win11/example3_hu861634521f8f9394ba66a70a85b6f727_133121_b555660253e73750739b8b811e985303.png 400w,
               /g4install-110-win11/example3_hu861634521f8f9394ba66a70a85b6f727_133121_c050beb4a9c6a7fe75703e243e14a9d6.png 760w,
               /g4install-110-win11/example3_hu861634521f8f9394ba66a70a85b6f727_133121_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/example3_hu861634521f8f9394ba66a70a85b6f727_133121_b555660253e73750739b8b811e985303.png&#34;
               width=&#34;760&#34;
               height=&#34;645&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;명령줄에 &lt;code&gt;./exampleB1.exe&lt;/code&gt;를 입력하여 실행하거나, &lt;code&gt;build&lt;/code&gt; 폴더 안에 있는 &lt;code&gt;exampleB1.exe&lt;/code&gt;파일을 더블클릭하여 실행합니다.&lt;/p&gt;
&lt;p&gt;다음과 같은 GUI 창이 뜨면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;example4&#34; srcset=&#34;
               /g4install-110-win11/example4_hu2dde95ccbb0280d046477ee6b83126df_52878_f0e99116c4388a90fb871222be01af9f.png 400w,
               /g4install-110-win11/example4_hu2dde95ccbb0280d046477ee6b83126df_52878_eb06ba973e5be284bd1deb4b513e8a64.png 760w,
               /g4install-110-win11/example4_hu2dde95ccbb0280d046477ee6b83126df_52878_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-110-win11/example4_hu2dde95ccbb0280d046477ee6b83126df_52878_f0e99116c4388a90fb871222be01af9f.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-12-22: 최초 게시&lt;/li&gt;
&lt;li&gt;2022-01-14: 다운로드 에러 관련 설명 추가, 오탈자 수정&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4 설치하기(10.6.p02, Ubuntu2004 LTS)</title>
      <link>https://evandde.github.io/g4install-106p2-ubt2004/</link>
      <pubDate>Sun, 01 Nov 2020 16:17:56 +0900</pubDate>
      <guid>https://evandde.github.io/g4install-106p2-ubt2004/</guid>
      <description>&lt;p&gt;이 글에서는 Linux계열 운영체제 중 하나인 &lt;strong&gt;Ubuntu 20.04 LTS&lt;/strong&gt;에서 &lt;strong&gt;Geant4 10.6 patch 02 버전&lt;/strong&gt;을 설치하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;설치-정보-요약&#34;&gt;설치 정보 요약&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;설치 환경&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제: Ubuntu 20.04 LTS&lt;/li&gt;
&lt;li&gt;인터넷 사용 가능&lt;/li&gt;
&lt;li&gt;관리자 권한 (&lt;code&gt;sudo&lt;/code&gt;) 이용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 대상&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geant4 10.6 patch 02 버전&lt;/li&gt;
&lt;li&gt;Multi-threading 기능 활성화&lt;/li&gt;
&lt;li&gt;UI 및 가시화 기능 활용을 위해 Qt5, X11 OpenGL 라이브러리 연동하여 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 경로&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;여러 버전의 Geant4를 설치할 경우를 고려하여, &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;h3 id=&#34;geant4-관련-필수선택-라이브러리-설치&#34;&gt;Geant4 관련 필수/선택 라이브러리 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt; 패키지 매니저 최신화&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt;를 이용하여 다음 항목 설치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;CMake (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Expat (Linux, macOS에서 &lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Qt5, X11 OpenGL 라이브러리 설치 (&lt;font color=&#39;blue&#39;&gt;Geant4 설치 시 선택 라이브러리&lt;/font&gt;. GUI 등 그래픽 기반 기능 사용에 필요)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential cmake libexpat1-dev qt5-default libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;geant4-설치&#34;&gt;Geant4 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geant4 툴킷을 설치할 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.6.p02
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, Geant4 소스코드 다운로드 (소스코드 용량 약 40 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.6.p02
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.06.p02.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.06.p02.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 만들고 안으로 이동&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 수행 (&lt;code&gt;make&lt;/code&gt; 명령은 인터넷 속도 및 cpu 성능에 따라 수 분~수 십분 소요될 수 있음)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt;(크로스섹션 데이터 자동설치 여부): ON (데이터 총 용량 약 900 MB)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../geant4.10.06.p02 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.6.p02 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON
sudo make -j `grep -c processor /proc/cpuinfo`
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;환경변수 세팅을 위해 &lt;code&gt;~/.bashrc&lt;/code&gt;에 내용 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.6.p02/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prerequisite-설치&#34;&gt;Prerequisite 설치&lt;/h2&gt;
&lt;p&gt;인터넷이 안된다거나, 관리자 권한을 사용할 수 없다거나, Ubuntu가 아니라면 이야기가 좀 달라지겠지만&amp;hellip;&lt;/p&gt;
&lt;p&gt;앞서 말한 5가지 준비물은 모두 Ubuntu에서 제공하는 패키지 관리자 &lt;code&gt;apt&lt;/code&gt;를 통해 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;(RedHat 계열의 리눅스에서도 패키지 관리자 &lt;code&gt;yum&lt;/code&gt;을 통해 유사한 명령어로 설치할 수 있습니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    패키지 관리자를 사용하기 전에 최신화를 해주세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    본인이 &lt;strong&gt;서버 등을 관리하는 사람&lt;/strong&gt;이라면, &lt;strong&gt;최신화를 할 때 주의&lt;/strong&gt;하세요. 이런 경우에는 전체 패키지를 최신화하기보다는 &lt;strong&gt;원하는 특정 패키지를 선별하여 최신화하기를 권장&lt;/strong&gt;합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;패키지-매니저-최신화&#34;&gt;패키지 매니저 최신화&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;c-컴파일러-및-표준-라이브러리-헤더-설치-gcc-등&#34;&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 설치 (GCC 등)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cmake-설치&#34;&gt;CMake 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y cmake
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;expat-설치&#34;&gt;Expat 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libexpat1-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;qt5-설치&#34;&gt;Qt5 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y qt5-default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;x11-opengl-설치&#34;&gt;X11 OpenGL 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-설치하기&#34;&gt;Geant4 설치하기&lt;/h2&gt;
&lt;p&gt;이제 준비가 다 되었습니다. 이어서 Geant4를 설치해봅시다.&lt;/p&gt;
&lt;p&gt;우리가 설치하고자 하는 경로는 &lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;입니다. 앞서 말씀드린 것처럼, 여러 버전의 Geant4를 설치할 경우를 고려하여 &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전명에 해당하는 디렉토리를 두어 세분화한 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;설치를-위한-디렉토리-생성&#34;&gt;설치를 위한 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;우선 해당 디렉토리를 생성하기 위해 다음 명령어를 입력합니다. (&lt;code&gt;/opt&lt;/code&gt;는 관리자 권한이 있어야 수정할 수 있음)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.6.p02
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;geant4-소스코드-다운로드&#34;&gt;Geant4 소스코드 다운로드&lt;/h3&gt;
&lt;p&gt;이어서, 해당 디렉토리로 이동한 뒤 Geant4 소스코드를 다운 받겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.6.p02
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.06.p02.tar.gz 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34;&gt;Geant4 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    본 글에서 다루는 10.6.p02와 다른 버전을 설치하시는 경우에는, &lt;code&gt;wget&lt;/code&gt; 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;소스코드-압축-해제&#34;&gt;소스코드 압축 해제&lt;/h3&gt;
&lt;p&gt;위 과정을 통해 &lt;code&gt;geant4.10.06.p02.tar.gz&lt;/code&gt;라는 압축파일을 다운받으셨을 것입니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 해당 파일의 압축을 해제합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.06.p02.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;geant4.10.06.p02&lt;/code&gt;라는 디렉토리가 생성되고 그 안에 압축이 풀리게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드를-위한-build-디렉토리-생성&#34;&gt;빌드를 위한 build 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;빌드를 수행하면 CMake와 관련된 잡다한 부산물이 생성됩니다. 관리의 용이성을 위해, 별도의 &lt;code&gt;build&lt;/code&gt;라는 디렉토리를 만들고 이 안에서 컴파일을 수행하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;빌드-수행&#34;&gt;빌드 수행&lt;/h3&gt;
&lt;p&gt;우리는 빌드를 진행할 때 다음과 같은 옵션을 설정할 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.6.p02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt;(크로스섹션 데이터 자동설치 여부): ON (데이터 총 용량 약 900 MB)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 우리의 소스 코드는 &lt;code&gt;../geant4.10.06.p02&lt;/code&gt; 디렉토리에 압축이 풀려져 있지요.&lt;/p&gt;
&lt;p&gt;이에 따라 다음과 같이 명령줄을 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../geant4.10.06.p02 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.6.p02 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 명령어를 입력하면, 많은 내용이 출력되며 작업이 진행됩니다. 혹시라도 오타가 나면 이 부분에서 에러가 발생합니다. &lt;font color=&#34;red&#34;&gt;&lt;b&gt;오타가 나지 않도록 주의하세요! 복사-붙여넣기 추천!&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt; 부분은 앞서 설명한 바와 같이, 크로스섹션 데이터를 자동으로 다운받을지에 대한 옵션입니다. 사용자에 따라 &lt;code&gt;OFF&lt;/code&gt;로 하고 직접 다운로드 받아서 가져오는 경우도 있습니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 Geant4를 처음 설치하는 분들이 별도로 작업할 내용을 최소화하고자, 자동 다운로드 하는 방법으로 진행합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;ccmake&lt;/code&gt; (curses 기반 CMake)를 사용할 수 있는 분이라면, 이를 이용하는 편이 더욱 편할 수도 있습니다. 이에 관한 내용은 지면이 부족하여 생략합니다. :(far fa-grin-squint-tears):
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;다음과 같은 명령어와 함께 마무리되면 정상적으로 진행이 된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_done&#34; srcset=&#34;
               /g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_d962b0a01022ecdceb52d2963adad06b.png 400w,
               /g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_ecc011d54f915b53b9422d586ad841ca.png 760w,
               /g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/cmake_done_hu59b50202ad73dc9f0ac73bd4a1e2ceec_5212_d962b0a01022ecdceb52d2963adad06b.png&#34;
               width=&#34;647&#34;
               height=&#34;76&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이어서 &lt;code&gt;make&lt;/code&gt; 명령어로 빌드를 진행하고, &lt;code&gt;make install&lt;/code&gt;로 설치를 마무리합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어는 &lt;code&gt;-j &amp;lt;쓰레드 수&amp;gt;&lt;/code&gt; 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어에서 &lt;code&gt;-j&lt;/code&gt; 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 &lt;code&gt;cc1plus&lt;/code&gt; 관련 에러가 발생할 수 있습니다. &lt;code&gt;-j&lt;/code&gt; 옵션에 적절한 숫자는 &lt;b&gt;자신의 쓰레드 수 * 1.2&lt;/b&gt; 입니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;환경변수-설정&#34;&gt;환경변수 설정&lt;/h2&gt;
&lt;p&gt;Geant4 툴킷을 설치하고나면 마지막으로 할 일이 있습니다. 바로 &lt;strong&gt;환경변수를 설정&lt;/strong&gt;하는 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4 사용을 위해 컴퓨터에게 알려줘야 하는 초기값들이 몇 가지 있습니다만, 이를 정리하여 한 번에 자동으로 설정이 되게끔하는 파일을 Geant4에서 제공하고 있습니다.&lt;/p&gt;
&lt;p&gt;설치경로의 내부에 &lt;code&gt;bin/geant4.sh&lt;/code&gt;라는 파일입니다. (C-shell을 이용하시는 분은 &lt;code&gt;bin/geant4.csh&lt;/code&gt;를 이용합니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Geant4가 여러 버전으로 설치되어 있는 경우, 원하는 버전의 &lt;code&gt;bin/geant4.sh&lt;/code&gt;를 실행함으로써 해당 버전으로 동작하도록 설정할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;실행을 위해서는 다음 명령어를 입력합니다. (&lt;code&gt;source&lt;/code&gt; 명령어 뒤에 오는 경로는 Geant4를 설치한 경로에 따라 바뀔 수 있습니다)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source /opt/geant4/10.6.p02/bin/geant4.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만, 이 명령어는 실행한 이후 해당 shell이 종료될 때까지만 그 효과가 지속됩니다. 즉, 터미널을 새로 연다거나 하면 다시 환경변수 설정이 사라지게 되죠.&lt;/p&gt;
&lt;p&gt;그래서 일반적으로는 터미널을 켤 때마다 자동으로 한 번 실행되는 파일인 &lt;code&gt;~/.bashrc&lt;/code&gt; 맨 밑에 위의 명령줄을 적어둡니다. vim이나 gedit 등을 이용하여 직접 입력하셔도 되고, 다음 명령줄을 이용하여 &lt;code&gt;~/.bashrc&lt;/code&gt; 파일 맨 밑에 해당 내용이 추가되도록 하셔도 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.6.p02/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;에 추가된 내용을 새로고침하기 위해 다음 줄까지 실행하고 넘어가겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;드디어 Geant4 설치가 끝났습니다!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;제대로-설치되었는지-확인하기&#34;&gt;제대로 설치되었는지 확인하기&lt;/h2&gt;
&lt;h3 id=&#34;환경변수-확인&#34;&gt;환경변수 확인&lt;/h3&gt;
&lt;p&gt;정상적으로 설치가 완료되고 &lt;code&gt;geant.sh&lt;/code&gt; 파일이 제대로 실행되었다면, &lt;code&gt;G4...&lt;/code&gt;와 같은 형태의 환경변수가 크로스섹션 데이터를 담은 경로를 가리키고 있어야 합니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 제대로 그 경로가 출력되는지 확인할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env | grep G4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;G4env&#34; srcset=&#34;
               /g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_17846bd6732ec660a369cf341d379ff4.png 400w,
               /g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_315effa2cd254d4fae4ed70d0ec45f7b.png 760w,
               /g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/G4env_hu1102490a29fda20111fe3e06fc01c4fd_34435_17846bd6732ec660a369cf341d379ff4.png&#34;
               width=&#34;760&#34;
               height=&#34;237&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;예제-실행해보기&#34;&gt;예제 실행해보기&lt;/h3&gt;
&lt;h4 id=&#34;예제코드-복사해오기&#34;&gt;예제코드 복사해오기&lt;/h4&gt;
&lt;p&gt;예제코드는 &lt;strong&gt;소스 코드를 압축해제한 디렉토리 안&lt;/strong&gt;에 &lt;code&gt;examples&lt;/code&gt;이라는 디렉토리에 있습니다.&lt;/p&gt;
&lt;p&gt;우리의 경우에는 &lt;code&gt;/opt/geant4/10.6.p02/geant4.10.06.p02/examples&lt;/code&gt;이 되겠군요.&lt;/p&gt;
&lt;p&gt;테스트를 위해 &lt;code&gt;basic/B1&lt;/code&gt; 이라는 예제를 복사해오고, 복사해온 디렉토리 안으로 들어가봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -r /opt/geant4/10.6.p02/geant4.10.06.p02/examples/basic/B1 .
cd B1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;예제코드-실행하기-터미널-상에서-실행&#34;&gt;예제코드 실행하기 (터미널 상에서 실행)&lt;/h4&gt;
&lt;p&gt;예제 코드 B1에는 다음과 같은 파일 및 디렉토리들이 있을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;b1example&#34; srcset=&#34;
               /g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_7d4a7c3e709907a7410a44a847981e3a.png 400w,
               /g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_18ee76eaf7f4185acfb2c13e720c090b.png 760w,
               /g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/b1example_hu2b0264c12fc8d63cd9067b4beffeb1fb_6737_7d4a7c3e709907a7410a44a847981e3a.png&#34;
               width=&#34;760&#34;
               height=&#34;62&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 글에서는 코드를 살펴보지는 않고, 그냥 실행만 하겠습니다.&lt;/p&gt;
&lt;p&gt;우선 빌드를 하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cmake .
make -f Makefile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림과 같이 많은 줄이 출력된 뒤, &lt;code&gt;[100%] Built target exampleB1&lt;/code&gt;까지 나오면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_make&#34; srcset=&#34;
               /g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_17cd68d9b422eed5e6f3e4cafeb0f9a8.png 400w,
               /g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_dd048309e60202728a1ae6824433bfc2.png 760w,
               /g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/cmake_make_huc4ef8a6d99fcdd230b70d15474abe370_86490_17cd68d9b422eed5e6f3e4cafeb0f9a8.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이어서 실행을 해봅니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1 run1.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림처럼 또 무언가 잔뜩 출력된 뒤, &lt;code&gt;RunManagerKernel is deleted. Good bye :)&lt;/code&gt;가 출력되었다면 잘 실행된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_runmac&#34; srcset=&#34;
               /g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_da6cd447281ce0174842e444ea297f69.png 400w,
               /g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_89286e8f8b48a21807266a0cd3ecea23.png 760w,
               /g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/exampleB1_runmac_hub1fed3afe1e544ed7be5854723b26421_52717_da6cd447281ce0174842e444ea297f69.png&#34;
               width=&#34;760&#34;
               height=&#34;689&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;예제코드-실행하기-gui-띄우기&#34;&gt;예제코드 실행하기 (GUI 띄우기)&lt;/h4&gt;
&lt;p&gt;Geant4 설치 시 Qt5와 OpenGL 설치도 함께 진행했으므로, 여러분의 우분투에 X window 관련 설정이 잘 되어있다면 다음 명령어로 GUI창도 띄워볼 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잘 실행되었다면 다음과 같은 창이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_gui&#34; srcset=&#34;
               /g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_0699a45c49f2473aff9790f41f8902d1.png 400w,
               /g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_6a288eaaa576d22b6716c29439f2bb82.png 760w,
               /g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-106p2-ubt2004/exampleB1_gui_hue2766ed2f94b9529f211516c07186a9f_76426_0699a45c49f2473aff9790f41f8902d1.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기까지 되셨다면 설치와 테스트까지 성공적으로 하신 것입니다! 고생하셨습니다.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geant4.cern.ch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Geant4 Toolkit &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gcc.gnu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GNU Compiler Collection&lt;/a&gt;(GCC)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://libexpat.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/download-qt-for-application-development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qt5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opengl.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenGL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4 설치하기(10.7.p01, Ubuntu2004 LTS)</title>
      <link>https://evandde.github.io/g4install-107p1-ubt2004/</link>
      <pubDate>Mon, 15 Feb 2021 13:17:56 +0900</pubDate>
      <guid>https://evandde.github.io/g4install-107p1-ubt2004/</guid>
      <description>&lt;p&gt;이 글에서는 Linux계열 운영체제 중 하나인 &lt;strong&gt;Ubuntu 20.04 LTS&lt;/strong&gt;에서 &lt;strong&gt;Geant4 10.7 patch 01 버전&lt;/strong&gt;을 설치하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;설치-정보-요약&#34;&gt;설치 정보 요약&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;설치 환경&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제: Ubuntu 20.04 LTS&lt;/li&gt;
&lt;li&gt;인터넷 사용 가능&lt;/li&gt;
&lt;li&gt;관리자 권한 (&lt;code&gt;sudo&lt;/code&gt;) 이용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 대상&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geant4 10.7 patch 01 버전&lt;/li&gt;
&lt;li&gt;CLHep 라이브러리 별도 설치하여 연동&lt;/li&gt;
&lt;li&gt;Cross-section data 직접 다운로드하여 준비&lt;/li&gt;
&lt;li&gt;Multi-threading 기능 활성화&lt;/li&gt;
&lt;li&gt;UI 및 가시화 기능 활용을 위해 Qt5, X11 OpenGL 라이브러리 연동하여 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;설치 경로&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;여러 버전의 CLHep를 설치할 경우를 고려하여, &lt;code&gt;/opt/clhep&lt;/code&gt; 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;여러 버전의 Geant4를 설치할 경우를 고려하여, &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;h3 id=&#34;geant4-관련-필수선택-라이브러리-설치&#34;&gt;Geant4 관련 필수/선택 라이브러리 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt; 패키지 매니저 최신화&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt&lt;/code&gt;를 이용하여 다음 항목 설치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;CMake (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Expat (Linux, macOS에서 &lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Qt5, X11 OpenGL 라이브러리 설치 (&lt;font color=&#39;blue&#39;&gt;Geant4 설치 시 선택 라이브러리&lt;/font&gt;. GUI 등 그래픽 기반 기능 사용에 필요)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential cmake libexpat1-dev qt5-default libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;clhep-설치&#34;&gt;CLHep 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CLHep 라이브러리를 설치할 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/clhep
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, CLHep 소스코드 다운로드 (소스코드 용량 약 1.5 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/clhep
sudo wget https://proj-clhep.web.cern.ch/proj-clhep/dist1/clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;압축해제로 생성된 &lt;code&gt;2.4.4.0&lt;/code&gt; 디렉토리로 이동한 뒤, &lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 생성하고 그 안으로 이동&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd 2.4.4.0
sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 수행 (&lt;code&gt;make&lt;/code&gt; 명령은 인터넷 속도 및 cpu 성능에 따라 수 분가량 소요될 수 있음)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake를 이용하여 설정하는 방법은 본문을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../CLHEP -DCMAKE_INSTALL_PREFIX=/opt/clhep/2.4.4.0
sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cross-section-data-준비&#34;&gt;Cross-section data 준비&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geant4용 cross-section data를 넣을 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/geant4data
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, cross-section data 다운로드 (전체 데이터 용량 약 928 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/geant4data
sudo wget https://geant4-data.web.cern.ch/datasets/G4NDL.4.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4EMLOW.7.13.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PhotonEvaporation.5.7.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4RadioactiveDecay.5.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4SAIDDATA.2.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PARTICLEXS.3.1.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ABLA.3.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4INCL.1.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PII.1.3.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ENSDFSTATE.2.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제하고, 압축파일을 삭제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo find -name &amp;quot;*.gz&amp;quot; -exec tar -xf {} \;
sudo rm -rf *.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;geant4-설치&#34;&gt;Geant4 설치&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geant4 툴킷을 설치할 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.7.p01
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, Geant4 소스코드 다운로드 (소스코드 용량 약 35 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.7.p01
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제 후 디렉토리명을 &lt;code&gt;source&lt;/code&gt;로 변경&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 만들고 안으로 이동&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 수행 (&lt;code&gt;make&lt;/code&gt; 명령은 인터넷 속도 및 cpu 성능에 따라 수 분~수 십분 소요될 수 있음)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake를 이용하여 설정하는 방법은 본문을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATADIR&lt;/code&gt;(크로스섹션 데이터 경로): &lt;code&gt;/opt/geant4/geant4data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_SYSTEM_CLHEP&lt;/code&gt;(직접 설치한 CLHep 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLHEP_DIR&lt;/code&gt;(CLHEP 경로): &lt;code&gt;/opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../geant4.10.07.p01 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.7.p01 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATADIR=/opt/geant4/geant4data -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON -DGEANT4_USE_SYSTEM_CLHEP=ON -DCLHEP_DIR=/opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0
sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;환경변수 세팅을 위해 &lt;code&gt;~/.bashrc&lt;/code&gt;에 내용 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.7.p01/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prerequisite-설치&#34;&gt;Prerequisite 설치&lt;/h2&gt;
&lt;p&gt;인터넷이 안된다거나, 관리자 권한을 사용할 수 없다거나, Ubuntu가 아니라면 이야기가 좀 달라지겠지만&amp;hellip;&lt;/p&gt;
&lt;p&gt;앞서 말한 5가지 준비물은 모두 Ubuntu에서 제공하는 패키지 관리자 &lt;code&gt;apt&lt;/code&gt;를 통해 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;(RedHat 계열의 리눅스에서도 패키지 관리자 &lt;code&gt;yum&lt;/code&gt;을 통해 유사한 명령어로 설치할 수 있습니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    패키지 관리자를 사용하기 전에 최신화를 해주세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    본인이 &lt;strong&gt;서버 등을 관리하는 사람&lt;/strong&gt;이라면, &lt;strong&gt;최신화를 할 때 주의&lt;/strong&gt;하세요. 이런 경우에는 전체 패키지를 최신화하기보다는 &lt;strong&gt;원하는 특정 패키지를 선별하여 최신화하기를 권장&lt;/strong&gt;합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;패키지-매니저-최신화&#34;&gt;패키지 매니저 최신화&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;c-컴파일러-및-표준-라이브러리-헤더-설치-gcc-등&#34;&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 설치 (GCC 등)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cmake-및-ccmake-설치&#34;&gt;CMake 및 CCMake 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y cmake cmake-curses-gui
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;expat-설치&#34;&gt;Expat 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libexpat1-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;qt5-설치&#34;&gt;Qt5 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y qt5-default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;x11-opengl-설치&#34;&gt;X11 OpenGL 설치&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;clhep-설치하기&#34;&gt;CLHep 설치하기&lt;/h3&gt;
&lt;p&gt;이어서 CLHep을 설치합니다. CLHep 라이브러리의 경우에는, apt 레포지토리에 원하는 버전이 없는 경우가 대부분이므로 직접 소스코드를 컴파일하여 설치합니다.&lt;/p&gt;
&lt;p&gt;Geant4 10.7 버전은 CLHep 2.4.4.0 버전을 요구합니다만, Geant4 버전이 바뀜에 따라 상응하는 CLHep 버전도 변경되므로 버전별 관리를 하는 것이 추후 심신이 편합니다. 따라서, 여기서는 &lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;과 같이 버전별로 경로를 만들어 설치하도록 하겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;우선 CLHep 라이브러리를 설치할 디렉토리 생성합니다. (&lt;code&gt;/opt&lt;/code&gt;는 &lt;code&gt;sudo&lt;/code&gt; 권한이 있어야 수정할 수 있음)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/clhep
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, CLHep 소스코드를 다운로드합니다. (소스코드 용량 약 1.5 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/clhep
sudo wget https://proj-clhep.web.cern.ch/proj-clhep/dist1/clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://proj-clhep.web.cern.ch/proj-clhep/clhep23.html&#34;&gt;CLHep 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    본 글에서 다루는 2.4.4.0이 아닌 다른 버전을 설치하시는 경우에는, &lt;code&gt;wget&lt;/code&gt; 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2번 과정을 통해 받은 압축파일 &lt;code&gt;clhep-2.4.4.0.tgz&lt;/code&gt;을 압축해제합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf clhep-2.4.4.0.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;2.4.4.0&lt;/code&gt; 디렉토리가 생성되며 압축이 해제됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;생성된 &lt;code&gt;2.4.4.0&lt;/code&gt; 디렉토리로 이동합니다. 이어서, 빌드를 수행하며 생기는 부산물을 보관하기 위한 &lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 생성하고 그 안으로 이동합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd 2.4.4.0
sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ccmake&lt;/code&gt; 명령어를 통해 Makefile 생성 작업을 진행합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake란 cmake 작업에 요구되는 옵션을 UI형태로 보여주며 작업하게 해주는 프로그램입니다. 옵션명과 인자를 정확하게 알고있다면, &lt;code&gt;cmake&lt;/code&gt; 명령어를 이용하여 한번에 진행할 수도 있습니다. 이 명령줄은 위의 &lt;a href=&#34;#tldr&#34;&gt;TL;DR&lt;/a&gt; 부분을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;우선 ccmake를 실행하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ccmake ../CLHEP
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음과 같은 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;clhep_ccmake_01&#34; srcset=&#34;
               /g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_4e0cb3dd35c344d92562c60211fd0890.png 400w,
               /g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_c00be5ad0d5d99c9bc512fc1b0903376.png 760w,
               /g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/clhep_ccmake_01_hud34b15cfcc2a49f91e642cf8e10147cc_19361_4e0cb3dd35c344d92562c60211fd0890.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;맨 처음 ccmake 프로그램을 실행하면, 기존 작업내용이 없어서 &lt;strong&gt;EMPTY CACHE&lt;/strong&gt;가 출력되고, 화면 아래에 보이는 바와 같이 키보드 [c]를 누르면 configure 작업이 수행되고, [q]를 누르면 종료되는 식입니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;이어서 다음의 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;clhep_ccmake_02&#34; srcset=&#34;
               /g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_3301190ac3c619396bee2b2a16c915ec.png 400w,
               /g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_32484eb861b4d0873ad6faa4cfe3b008.png 760w,
               /g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/clhep_ccmake_02_hu94fe5788ed09fdfc24b71866fb3704e8_37289_3301190ac3c619396bee2b2a16c915ec.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; 항목이 CLHep을 설치할 경로를 설정하는 인자입니다. 우리는 이 값을 &lt;code&gt;/opt/clhep/2.4.4.0&lt;/code&gt;으로 변경하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;위아래 화살표키로 항목 간 이동이 가능하며, 엔터를 한 번 누르면 수정 모드로 변경되고, 내용 입력 후 다시 엔터를 한 번 누르면 확정됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;입력을 마친 뒤 [c] 키를 한번 더 누르면 다음과 같이 화면이 바뀝니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;clhep_ccmake_03&#34; srcset=&#34;
               /g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_f3dfa9ce4305f774982fd360bc78194b.png 400w,
               /g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_9ca136f51a35c446a4ab9ddc8b5ed1ca.png 760w,
               /g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/clhep_ccmake_03_hu8bfd5c075ad61c2e8da0f6c448ba1849_27388_f3dfa9ce4305f774982fd360bc78194b.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;새로 생긴 &lt;b&gt;[g]&lt;/b&gt;를 눌러 Makefile을 생성합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 컴파일 및 설치작업을 진행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어는 &lt;code&gt;-j &amp;lt;쓰레드 수&amp;gt;&lt;/code&gt; 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어에서 &lt;code&gt;-j&lt;/code&gt; 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 &lt;code&gt;cc1plus&lt;/code&gt; 관련 에러가 발생할 수 있습니다. &lt;code&gt;-j&lt;/code&gt; 옵션에 적절한 숫자는 &lt;b&gt;자신의 쓰레드 수 * 1.2&lt;/b&gt; 입니다. 여기서는 사용자 컴퓨터의 쓰레드 수를 가져오는 명령어인 &lt;code&gt;grep -c processor /proc/cpuinfo&lt;/code&gt;를 이용하여 자동으로 숫자가 입력되게 하였습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt; 명령을 수행하면 퍼센트가 올라가며 컴파일이 수행될 것입니다. 이는 CPU 성능에 따라 수십 초 ~ 수 분 가량 소요될 수 있으니 잠시 휴식을 취하시면 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cross-section-data-준비하기&#34;&gt;Cross-section data 준비하기&lt;/h2&gt;
&lt;p&gt;Geant4를 설치하려면 cross-section data가 필요합니다. 이를 준비하는 방법은 두 가지 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;사용자가 직접 다운받아서 압축 풀어서 준비.&lt;/li&gt;
&lt;li&gt;설치 과정에서 자동으로 다운로드.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;무엇을 택하든 크게 상관은 없습니다만, 여기서는 1번 방법에 해당하는 직접 준비를 해보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;geant4-cross-section-data-디렉토리-생성&#34;&gt;Geant4 cross-section data 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;Cross-section data가 저장될 디렉토리를 생성한 뒤 이동합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/geant4data
cd /opt/geant4/geant4data
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;data-다운로드&#34;&gt;Data 다운로드&lt;/h3&gt;
&lt;p&gt;Cross-section data를 다운로드합니다. (총 10가지. 전체 데이터 용량 약 928 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo wget https://geant4-data.web.cern.ch/datasets/G4NDL.4.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4EMLOW.7.13.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PhotonEvaporation.5.7.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4RadioactiveDecay.5.6.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4SAIDDATA.2.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PARTICLEXS.3.1.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ABLA.3.1.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4INCL.1.0.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4PII.1.3.tar.gz
sudo wget https://geant4-data.web.cern.ch/datasets/G4ENSDFSTATE.2.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34;&gt;Geant4 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;위에 적힌 10가지 외에 G4RealSurface, G4TENDL, LEND 데이터가 있습니다만, 이는 필수가 아닌 옵션이므로 여기서는 생략하겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;압축-해제&#34;&gt;압축 해제&lt;/h3&gt;
&lt;p&gt;10개의 파일을 하나하나 압축 해제하기 귀찮으므로, &lt;code&gt;find&lt;/code&gt; 명령어를 활용하여 일괄 해제 하는 명령어를 적어드립니다.&lt;/p&gt;
&lt;p&gt;이후 불필요한 압축파일(&lt;code&gt;*.gz&lt;/code&gt;)은 삭제해도 괜찮습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo find -name &amp;quot;*.gz&amp;quot; -exec tar -xf {} \;
sudo rm -rf *.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-설치하기&#34;&gt;Geant4 설치하기&lt;/h2&gt;
&lt;p&gt;이제 준비가 다 되었습니다. 이어서 Geant4를 설치해봅시다.&lt;/p&gt;
&lt;p&gt;우리가 설치하고자 하는 경로는 &lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;입니다. 앞서 말씀드린 것처럼, 여러 버전의 Geant4를 설치할 경우를 고려하여 &lt;code&gt;/opt/geant4&lt;/code&gt; 하위에 버전명에 해당하는 디렉토리를 두어 세분화한 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;설치를-위한-디렉토리-생성&#34;&gt;설치를 위한 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;우선 해당 디렉토리를 생성하기 위해 다음 명령어를 입력합니다. (&lt;code&gt;/opt&lt;/code&gt;는 관리자 권한이 있어야 수정할 수 있음)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.7.p01
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;geant4-소스코드-다운로드&#34;&gt;Geant4 소스코드 다운로드&lt;/h3&gt;
&lt;p&gt;이어서, 해당 디렉토리로 이동한 뒤 Geant4 소스코드를 다운 받겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.7.p01
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.07.p01.tar.gz 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;wget&lt;/code&gt; 명령어를 사용하지 않고, &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34;&gt;Geant4 다운로드 페이지&lt;/a&gt;에서 직접 받아서 옮겨오셔도 괜찮습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    본 글에서 다루는 10.7.p01와 다른 버전을 설치하시는 경우에는, &lt;code&gt;wget&lt;/code&gt; 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;소스코드-압축-해제&#34;&gt;소스코드 압축 해제&lt;/h3&gt;
&lt;p&gt;위 과정을 통해 &lt;code&gt;geant4.10.07.p01.tar.gz&lt;/code&gt;라는 압축파일을 다운받으셨을 것입니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 해당 파일의 압축을 해제합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;geant4.10.07.p01&lt;/code&gt;라는 디렉토리가 생성되고 그 안에 압축이 풀리게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드를-위한-build-디렉토리-생성&#34;&gt;빌드를 위한 build 디렉토리 생성&lt;/h3&gt;
&lt;p&gt;빌드를 수행하면 CMake와 관련된 잡다한 부산물이 생성됩니다. 관리의 용이성을 위해, 별도의 &lt;code&gt;build&lt;/code&gt;라는 디렉토리를 만들고 이 안에서 컴파일을 수행하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cmake-수행-ccmake-활용&#34;&gt;CMake 수행 (ccmake 활용)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ccmake&lt;/code&gt; 명령어를 통해 Makefile 생성 작업을 진행합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ccmake란 cmake 작업에 요구되는 옵션을 UI형태로 보여주며 작업하게 해주는 프로그램입니다. 옵션명과 인자를 정확하게 알고있다면, &lt;code&gt;cmake&lt;/code&gt; 명령어를 이용하여 한번에 진행할 수도 있습니다. 이 명령줄은 위의 &lt;a href=&#34;#tldr&#34;&gt;TL;DR&lt;/a&gt; 부분을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;우선 ccmake를 실행하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ccmake ../geant4.10.07.p01
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음과 같은 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_01&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_76737fcb125ccdba69d2fa4b2cd05c16.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_2991042f60e0aee410ad5d4e0d6f3334.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_01_hua3be843ffbfadc86bab942fa940fc32c_19319_76737fcb125ccdba69d2fa4b2cd05c16.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;CLHep때와 마찬가지 모습입니다. &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;이어서 다음의 화면이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_02&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_bd1863bbeb1656287ea49d5cc76aae9d.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_f757ab3b85d01d0e815e46918622d8e4.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_02_hu13f37bcfd817c18d39a6fc72f731cd66_24087_bd1863bbeb1656287ea49d5cc76aae9d.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Geant4 설치를 위한 cross-section data가 어디있는지 못찾겠다는 문구입니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[e]&lt;/b&gt;를 눌러 설정화면으로 돌아옵니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_03&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_72aa0aadff1cb612fb145844cd0a4c36.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_928b95ca5e79c61325eb0a96f35f1f0c.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_03_hu64271c956081f9d7a11d1e78a210dcd6_68093_72aa0aadff1cb612fb145844cd0a4c36.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 화면에서 우리는 Geant4 설치에 관한 여러가지 인자를 조정할 수 있습니다. 이 글에서는 앞서 설명했던 설치조건에 맞추어 다음 항목들을 변경할 것입니다. 그림의 빨간 체크표시 된 값들을 참고하세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATADIR&lt;/code&gt;(크로스섹션 데이터 경로): &lt;code&gt;/opt/geant4/geant4data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_SYSTEM_CLHEP&lt;/code&gt;(직접 설치한 CLHep 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이후 &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;또 다른 에러가 뜰 것입니다. CLHep을 직접 설치한 것으로 연동하겠다고 하였는데, CLHep이 어디에 있는지 못찾겠다는 에러입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_04&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_dd82850956399746fdc560ead7ca52f5.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_dfe6d831f125d0bc7f245be19f22a297.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_04_hu3078bff302dd4ce24ab7c5be8c11df16_36734_dd82850956399746fdc560ead7ca52f5.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 그림과 같이 &lt;code&gt;CLHEP_DIR&lt;/code&gt;을 변경해줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_05&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_9c6c993b07dd993e1e1b203ef7c73bcb.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_40054a229e7220ff885bd3840c92b680.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_05_hub2d9ff68494c463387c836440e45bf4e_56440_9c6c993b07dd993e1e1b203ef7c73bcb.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CLHEP_DIR&lt;/code&gt;(CLHEP 경로): &lt;code&gt;/opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이제 다시 &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행하면, 에러는 뜨지 않고 Qt5 관련 경로가 알아서 잡힌 모습이 뜨게 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_06&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_70d6973712e75ca60f2dd7c572ac00d0.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_9a355fb915cbea90489c74626f8cf484.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_06_hu709f9159207762a023727f38c5cc33e2_65511_70d6973712e75ca60f2dd7c572ac00d0.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;마지막으로 한번 더 &lt;b&gt;[c]&lt;/b&gt;를 눌러 configure 작업을 수행합니다. 이제 드디어 &lt;b&gt;[g]&lt;/b&gt; 버튼이 나타났습니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;[g]&lt;/b&gt;를 눌러 Makefile을 생성합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_ccmake_07&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_bbc78dc6b0f753c56293c5c205abe5c5.png 400w,
               /g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_888af432a20400bc53efcf854c2a2a6e.png 760w,
               /g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_ccmake_07_hu7791c7eb5f758a0275cf8fd6b0a3acdb_70381_bbc78dc6b0f753c56293c5c205abe5c5.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;컴파일-및-설치작업&#34;&gt;컴파일 및 설치작업&lt;/h3&gt;
&lt;p&gt;이제 컴파일 및 설치작업을 진행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make -j `grep -c processor /proc/cpuinfo` &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어는 &lt;code&gt;-j &amp;lt;쓰레드 수&amp;gt;&lt;/code&gt; 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;make&lt;/code&gt; 명령어에서 &lt;code&gt;-j&lt;/code&gt; 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 &lt;code&gt;cc1plus&lt;/code&gt; 관련 에러가 발생할 수 있습니다. &lt;code&gt;-j&lt;/code&gt; 옵션에 적절한 숫자는 &lt;b&gt;자신의 쓰레드 수 * 1.2&lt;/b&gt; 입니다. 여기서는 사용자 컴퓨터의 쓰레드 수를 가져오는 명령어인 &lt;code&gt;grep -c processor /proc/cpuinfo&lt;/code&gt;를 이용하여 자동으로 숫자가 입력되게 하였습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt; 명령을 수행하면 퍼센트가 올라가며 컴파일이 수행될 것입니다. 이는 CPU 성능에 따라 수 분 ~ 수십 분 가량 소요될 수 있으니 푹 쉬고 오세요.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;geant4_make&#34; srcset=&#34;
               /g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_3c06c5e6fcf6257e69fab880cffdc488.png 400w,
               /g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_6ae17510a0ce4e1dd6808c054a5bd49a.png 760w,
               /g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/geant4_make_hua7e41a7b63fa0c1a8eb0a643fc558ee4_105500_3c06c5e6fcf6257e69fab880cffdc488.png&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;환경변수-설정&#34;&gt;환경변수 설정&lt;/h2&gt;
&lt;p&gt;Geant4 툴킷을 설치하고나면 마지막으로 할 일이 있습니다. 바로 &lt;strong&gt;환경변수를 설정&lt;/strong&gt;하는 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4 사용을 위해 컴퓨터에게 알려줘야 하는 초기값들이 몇 가지 있습니다만, 이를 정리하여 한 번에 자동으로 설정이 되게끔하는 파일을 Geant4에서 제공하고 있습니다.&lt;/p&gt;
&lt;p&gt;설치경로의 내부에 있는 &lt;code&gt;bin/geant4.sh&lt;/code&gt;라는 파일입니다. (C-shell을 이용하시는 분은 &lt;code&gt;bin/geant4.csh&lt;/code&gt;를 이용합니다)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Geant4가 여러 버전으로 설치되어 있는 경우, 원하는 버전의 &lt;code&gt;bin/geant4.sh&lt;/code&gt;를 실행함으로써 해당 버전으로 동작하도록 설정할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;실행을 위해서는 다음 명령어를 입력합니다. (&lt;code&gt;source&lt;/code&gt; 명령어 뒤에 오는 경로는 Geant4를 설치한 경로에 따라 바뀔 수 있습니다)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source /opt/geant4/10.7.p01/bin/geant4.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만, 이 명령어는 실행한 이후 해당 shell이 종료될 때까지만 그 효과가 지속됩니다. 즉, 터미널을 새로 연다거나 하면 다시 환경변수 설정이 사라지게 되죠.&lt;/p&gt;
&lt;p&gt;그래서 일반적으로는 터미널을 켤 때마다 자동으로 한 번 실행되는 파일인 &lt;code&gt;~/.bashrc&lt;/code&gt; 맨 밑에 위의 명령줄을 적어둡니다. vim이나 gedit 등을 이용하여 직접 입력하셔도 되고, 다음 명령줄을 이용하여 &lt;code&gt;~/.bashrc&lt;/code&gt; 파일 맨 밑에 해당 내용이 추가되도록 하셔도 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.7.p01/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;에 추가된 내용을 새로고침하기 위해 다음 줄까지 실행하고 넘어가겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;드디어 Geant4 설치가 끝났습니다!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;제대로-설치되었는지-확인하기&#34;&gt;제대로 설치되었는지 확인하기&lt;/h2&gt;
&lt;h3 id=&#34;환경변수-확인&#34;&gt;환경변수 확인&lt;/h3&gt;
&lt;p&gt;정상적으로 설치가 완료되고 &lt;code&gt;geant.sh&lt;/code&gt; 파일이 제대로 실행되었다면, &lt;code&gt;G4...&lt;/code&gt;와 같은 형태의 환경변수가 크로스섹션 데이터를 담은 경로를 가리키고 있어야 합니다.&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 제대로 그 경로가 출력되는지 확인할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env | grep G4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;G4env&#34; srcset=&#34;
               /g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_16edc7888164cea188874f79172c5740.png 400w,
               /g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_4fb9ec7a8519c1ddf5ad065bb1f06e1a.png 760w,
               /g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/G4env_hu57ec8ae30cac818a4660715436bec0b7_30292_16edc7888164cea188874f79172c5740.png&#34;
               width=&#34;553&#34;
               height=&#34;207&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;예제-실행해보기&#34;&gt;예제 실행해보기&lt;/h3&gt;
&lt;h4 id=&#34;예제코드-복사해오기&#34;&gt;예제코드 복사해오기&lt;/h4&gt;
&lt;p&gt;예제코드는 &lt;strong&gt;소스 코드를 압축해제한 디렉토리 안&lt;/strong&gt;에 &lt;code&gt;examples&lt;/code&gt;이라는 디렉토리에 있습니다.&lt;/p&gt;
&lt;p&gt;우리의 경우에는 &lt;code&gt;/opt/geant4/10.7.p01/geant4.10.07.p01/examples&lt;/code&gt;이 되겠군요.&lt;/p&gt;
&lt;p&gt;테스트를 위해 &lt;code&gt;basic/B1&lt;/code&gt; 이라는 예제를 복사해오고, 복사해온 디렉토리 안으로 들어가봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -r /opt/geant4/10.7.p01/geant4.10.07.p01/examples/basic/B1 .
cd B1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;예제코드-실행하기-터미널-상에서-실행&#34;&gt;예제코드 실행하기 (터미널 상에서 실행)&lt;/h4&gt;
&lt;p&gt;예제 코드 B1에는 다음과 같은 파일 및 디렉토리들이 있을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;b1example&#34; srcset=&#34;
               /g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_b2cb51134c96c03949161a50675a23d6.png 400w,
               /g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_81d1e10585c322f0bfd9cb50d26864c6.png 760w,
               /g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/b1example_hu5edf6da22d299150aa7e8f02df4d5762_9965_b2cb51134c96c03949161a50675a23d6.png&#34;
               width=&#34;760&#34;
               height=&#34;58&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 글에서는 코드를 살펴보지는 않고, 그냥 실행만 하겠습니다.&lt;/p&gt;
&lt;p&gt;우선 빌드를 하기 위해 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cmake .
make -f Makefile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림과 같이 많은 줄이 출력된 뒤, &lt;code&gt;[100%] Built target exampleB1&lt;/code&gt;까지 나오면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_make&#34; srcset=&#34;
               /g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_6833b0b3a183e190c2bb5cb356d50674.png 400w,
               /g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_af4c9ae0e0bd3122b8dc2f296f621cbe.png 760w,
               /g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/cmake_make_hu26431fe645c026a33dab1d55bce329c9_149957_6833b0b3a183e190c2bb5cb356d50674.png&#34;
               width=&#34;760&#34;
               height=&#34;710&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이어서 실행을 해봅니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1 run1.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림처럼 또 무언가 잔뜩 출력된 뒤, &lt;code&gt;RunManagerKernel is deleted. Good bye :)&lt;/code&gt;가 출력되었다면 잘 실행된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_runmac&#34; srcset=&#34;
               /g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_a68af86c674bbfccbc4b109ba308c75e.png 400w,
               /g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_ac95731d6ca0c981df40e5113eb6e252.png 760w,
               /g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/exampleB1_runmac_huea87dabda2709ba9c702c8795d99eb81_102505_a68af86c674bbfccbc4b109ba308c75e.png&#34;
               width=&#34;760&#34;
               height=&#34;529&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;예제코드-실행하기-gui-띄우기&#34;&gt;예제코드 실행하기 (GUI 띄우기)&lt;/h4&gt;
&lt;p&gt;Geant4 설치 시 Qt5와 OpenGL 설치도 함께 진행했으므로, 여러분의 우분투에 X window 관련 설정이 잘 되어있다면 다음 명령어로 GUI창도 띄워볼 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잘 실행되었다면 다음과 같은 창이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_gui&#34; srcset=&#34;
               /g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_bc5709bcab8d2dd211fc73f6672ae9b1.png 400w,
               /g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_d6d3c1730a40ac97bcbc8f32c5d97d4f.png 760w,
               /g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-ubt2004/exampleB1_gui_hub97f1a8ae3d761e5b934d9f7c3803c78_89374_bc5709bcab8d2dd211fc73f6672ae9b1.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기까지 되셨다면 설치와 테스트까지 성공적으로 하신 것입니다! 고생하셨습니다.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geant4.cern.ch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Geant4 Toolkit &lt;a href=&#34;https://geant4.web.cern.ch/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gcc.gnu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GNU Compiler Collection&lt;/a&gt;(GCC)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://libexpat.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/download-qt-for-application-development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qt5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opengl.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenGL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4 WSL에 설치 무작정 따라하기(초보자용)</title>
      <link>https://evandde.github.io/g4install-107p1-win10wslbasic/</link>
      <pubDate>Thu, 04 Mar 2021 10:39:24 +0900</pubDate>
      <guid>https://evandde.github.io/g4install-107p1-win10wslbasic/</guid>
      <description>&lt;p&gt;이 글은 Geant4 초보자 혹은 Geant4를 처음 사용하시는 분들에게, &lt;b&gt;Windows 10을 사용하는 개인 컴퓨터 환경&lt;/b&gt;에서 Geant4를 최대한 쉽게 설치하는 방법을 전달하기 위해 작성하였습니다. &lt;b&gt;(인터넷 연결 필요)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;이 글에서 제시하는 방향보다, 각자에게 더 적합한 Geant4 설치 방향이 있을 수 있습니다.&lt;/p&gt;
&lt;p&gt;하지만, 이 글은 &lt;b&gt;배경지식 없이도 실무에 사용 가능한 수준으로 Geant4를 설치하는 것을 목적&lt;/b&gt;으로 하기 때문에, 작업 난이도 측면에서 쉬운 방향을 택하였습니다.&lt;/p&gt;
&lt;p&gt;다양한 설치 옵션을 입맛에 맞게 변경하기보다는, &amp;ldquo;&lt;strong&gt;우선 Geant4라는걸 써봐야겠다&lt;/strong&gt;&amp;rdquo; 라는 분에게 권장합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;주의&#34;&gt;주의&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/InstallationGuide/html/gettingstarted.html#supported-and-tested-platforms&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 공식 설치가이드&lt;/a&gt;에서는, 현재(Version 10.7 기준) Windows Subsystem for Linux에서 Geant4를 사용하는 것에 대해 공식적인 지원은 제공하지 않는다고 하고 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;There is currently no official support for building/using Geant4 through Windows Subsystem for Linux, but we welcome reports or feedback on use of Geant4 under this system via our&lt;/em&gt; &lt;a href=&#34;https://geant4-forum.web.cern.ch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Discourse Forum&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다만, 제 경험상 Linux 운영체제에 직접 설치한 것에 비해 속도는 약간 느리지만, 결과 자체가 틀리게 나온다거나 사용 상에 문제가 있었던 적은 크게 없었기에 설치 과정을 공유합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;작업-흐름-요약&#34;&gt;작업 흐름 요약&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Windows 10에서 지원하는 기능인 &lt;b&gt;Windows Subsystem for Linux(WSL)&lt;/b&gt;을 활용하여 Windows 10 내에 &lt;b&gt;Ubuntu 20.04 LTS&lt;/b&gt;를 설치합니다.&lt;/li&gt;
&lt;li&gt;Ubuntu 20.04 LTS 운영체제가 송신하는 그래픽 화면을 Windows10에서 띄울 수 있도록 해주는 &lt;strong&gt;Xming&lt;/strong&gt;을 설치합니다.&lt;/li&gt;
&lt;li&gt;Geant4 설치를 위해 Ubuntu 20.04 LTS 내에 필요한 라이브러리들을 설치합니다.&lt;/li&gt;
&lt;li&gt;Ubuntu 20.04 LTS에 Geant4를 설치합니다.
&lt;ul&gt;
&lt;li&gt;크로스섹션 데이터는 설치과정에서 자동으로 다운되도록 할 예정이므로 인터넷 연결이 필요합니다.&lt;/li&gt;
&lt;li&gt;CLHep이라는 외부 라이브러리를 연동할 수도 있습니다만, 이는 필수가 아니므로 따로 설치하지 않을 것입니다.&lt;/li&gt;
&lt;li&gt;그래픽정도는 보여야 기분이 좋으므로, 그래픽 라이브러리는 연동하여 설치하겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Geant4 예제를 실행시켜, 잘 설치되었는지 확인합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ubuntu-2004-lts-설치하기&#34;&gt;Ubuntu 20.04 LTS 설치하기&lt;/h2&gt;
&lt;h3 id=&#34;windows-10의-os-빌드-버전-확인하기&#34;&gt;Windows 10의 OS 빌드 버전 확인하기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;[WIN]+[R]로 실행창을 띄움.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;winver&lt;/code&gt; &lt;strong&gt;입력하고 실행&lt;/strong&gt;하여, OS 빌드가 16215보다 높은지 확인.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    OS 빌드가 16215보다 낮으면, 윈도우즈 업데이트를 먼저 진행하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;winver&#34; srcset=&#34;
               /g4install-107p1-win10wslbasic/winver_hu1e24deef5e0713ba8aed36d87634342d_18146_f82f4e9ccac79e062380182447a20634.png 400w,
               /g4install-107p1-win10wslbasic/winver_hu1e24deef5e0713ba8aed36d87634342d_18146_f9db6729eb96a95aa793fe78f0bc4944.png 760w,
               /g4install-107p1-win10wslbasic/winver_hu1e24deef5e0713ba8aed36d87634342d_18146_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-win10wslbasic/winver_hu1e24deef5e0713ba8aed36d87634342d_18146_f82f4e9ccac79e062380182447a20634.png&#34;
               width=&#34;536&#34;
               height=&#34;472&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;확인 후에는 창을 끄셔도 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;wsl1-형태로-ubuntu-2004-lts-설치하기&#34;&gt;WSL1 형태로 Ubuntu 20.04 LTS 설치하기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;[WIN]+[R]로 실행창을 띄움.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;powershell&lt;/code&gt; 입력하고, &lt;b&gt;[CTRL]+[SHIFT]+[ENTER]를 눌러서 실행&lt;/b&gt;하여, 관리자 권한으로 PowerShell을 실행.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    [WIN]+[R]로 띄운 실행창에서 [CTRL]+[SHIFT]+[ENTER]로 실행하면 관리자 권한으로 해당 프로그램을 실행합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어 입력.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;재부팅. (아마 자동으로 재부팅 요청이 뜰 것임)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microsoft Store에서 &lt;b&gt;Ubuntu 20.04 LTS&lt;/b&gt;를 검색하여 설치. (이 &lt;a href=&#34;https://www.microsoft.com/store/productId/9N6SVWS3RX71&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;링크&lt;/a&gt;를 활용해도 됨)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;설치한 Ubuntu를 실행. (시작메뉴에서 찾을 수 있음)&lt;/p&gt;
&lt;p&gt;자동으로 추가적인 설치작업이 이루어진 뒤 계정 생성 과정이 진행 됨.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;wsl_firstrun&#34; srcset=&#34;
               /g4install-107p1-win10wslbasic/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_fd5de9c372a23a8b871a5a6bde87339a.png 400w,
               /g4install-107p1-win10wslbasic/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_bb46f5ad519a74a5d627359c04d0a2c2.png 760w,
               /g4install-107p1-win10wslbasic/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-win10wslbasic/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_fd5de9c372a23a8b871a5a6bde87339a.png&#34;
               width=&#34;760&#34;
               height=&#34;396&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;원하는 계정명(ID)과 비밀번호(Password)를 입력.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;이로써 여러분은 Windows 10 안에서 Ubuntu 20.04 LTS라는 리눅스 운영체제를 사용할 수 있게 되었습니다.&lt;/b&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;xming-설치&#34;&gt;Xming 설치&lt;/h2&gt;
&lt;h3 id=&#34;설치하기&#34;&gt;설치하기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.straightrunning.com/XmingNotes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xming 공식 홈페이지&lt;/a&gt;에서 Xming 다운로드.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xming_download&#34; srcset=&#34;
               /g4install-107p1-win10wslbasic/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_e5985975304aa3ceb123b58cde707df8.png 400w,
               /g4install-107p1-win10wslbasic/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_36e1f59157a5f369f428e8e3dac4458d.png 760w,
               /g4install-107p1-win10wslbasic/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-win10wslbasic/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_e5985975304aa3ceb123b58cde707df8.png&#34;
               width=&#34;760&#34;
               height=&#34;514&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다운받은 파일을 실행하여 Xming 설치. (&lt;strong&gt;다음&lt;/strong&gt;만 누르면서 진행해도 괜찮음)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;실행하기&#34;&gt;실행하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;설치를 마치면 기본값으로 Xming이 자동으로 실행 될 것입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;별도로 설치 옵션을 건드리지 않으셨다면, 시작메뉴에서 Xming을 찾을 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Xming이 켜져 있는지의 여부는, 작업표시줄 오른쪽의 트레이아이콘을 확인하시면 알 수 있습니다. 트레이아이콘 중 X모양의 아이콘이 있다면 켜져있는 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xming_running&#34; srcset=&#34;
               /g4install-107p1-win10wslbasic/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_fdf8f270899a5f07d2f8e873ec6e5aa4.png 400w,
               /g4install-107p1-win10wslbasic/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_25fafa912564ab70957f284af9aaa48f.png 760w,
               /g4install-107p1-win10wslbasic/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-win10wslbasic/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_fdf8f270899a5f07d2f8e873ec6e5aa4.png&#34;
               width=&#34;363&#34;
               height=&#34;40&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;종료하고자 할 때에는, &lt;strong&gt;트레이아이콘을 우클릭&lt;/strong&gt;하고 &lt;strong&gt;Exit&lt;/strong&gt;를 눌러주시면 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4를-위한-관련-라이브러리-설치&#34;&gt;Geant4를 위한 관련 라이브러리 설치&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;앞서 설치한 Ubuntu를 실행.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 입력하여, Xming과의 연동을 위해 &lt;code&gt;DISPLAY&lt;/code&gt; 환경변수 설정.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;export DISPLAY=localhost:0&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 입력하여, &lt;code&gt;apt&lt;/code&gt; 패키지 매니저 최신화&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; 명령어로 인해, 비밀번호를 입력하라는 문구가 뜰 수 있습니다.&lt;/p&gt;
&lt;p&gt;이는 리눅스에서의 관리자 권한을 사용하기 위해 확인하는 절차입니다.&lt;/p&gt;
&lt;p&gt;여러분이 만든 계정의 비밀번호를 입력해주시면 됩니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 입력하여, 관련 라이브러리 설치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ 컴파일러 및 표준 라이브러리, 헤더 (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;CMake (&lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Expat (Linux, macOS에서 &lt;font color=&#39;red&#39;&gt;Geant4 설치 시 필수 라이브러리&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;Qt5, X11 OpenGL 라이브러리 설치 (&lt;font color=&#39;blue&#39;&gt;Geant4 설치 시 선택 라이브러리&lt;/font&gt;. GUI 등 그래픽 기반 기능 사용에 필요)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y build-essential cmake libexpat1-dev qt5-default libxmu-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;p&gt;설치에 시간이 다소 소요될 수 있으니 잠시 쉬고 오셔도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-설치&#34;&gt;Geant4 설치&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;명령어 부분만 순서대로 입력하시면 됩니다.&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Geant4 툴킷을 설치할 디렉토리 생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir -p /opt/geant4/10.7.p01
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1에서 생성한 디렉토리로 이동하여, Geant4 소스코드 다운로드 (소스코드 용량 약 40 MB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /opt/geant4/10.7.p01
sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2에서 다운받은 압축파일을 압축해제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo tar -xf geant4.10.07.p01.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리를 만들고 안으로 이동&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 수행 (&lt;code&gt;make&lt;/code&gt; 명령은 인터넷 속도 및 cpu 성능에 따라 수 분~수 십분 소요될 수 있음)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;(설치경로): &lt;code&gt;/opt/geant4/10.7.p01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_BUILD_MULTITHREADED&lt;/code&gt;(multi-threading 사용 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_INSTALL_DATA&lt;/code&gt;(크로스섹션 데이터 자동설치 여부): ON (데이터 총 용량 약 900 MB)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_OPENGL_X11&lt;/code&gt;(X11 OpenGL 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GEANT4_USE_QT&lt;/code&gt;(QT 라이브러리 연동 여부): ON&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cmake ../geant4.10.07.p01 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.7.p01 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON
sudo make -j `grep -c processor /proc/cpuinfo`
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;이 부분에서 꽤 오랜 시간이 소요됩니다. 잠시 쉬고 오세요.&lt;/b&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;환경변수 세팅을 위해 &lt;code&gt;~/.bashrc&lt;/code&gt;에 내용 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;source /opt/geant4/10.7.p01/bin/geant4.sh&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-예제-실행해보기&#34;&gt;Geant4 예제 실행해보기&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 입력하여 예제파일 복사해오기&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -r /opt/geant4/10.7.p01/geant4.10.07.p01/examples/basic/B1 ~
cd ~/B1
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 입력하여 빌드하기&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build
cd build
cmake ..
make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림과 같이 많은 줄이 출력된 뒤, &lt;code&gt;[100%] Built target exampleB1&lt;/code&gt;까지 나오면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_make&#34; srcset=&#34;
               /g4install-107p1-win10wslbasic/cmake_make_hucb13345fed95db3b387cfdd935fb214c_85484_f87da9b385d901c39133bcc0be9f1861.png 400w,
               /g4install-107p1-win10wslbasic/cmake_make_hucb13345fed95db3b387cfdd935fb214c_85484_445140d93fc8a1ef22937bdab6a8e55b.png 760w,
               /g4install-107p1-win10wslbasic/cmake_make_hucb13345fed95db3b387cfdd935fb214c_85484_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-win10wslbasic/cmake_make_hucb13345fed95db3b387cfdd935fb214c_85484_f87da9b385d901c39133bcc0be9f1861.png&#34;
               width=&#34;760&#34;
               height=&#34;401&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 입력하여 실행해보기&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1 run1.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림처럼 또 무언가 잔뜩 출력된 뒤, &lt;code&gt;RunManagerKernel is deleted. Good bye :)&lt;/code&gt;가 출력되었다면 잘 실행된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_runmac&#34; srcset=&#34;
               /g4install-107p1-win10wslbasic/exampleB1_runmac_hu2b5f55a409345fc587137ada4e2143ee_50692_5580240f696ec05ba0a107086678191e.png 400w,
               /g4install-107p1-win10wslbasic/exampleB1_runmac_hu2b5f55a409345fc587137ada4e2143ee_50692_246ccf4cd993ca735391c2ab128c80a7.png 760w,
               /g4install-107p1-win10wslbasic/exampleB1_runmac_hu2b5f55a409345fc587137ada4e2143ee_50692_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-win10wslbasic/exampleB1_runmac_hu2b5f55a409345fc587137ada4e2143ee_50692_5580240f696ec05ba0a107086678191e.png&#34;
               width=&#34;760&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어를 입력하여 GUI 띄워보기&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    이 부분은 Xming이 실행된 상태에서만 가능합니다. 반드시 Xming이 실행되어 있는지 확인하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exampleB1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잘 실행되었다면 다음과 같은 창이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;exampleB1_gui&#34; srcset=&#34;
               /g4install-107p1-win10wslbasic/exampleB1_gui_hu6a3d2e5bf3c69fff3c6a7ce2b678df94_80571_bbafbfcec6d6b71af76c2297c08b748f.png 400w,
               /g4install-107p1-win10wslbasic/exampleB1_gui_hu6a3d2e5bf3c69fff3c6a7ce2b678df94_80571_7f65a6b400d3857cf5a146bd93d741a2.png 760w,
               /g4install-107p1-win10wslbasic/exampleB1_gui_hu6a3d2e5bf3c69fff3c6a7ce2b678df94_80571_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4install-107p1-win10wslbasic/exampleB1_gui_hu6a3d2e5bf3c69fff3c6a7ce2b678df94_80571_bbafbfcec6d6b71af76c2297c08b748f.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기까지 되셨다면 설치와 테스트까지 성공적으로 하신 것입니다! 고생하셨습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 시리즈를 시작하며</title>
      <link>https://evandde.github.io/g4-noqasked-000-opening/</link>
      <pubDate>Sun, 06 Jun 2021 17:05:44 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-000-opening/</guid>
      <description>&lt;p&gt;Geant4가 뭔지도 모르겠는데&amp;hellip; Geant4를 사용은 해야하는 상황에 처한 여러분!&lt;/p&gt;
&lt;p&gt;묻지도 따지지도 않고 따라만 하면 일단 Geant4를 사용할 수 있게 해드립니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4&#34;&gt;Geant4&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Geant4&lt;/strong&gt;는 1994년에 개발을 시작하여 1998년에 첫 버전이 출시된 이래로, 20년이 넘게 지난 현재까지도 활발하게 사용되고 있는 &lt;strong&gt;입자 수송 시뮬레이션 툴킷&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;유사한 목적으로 사용되는 다른 몬테칼로 시뮬레이션 코드들(MCNP, PHITS, EGS, FLUKA 등)과 비교해볼 때 다음과 같은 장점을 가지고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어마어마한 자유도&lt;/li&gt;
&lt;li&gt;전기장/자기장 내 하전입자의 거동 모사가 가능&lt;/li&gt;
&lt;li&gt;시간의 흐름에 따라 구조물이 움직이며 방사선이 수송되는 4D 시뮬레이션이 가능&lt;/li&gt;
&lt;li&gt;수송 가능한 입자 종류가 수 백 가지 (가상의 입자를 정의하여 추가도 가능)&lt;/li&gt;
&lt;li&gt;이 모든 기능이 &lt;strong&gt;무료&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;참좋은데합본&#34; srcset=&#34;
               /g4-noqasked-000-opening/%EC%B0%B8%EC%A2%8B%EC%9D%80%EB%8D%B0%ED%95%A9%EB%B3%B8_hu448b95377a6c099dacee02233577a73d_112873_ee6eb681310ab26ae9908382aafc1701.png 400w,
               /g4-noqasked-000-opening/%EC%B0%B8%EC%A2%8B%EC%9D%80%EB%8D%B0%ED%95%A9%EB%B3%B8_hu448b95377a6c099dacee02233577a73d_112873_8db166c31cb3109d39cb23f46e183433.png 760w,
               /g4-noqasked-000-opening/%EC%B0%B8%EC%A2%8B%EC%9D%80%EB%8D%B0%ED%95%A9%EB%B3%B8_hu448b95377a6c099dacee02233577a73d_112873_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-000-opening/%EC%B0%B8%EC%A2%8B%EC%9D%80%EB%8D%B0%ED%95%A9%EB%B3%B8_hu448b95377a6c099dacee02233577a73d_112873_ee6eb681310ab26ae9908382aafc1701.png&#34;
               width=&#34;760&#34;
               height=&#34;265&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;그런데 이 좋은 툴의 큰 단점은 바로 &lt;strong&gt;사용하기가 어렵다&lt;/strong&gt;는 점입니다. 원래 자유도가 높다고 소문난 것들은 대개 사용 난이도가 높은 편이죠.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;코드진입장벽&#34; srcset=&#34;
               /g4-noqasked-000-opening/%EC%BD%94%EB%93%9C%EC%A7%84%EC%9E%85%EC%9E%A5%EB%B2%BD_huac8628511a1476fbcfc117347fe0e634_21290_5e2875cac69a5cc909846f5e98e5f185.png 400w,
               /g4-noqasked-000-opening/%EC%BD%94%EB%93%9C%EC%A7%84%EC%9E%85%EC%9E%A5%EB%B2%BD_huac8628511a1476fbcfc117347fe0e634_21290_94c3bfaf77b3f8cc680200e4fae31a12.png 760w,
               /g4-noqasked-000-opening/%EC%BD%94%EB%93%9C%EC%A7%84%EC%9E%85%EC%9E%A5%EB%B2%BD_huac8628511a1476fbcfc117347fe0e634_21290_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-000-opening/%EC%BD%94%EB%93%9C%EC%A7%84%EC%9E%85%EC%9E%A5%EB%B2%BD_huac8628511a1476fbcfc117347fe0e634_21290_5e2875cac69a5cc909846f5e98e5f185.png&#34;
               width=&#34;512&#34;
               height=&#34;512&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;저는&#34;&gt;저는&amp;hellip;&lt;/h2&gt;
&lt;p&gt;제가 Geant4를 처음 접한 것은 2010년도 즈음이었습니다. 프로그래밍이라는 것에 조금이나마 관심이 있긴 했지만, 얕은 지식으로 Geant4를 처음 접했을 때에는 너무 어렵고 큰 산으로 보였지요. 이후 방사선계측기 관련 연구를 수행하며 다양한 시뮬레이션을 Geant4 툴킷으로 수행했었고, 경험치가 점점 쌓이다보니 그 유용성과 가치가 보이기 시작했던 것 같습니다.&lt;/p&gt;
&lt;p&gt;2014년부터는 한양대학교 방사선신기술연구소에서 매 해마다 주최하는 Geant4 초급자 교육과정의 강사로서 일부 강의를 맡아 진행하고 있습니다. 비록 제가 개발자나 CS전공자는 아니지만, Geant4를 10년가량 사용해온 연구자로서의 저의 경험이 이 프로그램을 필요로 하는 다른 연구자분들께 도움이 되면 좋겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;이-시리즈의-목표&#34;&gt;이 시리즈의 목표&lt;/h2&gt;
&lt;p&gt;이 시리즈에서는 Geant4가 어떻게 구동되고, 최적화를 하려면 어떻게 해야하고&amp;hellip; 이런 것을 깊게 다루지는 않으려 합니다. 당장 프로젝트를 수행해야 하는데 어찌되었든 Geant4라는 툴킷을 사용을 해야하는 상황에 처한 분, 우선 뭐라도 돌아가게끔 해서 간단하게라도 결과를 얻어내고 싶은 분에게 적합한 글이 될 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4는 몬테칼로 시뮬레이션용 툴킷으로, 프레임워크&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;처럼 이용하는 경우가 많습니다. 그래서 Geant4를 처음 이용하는 단계에서는, Geant4의 모든 내용을 다 이해하는 것보다 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;내가 원하는 작업을 위해 필요한 내용을 어디에 어떻게 작성해야 하는지 숙지&lt;/b&gt;&lt;/font&gt;하는 편이 효율적입니다. 이 시리즈에서는 이 부분에 초점을 맞추어 진행할 것입니다.&lt;/p&gt;
&lt;p&gt;여러분이 준비해야할 것은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;간단한 Linux 터미널 사용 지식 (&lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;cp&lt;/code&gt;,&amp;hellip; 등 간단한 명령어의 사용)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;어느정도의 C++ 지식 (많이 알수록 좋습니다)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;최소: 주석(&lt;code&gt;//&lt;/code&gt;, &lt;code&gt;/* */&lt;/code&gt;) 사용방법. for, if 등의 조건문/반복문 사용방법. 함수 정의하고 사용하는 법. 클래스의 기본적인 개념과 사용방법. 포인터의 개념과 사용방법.&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;알면 매우 유용한 것: std::vector, std::map의 개념과 사용방법. 헤더파일/소스파일의 분리와 활용. 변수의 scope 개념.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Geant4가 설치된 환경&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러분이 이미 Geant4가 설치된 환경이 있다면, 그 환경을 그대로 사용하시면 됩니다.&lt;/li&gt;
&lt;li&gt;Geant4 설치방법을 모르신다면 &lt;a href=&#34;https://evandde.github.io/course/g4install/&#34;&gt;이 시리즈&lt;/a&gt;를 참고하세요. 여러분의 작업 환경에 맞는 글로 설치를 진행해보시기 바랍니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Geant4 코드 작성을 위한 통합개발환경(IDE)&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    코드 작성은 메모장으로도 할 수 있습니다. 하지만, 통합개발환경(IDE)을 구축하여 이용하시기를 &lt;strong&gt;강력히 권장&lt;/strong&gt;합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;이미 익숙하게 이용하고 있는 C++용 IDE가 있다면 그대로 사용하셔도 됩니다.&lt;/li&gt;
&lt;li&gt;이 시리즈에서 활용할 IDE인 &lt;strong&gt;VS Code&lt;/strong&gt;를 사용해보실 의향이 있다면, 다음 글을 참고하세요.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://evandde.github.io/vscode/&#34;&gt;Visual Studio Code 소개, 설치, 기본 세팅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt; 혹은 &lt;strong&gt;WSL&lt;/strong&gt;에서 Geant4를 설치하신 경우
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://evandde.github.io/vscode-cpp/&#34;&gt;Visual Studio Code에서 C, C++ 환경 설정하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://evandde.github.io/vscode-cmake/&#34;&gt;Visual Studio Code에서 CMake 환경 설정하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;에서 MSVC(Microsoft Visual Studio C++)를 이용하여 Geant4를 설치하신 경우
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://evandde.github.io/vscode-msvc/&#34;&gt;Visual Studio Code에서 MSVC 기반 C++, CMake 환경 설정하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;어떤 문제해결에 적합한 코드를 재사용 가능하게끔 제공해둔 것. 단, 일반적으로 프레임워크의 코드 자체가 주가 되고, 사용자는 프레임워크의 규약과 형식에 맞추어 본인이 원하는 세부사항을 이 프레임워크에 끼워넣는 식으로 사용하게 됨.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 1. 템플릿 코드 실행하기</title>
      <link>https://evandde.github.io/g4-noqasked-001-clonetest/</link>
      <pubDate>Wed, 09 Jun 2021 22:03:29 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-001-clonetest/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 첫번째. 기본 틀이 이미 짜여져있는 템플릿 코드를 다운받아서 실행해봅시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;템플릿-코드&#34;&gt;템플릿 코드&lt;/h2&gt;
&lt;p&gt;Geant4 코드 작성을 여러번 하다 보면 시뮬레이션의 내용이 다소 바뀌더라도, 기본적인 틀에 해당하는 부분은 크게 달라지지 않는다는 사실을 깨닫게 됩니다. 그래서 저는 &lt;strong&gt;미리 짜두었던 기본 틀을 복사해와서 실제 시뮬레이션의 요구사항에 맞추어 세부적인 부분만 조정&lt;/strong&gt;하는 식으로 작업을 수행함으로써 작업시간을 단축시키곤 합니다. PPT나 워드 프로세싱등에서 사용되는 샘플 문서인 템플릿(Template)과 유사한 용도이기에, 이 &lt;strong&gt;기본 틀&lt;/strong&gt;을 저는 &lt;strong&gt;템플릿 코드&lt;/strong&gt;라고 부릅니다.&lt;/p&gt;
&lt;p&gt;이 시리즈에서는 여러분에게 제가 직접 만든 템플릿 코드를 제공해드리려 합니다. 이 템플릿 코드는 Geant4 공식 예제 중 기본 예제 수준의 시뮬레이션을 작성하기에 적합하도록 하되, 불필요한 부분을 최소화하여 작성했습니다. 여러분은 이 시리즈를 통해, 제가 제공해드린 템플릿 코드에 여러분이 원하는 구조물, 선원항, 데이터기록방식을 정의하게 될 것이고, 이를 통해 여러분만의 Geant4 시뮬레이션 코드를 만들어 결과를 얻어볼 수 있을 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;템플릿-코드-다운받기&#34;&gt;템플릿 코드 다운받기&lt;/h2&gt;
&lt;p&gt;다음 세 가지 방법 중 본인에게 편한 방법을 통해 다운받으시기 바랍니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;템플릿 코드는 &lt;a href=&#34;https://github.com/evandde/g4_minimal/archive/refs/heads/main.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;를 통해 다운받을 수 있습니다. &lt;code&gt;g4_minimal-main.zip&lt;/code&gt; 파일이 다운받아질 것입니다. 압축을 풀어 사용하시면 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;혹은, 리눅스 환경에서 &lt;code&gt;wget&lt;/code&gt;명령어를 통해 다음과 같이 진행하셔도 됩니다. (Linux에서는 &lt;code&gt;unzip&lt;/code&gt; 명령어로 zip 형식의 압축을 풀 수 있습니다)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/evandde/g4_minimal/archive/refs/heads/main.zip
unzip main.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또는, 여러분이 &lt;code&gt;git&lt;/code&gt;을 사용하실 줄 안다면, 다음의 명령어를 통해 repository 자체를 클론해가셔도 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/evandde/g4_minimal
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    git을 사용할 줄 아신다면, 3번 방법을 추천합니다. 이 후 본 시리즈에서 만들어 나갈 단계별 정답 코드를 해당 repository의 example 브랜치에 지난 commit들의 형태로 제공하고 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;실행해보기&#34;&gt;실행해보기&lt;/h2&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;이 글은 Linux 혹은 WSL에서 gcc 기반으로 Geant4를 설치한 분을 대상으로 작성되었습니다.&lt;/p&gt;
&lt;p&gt;Windows에서 MSVC 기반으로 Geant4를 설치하신 분은 &lt;a href=&#34;https://evandde.github.io/g4install-107p2-win10basic/#geant4-%EC%98%88%EC%A0%9C-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EA%B8%B0&#34;&gt;이 링크&lt;/a&gt;의 예제 실행방법과 동일하게 실행해보시면 됩니다.&lt;/p&gt;
&lt;p&gt;아래에 적은 과정과 유사합니다만, 다음의 두 과정을 지켜주시는 것이 핵심입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CMakeLists.txt의 맨 위에 다음 내용 추가&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;#----------------------------------------------------------------------------
# Set build output directory to be ./build 
# rather than ./build/Release or ./build/RelWithDebInfo
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE &amp;quot;${CMAKE_BINARY_DIR}&amp;quot;)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO &amp;quot;${CMAKE_BINARY_DIR}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt;명령어 대신 &lt;code&gt;cmake --build . --config Release&lt;/code&gt; 명령어 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;압축을 풀고 해당 디렉토리 안에 들어가면 다음과 같은 파일들이 있을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_firstview&#34; srcset=&#34;
               /g4-noqasked-001-clonetest/01_firstview_hud4dcb00d012ad7d07c5134c08af2242c_5049_a7b00354bf69e5ba783c70bf9aca499b.png 400w,
               /g4-noqasked-001-clonetest/01_firstview_hud4dcb00d012ad7d07c5134c08af2242c_5049_16ffc2363effcd0a04836cb89953f599.png 760w,
               /g4-noqasked-001-clonetest/01_firstview_hud4dcb00d012ad7d07c5134c08af2242c_5049_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-001-clonetest/01_firstview_hud4dcb00d012ad7d07c5134c08af2242c_5049_a7b00354bf69e5ba783c70bf9aca499b.png&#34;
               width=&#34;608&#34;
               height=&#34;42&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;먼저, 컴파일 결과를 담을 build 디렉토리를 생성해준 뒤, build 디렉토리로 들어갑니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build
cd build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이어서, &lt;code&gt;cmake&lt;/code&gt;와 &lt;code&gt;make&lt;/code&gt;를 통해 컴파일을 수행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake ..
make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;퍼센트가 쭉 올라가서 100%까지 진행된 뒤에 다음과 같은 파일들이 만들어짐을 확인하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_make&#34; srcset=&#34;
               /g4-noqasked-001-clonetest/02_make_hufe14d17728f5b714c6aab66b1f5744ec_115354_27e2daec9f8708c75dd5ba0eb62ab34d.png 400w,
               /g4-noqasked-001-clonetest/02_make_hufe14d17728f5b714c6aab66b1f5744ec_115354_30e27b85caa85804a30375d92f1b5510.png 760w,
               /g4-noqasked-001-clonetest/02_make_hufe14d17728f5b714c6aab66b1f5744ec_115354_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-001-clonetest/02_make_hufe14d17728f5b714c6aab66b1f5744ec_115354_27e2daec9f8708c75dd5ba0eb62ab34d.png&#34;
               width=&#34;760&#34;
               height=&#34;720&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;이제 다음 명령어를 입력하여 실행이 되는지 확인합니다.&lt;/strong&gt; 아래 그림과 같이 문구가 주르륵 올라간 뒤에 &lt;font color=&#39;red&#39;&gt;Good bye :) 인사를 받아내었다면 성공&lt;/font&gt;입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./g4_minimal run.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_batchrun&#34; srcset=&#34;
               /g4-noqasked-001-clonetest/03_batchrun_hu8516dcc1b3dedd146aadf1b2675bf3cb_85899_11831c18687eb6ae9a1f5adaff1983ca.png 400w,
               /g4-noqasked-001-clonetest/03_batchrun_hu8516dcc1b3dedd146aadf1b2675bf3cb_85899_5ab2a6d81280caba40c2065e804ffdf5.png 760w,
               /g4-noqasked-001-clonetest/03_batchrun_hu8516dcc1b3dedd146aadf1b2675bf3cb_85899_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-001-clonetest/03_batchrun_hu8516dcc1b3dedd146aadf1b2675bf3cb_85899_11831c18687eb6ae9a1f5adaff1983ca.png&#34;
               width=&#34;505&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;그래픽을 사용할 수 있는 환경&lt;/strong&gt;이라면, 다음 명령어로도 실행해봅니다. Qt 라이브러리를 연동하여 설치하셨다면, 아래 그림과 같이 마우스로 조작가능한 3D 화면을 볼 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Qt가 아닌 다른 그래픽 라이브러리를 연동하셨다면, UI창의 모습이 다소 다를 수도 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./g4_minimal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_uirun&#34; srcset=&#34;
               /g4-noqasked-001-clonetest/04_uirun_hu188d1c06a87cdf6cb9c528bd0e1c8fb5_75441_988e4783dd2678d0753f3d48dcba7e7e.png 400w,
               /g4-noqasked-001-clonetest/04_uirun_hu188d1c06a87cdf6cb9c528bd0e1c8fb5_75441_130e3718bb1835b5f6a988b1a6d2fc5d.png 760w,
               /g4-noqasked-001-clonetest/04_uirun_hu188d1c06a87cdf6cb9c528bd0e1c8fb5_75441_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-001-clonetest/04_uirun_hu188d1c06a87cdf6cb9c528bd0e1c8fb5_75441_988e4783dd2678d0753f3d48dcba7e7e.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 모든 화면을 확인하셨다면 이번 글의 목표는 달성한 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;보충-설명&#34;&gt;보충 설명&lt;/h2&gt;
&lt;h3 id=&#34;빌드cmake-make&#34;&gt;빌드(cmake, make)&lt;/h3&gt;
&lt;p&gt;실행해보기에서 입력한 &lt;code&gt;cmake&lt;/code&gt;와 &lt;code&gt;make&lt;/code&gt; 명령어는 C++ 언어로 작성된 코드를 빌드하기 위해 수행한 작업입니다.&lt;/p&gt;
&lt;p&gt;최근의 Geant4는 CMake를 활용하는 방식을 채용하고 있으므로, 해당 프로젝트의 디렉토리 안에 CMakeLists.txt 파일이 제대로 구비되어 있어야 합니다. Geant4 공식 홈페이지에서 사용자를 위한 CMakeLists.txt의 작성법을 제공하고 있습니다(&lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/GettingStarted/makeFile.html#&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;링크&lt;/a&gt;). 대부분의 경우 CMakeLists.txt 파일을 수정할 일은 없으므로, 여기서는 이에 대한 설명을 생략하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmake&lt;/code&gt; 명령어를 입력하면, &lt;code&gt;make&lt;/code&gt;를 수행하기 위해 필요한 Makefile이 생성됩니다. 이어서 &lt;code&gt;make &lt;/code&gt; 명령어를 입력하여 빌드를 수행하면 &lt;strong&gt;g4_minimal&lt;/strong&gt;이라는 실행파일이 만들어집니다.&lt;/p&gt;
&lt;h3 id=&#34;실행ui모드-실행-batch모드-실행&#34;&gt;실행(UI모드 실행, batch모드 실행)&lt;/h3&gt;
&lt;p&gt;Geant4는 프로그램을 실행하는 방식으로 다음의 두 가지를 제공합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UI모드 실행&lt;/p&gt;
&lt;p&gt;프로그램이 실행된 뒤 IDLE상태로 대기. 사용자가 명령어를 입력하면 이에 따라 명령어가 실행되는 구조.&lt;/p&gt;
&lt;p&gt;그래픽 관련 라이브러리를 연동하여 Geant4를 설치한 경우, 지오메트리 및 입자 수송을 그래픽 형태로 보거나 저장할 수도 있음.&lt;/p&gt;
&lt;p&gt;일반적으로 실제 시뮬레이션을 수행하여 결과를 얻기 전에, 지오메트리/선원항/데이터기록 등을 테스트하고 확인하는 목적으로 이용함.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;batch모드 실행&lt;/p&gt;
&lt;p&gt;시뮬레이션을 수행하는 데에 필요한 명령어를, 프로그램을 실행하는 시점에 일괄적으로(batch) 함께 입력해주어 바로 시뮬레이션을 수행하는 구조.&lt;/p&gt;
&lt;p&gt;일반적으로 충분한 수의 초기입자를 발생시켜 실제 시뮬레이션을 수행하고 이에 대한 결과를 얻는 목적으로 이용함.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;main함수를 어떻게 작성하느냐에 따라 위의 두 실행방식을 자유롭게 선택할 수 있습니다.&lt;/p&gt;
&lt;p&gt;다만, Geant4 기반으로 작성한 대부분의 코드에서 &lt;strong&gt;다음의 방식을 따르도록 main함수를 작성&lt;/strong&gt;하는 것이 일반적인 관습입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;실행파일명만 입력&lt;/strong&gt;하여 실행한 경우에는 &lt;strong&gt;UI모드&lt;/strong&gt;로 실행&lt;/p&gt;
&lt;p&gt;예를 들어, 위에서 &lt;code&gt;./g4_minimal&lt;/code&gt; 만 입력하여 실행한 경우에는 UI창이 뜨는 것을 확인할 수 있음.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;실행파일명 뒤에 &lt;code&gt;.mac&lt;/code&gt; 형식의 파일을 함께 입력&lt;/strong&gt;하여 실행한 경우에는, 해당 &lt;code&gt;.mac&lt;/code&gt; 파일의 내용을 일괄적으로 입력하여 &lt;strong&gt;batch모드&lt;/strong&gt;로 실행&lt;/p&gt;
&lt;p&gt;예를 들어, 위에서 &lt;code&gt;./g4_minimal run.mac&lt;/code&gt;을 입력하여 실행한 경우에는 &lt;code&gt;run.mac&lt;/code&gt;파일의 내용이 일괄적으로 입력되어 시뮬레이션이 batch모드로 수행되고, 최종적으로 Good bye :)가 출력되며 시뮬레이션이 종료되는 것을 확인할 수 있음.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※  &lt;code&gt;.mac&lt;/code&gt; 파일에 어떤 내용을 작성하는지에 대해서는 이 시리즈에서 추후에 다루도록 하겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;고생하셨습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 &lt;strong&gt;지오메트리&lt;/strong&gt;를 정의하는 방법에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 2. 지오메트리 정의하기</title>
      <link>https://evandde.github.io/g4-noqasked-002-detcon/</link>
      <pubDate>Thu, 10 Jun 2021 09:52:13 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-002-detcon/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 두번째. 지오메트리를 정의하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4의-지오메트리-개념&#34;&gt;Geant4의 지오메트리 개념&lt;/h2&gt;
&lt;h3 id=&#34;기본&#34;&gt;기본&lt;/h3&gt;
&lt;p&gt;Geant4에서의 지오메트리 정의 과정은 다음의 세 클래스가 분리하여 담당합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Solid (형태): 지오메트리의 &lt;strong&gt;모양&lt;/strong&gt;, &lt;strong&gt;크기&lt;/strong&gt; 등에 대한 정보를 담당&lt;/li&gt;
&lt;li&gt;Logical Volume (특성): 지오메트리의 &lt;strong&gt;매질&lt;/strong&gt; 등 질적인 특성에 대한 정보를 담당&lt;/li&gt;
&lt;li&gt;Physical Volume (배치): 지오메트리의 &lt;strong&gt;위치&lt;/strong&gt;, &lt;strong&gt;회전&lt;/strong&gt;, &lt;strong&gt;소속&lt;/strong&gt; 등 배치에 대한 정보를 담당&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 세 가지 클래스가 다음 다이어그램과 같이 유기적으로 연결되어 하나의 지오메트리 객체를 정의하게 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B --&amp;gt; C
A[Solid]
B[Logical Volume]
C[Physical Volume]
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;모양에 대한 정보를 담은 Solid 객체를 정의.&lt;/li&gt;
&lt;li&gt;이 Solid 객체에 매질 정보를 넣어 Logical Volume 객체를 정의.&lt;/li&gt;
&lt;li&gt;이 Logical Volume 객체에 위치, 회전, 소속에 대한 정보를 넣어 Physical Volume 객체를 정의.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;좀 더 구체적인 예시로 다이어그램을 그려보면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B --&amp;gt; C
A[직육면체]
B[물이 담긴 직육면체]
C[&amp;quot;(10, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;중요한 부분은, &lt;strong&gt;Physical Volume까지 정의되어야만&lt;/strong&gt; 비로소 &lt;strong&gt;시뮬레이션 세계에 존재&lt;/strong&gt;하게 된다는 점입니다.&lt;/p&gt;
&lt;p&gt;즉, Solid만 정의된 상태인 &amp;ldquo;직육면체&amp;quot;나, Logical Volume까지만 정의된 &amp;ldquo;물이 담긴 직육면체&amp;quot;는 아직 시뮬레이션 세계에 존재하지 않는 &lt;strong&gt;개념적인 존재일 뿐&lt;/strong&gt;입니다. 이를 &lt;u&gt;&lt;strong&gt;Physical Volume으로서 &amp;quot;(10, 0, 0)에 놓겠다&amp;quot;는 부분이 정의되어야 그제서야 시뮬레이션 세계에 존재&lt;/strong&gt;&lt;/u&gt;하게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;응용&#34;&gt;응용&lt;/h3&gt;
&lt;p&gt;Geant4에서는 지오메트리를 &lt;strong&gt;Solid(형태)&lt;/strong&gt;, &lt;strong&gt;Logical Volume(특성)&lt;/strong&gt;, &lt;b&gt;Physical Volume(배치)&lt;/b&gt;의 세 단계로 나누어 관리하기 때문에, 유사한 지오메트리를 여러개 배치하여야 할 때 이전에 만들어둔 객체를 재사용하여 효율적인 코딩이 가능합니다. Logical Volume을 재사용하는 다음의 다이어그램을 살펴봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B --&amp;gt; C &amp;amp; D &amp;amp; E
A[직육면체]
B[물이 담긴 직육면체]
C[&amp;quot;(0, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
D[&amp;quot;(10, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
E[&amp;quot;(20, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;물이 담긴 직육면체&amp;quot; 라는 Logical Volume을 여러 위치에 배치해야 하는 경우, 위 다이어그램과 같이 Physical Volume만을 변경하며 여러 번 정의해줄 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은, 모양이 동일한데 매질이 달라져야 하는 경우에는 다음과 같이 Solid 객체를 재사용하여 구성할 수도 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B &amp;amp; C
B --&amp;gt; D &amp;amp; E
C --&amp;gt; F
A[직육면체]
B[물이 담긴 직육면체]
C[공기가 담긴 직육면체]
D[&amp;quot;(0, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
E[&amp;quot;(10, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
F[&amp;quot;(20, 0, 0)&amp;quot;에 위치한 공기가 담긴 직육면체]
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;실전&#34;&gt;실전&lt;/h2&gt;
&lt;p&gt;일단 이론은 이정도만 해두고, 코드를 직접 작성해봅시다.&lt;/p&gt;
&lt;p&gt;Geant4 코드 작성 시, 지오메트리에 대한 내용을 적는 곳은 정해져 있습니다. G4VUserDetectorConstruction 클래스를 상속받아 만드는 UserClass에 존재하는 G4VPhysicalVolume* Construct() 함수입니다. 하지만 이렇게 정석대로 설명하면 너무 생소하실테니 제가 제공해드렸던 템플릿 코드에서 살펴보도록 하죠.&lt;/p&gt;
&lt;p&gt;템플릿 코드의 &lt;strong&gt;src 디렉토리&lt;/strong&gt; 내부에 &lt;b&gt;DetectorConstruction.cc&lt;/b&gt;라는 파일이 있을 것입니다. 이 파일을 열면 다음 그림과 같은 코드가 나옵니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_detcon&#34; srcset=&#34;
               /g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_98254c7e6515c22bccd06a6a250bc279.png 400w,
               /g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_877b941cb9d0383047c8cfc68f9bee58.png 760w,
               /g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_98254c7e6515c22bccd06a6a250bc279.png&#34;
               width=&#34;760&#34;
               height=&#34;485&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 18번째 줄부터 나오는 &lt;b&gt;G4VPhysicalVolume *DetectorConstruction::Construct() 함수 안&lt;/b&gt;에 지오메트리에 대한 내용을 적으면 됩니다.&lt;/p&gt;
&lt;p&gt;다음과 같이 정의되는 물이 담긴 팬텀&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;를 만들어보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solid: 가로, 세로, 높이가 5 cm인 정육면체&lt;/li&gt;
&lt;li&gt;Logical Volume: 매질을 물로 채움&lt;/li&gt;
&lt;li&gt;Physical Volume: 팬텀의 중심이 (0, 0, 10 cm)가 되게끔 위치시킴&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;물-정의하기&#34;&gt;&amp;quot;물&amp;quot; 정의하기&lt;/h3&gt;
&lt;p&gt;일단 물이라는 물질을 가져와야 합니다. 자세한 설명은 나중에 하기로 하고, 아래 그림에서 표시된 위치에 다음 한 줄을 적어넣습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto matWater = nist-&amp;gt;FindOrBuildMaterial(&amp;quot;G4_WATER&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_material&#34; srcset=&#34;
               /g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_f0925dfeb3f749d46fcf665f23279291.png 400w,
               /g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_1b3d3fda0dbb6a171c1198db0cd40522.png 760w,
               /g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_f0925dfeb3f749d46fcf665f23279291.png&#34;
               width=&#34;760&#34;
               height=&#34;273&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 한 줄을 통해, &lt;strong&gt;matWater&lt;/strong&gt; 라는 변수는 &amp;ldquo;물&amp;quot;이라는 물질로 정의되었습니다.&lt;/p&gt;
&lt;h3 id=&#34;물이-담긴-팬텀-위치시키기&#34;&gt;물이 담긴 팬텀 위치시키기&lt;/h3&gt;
&lt;p&gt;이제 solid, logical volume, physical volume을 정의해봅시다.&lt;/p&gt;
&lt;p&gt;아래 그림에서 표시된 위치에 다음 내용을 적어 넣습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Water phantom
auto phantomSize = 5. * cm;
auto phantomPos = G4ThreeVector(0., 0., 10.*cm);
auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, .5 * phantomSize, .5 * phantomSize, .5 * phantomSize);
auto phantomLog = new G4LogicalVolume(phantomSol, matWater, &amp;quot;phantom&amp;quot;);
new G4PVPlacement(nullptr, phantomPos, phantomLog, &amp;quot;phantom&amp;quot;, worldLog, false, 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_waterbox&#34; srcset=&#34;
               /g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_fcaacd02e82498e2b0b060072cf4aeb6.png 400w,
               /g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_745c6650d358e625439864280e5f9e97.png 760w,
               /g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_fcaacd02e82498e2b0b060072cf4aeb6.png&#34;
               width=&#34;760&#34;
               height=&#34;390&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    phantomSize, phantomPos와 같은 변수의 경우에는, 사실 따로 변수로 만들지 않고 직접 solid나 physical volume에 값을 적어도 됩니다. 하지만 재사용성 및 가독성을 고려하여 변수로 만들어 사용하였습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;실행해보기&#34;&gt;실행해보기&lt;/h3&gt;
&lt;p&gt;이제 작성한 코드를 저장하고 빌드를 한 뒤 UI모드로 실행하면, 물 팬텀이 추가된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;지난 글에서 만들어뒀던 build 디렉토리에 들어간 뒤, make 명령어만 입력하면 빌드가 수행됩니다.&lt;/p&gt;
&lt;p&gt;이어서, &lt;b&gt;./g4_minimal&lt;/b&gt; 이라고 입력하여 실행하면 UI모드로 실행할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd build
make
./g4_minimal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실행하면 다음 그림과 같은 창이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_UI&#34; srcset=&#34;
               /g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_a41c4580aa9af7a66a5e2de48c3b9182.png 400w,
               /g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_0d5238257ae692deab4467d3847ec8a4.png 760w,
               /g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_a41c4580aa9af7a66a5e2de48c3b9182.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;왼쪽의 탭에서 &lt;strong&gt;Scene tree&lt;/strong&gt;를 클릭하면, 화면에 나타나는 지오메트리의 트리구조를 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 중, &lt;strong&gt;Touchables&lt;/strong&gt; 하위에 있는 것이 여러분이 만든 지오메트리 목록입니다.&lt;/p&gt;
&lt;p&gt;지금 저희가 만들었던 물 팬텀은 &lt;strong&gt;phantom&lt;/strong&gt;이라는 이름으로 표시되고 있으며, 왼쪽의 체크박스를 누르면 오른쪽 그림에서 조그마한 직육면체가 나타났다 사라졌다 하는 것을 확인할 수 있을 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;최종-파일-다운받는-법&#34;&gt;최종 파일 다운받는 법&lt;/h2&gt;
&lt;p&gt;이번 글에서 작성한 코드는 &lt;a href=&#34;https://github.com/evandde/g4_minimal/archive/c6018b5845fbce089a1eee309ea7546d4d8319e4.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;를 통해 다운받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은 git repository를 clone하신 분의 경우에는, example branch의 이전 커밋 중 V1_DetCon이라는 커밋을 참고하셔도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;새로 추가된 코드 부분을 정리하면 다음 그림과 같습니다. 주석이나 단순히 변수를 정의한 부분은 따로 표시하지 않았습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_newcode&#34; srcset=&#34;
               /g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_9d7c2331a92c6d7139f550cbe762a9e4.png 400w,
               /g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_5cb5a5e93bd5842c5c70997286a543a9.png 760w,
               /g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_9d7c2331a92c6d7139f550cbe762a9e4.png&#34;
               width=&#34;760&#34;
               height=&#34;390&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;위 코드에서 어떤 코드가 무슨 역할을 하고 있는지만 기억하시면 됩니다.&lt;/p&gt;
&lt;p&gt;세부적인 설명은 다음 글에서 하도록 하겠습니다.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;의료영상 혹은 방사선 조사 등의 특수한 목적을 위해 제작된 구조물&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 3. 다양한 모양의 지오메트리 만들기</title>
      <link>https://evandde.github.io/g4-noqasked-003-solid/</link>
      <pubDate>Fri, 11 Jun 2021 19:27:03 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-003-solid/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 세번째. 다양한 모양의 지오메트리를 만들기 위해 Solid에 대해 살펴봅시다.&lt;/p&gt;
&lt;p&gt;Geant4에서는 다양한 종류의 Solid(형태)를 제공하고 있습니다. 이번 글에서는 다양한 Solid들을 사용해보도록 하겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4에서의-단위&#34;&gt;Geant4에서의 단위&lt;/h2&gt;
&lt;p&gt;Solid를 알아보기에 앞서, 단위라는 개념부터 살펴보려 합니다. Solid를 만들 때 크기를 입력하려면 길이에 대한 단위가 필수적으로 요구되기 때문입니다.&lt;/p&gt;
&lt;p&gt;Geant4에서는 각종 물리량에 대한 단위를 제공하고 있으며, 이를 사용하기 위해서는 &lt;b&gt;&amp;ldquo;G4SystemOfUnits.hh&amp;rdquo;&lt;/b&gt; 헤더가 필요합니다. 현재 작업 중인 DetectorConsturction.cc 파일에는 제가 이미 이 헤더를 추가해 놓았으므로, 바로 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;사용은 실제 물리량을 기술할 때와 동일한 방식으로 사용하면 됩니다만, 곱하기를 명시해주어야 한다는 점만 주의하면 됩니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;b&gt;10 cm 라는 길이를 Geant4 코드 작성에서 기술하고자 할 때에는 다음과 같이 입력&lt;/b&gt;합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;10. * cm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;길이 단위 이외에도, 질량, 밀도, 온도, 기압, 흡수선량 등 다양한 물리량에 대한 단위를 제공하고 있으므로, 필요에 따라 활용해보시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;solid의-여러가지-종류&#34;&gt;Solid의 여러가지 종류&lt;/h2&gt;
&lt;p&gt;Solid는 간단히 말해 &lt;strong&gt;입체도형&lt;/strong&gt;입니다. 입체도형에는 직육면체, 원기둥, 구, 원뿔 등 다양한 모양이 있지요. Geant4에서도 Solid라는 개념 아래에 &lt;strong&gt;하위 개념&lt;/strong&gt;으로서 G4Box(직육면체), GTubs(원기둥), G4Orb/G4Sphere(구), G4Cons(원뿔) 등을 만들어, 다양한 모양을 정의할 수 있게 하였습니다.&lt;/p&gt;
&lt;p&gt;우리는 &lt;strong&gt;Geant4에서 어떤 입체도형을 제공하는지 파악&lt;/strong&gt;하고, &lt;strong&gt;각각의 입체도형을 정의하는 방법을 학습&lt;/strong&gt;한 뒤, 그대로 사용하기만 하면 됩니다.&lt;/p&gt;
&lt;p&gt;Geant4에서 제공하고 있는 Solid의 모든 종류는 &lt;a href=&#34;https://geant4.kek.jp/Reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Doxygen&lt;/a&gt;에서 G4VSolid 클래스의 레퍼런스 페이지(&lt;a href=&#34;https://geant4.kek.jp/Reference/10.07.p01/classG4VSolid.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10.7.p01 버전&lt;/a&gt;)에 들어가면 상속받은 클래스 목록(&lt;em&gt;Inheritance diagram for G4VSolid&lt;/em&gt;) 부분을 통해 확인할 수 있습니다. 그 종류가 너무나도 많기 때문에, 이 글에서는 다음 세 가지 클래스의 생성자만 살펴보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4Box&lt;/li&gt;
&lt;li&gt;G4Tubs&lt;/li&gt;
&lt;li&gt;G4Orb&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    생성자가 뭔지 모르겠다면, 일단은 그냥 어떤 개념을 가진 대상을 만들 때 사용하는 함수라고 생각하세요. 여기서는 직육면체, 원기둥, 구를 만드는 함수라고 생각하시면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Geant4에서 Solid를 만들 때에는, 맨 처음 인자로 그 Solid의 &amp;ldquo;이름&amp;quot;을 지어주게 되어있습니다. 이름을 짓는 데에 어떠한 규약이 있는 것은 아니므로, 자유롭게 지으시면 됩니다. 다만, 되도록이면 다른 Solid와 이름이 겹치지 않도록 고유의 이름을 주시는 것을 권장합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;g4box직육면체&#34;&gt;G4Box(직육면체)&lt;/h3&gt;
&lt;p&gt;G4Box는 직육면체 모양을 정의하는 데에 사용하는 클래스입니다. 클래스의 생성자는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4Box (const G4String &amp;amp;pName, 
       G4double pX, 
       G4double pY, 
       G4double pZ);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pName: 정의할 직육면체의 이름. 자유롭게 적으면 됨&lt;/li&gt;
&lt;li&gt;pX: X축 방향으로의 모서리 길이의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;절반&lt;/b&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;pY: Y축 방향으로의 모서리 길이의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;절반&lt;/b&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;pZ: Z축 방향으로의 모서리 길이의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;절반&lt;/b&gt;&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;간단히 말해, 직육면체를 정의하기 위해 필요한 것은, 이름과 가로, 세로, 높이라고 볼 수 있습니다. 다만, 가로, 세로, 높이의 경우에는 그 &lt;strong&gt;길이의 절반&lt;/strong&gt;을 입력해야 한다는 점에 주의하세요.&lt;/p&gt;
&lt;p&gt;예를 들어, X축 방향으로 10 cm, Y축 방향으로 5 cm, Z축 방향으로 20 cm 크기를 가진 직육면체 형태의 팬텀을 정의하고자 한다면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, 5. * cm, 2.5 * cm, 10. * cm);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만, 이렇게 적으면 실제 직육면체 크기와 코드에 써있는 값이 서로 달라 헷갈리는 경우가 있어, 저는 개인적으로 다음과 같이 실제 길이에 0.5를 곱하는 형태로 적는 것을 선호합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, .5 * 10. * cm, .5 * 5. * cm, .5 * 20. * cm);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;각 변의 길이를 변수화한다면 다음과 같이 좀 더 알아보기 쉽게 적을 수 있겠지요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomXLength = 10. * cm;
auto phantomYLength = 5. * cm;
auto phantomZLength = 20. * cm;
auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, .5 * phantomXLength, .5 * phantomYLength, .5 * phantomZLength);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;지난 글에서 작성한 코드 부분 중, Solid에 해당하는 내용을 위 코드로 바꿔준 모습입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_g4box&#34; srcset=&#34;
               /g4-noqasked-003-solid/01_g4box_hu0e8f7b13d35a13a4e540f658820cab33_22168_1e461d9f4d3627cbd207c75d81b900e2.png 400w,
               /g4-noqasked-003-solid/01_g4box_hu0e8f7b13d35a13a4e540f658820cab33_22168_4e6672844932ff76292aed6cee9a0f51.png 760w,
               /g4-noqasked-003-solid/01_g4box_hu0e8f7b13d35a13a4e540f658820cab33_22168_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/01_g4box_hu0e8f7b13d35a13a4e540f658820cab33_22168_1e461d9f4d3627cbd207c75d81b900e2.png&#34;
               width=&#34;760&#34;
               height=&#34;198&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 상태로 실행해보면, 물팬텀의 크기가 바뀐 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_g4boxrun&#34; srcset=&#34;
               /g4-noqasked-003-solid/02_g4boxrun_hube810a1bde3702d14cac63e64f046204_77702_0be8989f9f37f1805c8f13af4ddc8ee4.png 400w,
               /g4-noqasked-003-solid/02_g4boxrun_hube810a1bde3702d14cac63e64f046204_77702_2275e2c23821bd8a85e0c406cbb68729.png 760w,
               /g4-noqasked-003-solid/02_g4boxrun_hube810a1bde3702d14cac63e64f046204_77702_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/02_g4boxrun_hube810a1bde3702d14cac63e64f046204_77702_0be8989f9f37f1805c8f13af4ddc8ee4.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;g4tubs원기둥&#34;&gt;G4Tubs(원기둥)&lt;/h3&gt;
&lt;p&gt;G4Tubs는 원기둥 모양을 정의하는 데에 사용하는 클래스입니다. 가운데가 빈 두루마리 휴지같은 모양도 표현할 수 있습니다. 클래스의 생성자는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4Tubs (const G4String &amp;amp;pName, 
        G4double pRMin, 
        G4double pRMax, 
        G4double pDz, 
        G4double pSPhi, 
        G4double pDPhi);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pName: 정의할 원기둥의 이름. 자유롭게 적으면 됨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pRMin: 내반경. 속이 꽉 찬 원기둥이라면 0을 적고, 가운데가 빈 원기둥이라면 내부 원의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;반지름&lt;/b&gt;&lt;/font&gt;을 적음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pRMax: 외반경. 외부 원의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;반지름&lt;/b&gt;&lt;/font&gt;을 적음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pDz: 원기둥 높이의 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;절반&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pSPhi: 시작 중심각. 케이크 조각처럼 부채꼴 기둥을 표현하고자 하는 경우에, 시작할 각도를 0°~360° 사이에서 지정할 수 있음. 일반적인 원기둥의 경우 0을 적음. (0°: +x축, 90°: +y축)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pDPhi: 중심각의 변화량. 케이크 조각처럼 부채꼴 기둥을 표현하고자 하는 경우에, 중심각의 변화량을 0°~360° 사이에서 지정할 수 있음. 일반적인 원기둥의 경우 360°(360. * deg)를 적음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일반적인 원기둥 뿐만 아니라, 원기둥 껍질 혹은 부채꼴 기둥 및 부채꼴 기둥 껍질모양까지 만들 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    G4Tubs 클래스는 무조건 Z축을 중심축으로 한 형태로만 만들어집니다. 다른 축을 중심축으로 하고 싶다면, Physical Volume을 설정할 때 회전을 시키는 방법밖에 없습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;예를 들어, 반지름이 5 cm이고, 높이가 10 cm인 속이 꽉 찬 원기둥 형태의 팬텀을 정의하고자 한다면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomSol = new G4Tubs(&amp;quot;phantom&amp;quot;, 0., 5. * cm, 5. * cm, 0., 360. * deg);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;저는 G4Box의 경우와 유사하게, 반경대신 직경을 써서 코드 작성시의 일관성을 유지하는 것을 좋아합니다. 일반적으로 다음과 같이 작성하는 편이지요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomDiameter = 10. * cm;
auto phantomHeight = 10. * cm;
auto phantomSol = new G4Tubs(&amp;quot;phantom&amp;quot;, 0., .5 * phantomDiameter, .5 * phantomHeight, 0., 360. * deg);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아까 수정하였던 Solid에 해당하는 내용을 G4Tubs의 예시인 위 코드로 바꿔준 모습입니다. &lt;font color=&#39;red&#39;&gt;G4Tubs의 헤더(G4Tubs.hh)는 제가 제공해드렸던 템플릿 코드의 DetectorConstruction에 기본으로 포함되어 있지 않으므로, 꼭 직접 넣어주셔야 합니다.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_g4tubs&#34; srcset=&#34;
               /g4-noqasked-003-solid/03_g4tubs_hu05891ed905d4a019a805d5e6e5ea84de_203159_f4e9d7b1fec97b00d94ba319a64f1adf.png 400w,
               /g4-noqasked-003-solid/03_g4tubs_hu05891ed905d4a019a805d5e6e5ea84de_203159_851b8ffd53511ef6c04067fabfe79934.png 760w,
               /g4-noqasked-003-solid/03_g4tubs_hu05891ed905d4a019a805d5e6e5ea84de_203159_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/03_g4tubs_hu05891ed905d4a019a805d5e6e5ea84de_203159_f4e9d7b1fec97b00d94ba319a64f1adf.png&#34;
               width=&#34;760&#34;
               height=&#34;619&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;실행해보면, 물팬텀의 모양이 바뀐 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_g4tubsrun&#34; srcset=&#34;
               /g4-noqasked-003-solid/04_g4tubsrun_hu45feeb31614cc9859fb07c736b7b1c37_77157_89e3ff23693d8f6fc2acf064b8a97381.png 400w,
               /g4-noqasked-003-solid/04_g4tubsrun_hu45feeb31614cc9859fb07c736b7b1c37_77157_46a625c87f6a484cf18933f5f32eec85.png 760w,
               /g4-noqasked-003-solid/04_g4tubsrun_hu45feeb31614cc9859fb07c736b7b1c37_77157_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/04_g4tubsrun_hu45feeb31614cc9859fb07c736b7b1c37_77157_89e3ff23693d8f6fc2acf064b8a97381.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;g4orb구&#34;&gt;G4Orb(구)&lt;/h3&gt;
&lt;p&gt;G4Orb는 구 모양을 정의하는 데에 사용하는 클래스입니다. 클래스의 생성자는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4Orb (const G4String &amp;amp;pName, 
       G4double pRmax);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pName: 정의할 구의 이름. 자유롭게 적으면 됨&lt;/li&gt;
&lt;li&gt;pRmax: 구의 반지름&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;G4Orb는 속이 꽉 찬 구만 만들 수 있습니다. 단순히 구의 반지름만 적어주면 끝이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    G4Tubs처럼 구 껍질이나 각도에 따라 잘린 구를 만들기 위해서는 G4Sphere라는 Solid를 이용하시면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;예를 들어, 반지름이 5 cm인 구형 팬텀을 정의하고자 한다면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomSol = new G4Orb(&amp;quot;phantom&amp;quot;, 5. * cm);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;저는 여기서도 직경을 이용하는 편입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomDiameter = 10. * cm;
auto phantomSol = new G4Orb(&amp;quot;phantom&amp;quot;, .5 * phantomDiameter);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아까 수정하였던 Solid에 해당하는 내용을 G4Orb의 예시인 위 코드로 바꿔준 모습입니다. 이 경우에도 반드시 &lt;font color=&#39;red&#39;&gt;G4Orb의 헤더(G4Orb.hh)를 직접 넣어주시기 바랍니다.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_g4orb&#34; srcset=&#34;
               /g4-noqasked-003-solid/05_g4orb_huba09776a125216d4953124bbbb4120ea_196719_825c1244b29fed1817aecae870e8a2d8.png 400w,
               /g4-noqasked-003-solid/05_g4orb_huba09776a125216d4953124bbbb4120ea_196719_7ace8ff96d65f63ac5e8964c2143f293.png 760w,
               /g4-noqasked-003-solid/05_g4orb_huba09776a125216d4953124bbbb4120ea_196719_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/05_g4orb_huba09776a125216d4953124bbbb4120ea_196719_825c1244b29fed1817aecae870e8a2d8.png&#34;
               width=&#34;760&#34;
               height=&#34;619&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;실행하면, 구형의 물팬텀을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_g4orbrun&#34; srcset=&#34;
               /g4-noqasked-003-solid/06_g4orbrun_hu77955d15bf9517a9bb09aa947b7046bd_76553_05dd2ead8dd4b91f75d7bc16875aa605.png 400w,
               /g4-noqasked-003-solid/06_g4orbrun_hu77955d15bf9517a9bb09aa947b7046bd_76553_dbb50aa7f7af86646c6f03fd1f57998e.png 760w,
               /g4-noqasked-003-solid/06_g4orbrun_hu77955d15bf9517a9bb09aa947b7046bd_76553_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-003-solid/06_g4orbrun_hu77955d15bf9517a9bb09aa947b7046bd_76553_05dd2ead8dd4b91f75d7bc16875aa605.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;Geant4는 이 외에도 정말 많은 Solid 종류를 제공하고 있습니다. 대부분의 경우, 각 클래스의 &lt;strong&gt;헤더파일&lt;/strong&gt;을 열어보면 어떤 모양을 어떤 변수로 표현하는지 주석으로 설명되어 있습니다.&lt;/p&gt;
&lt;p&gt;이 글에서 소개한 단순한 모양 이외에도, 두 개의 Solid를 이용하여 합집합/차집합/교집합에 해당하는 새로운 Solid를 정의하는 클래스 (G4UnionSolid, G4SubtractionSolid, G4IntersectionSolid)나, 다각형 면으로 구성된 지오메트리를 표현하기 위한 Solid 클래스 (G4TesellatedSolid) 등 다양한 클래스를 제공하고 있으니 필요에 따라 참고하시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;고생하셨습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는, &lt;strong&gt;물질&lt;/strong&gt;을 정의하는 방법에 대해 좀 더 자세히 살펴보도록 하겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 4. 물질 정의하기</title>
      <link>https://evandde.github.io/g4-noqasked-004-material/</link>
      <pubDate>Tue, 15 Jun 2021 09:26:01 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-004-material/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 네번째. 여러가지 물질을 정의하는 방법을 알아보고, 이를 이용하여 LogicalVolume을 정의해 봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4의-물질&#34;&gt;Geant4의 물질&lt;/h2&gt;
&lt;p&gt;Geant4에서 물질은 다음의 계층을 따라 정의됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B --&amp;gt; C --&amp;gt; C
A[Isotope]
B[Element]
C[Material]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isotope를 조합하여 Element를 정의하고, Element를 조합하여 Material을 정의합니다. 또한, 여러 Material을 섞어서 새로운 Material을 만들 수도 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 Isotope, Element, Material 클래스에 대해 모든걸 설명하기에는 너무 글이 길어지므로, 여기서는 &lt;strong&gt;Geant4에서 기본적으로 제공하는 물질 DB에서 원하는 물질을 가져와 사용하는 법&lt;/strong&gt;만 다루겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4-material-database&#34;&gt;Geant4 material database&lt;/h2&gt;
&lt;p&gt;Geant4는 NIST(National Institute of Standards and Technology)의 &lt;a href=&#34;http://physics.nist.gov/PhysRefData/Compositions/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;원자량 및 동위원소조성비 데이터&lt;/a&gt;를 바탕으로 제작해둔 물질 DB를 제공하고 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;물질-목록-확인하기&#34;&gt;물질 목록 확인하기&lt;/h3&gt;
&lt;p&gt;Geant4가 제공하는 material database의 목록은 &lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/Appendix/materialNames.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 확인할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/Appendix/materialNames.html#simple-materials-elements&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Simple Materials (Elements)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;단일 원소로 구성된 물질의 목록&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/Appendix/materialNames.html#nist-compounds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST Compounds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;화합물의 목록. 표의 형태는 두가지로, 각각을 읽는 법은 다음과 같음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;조성비가 실수로 표시된 경우: 질량비&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_g4matcompound&#34; srcset=&#34;
               /g4-noqasked-004-material/01_g4matcompound_huaf21c2b02a7c831d026db0f866a2bcfa_31679_490a746cbbbd6d95d20ac55203df8d8d.png 400w,
               /g4-noqasked-004-material/01_g4matcompound_huaf21c2b02a7c831d026db0f866a2bcfa_31679_64c751ac54b4ea8a07ea6d3152fa96c0.png 760w,
               /g4-noqasked-004-material/01_g4matcompound_huaf21c2b02a7c831d026db0f866a2bcfa_31679_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-004-material/01_g4matcompound_huaf21c2b02a7c831d026db0f866a2bcfa_31679_490a746cbbbd6d95d20ac55203df8d8d.png&#34;
               width=&#34;760&#34;
               height=&#34;298&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;조성비가 정수로 표시된 경우: 개수비&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_g4matcompound&#34; srcset=&#34;
               /g4-noqasked-004-material/02_g4matcompound_hu8d4ac807cbc3459d3b8de6b1bc15d292_22425_11ba9a285b250a224078f637c38bec57.png 400w,
               /g4-noqasked-004-material/02_g4matcompound_hu8d4ac807cbc3459d3b8de6b1bc15d292_22425_91b6dd2b745e7beb0a0908121015ac41.png 760w,
               /g4-noqasked-004-material/02_g4matcompound_hu8d4ac807cbc3459d3b8de6b1bc15d292_22425_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-004-material/02_g4matcompound_hu8d4ac807cbc3459d3b8de6b1bc15d292_22425_11ba9a285b250a224078f637c38bec57.png&#34;
               width=&#34;760&#34;
               height=&#34;210&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/Appendix/materialNames.html#hep-and-nuclear-materials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HEP and Nuclear Materials&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/Appendix/materialNames.html#space-iss-materials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Space (ISS) Materials&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/Appendix/materialNames.html#bio-chemical-materials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bio-Chemical Materials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;특정 분야에서 주로 사용되는 물질들의 목록. 읽는 법은 동일&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 중 대표적으로 많이 쓰이는 물질을 몇 개 소개하자면 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4_AIR (공기)&lt;/li&gt;
&lt;li&gt;G4_Galactic (진공)&lt;/li&gt;
&lt;li&gt;G4_WATER (물)&lt;/li&gt;
&lt;li&gt;G4_STAINLESS-STEEL (SUS)&lt;/li&gt;
&lt;li&gt;G4_SODIUM_IODIDE (NaI)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 외에도 다양한 물질이 있으니 찾아보시기 바랍니다.&lt;/p&gt;
&lt;h3 id=&#34;목록에-있는-물질-정의하기&#34;&gt;목록에 있는 물질 정의하기&lt;/h3&gt;
&lt;p&gt;여러분이 원하는 물질을 위 목록에서 찾으셨다면, &lt;strong&gt;G4NistManager&lt;/strong&gt;클래스의 &lt;strong&gt;FindOrBuildMaterial() 함수&lt;/strong&gt;를 이용해 해당 물질을 정의할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4Material *FindOrBuildMaterial (const G4String &amp;amp;name, 
                                 G4bool isotopes=true, 
                                 G4bool warning=false);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;name: Geant4 Material Database에서 가져올 물질의 이름. 위 링크에서 확인한 물질의 이름을 &lt;strong&gt;대소문자까지 맞추어 정확하게 입력&lt;/strong&gt;해야 함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;isotopes: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 내부 소스코드를 뜯어보면, 사실 아예 이용되지 않는 변수임&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;warning: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 물질 정의 작업이 정상적으로 이루어지지 않은 경우 경고문구를 띄울지 여부를 정의하는 인자. 기본값은 false&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어 NIST Compounds 목록에 있는 G4_AIR (공기)를 정의하고자 하는 경우에는 다음과 같이 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto matAir = G4NistManager::Instance()-&amp;gt;FindOrBuildMaterial(&amp;quot;G4_AIR&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 G4NistManager::Instance() 부분은 G4NistManager 클래스의 객체를 호출해오는 명령어입니다. Geant4 물질 DB에서 물질을 가져와 정의할때마다 이 객체가 필요하기 때문에 매번 호출하기보다는, &lt;strong&gt;이 객체를 따로 정의해두고 가져다 쓰는 방식을 주로 이용&lt;/strong&gt;합니다. 그러면 또다른 물질을 정의할 때에 G4NistManager 객체를 다시 호출하지 않아도 되기 때문입니다.&lt;/p&gt;
&lt;p&gt;예를 들어 G4_AIR (공기)에 이어, G4_WATER (물)도 정의한다고 하면 다음과 같이 입력할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto nist = G4NistManager::Instance();
auto matAir = nist-&amp;gt;FindOrBuildMaterial(&amp;quot;G4_AIR&amp;quot;);
auto matWater = nist-&amp;gt;FindOrBuildMaterial(&amp;quot;G4_WATER&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nist-db의-원소로-화합물-만들기&#34;&gt;NIST DB의 원소로 화합물 만들기&lt;/h3&gt;
&lt;p&gt;원하는 물질이 Geant4 물질 DB에 없을 수도 있습니다. 이런 경우, 여러분이 NIST DB의 원소를 조합하여 새로운 화합물을 정의할 수 있습니다. 이는 G4NistManager 클래스의 &lt;strong&gt;ConstructNewMaterial() 함수&lt;/strong&gt;를 이용하면 됩니다. 함수의 원형은 다음의 두 가지 입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4Material *ConstructNewMaterial (const G4String &amp;amp;name, 
                                  const std::vector&amp;lt; G4String &amp;gt; &amp;amp;elm, 
                                  const std::vector&amp;lt; G4int &amp;gt; &amp;amp;nbAtoms, 
                                  G4double dens, 
                                  G4bool isotopes=true, 
                                  G4State state=kStateSolid, 
                                  G4double temp=NTP_Temperature, 
                                  G4double pressure=CLHEP::STP_Pressure);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;조성비를 &lt;font color = &#39;red&#39;&gt;개수비&lt;/font&gt;로서 입력하고자 할 때 사용합니다.&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: 물질의 이름. 자유롭게 적으면 됨&lt;/li&gt;
&lt;li&gt;elm: 원소기호의 목록을 적은 G4String형 벡터. 화합물의 구성원소를 순서대로 적음&lt;/li&gt;
&lt;li&gt;nbAtoms: 원소별 조성비를 &lt;strong&gt;개수비&lt;/strong&gt;형태로 적은 G4int형 벡터. 화합물의 구성원소별 조성비를 순서대로 적음&lt;/li&gt;
&lt;li&gt;dens: 물질의 밀도&lt;/li&gt;
&lt;li&gt;&lt;em&gt;isotopes: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 내부 소스코드를 뜯어보면, 사실 아예 이용되지 않는 변수임&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;state: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 물질의 상을 특정하고 싶을 때 사용. 기본값은 kStateSolid(고체형)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;temp: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 물질의 온도를 특정하고 싶을 때 사용. 기본값은 NTP_Temperature(약 293.15 K)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pressure: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 물질의 압력을 특정하고 싶을 때 사용. 기본값은 CLHEP::STP_Pressure(1 atm)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4Material *ConstructNewMaterial (const G4String &amp;amp;name, 
                                  const std::vector&amp;lt; G4String &amp;gt; &amp;amp;elm, 
                                  const std::vector&amp;lt; G4double &amp;gt; &amp;amp;weight, 
                                  G4double dens, 
                                  G4bool isotopes=true, 
                                  G4State state=kStateSolid, 
                                  G4double temp=NTP_Temperature, 
                                  G4double pressure=CLHEP::STP_Pressure);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;조성비를 &lt;font color = &#39;red&#39;&gt;질량비&lt;/font&gt;로서 입력하고자 할 때 사용합니다.&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: 물질의 이름. 자유롭게 적으면 됨&lt;/li&gt;
&lt;li&gt;elm: 원소기호의 목록을 적은 G4String형 벡터. 화합물의 구성원소를 순서대로 적음&lt;/li&gt;
&lt;li&gt;weight: 원소별 조성비를 &lt;strong&gt;질량비&lt;/strong&gt;형태로 적은 G4double형 벡터. 화합물의 구성원소별 조성비를 순서대로 적음&lt;/li&gt;
&lt;li&gt;dens: 물질의 밀도&lt;/li&gt;
&lt;li&gt;&lt;em&gt;isotopes: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 내부 소스코드를 뜯어보면, 사실 아예 이용되지 않는 변수임&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;state: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 물질의 상을 특정하고 싶을 때 사용. 기본값은 kStateSolid(고체형)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;temp: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 물질의 온도를 특정하고 싶을 때 사용합 기본값은 NTP_Temperature(약 293.15 K)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pressure: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 물질의 압력을 특정하고 싶을 때 사용. 기본값은 CLHEP::STP_Pressure(1 atm)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 함수를 이용할 때 주의할 점은, &lt;strong&gt;원소기호를 적은 벡터의 원소 순서대로 조성비를 적어주어야 한다는 것&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;예를 들어 물(H2O)을 이 함수를 사용하여 정의하려면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto nist = G4NistManager::Instance();
std::vector&amp;lt;G4String&amp;gt; elWater = {&amp;quot;H&amp;quot;, &amp;quot;O&amp;quot;};
std::vector&amp;lt;G4int&amp;gt; nbWater = {2, 1};
auto matWater = nist-&amp;gt;ConstructNewMaterial(&amp;quot;Water&amp;quot;, elWater, nbWater, 1. * g / cm3, true, kStateLiquid);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;여러가지-물질로-혼합물-정의하기&#34;&gt;여러가지 물질로 혼합물 정의하기&lt;/h3&gt;
&lt;p&gt;물질들을 합쳐 놓은 혼합물을 정의하는 일이 필요할 수도 있을 것입니다. 이런 경우에는 G4Material 클래스의 생성자와, G4Material 클래스의 AddMaterial() 함수를 이용하면 됩니다. 각각의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4Material (const G4String &amp;amp;name, 
            G4double density, 
            G4int nComponents, 
            G4State state=kStateUndefined, 
            G4double temp=NTP_Temperature, 
            G4double pressure=CLHEP::STP_Pressure);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;G4Material의 생성자 중, 원소/물질의 조성비를 바탕으로 정의하는 데에 사용하는 생성자&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: 물질의 이름. 자유롭게 적으면 됨&lt;/li&gt;
&lt;li&gt;density: 물질의 밀도&lt;/li&gt;
&lt;li&gt;nComponents: 이 물질을 구성하는 원소/물질 종류의 수&lt;/li&gt;
&lt;li&gt;&lt;em&gt;state: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 물질의 상을 특정하고 싶을 때 사용. 기본값은 kStateUndefined(고체 혹은 기체형)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;temp: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 물질의 온도를 특정하고 싶을 때 사용. 기본값은 NTP_Temperature(약 293.15 K)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pressure: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 물질의 압력을 특정하고 싶을 때 사용. 기본값은 CLHEP::STP_Pressure(1 atm)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void AddMaterial (G4Material *material, 
                  G4double fraction);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;material: 구성요소가 될 물질에 해당하는 G4Material 객체의 포인터&lt;/li&gt;
&lt;li&gt;fraction: 해당 물질의 조성비. &lt;strong&gt;질량비&lt;/strong&gt;로 입력&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어 20% 농도의 소금물을 정의한다면 다음과 같이 입력하면 됩니다. (소금질량 : 물질량 = 20 : 80일 때 NTP(Normal Temperature Pressure) 조건에서 1.147 gcc로 알려져 있음)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto nist = G4NistManager::Instance();
std::vector&amp;lt;G4String&amp;gt; elNaCl = {&amp;quot;Na&amp;quot;, &amp;quot;Cl&amp;quot;};
std::vector&amp;lt;G4int&amp;gt; nbNaCl = {1, 1};
auto matNaCl = nist-&amp;gt;ConstructNewMaterial(&amp;quot;NaCl&amp;quot;, elNaCl, nbNaCl, 2.16 * g / cm3);
auto matWater = nist-&amp;gt;FindOrBuildMaterial(&amp;quot;G4_WATER&amp;quot;);

auto matNaClSolution = new G4Material(&amp;quot;NaClSolution&amp;quot;, 1.147 * g / cm3, 2);
matNaClSolution-&amp;gt;AddMaterial(matNaCl, 0.2);
matNaClSolution-&amp;gt;AddMaterial(matWater, 0.8);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;logical-volume-정의하기&#34;&gt;Logical Volume 정의하기&lt;/h2&gt;
&lt;p&gt;Solid와 물질이 있으면, 손쉽게 Logical Volume을 정의할 수 있습니다. LogicalVolume은 &lt;strong&gt;G4LogicalVolume&lt;/strong&gt; 클래스가 담당하며, 생성자는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4LogicalVolume (G4VSolid *pSolid, 
                 G4Material *pMaterial, 
                 const G4String &amp;amp;name, 
                 G4FieldManager *pFieldMgr=nullptr, 
                 G4VSensitiveDetector *pSDetector=nullptr, 
                 G4UserLimits *pULimits=nullptr, 
                 G4bool optimise=true);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pSolid: G4VSolid 객체의 포인터. 앞서 정의한 Solid를 넣음&lt;/li&gt;
&lt;li&gt;pMaterial: G4Material 객체의 포인터. 앞서 정의한 Material을 넣음&lt;/li&gt;
&lt;li&gt;name: Logical Volume의 이름. 자유롭게 적으면 됨. 다만, 다른 Logical Volume과 겹치지 않게끔 고유의 이름을 권장. Solid의 이름과는 동일해도 상관없음&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pFieldMgr: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 전기장/자기장 등에 대한 설정을 위해 사용&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pSDetector: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 스코어링용 SD에 대한 설정을 위해 사용&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pULimits: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 입자 트래킹에서의 제한치 등에 대한 설정을 위해 사용&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;optimise: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 최적화에 대한 설정을 위해 사용&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;대부분의 경우, &lt;strong&gt;맨 위의 3가지 인자만 입력&lt;/strong&gt;하여 사용하시면 됩니다.&lt;/p&gt;
&lt;p&gt;앞서 water phantom을 정의하기 위해 작성한 코드를 살펴보겠습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_newcode&#34; srcset=&#34;
               /g4-noqasked-004-material/03_newcode_huded07a23cd17e5cefecea5543090488a_58723_4260714892fdfef829619708a3352877.png 400w,
               /g4-noqasked-004-material/03_newcode_huded07a23cd17e5cefecea5543090488a_58723_6ee3ca88722032239d91d2da07d7b51f.png 760w,
               /g4-noqasked-004-material/03_newcode_huded07a23cd17e5cefecea5543090488a_58723_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-004-material/03_newcode_huded07a23cd17e5cefecea5543090488a_58723_4260714892fdfef829619708a3352877.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;물이라는 물질을 정의하기 위해 사용된 부분은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto nist = G4NistManager::Instance();
...
auto matWater = nist-&amp;gt;FindOrBuildMaterial(&amp;quot;G4_WATER&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 phantomSol이라는 Solid를 다음 코드를 통해 생성하였습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, .5 * phantomSize, .5 * phantomSize, .5 * phantomSize);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 두가지를 이용하여, 물이 담긴 phantom을 정의하기 위해 다음 코드를 입력한 것입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomLog = new G4LogicalVolume(phantomSol, matWater, &amp;quot;phantom&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이번 글에서는 원하는 물질을 정의하는 법을 알아보았습니다. 또한, 앞선 글에서 정의한 Solid에, 이번 글에서 정의한 물질을 연동하여 Logical Volume을 정의하는 방법까지 알아보았습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 지오메트리의 배치에 관한 내용, Physical Volume을 정의하는 법에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 5. 벡터, 회전, 변환</title>
      <link>https://evandde.github.io/g4-noqasked-005-clhepclasses/</link>
      <pubDate>Thu, 17 Jun 2021 18:28:42 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-005-clhepclasses/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 다섯번째. 위치와 회전을 표현하는 데에 사용하는 클래스에 대해 살펴봅니다.&lt;/p&gt;
&lt;p&gt;이제 Solid와 Logical Volume을 정의하는 방법까지 다루었으니, 지오메트리의 배치에 관한 내용인 Physical Volume만 남았습니다. 하지만, 이 내용을 다루기 위해서는 먼저 Geant4에서 &lt;strong&gt;위치&lt;/strong&gt;와 &lt;strong&gt;회전&lt;/strong&gt;을 어떻게 표현하는지 알아야 합니다. 이번 글은 실습 없이 이론만 설명하게 될 것 같지만, 다음 글에서 꼭 필요한 내용이니 잘 따라오시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;g4threevector&#34;&gt;G4ThreeVector&lt;/h2&gt;
&lt;p&gt;G4ThreeVector는 Geant4와 연동하여 설치하는 CLHep 라이브러리 중 &lt;strong&gt;Hep3Vector 클래스&lt;/strong&gt;의 다른 이름입니다. 이 클래스는 &lt;strong&gt;3차원 좌표공간 상의 벡터&lt;/strong&gt;에 해당하는 개념을 담당하는 클래스이며, 벡터 연산을 위한 다양한 기능을 담고 있습니다. 이를 모두 다루는 것은 무리가 있으므로, 대표적인 기능 몇 가지만 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;생성자&#34;&gt;생성자&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Hep3Vector ();
Hep3Vector (double x, 
            double y,
            double z);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;x, y, z: 3차원 벡터의 각 좌표값에 해당하는 실수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;G4ThreeVector 객체를 생성하는 방법입니다. 아무런 인자 없이 그냥 &lt;b&gt;G4ThreeVector()&lt;/b&gt;라고 입력하면 &lt;b&gt;(0, 0, 0)&lt;/b&gt;에 해당하는 벡터가 정의됩니다. 혹은, double 형 인자 3개를 넣어 &lt;b&gt;G4ThreeVector(x, y, z)&lt;/b&gt;로 입력하여 &lt;b&gt;(x, y, z)&lt;/b&gt;에 해당하는 벡터를 정의할 수도 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;x-y-z-값&#34;&gt;X, Y, Z 값&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;double x () const;
double y () const;
double z () const;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;따로 입력인자 없이, 해당 벡터의 X, Y, Z 값을 가져오는 데에 사용하는 함수입니다. 다음과 같이 사용합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto vec = G4ThreeVector(1., 2., 3.);
auto xVal = vec.x(); // xVal = 1.;
auto yVal = vec.y(); // yVal = 2.;
auto zVal = vec.z(); // zVal = 3.;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;연산자&#34;&gt;연산자&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool operator== (const Hep3Vector &amp;amp;) const;
bool operator!= (const Hep3Vector &amp;amp;) const;
Hep3Vector operator + (const Hep3Vector &amp;amp;, const Hep3Vector &amp;amp;);
Hep3Vector operator - (const Hep3Vector &amp;amp;, const Hep3Vector &amp;amp;);
Hep3Vector operator * (const Hep3Vector &amp;amp;, double a);
Hep3Vector operator * (double a, const Hep3Vector &amp;amp;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;벡터 간의 비교연산, 합연산, 차연산도 제공하고 있으며, 벡터와 실수끼리의 곱에 해당하는 상수배연산도 제공하고 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;g4rotationmatrix&#34;&gt;G4RotationMatrix&lt;/h2&gt;
&lt;p&gt;Geant4와 연동하여 설치하는 CLHep 라이브러리 중 &lt;strong&gt;HepRotation 클래스&lt;/strong&gt;의 다른 이름입니다. 이 클래스는 벡터의 회전변환에 관한 다양한 기능을 담고 있습니다. 마찬가지로 몇 가지만 간단하게 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;생성자-1&#34;&gt;생성자&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;HepRotation ();
HepRotation (const Hep3Vector &amp;amp;axis, double delta);
HepRotation (double phi, double theta, double psi);
HepRotation (const Hep3Vector &amp;amp;colX, const Hep3Vector &amp;amp;colY, const Hep3Vector &amp;amp;colZ);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;axis: 회전 축에 해당하는 G4ThreeVector 객체&lt;/li&gt;
&lt;li&gt;delta: 회전 각도&lt;/li&gt;
&lt;li&gt;phi, theta, psi: 회전에 따른 Euler 각도&lt;/li&gt;
&lt;li&gt;colX, colY, colZ: 회전한 좌표계의 새로운 직교좌표축 3개에 해당하는 G4ThreeVector 객체&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아무런 인자를 넣지 않고 추후 G4RotationMatrix 클래스의 함수를 이용해 회전을 연산하고자 하는 경우에는 입력인자가 없는 생성자인 &lt;b&gt;G4RotationMatrix()&lt;/b&gt;를 이용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;회전 축과 각도를 알고 있는 상태라면, &lt;b&gt;G4RotationMatrix(axis, delta)&lt;/b&gt;의 형태로 회전행렬에 대한 객체를 바로 정의할 수 있습니다.&lt;/p&gt;
&lt;p&gt;회전된 좌표계와 기존 좌표계를 바탕으로 오일러 각을 계산할 수 있다면, &lt;b&gt;G4RotationMatrix(phi, theta, psi)&lt;/b&gt;의 형태로 회전행렬 객체를 정의하면 됩니다.&lt;/p&gt;
&lt;p&gt;회전된 좌표계의 직교좌표축 3개를 알고 있다면, 이를 각각 새로운 x, y, z축으로 상정하여 &lt;b&gt;G4RotationMatrix(colX, colY, colZ)&lt;/b&gt; 생성자를 이용할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;회전-연산-함수&#34;&gt;회전 연산 함수&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;HepRotation &amp;amp; rotateX (double delta);
HepRotation &amp;amp; rotateY (double delta);
HepRotation &amp;amp; rotateZ (double delta);
HepRotation &amp;amp; rotate (double delta, const Hep3Vector &amp;amp;axis);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;delta: 회전 각도&lt;/li&gt;
&lt;li&gt;axis: 회전 축에 해당하는 G4ThreeVector 객체&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이미 생성해둔 G4RotationMatrix 객체에 대해, 추가적으로 회전 연산을 더 수행해야 하는 경우, 위와 같은 함수를 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;rotateX(), rotateY(), rotateZ() 함수는 각각 X, Y, Z축을 회전 축으로 하여 회전 연산을 추가하는 함수이고, rotate()함수는 임의의 회전 축에 대해 회전 연산을 추가하는 함수입니다.&lt;/p&gt;
&lt;h3 id=&#34;연산자-1&#34;&gt;연산자&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool operator== (const HepRotation &amp;amp;r) const;
bool operator!= (const HepRotation &amp;amp;r) const;
HepRotation operator* (const HepRotation &amp;amp;r) const;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;회전행렬 간 비교연산자를 제공하며, 회전행렬끼리 곱하여 회전 연산을 추가하는 것 또한 가능합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;g4transform3d&#34;&gt;G4Transform3D&lt;/h2&gt;
&lt;p&gt;Geant4와 연동하여 설치하는 CLHep 라이브러리 중 &lt;strong&gt;Transform3D 클래스&lt;/strong&gt;의 다른 이름입니다. 이 클래스는 회전변환, 평행이동변환, 대칭이동변환, 확대/축소변환과 같은 선형변환에 관한 여러가지 기능을 담고 있습니다.&lt;/p&gt;
&lt;p&gt;다만, Physical Volume에서는 G4Transform3D의 변환 종류 중 &lt;strong&gt;회전변환&lt;/strong&gt;과 &lt;strong&gt;평행이동변환&lt;/strong&gt;만 이용하므로, 이 부분만 알아보도록 하겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;생성자-2&#34;&gt;생성자&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Transform3D ();
Transform3D (const CLHEP::HepRotation &amp;amp;mt, const CLHEP::Hep3Vector &amp;amp;v);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;mt: G4RotationMatrix 객체. 회전변환의 정보를 담은 회전행렬&lt;/li&gt;
&lt;li&gt;v: G4ThreeVector 객체. 평행이동변환의 정보를 담은 3차원 벡터&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아무런 인자를 넣지 않고 추후 G4Transform3D 클래스의 함수를 이용해 변환을 연산하고자 하는 경우에는 입력인자가 없는 생성자인 &lt;b&gt;G4Transform3D()&lt;/b&gt;를 이용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;변환에 대한 회전행렬과 평행이동벡터를 알고 있는 상태라면, &lt;b&gt;G4Transform3D(mt, v)&lt;/b&gt;의 형태로 객체를 바로 정의할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;상속받은-클래스의-생성자&#34;&gt;상속받은 클래스의 생성자&lt;/h3&gt;
&lt;p&gt;Transform3D를 상속받은 클래스들이 있습니다. 여기서는 그 중 8가지를 살펴보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;평행이동 관련
&lt;ul&gt;
&lt;li&gt;G4Translate3D: Translate3D 클래스의 다른 이름&lt;/li&gt;
&lt;li&gt;G4TranslateX3D: TranslateX3D 클래스의 다른 이름&lt;/li&gt;
&lt;li&gt;G4TranslateY3D: TranslateY3D 클래스의 다른 이름&lt;/li&gt;
&lt;li&gt;G4TranslateZ3D: TranslateZ3D 클래스의 다른 이름&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;회전 관련
&lt;ul&gt;
&lt;li&gt;G4Rotate3D: Rotate3D 클래스의 다른 이름&lt;/li&gt;
&lt;li&gt;G4RotateX3D: RotateX3D 클래스의 다른 이름&lt;/li&gt;
&lt;li&gt;G4RotateY3D: RotateY3D 클래스의 다른 이름&lt;/li&gt;
&lt;li&gt;G4RotateZ3D: RotateZ3D 클래스의 다른 이름&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 클래스의 생성자는 다음과 같습니다. (입력인자 없이 사용하는 생성자는 생략하였음)&lt;/p&gt;
&lt;p&gt;먼저 평행이동 관련 클래스입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Translate3D (const CLHEP::Hep3Vector &amp;amp;v);
Translate3D (double x, double y, double z);
TranslateX3D (double x);
TranslateY3D (double y);
TranslateZ3D (double z);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;평행이동만을 수행하는 변환을 나타내고자 할 때, G4Translate3D 클래스를 사용할 수 있습니다. G4ThreeVector 객체가 있다면 이를 입력인자로 넣는 &lt;b&gt;G4Translate3D(v)&lt;/b&gt;를 사용해도 되고, 혹은 x, y, z축으로의 평행이동 벡터의 값을 직접 입력하여 &lt;b&gt;G4Translate3D(x, y, z)&lt;/b&gt;를 이용해도 됩니다.&lt;/p&gt;
&lt;p&gt;만약 특정 축방향으로만 이동하는 경우에는 &lt;strong&gt;G4TranslateX3D&lt;/strong&gt;, &lt;strong&gt;G4TranslateY3D&lt;/strong&gt;, &lt;strong&gt;G4TranslateZ3D&lt;/strong&gt;를 이용하여 좀 더 간단하게 표현할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;다음은 회전 관련 클래스입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Rotate3D (const CLHEP::HepRotation &amp;amp;mt);
Rotate3D (double a, const Vector3D&amp;lt; double &amp;gt; &amp;amp;v);
RotateX3D (double a);
RotateY3D (double a);
RotateZ3D (double a);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;회전만을 수행하는 변환을 나타내고자 할 때, G4Rotate3D 클래스를 사용할 수 있습니다. G4RotationMatrix 객체가 있다면 이를 입력인자로 넣는 &lt;b&gt;G4Rotate3D(mt)&lt;/b&gt;를 사용해도 되고, 혹은 회전 각도와 회전 축 벡터를 직접 입력하여 &lt;b&gt;G4Rotate3D(a, v)&lt;/b&gt;를 이용해도 됩니다.&lt;/p&gt;
&lt;p&gt;만약 특정 좌표축을 회전 축으로 삼아 회전하는 경우에는 &lt;strong&gt;G4RotateX3D&lt;/strong&gt;, &lt;strong&gt;G4RotateY3D&lt;/strong&gt;, &lt;strong&gt;G4RotateZ3D&lt;/strong&gt;를 이용하여 좀 더 간단하게 표현할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;G4Transform3D 클래스를 상속받은 이 8가지 클래스는, 앞으로 설명할 &lt;b&gt;G4Transform3D 클래스의 함수 및 연산자를 동일하게 사용&lt;/b&gt;할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;회전성분-평행이동성분&#34;&gt;회전성분, 평행이동성분&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;CLHEP::HepRotation getRotation () const;
CLHEP::Hep3Vector getTranslation () const;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;G4Transform3D 객체가 가진 회전성분 혹은 평행이동성분을 반환하는 함수입니다. 입력인자 없이 다음과 같이 이용할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto mt = G4RotationMatrix(G4ThreeVector(0., 0., 1.), 30. * deg);
auto v = G4ThreeVector(5. * cm, 0., 0.);
auto tr = G4Transform3D(mt, v);

auto mt2 = tr.getRotation(); // mt2 = mt
auto v2 = tr.getTranslation(); // v2 = v
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;연산자-2&#34;&gt;연산자&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;Transform3D operator* (const Transform3D &amp;amp;b) const
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;선형변환에 추가로 또 다른 선형변환을 가하여 새로운 선형변환을 얻는 연산입니다.&lt;/p&gt;
&lt;p&gt;예를 들어, X축으로 3 cm 이동시키고, Z축으로 2 cm 이동시킨 뒤, X축을 기준으로 30° 회전하는 변환을 수행하는 선형변환을 만들고 싶다면 다음과 같이 작성하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto tr1 = G4TranslateX3D(3. * cm); // Translate 3 cm along X-axis 
auto tr2 = G4TranslateZ3D(2. * cm); // Translate 2 cm along Z-axis 
auto tr3 = G4RotateX3D(30. * deg); // Rotate 30° around X-axis

// Translate 3 cm along X-axis (tr1), 
// then translate 2 cm along Z-axis (tr2), 
// and then finally rotate 30° around X-axis (tr3)
auto tr = tr1 * tr2 * tr3; 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이번 글에서는 위치와 회전, 그리고 이를 한번에 표현할 수 있는 선형변환을 다루는 클래스에 대해 알아보았습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 이를 이용하여 지오메트리를 배치해보도록 하겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 6. 지오메트리 배치하기</title>
      <link>https://evandde.github.io/g4-noqasked-006-phyvol/</link>
      <pubDate>Thu, 17 Jun 2021 19:23:49 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-006-phyvol/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 여섯번째. Physical Volume을 정의하여 지오메트리를 시뮬레이션 세계에 배치해 보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;기본-이론&#34;&gt;기본 이론&lt;/h2&gt;
&lt;p&gt;Physical Volume을 정의하는 방법을 이해하려면, 먼저 다음의 개념에 대해 알아야 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;World&lt;/li&gt;
&lt;li&gt;Mother Volume &amp;amp; Daughter Volume&lt;/li&gt;
&lt;li&gt;Copy number&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;world&#34;&gt;World&lt;/h3&gt;
&lt;p&gt;Geant4 시뮬레이션은 여러 다양한 지오메트리를 놓아 구성된 공간에서 이루어집니다. 이 중 &lt;strong&gt;가장 큰 최외곽의 지오메트리&lt;/strong&gt;를 &lt;strong&gt;World&lt;/strong&gt;라고 합니다. World는 적당한 수준의 여유공간을 두고 &lt;strong&gt;모든 다른 지오메트리를 World 내부에 포함&lt;/strong&gt;할 수 있도록 설정되어야 합니다. World는 가장 간단하고 연산측면에서도 효율성이 좋은 &lt;strong&gt;G4Box 형태&lt;/strong&gt;로 제작하는 것이 일반적입니다.&lt;/p&gt;
&lt;p&gt;실제 세상에서 외부 환경은 무한히 펼쳐져 있지만, 아주 멀리 있는 구조물이나 공기같은 환경적 요인이 관심있는 대상물에서 계측하는 결과에 유의미한 영향을 줄 확률은 그리 높지 않을 것이라 생각할 수 있습니다. 시뮬레이션으로 실제 세상을 모사할 때 무한한 공간을 다 넣을 수는 없으므로 &lt;strong&gt;적당한 수준에서 잘라내어 모사&lt;/strong&gt;를 하게 될 것입니다. 이 &lt;strong&gt;잘라진 세상의 경계&lt;/strong&gt;를 &lt;strong&gt;World&lt;/strong&gt;라고 생각하시면 됩니다.&lt;/p&gt;
&lt;p&gt;어떤 지오메트리나 입자도 World 바깥에서는 정의되지 않습니다. 어떤 입자가 수송되는 과정에서 World의 경계면을 만나 외부로 나가려는 순간이 되면, Geant4는 더 이상 그 입자를 수송하지 않고 그 즉시 해당 입자에 대한 연산을 종료합니다. 관심 영역 밖으로 탈출한 입자로 보는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;mother-volume--daughter-volume&#34;&gt;Mother Volume &amp;amp; Daughter Volume&lt;/h3&gt;
&lt;p&gt;Geant4에서는 모든 지오메트리가 다른 지오메트리에 포함되는 구조로 배치되어야만 합니다. 우리가 작성하고 있는 코드를 예로 들자면, water phantom이라는 지오메트리는 World라는 지오메트리 내에 포함되어 있는 식으로 말입니다. 이렇게 A라는 지오메트리가 B 지오메트리 내에 포함될 때, &lt;strong&gt;B&lt;/strong&gt;를 &lt;strong&gt;A의 Mother Volume&lt;/strong&gt;이라고 하고, &lt;strong&gt;A&lt;/strong&gt;를 &lt;strong&gt;B의 Daughter Volume&lt;/strong&gt;이라고 합니다.&lt;/p&gt;
&lt;p&gt;위 사항에서 단 하나 예외가 존재하는데, 그것이 바로 World 입니다. &lt;strong&gt;World는 Mother Volume을 가지지 않는 유일한 지오메트리&lt;/strong&gt;로, 모든 지오메트리 계층에 있어 최상위에 존재하게 됩니다.&lt;/p&gt;
&lt;p&gt;Geant4에서는 어떤 지오메트리의 위치를 참조할 때, 그 지오메트리의 &lt;strong&gt;Mother Volume의 좌표계를 기준&lt;/strong&gt;으로 위치를 가져옵니다. 예를 들어 다음 그림과 같은 경우를 살펴봅시다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_mothervol&#34; srcset=&#34;
               /g4-noqasked-006-phyvol/01_mothervol_hub7e12b6689d3da40b2e5f6787394f660_15267_b10c101c9dba5e1a687a6c0fd5999d3e.png 400w,
               /g4-noqasked-006-phyvol/01_mothervol_hub7e12b6689d3da40b2e5f6787394f660_15267_144bbd759daeeb30fd035f542dba09bf.png 760w,
               /g4-noqasked-006-phyvol/01_mothervol_hub7e12b6689d3da40b2e5f6787394f660_15267_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-006-phyvol/01_mothervol_hub7e12b6689d3da40b2e5f6787394f660_15267_b10c101c9dba5e1a687a6c0fd5999d3e.png&#34;
               width=&#34;760&#34;
               height=&#34;759&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 그림에서 지오메트리 계층도는 다음과 같을 것입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
World --- A --- B
World --- C
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;A&lt;/b&gt;&lt;/font&gt;의 위치는 A의 Mother Volume인 &lt;strong&gt;World를 기준&lt;/strong&gt;으로 판단합니다. (4, 4)에 A가 있다고 보는 것이지요.&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;green&#39;&gt;&lt;b&gt;C&lt;/b&gt;&lt;/font&gt;의 위치도 C의 Mother Volume인 &lt;strong&gt;World를 기준&lt;/strong&gt;으로 판단합니다. C는 (-3, 4)에 위치하는 것이 되겠네요.&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;blue&#39;&gt;&lt;b&gt;B&lt;/b&gt;&lt;/font&gt;의 위치는 B의 Mother Volume인 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;A&lt;/b&gt;&lt;/font&gt;를 기준으로 판단합니다. 여기서 &lt;strong&gt;World를 기준으로 하지 않음에 주의&lt;/strong&gt;하세요. 즉 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;A의 원점&lt;/b&gt;&lt;/font&gt;을 기준으로 &lt;font color=&#39;blue&#39;&gt;&lt;b&gt;B의 위치는 (2, 1)&lt;/b&gt;&lt;/font&gt;이 됩니다.&lt;/p&gt;
&lt;p&gt;B가 World를 기준으로 어디에 위치하였는지를 판단하려면, Mother Volume이 World가 될 때까지 자신의 위치에 Mother Volume의 위치를 순차적으로 더해나가면 됩니다. A에서의 B의 위치는 (2, 1)이고, World에서의 A의 위치가 (4, 4)이므로, 이를 더하면 World에서의 B의 위치가 (6, 5)임을 알 수 있는 것이지요.&lt;/p&gt;
&lt;h3 id=&#34;copy-number&#34;&gt;Copy Number&lt;/h3&gt;
&lt;p&gt;Copy Number란 Geant4에서 지오메트리를 구분하는 데에 사용되는 번호입니다. 상황에 따라 Replica Number라고 부르기도 합니다. Geant4 시뮬레이션 시 모든 지오메트리는 예외없이 Copy Number를 가지고 있습니다.&lt;/p&gt;
&lt;p&gt;지오메트리를 서로 구분하는 데에 사용한다고 했습니다만, 중복되는 번호를 부여한다고 해서 문제가 생기는 것은 아닙니다. 사실 &lt;strong&gt;대부분의 지오메트리에 대해서는 그냥 아무 생각없이 0으로 설정하여 사용&lt;/strong&gt;해도 괜찮습니다. Copy Number에 관심을 가져야 하는 경우는 여러가지 있지만, 이 시리즈에서는 &lt;strong&gt;스코어링 관점&lt;/strong&gt;에서만 간단하게 설명을 하도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 어떤 지오메트리의 흡수선량을 계산하고자 Geant4 시뮬레이션을 돌린다고 가정해봅시다. 그런데 흡수선량의 평가가 필요한 지오메트리가 여러 개라면 각각의 흡수선량을 따로따로 기록하고 관리해야 할 것입니다. 이 때 &lt;strong&gt;흡수선량이라는 값&lt;/strong&gt;을 따로따로 보관하기 위한 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;사물함 번호&lt;/b&gt;&lt;/font&gt;에 해당하는 것이 바로 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;Copy Number&lt;/b&gt;&lt;/font&gt;입니다. 우선은 이 정도로만 설명해두고, 나중에 스코어링 파트에서 자세히 다루도록 하지요.&lt;/p&gt;
&lt;h3 id=&#34;배치할-때의-주의사항&#34;&gt;배치할 때의 주의사항&lt;/h3&gt;
&lt;p&gt;지오메트리를 배치할 때 반드시 지켜야하는 주의사항이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Daughter Volume은 반드시 Mother Volume 내에 포함되는 형태여야 하며, Mother Volume 밖까지 빠져나와서 미포함된 영역이 있어서는 안됨&lt;/li&gt;
&lt;li&gt;동일한 Mother Volume을 가지는 지오메트리끼리 서로 겹쳐지는 영역이 있어서는 안됨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;간단히 말해, 하위계층의 지오메트리는 상위계층인 Mother Volume 내에 쏙 들어가야하고, 같은 계층의 지오메트리끼리는 겹치지 않아야 한다는 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;다만 지오메트리의 면, 선, 점끼리만 맞닿는 것은 괜찮습니다&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;physical-volume의-종류&#34;&gt;Physical Volume의 종류&lt;/h2&gt;
&lt;p&gt;Geant4에서는 지오메트리를 배치하는 여러가지 방법을 제공합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;G4PVPlacement&lt;/p&gt;
&lt;p&gt;한 번에 하나의 지오메트리를 배치하는 방법입니다. 가장 간단하고 자주 사용되는 방법입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G4PVReplica&lt;/p&gt;
&lt;p&gt;동일한 지오메트리를 반복적으로 놓아야 할 때 사용하기 좋은 클래스입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G4PVParameterised&lt;/p&gt;
&lt;p&gt;유사한 지오메트리를 반복적으로 놓아야 할 때 사용하기 좋은 클래스입니다. Copy Number를 일종의 매개변수로 사용하여, 각 지오메트리의 위치, Solid, 매질 등 여러 조건을 바꾸며 배치할 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G4PVDivision&lt;/p&gt;
&lt;p&gt;어떤 지오메트리를 축방향(X, Y, Z, 직경, 중심각)에 따라 절단한 지오메트리를 놓아야 할 때 사용하기 좋은 클래스입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 외에도 몇 종류 더 있으며, Geant4에서 제공하고 있는 &lt;a href=&#34;https://geant4.kek.jp/Reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Doxygen&lt;/a&gt;에서 G4VPhysicalVolume 클래스의 레퍼런스 페이지(&lt;a href=&#34;https://geant4.kek.jp/Reference/10.07.p01/classG4VPhysicalVolume.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10.7.p01 버전&lt;/a&gt;)에 들어가면 상속받은 클래스 목록(&lt;em&gt;Inheritance diagram for G4VPhysicalVolume&lt;/em&gt;) 부분을 통해 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 시리즈에서는 G4PVPlacement 클래스 한 가지만 설명할 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;g4pvplacement&#34;&gt;G4PVPlacement&lt;/h2&gt;
&lt;p&gt;G4PVPlacement 클래스는 Logical Volume 한 개를 배치하는 데에 사용하는 클래스입니다. 생성자는 총 4가지 입니다만, 먼저 두 가지만 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;생성자&#34;&gt;생성자&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4PVPlacement (G4RotationMatrix *pRot, 
               const G4ThreeVector &amp;amp;tlate, 
               G4LogicalVolume *pCurrentLogical, 
               const G4String &amp;amp;pName, 
               G4LogicalVolume *pMotherLogical, 
               G4bool pMany, 
               G4int pCopyNo, 
               G4bool pSurfChk=false);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pRot: G4RotationMatrix 객체의 포인터. 지오메트리를 배치할 때 회전에 대한 정보를 입력하는 데에 사용&lt;/li&gt;
&lt;li&gt;tlate: G4ThreeVector 객체. 지오메트리의 위치에 대한 정보를 입력하는 데에 사용&lt;/li&gt;
&lt;li&gt;pCurrentLogical: G4LogicalVolume 객체의 포인터. 앞서 정의한 Logical Volume을 넣음&lt;/li&gt;
&lt;li&gt;pName: Physical Volume의 이름. 자유롭게 적으면 됨. 다만, 다른 Physical Volume과 겹치지 않게끔 고유의 이름을 권장. Solid 및 Logical Volume의 이름과는 동일해도 상관없음&lt;/li&gt;
&lt;li&gt;pMotherLogical: G4LogicalVolume 객체의 포인터. 이 지오메트리의 Mother Volume이 될 지오메트리의 Logical Volume을 넣음&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pMany: &lt;strong&gt;무조건 false로 쓰면 되는 인자&lt;/strong&gt;. Geant4에서 아직 구현되지 않은 기능임. 어떤 값을 넣어도 기능하지 않지만, 대부분의 예제 코드에서는 false로 입력하는 편&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;pCopyNo: Physical Volume의 Copy Number. &lt;strong&gt;정수값&lt;/strong&gt;으로 입력하며, 별다른 목적이 없을 경우 대개 &lt;strong&gt;0&lt;/strong&gt;을 부여하는 편&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pSurfChk: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 지오메트리 간 겹침 검사를 수행할 지의 여부를 설정하는 데에 사용. 기본 값은 false&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4PVPlacement (const G4Transform3D &amp;amp;Transform3D, 
               G4LogicalVolume *pCurrentLogical, 
               const G4String &amp;amp;pName, 
               G4LogicalVolume *pMotherLogical, 
               G4bool pMany, 
               G4int pCopyNo, 
               G4bool pSurfChk=false);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Transform3D: G4Transform3D 객체. 지오메트리를 배치할 때 평행이동 및 회전에 대한 정보를 입력하는 데에 사용&lt;/li&gt;
&lt;li&gt;pCurrentLogical: G4LogicalVolume 객체의 포인터. 앞서 정의한 Logical Volume을 넣음&lt;/li&gt;
&lt;li&gt;pName: Physical Volume의 이름. 자유롭게 적으면 됨. 다만, 다른 Physical Volume과 겹치지 않게끔 고유의 이름을 권장. Solid 및 Logical Volume의 이름과는 동일해도 상관없음&lt;/li&gt;
&lt;li&gt;pMotherLogical: G4LogicalVolume 객체의 포인터. 이 지오메트리의 Mother Volume이 될 지오메트리의 Logical Volume을 넣음&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pMany: &lt;strong&gt;무조건 false로 쓰면 되는 인자&lt;/strong&gt;. Geant4에서 아직 구현되지 않은 기능임. 어떤 값을 넣어도 기능하지 않지만, 대부분의 예제 코드에서는 false로 입력하는 편&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;pCopyNo: Physical Volume의 Copy Number. &lt;strong&gt;정수값&lt;/strong&gt;으로 입력하며, 별다른 목적이 없을 경우 대개 &lt;strong&gt;0&lt;/strong&gt;을 부여하는 편&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pSurfChk: &lt;strong&gt;입력하지 않아도 되는 인자&lt;/strong&gt;. 지오메트리 간 겹침 검사를 수행할 지의 여부를 설정하는 데에 사용. 기본 값은 false&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 두 가지 생성자는 거의 비슷하지만, &lt;strong&gt;위치/회전에 대한 정보를 입력하는 방식&lt;/strong&gt;이 다릅니다. 첫번째 생성자는 회전행렬(G4RotationMatrix)과 위치에 해당하는 벡터(G4ThreeVector)를 입력하고, 두번째 생성자는 회전과 평행이동을 묶어서 다루는 선형변환(G4Transform3D)을 입력하게 되어있지요.&lt;/p&gt;
&lt;p&gt;중요한 점은 입력하는 방식만 다른 것이 아니라, &lt;font color=&#39;red&#39;&gt;&lt;b&gt;배치하는 방식 자체가 근본적으로 다르다&lt;/b&gt;&lt;/font&gt;는 데에 있습니다. 첫번째 생성자는 Mother Volume의 좌표계를 회전시킨 뒤 평행이동을 하는 방식이고, 두번째 생성자는 배치되는 자기자신의 좌표계가 평행이동한 뒤 그자리에서 회전하는 방식입니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;말로 설명하면 어려우니, 실제 예시를 통해 살펴봅시다.&lt;/p&gt;
&lt;p&gt;회전을 명확하게 확인하기 위해, 기존의 정육면체에서 X축 방향의 길이를 두배로 늘렸습니다. 10 cm × 5 cm × 5 cm의 G4Box형태 Solid를 정의하고, 물을 채워 Logical Volume까지 정의한 상태입니다. 코드로는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomXSize = 10. * cm;
auto phantomYSize = 5. * cm;
auto phantomZSize = 5. * cm;
auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, 
                            .5 * phantomXSize, 
                            .5 * phantomYSize, 
                            .5 * phantomZSize);
auto phantomLog = new G4LogicalVolume(phantomSol, matWater, &amp;quot;phantom&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 이 지오메트리를 &lt;b&gt;(0, 0, 20 cm) 위치&lt;/b&gt;에 &lt;b&gt;Y축을 기준으로 30° 회전&lt;/b&gt;시켜서 배치해보도록 하겠습니다.&lt;/p&gt;
&lt;h4 id=&#34;g4rotationmatrix--g4threevector-이용&#34;&gt;G4RotationMatrix &amp;amp; G4ThreeVector 이용&lt;/h4&gt;
&lt;p&gt;첫번째 생성자를 이용하여 다음과 같이 코드를 작성해 보았습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomPos = G4ThreeVector(0., 0., 20. * cm);
auto phantomRot = new G4RotationMatrix(G4ThreeVector(0., 1., 0.), 30. * deg);
new G4PVPlacement(phantomRot, 
                  phantomPos, 
                  phantomLog, 
                  &amp;quot;phantom&amp;quot;, 
                  worldLog, 
                  false, 
                  0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;결과는 다음과 같습니다. +Y축 방향에서 아래로 내려다본 그림입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_motherframe&#34; srcset=&#34;
               /g4-noqasked-006-phyvol/02_motherframe_hu438d70de5f09db55f67c04adb1db4d90_84171_70c7b3dff3f737753ca3d77e08a9bdd2.png 400w,
               /g4-noqasked-006-phyvol/02_motherframe_hu438d70de5f09db55f67c04adb1db4d90_84171_87533f8dcb795f7f3cdba7c413dbae23.png 760w,
               /g4-noqasked-006-phyvol/02_motherframe_hu438d70de5f09db55f67c04adb1db4d90_84171_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-006-phyvol/02_motherframe_hu438d70de5f09db55f67c04adb1db4d90_84171_70c7b3dff3f737753ca3d77e08a9bdd2.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이상한 점을 찾으셨나요? 축을 기준으로 회전을 시키면 축을 위에서 봤을때 &lt;strong&gt;반시계방향으로 회전&lt;/strong&gt;해야 하는데 반대방향인 시계방향으로 돌아갔습니다. 이유는 이 생성자가 &lt;b&gt;Mother Volume의 좌표계를 회전시킨 뒤 평행이동을 하는 방식으로 지오메트리를 배치&lt;/b&gt;하기 때문입니다. 다음의 그림을 보면 좀 더 이해가 쉬울 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_motherframe&#34;
           src=&#34;https://evandde.github.io/g4-noqasked-006-phyvol/03_motherframe.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;보시다시피 좌표계 자체가 먼저 돌아간 뒤, 돌아간 좌표계에 따라 지오메트리를 이동시킵니다. (맨 마지막에 시계방향으로 돌린 것은 그냥 보기 편하려고 원래 방향으로 되돌린 것일 뿐이므로 배치와는 무관합니다) 이런 방식을 취하기 때문에, 일반적으로 생각한 방식과 반대로 회전하는 것처럼 보이게 됩니다.&lt;/p&gt;
&lt;h4 id=&#34;g4transform3d-이용&#34;&gt;G4Transform3D 이용&lt;/h4&gt;
&lt;p&gt;이번에는 두번째 생성자를 이용하여 다음과 같이 코드를 작성해 보았습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    G4Transform3D의 생성자에는 &lt;b&gt;G4RotationMatrix의 객체 자체&lt;/b&gt;가 인자로 사용됩니다. G4RotationMatrix 객체의 &lt;b&gt;포인터가 아님에 주의&lt;/b&gt;하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomPos = G4ThreeVector(0., 0., 20. * cm);
auto phantomRot = G4RotationMatrix(G4ThreeVector(0., 1., 0.), 30. * deg);
new G4PVPlacement(G4Transform3D(phantomRot, phantomPos), 
                  phantomLog, 
                  &amp;quot;phantom&amp;quot;,
                  worldLog, 
                  false, 
                  0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;결과는 다음과 같습니다. 마찬가지로 +Y축 방향에서 아래로 내려다본 그림입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_g4transform3d&#34; srcset=&#34;
               /g4-noqasked-006-phyvol/04_g4transform3d_hu452bc544f39a1c7016f783d13823acfb_70521_ea0a9ab3fec3beb7648a762357c07955.png 400w,
               /g4-noqasked-006-phyvol/04_g4transform3d_hu452bc544f39a1c7016f783d13823acfb_70521_2eff08c9b2ec899bdcb686eb3191e7e2.png 760w,
               /g4-noqasked-006-phyvol/04_g4transform3d_hu452bc544f39a1c7016f783d13823acfb_70521_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-006-phyvol/04_g4transform3d_hu452bc544f39a1c7016f783d13823acfb_70521_ea0a9ab3fec3beb7648a762357c07955.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이번에는 일반적인 예상과 같이 &lt;strong&gt;반시계방향으로 회전한 상태로 배치&lt;/strong&gt;가 되었습니다. 이 생성자는 자기 자신인 phantom 지오메트리의 좌표계가 평행이동한 뒤 그 자리에서 회전하는 방식을 취합니다.&lt;/p&gt;
&lt;p&gt;그래서 G4Transform3D 부분을 &amp;ldquo;&lt;b&gt;평행이동변환을 한 뒤, 이어서 회전변환을 가한다&lt;/b&gt;&amp;ldquo;의 의미를 갖게끔 다음과 같이 입력하여도 동일한 결과를 보여줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomPos = G4ThreeVector(0., 0., 20. * cm);
auto phantomRot = G4RotationMatrix(G4ThreeVector(0., 1., 0.), 30. * deg);
new G4PVPlacement(G4Translate3D(phantomPos) * G4Rotate3D(phantomRot), 
                  phantomLog, 
                  &amp;quot;phantom&amp;quot;, 
                  worldLog, 
                  false, 
                  0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;혹은 &amp;ldquo;&lt;b&gt;Z축으로 30 cm 평행이동을 한 뒤, Y축을 기준으로 30° 회전&lt;/b&gt;&amp;ldquo;의 의미를 갖도록 다음과 같이 입력해도 같은 결과가 나오지요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;new G4PVPlacement(G4TranslateZ3D(20. * cm) * G4RotateY3D(30. * deg), 
                  phantomLog, 
                  &amp;quot;phantom&amp;quot;, 
                  worldLog, 
                  false, 
                  0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;배치되는 방식을 그림을 통해 살펴보면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_g4transform3d&#34;
           src=&#34;https://evandde.github.io/g4-noqasked-006-phyvol/05_g4transform3d.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;회전-후-그-방향으로-이동&#34;&gt;회전 후 그 방향으로 이동&lt;/h4&gt;
&lt;p&gt;경우에 따라서는, 회전시킨 뒤 그 방향으로 이동하도록 하고 싶을 때도 있을 것입니다. 예를 들어 원의 둘레를 따라 구조물을 빙 둘러 배치해야 하는 경우처럼 말이죠. 이런 경우에는 &lt;b&gt;두 번째 생성자를 이용하되, 평행이동과 회전의 순서를 바꾸면 됩니다&lt;/b&gt;. 말 그대로 &amp;ldquo;&lt;b&gt;회전 후 이동&lt;/b&gt;&amp;ldquo;이니까 말이죠. 다만, G4Transform3D 클래스 객체를 생성할 때 평행이동과 회전을 함께 입력하는 식으로 만들게 되면 &amp;ldquo;이동 후 회전&amp;quot;의 방식이 되어버리므로, &lt;b&gt;회전 후 이동을 직접 명시하는 방식으로 입력&lt;/b&gt;해야 합니다.&lt;/p&gt;
&lt;p&gt;코드로 작성하면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto phantomPos = G4ThreeVector(0., 0., 20. * cm);
auto phantomRot = G4RotationMatrix(G4ThreeVector(0., 1., 0.), 30. * deg);
new G4PVPlacement(G4Rotate3D(phantomRot) * G4Translate3D(phantomPos),
                  phantomLog, 
                  &amp;quot;phantom&amp;quot;, 
                  worldLog, 
                  false, 
                  0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;혹은 다음과 같이 입력해도 동일한 결과가 나올 것입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;new G4PVPlacement(G4RotateY3D(30. * deg) * G4TranslateZ3D(20. * cm), 
                  phantomLog, 
                  &amp;quot;phantom&amp;quot;, 
                  worldLog, 
                  false, 
                  0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;결과는 다음과 같습니다. 마찬가지로 +Y축 방향에서 아래로 내려다본 그림입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_rotatethentranslate&#34; srcset=&#34;
               /g4-noqasked-006-phyvol/06_rotatethentranslate_hudd47941cd2f8da2ceeb04a99c4a5c176_71908_70f360d6904202d0f1d32713689de54d.png 400w,
               /g4-noqasked-006-phyvol/06_rotatethentranslate_hudd47941cd2f8da2ceeb04a99c4a5c176_71908_4fab6942fbcadfafb31eb3251403e1d9.png 760w,
               /g4-noqasked-006-phyvol/06_rotatethentranslate_hudd47941cd2f8da2ceeb04a99c4a5c176_71908_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-006-phyvol/06_rotatethentranslate_hudd47941cd2f8da2ceeb04a99c4a5c176_71908_70f360d6904202d0f1d32713689de54d.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;위치 자체가 (0, 0, 20 cm)가 아니라 좀 더 왼쪽 위로 이동한 것을 볼 수 있습니다. 이렇게 배치할때 배치되는 과정을 그림으로 보면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_rotatethentranslate&#34;
           src=&#34;https://evandde.github.io/g4-noqasked-006-phyvol/07_rotatethentranslate.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 세 가지 배치방식만 잘 이해하시면 원하는 방식으로 회전/이동 시키는 데에 무리없이 적용할 수 있을 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;나머지-두-가지-생성자&#34;&gt;나머지 두 가지 생성자&lt;/h3&gt;
&lt;p&gt;아까 생성자가 총 4개라고 했었으니, 이제 남은 2개도 살펴봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4PVPlacement (G4RotationMatrix *pRot, 
               const G4ThreeVector &amp;amp;tlate,
               const G4String &amp;amp;pName, 
               G4LogicalVolume *pLogical, 
               G4VPhysicalVolume *pMother, 
               G4bool pMany,
               G4int pCopyNo, 
               G4bool pSurfChk=false);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4PVPlacement (const G4Transform3D &amp;amp;Transform3D, 
               const G4String &amp;amp;pName, 
               G4LogicalVolume *pLogical, 
               G4VPhysicalVolume *pMother, 
               G4bool pMany,
               G4int pCopyNo, 
               G4bool pSurfChk=false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;앞서 설명했던 두 가지 생성자와 거의 동일하고, 다음의 두 부분만 차이가 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인자의 입력 순서가 약간 바뀜(Physical Volume의 이름)&lt;/li&gt;
&lt;li&gt;Mother Volume을 입력할 때 Mother Volume의 Logical Volume 대신 Physical Volume으로 입력&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기능은 앞서 설명했던 두 가지 생성자와 &lt;strong&gt;완전히 동일&lt;/strong&gt;합니다. 그래서 이 둘은 거의 사용할 일이 없습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이번 글에서는 회전과 이동을 통해 원하는 위치에 원하는 각도로 지오메트리를 배치하는 법을 알아보았습니다. 이로써 여러분은 Geant4 시뮬레이션을 돌리는 데에 필수요소 중 하나인 &lt;strong&gt;지오메트리를 정의하는 법&lt;/strong&gt;을 다 배우셨습니다.&lt;/p&gt;
&lt;p&gt;다음 글부터는 선원항을 정의하는 법에 대해 알아보도록 하겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 7. Tracking Verbose</title>
      <link>https://evandde.github.io/g4-noqasked-007-trkvb/</link>
      <pubDate>Fri, 18 Jun 2021 10:00:26 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-007-trkvb/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 일곱번째. 시뮬레이션에서 입자가 발생되어 수송되는 과정을 직접 눈으로 보기 위해, Tracking Verbose를 다루는 법을 알아봅니다.&lt;/p&gt;
&lt;p&gt;선원항을 정의하고 나면 시뮬레이션 상에서 실제로 내가 정의한대로 초기 입자가 발생되고 있는지 확인을 할 필요가 있을 것입니다. 그래서 선원항을 정의하는 방법을 배우기 전에, Tracking Verbose를 먼저 다루게 되었습니다.&lt;/p&gt;
&lt;p&gt;관련된 Geant4의 용어부터 간단하게 설명한 뒤, Tracking Verbose의 모습을 살펴보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;event--run&#34;&gt;Event &amp;amp; Run&lt;/h2&gt;
&lt;h3 id=&#34;event&#34;&gt;Event&lt;/h3&gt;
&lt;p&gt;입자 수송해석을 위한 몬테칼로 시뮬레이션이라 하면 일반적으로 &lt;strong&gt;방사선원이나 발생장치로부터 입자가 발생되는 시점부터 그 입자로 인해 야기된 여러 반응들을 모니터링하는 일련의 과정&lt;/strong&gt;을 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;반복적으로 시행&lt;/b&gt;&lt;/font&gt;하는 것을 의미하지요.&lt;/p&gt;
&lt;p&gt;이렇게 반복적으로 시행되는 &lt;strong&gt;일련의 과정 1회&lt;/strong&gt;를 Geant4에서는 &lt;strong&gt;Event&lt;/strong&gt;라고 합니다. 다시 말해 &lt;strong&gt;Event&lt;/strong&gt;란, 초기 입자(Primary particle)가 발생하여 이로부터 파생되는 이차 입자들(Secondary particles)까지의 수송 과정을 의미하는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;run&#34;&gt;Run&lt;/h3&gt;
&lt;p&gt;몬테칼로 시뮬레이션에서 &amp;ldquo;&lt;strong&gt;시뮬레이션을 한 회 수행한다&lt;/strong&gt;&amp;ldquo;는 표현은 일반적으로 &lt;strong&gt;한 세트의 반복시행작업을 전부 끝냈음&lt;/strong&gt;을 의미할 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4에서는 &lt;strong&gt;시뮬레이션 한 회&lt;/strong&gt;를 &lt;strong&gt;Run&lt;/strong&gt;이라고 합니다. 즉, 여러 개의 Event를 반복하는 싸이클을 한데 묶어 Run이라고 부르는 것이지요.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tracking&#34;&gt;Tracking&lt;/h2&gt;
&lt;p&gt;Geant4의 가장 핵심적인 기능은 &lt;strong&gt;입자의 수송을 모사하는 것&lt;/strong&gt;입니다. Geant4가 &lt;strong&gt;입자를 수송하면서 그 입자의 상태를 추적하는 것&lt;/strong&gt;을 &lt;strong&gt;Tracking&lt;/strong&gt;이라고 합니다.&lt;/p&gt;
&lt;p&gt;다만 Geant4는 입자의 수송을 &amp;ldquo;&lt;strong&gt;모사&lt;/strong&gt;&amp;ldquo;하는 프로그램이기 때문에, 실제 세상에서 입자가 거동하는 것과는 다소 차이가 있습니다. 대표적으로 다음 두 가지 관점에서의 차이를 살펴봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;동시성&lt;/p&gt;
&lt;p&gt;실제 세상에서는 여러 입자가 동시에 움직이고 있지만, Geant4는 기본적으로 한 번에 하나의 입자의 움직임만 계산합니다.&lt;/p&gt;
&lt;p&gt;예를 들어 감마선이 Compton 산란을 일으켜 전자를 생성한 경우를 생각해봅시다.&lt;/p&gt;
&lt;p&gt;실제 세상에서는 감마선과 전자가 동시에 이동하겠지요.&lt;/p&gt;
&lt;p&gt;하지만 Geant4에서는 일단 감마선을 수송하다가 Compton 산란이 일어나서 전자가 생성돼도 &amp;ldquo;전자가 이 위치에서 생성되었다&amp;quot;는 기록만 남겨둔 채 감마선을 계속 수송합니다. 그러다가 언젠가 그 감마선이 광전흡수나 쌍생성 반응 등으로 완전히 사라진 후에야 비로소 아까 기록해둔 전자의 생성 위치에서부터 전자의 수송을 시작합니다.&lt;/p&gt;
&lt;p&gt;즉, &lt;strong&gt;실제 세상&lt;/strong&gt;에서 &lt;strong&gt;동시&lt;/strong&gt;에 일어나는 일을, &lt;strong&gt;Geant4&lt;/strong&gt;에서는 한 번에 한 입자씩 &lt;strong&gt;순차적으로 나누어 모사&lt;/strong&gt;하는 것입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연속성&lt;/p&gt;
&lt;p&gt;실제 세상에서 입자는 연속적인 궤적을 따라 움직입니다. (0, 0, 0)에 있던 입자가 (1, 0, 0) 위치로 순간이동 하듯 움직이는 것이 아니죠. (양자역학적 관점에서의 이산성은 논외로 하겠습니다)&lt;/p&gt;
&lt;p&gt;그러나 Geant4는 입자를 수송할 때 그 &lt;strong&gt;연속적인 궤적을 지속적으로 추적하는 것이 불가능&lt;/strong&gt;합니다. 마치 &lt;strong&gt;이동하는 물체를 연속 사진 촬영&lt;/strong&gt;을 하듯, &lt;strong&gt;약간의 간격을 두고 추적&lt;/strong&gt;할 수밖에 없지요. 그래서 Geant4가 기록해둔 입자의 궤적은 마치 순간이동을 한 것처럼 띄엄띄엄 기록되어 있습니다.&lt;/p&gt;
&lt;p&gt;물론, 기록한 두 지점 사이에서 변화한 물리량은 여러가지 물리학적 이론과 계산식을 바탕으로, 실제 세상의 입자가 거동한 것과 최대한 유사하게끔 모사하긴 합니다. 다만, 기록하는 방식 자체가 연속적일 수는 없다는 것이지요.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 두 가지 차이를 인지하고, Track과 Step의 개념을 간단하게만 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;track&#34;&gt;Track&lt;/h3&gt;
&lt;p&gt;Track이란 Geant4가 수송하고 있는 입자의 &amp;ldquo;&lt;strong&gt;현재 상태&lt;/strong&gt;&amp;ldquo;를 의미합니다.&lt;/p&gt;
&lt;p&gt;Geant4는 한 번에 하나의 입자만 수송한다고 하였으므로, 현재 수송 중인 어떠한 입자가 있을 것입니다. 그리고, 그 입자의 궤적을 볼 때 마치 사진을 촬영하듯 불연속적인 한 순간만 포착하여 본다고 했지요. 이렇게 포착한 &lt;strong&gt;한 순간의 스냅샷&lt;/strong&gt;이 &lt;strong&gt;그 입자의 Track&lt;/strong&gt;입니다. 스냅샷을 찍을 때마다 입자의 궤적 상에 불연속적인 &lt;strong&gt;분절점&lt;/strong&gt;이 생기고, 이 지점에서의 정보를 Track이 가지고 있게 되는 것이지요.&lt;/p&gt;
&lt;p&gt;이런 분절점을 자주 만들어 기록하면 실제 궤적과 상당히 유사한 정보를 얻을 수는 있겠지만, 그만큼 연산량이 늘어 계산 시간이 길어지게 될 것입니다. 반대로, 분절점을 너무 가끔 만들게 되면 계산 시간은 단축되겠지만 실제 궤적과의 차이가 심해져 계산의 정확도가 떨어지게 되겠지요.&lt;/p&gt;
&lt;p&gt;Geant4 분절점이 만들어지는 조건은 기본적으로 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;지오메트리의 경계에 도달한 경우&lt;/li&gt;
&lt;li&gt;물리적 반응이 일어난 경우&lt;/li&gt;
&lt;li&gt;사용자가 지정한 분절점 간의 최대 길이에 도달한 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Track은 &lt;strong&gt;입자가 수송되더라도 변하지 않는 정적 정보&lt;/strong&gt;와 &lt;strong&gt;입자가 수송됨에 따라 변화하는 동적 정보&lt;/strong&gt;를 모두 담고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정적 정보
&lt;ul&gt;
&lt;li&gt;입자의 종류&lt;/li&gt;
&lt;li&gt;입자의 질량&lt;/li&gt;
&lt;li&gt;입자의 전하량&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;동적 정보
&lt;ul&gt;
&lt;li&gt;입자의 위치&lt;/li&gt;
&lt;li&gt;입자의 에너지&lt;/li&gt;
&lt;li&gt;입자의 운동방향&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step&#34;&gt;Step&lt;/h3&gt;
&lt;p&gt;Step이란 &amp;ldquo;&lt;strong&gt;이전 Track과 현재 Track의 차이&lt;/strong&gt;&amp;ldquo;를 의미합니다.&lt;/p&gt;
&lt;p&gt;Track은 불연속적인 순간들이라고 하였습니다. 그렇다면 현재의 Track(방금 찍은 사진)과 바로 이전의 Track(직전에 찍은 사진) 간에 차이를 확인할 수 있을 것입니다. 이 &lt;strong&gt;현재와 직전의 차이&lt;/strong&gt;를 Geant4에서는 &lt;strong&gt;Step&lt;/strong&gt;이라는 개념으로 다루고 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;verbose&#34;&gt;Verbose&lt;/h2&gt;
&lt;p&gt;Geant4에서 Verbose란 일종의 &lt;strong&gt;로그(log)&lt;/strong&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;라고 생각하시면 됩니다. 시뮬레이션이 어떤 조건 하에서 어떠한 설정값을 바탕으로 어떻게 진행되는지를 &lt;strong&gt;출력&lt;/strong&gt;하는 것이죠.&lt;/p&gt;
&lt;p&gt;이 시리즈에서는 Geant4에서 제공하는 여러가지 Verbose들 중 Tracking Verbose 만을 다룰 예정입니다. 이 외에도 Geant4는 Run, Event, Physics 등 다양한 항목에 대해 정보를 출력하는 기능을 제공하고 있으니 필요에 따라 찾아보시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tracking-verbose&#34;&gt;Tracking Verbose&lt;/h2&gt;
&lt;p&gt;이 시리즈에서는 Tracking Verbose 한 가지만 알아볼 것입니다. Tracking Verbose는 말그대로 Geant4가 Tracking을 하며 얻은 정보를 출력(Verbose)하는 기능입니다. 출력 수준은 &lt;strong&gt;-1부터 5까지 조정&lt;/strong&gt;할 수 있으며, 수준이 높아질수록 더욱 상세한 정보가 출력됩니다.&lt;/p&gt;
&lt;h3 id=&#34;tracking-verbose-설정하기&#34;&gt;Tracking Verbose 설정하기&lt;/h3&gt;
&lt;p&gt;일단 Tracking Verbose를 설정하는 방법부터 알아봅시다.&lt;/p&gt;
&lt;p&gt;이전에 Geant4 프로그램을 실행하는 방식 중 &lt;a href=&#34;https://evandde.github.io/g4-noqasked-001-clonetest/#%ec%8b%a4%ed%96%89ui%eb%aa%a8%eb%93%9c-%ec%8b%a4%ed%96%89-batch%eb%aa%a8%eb%93%9c-%ec%8b%a4%ed%96%89&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;batch모드 실행&lt;/a&gt;에 대해 언급한 적이 있습니다. &lt;code&gt;./g4_minimal run.mac&lt;/code&gt;과 같이 입력하여 실행하면, &lt;code&gt;run.mac&lt;/code&gt;파일의 내용이 일괄적으로 입력되어 시뮬레이션이 수행된다고 했었지요. 여기서 &lt;code&gt;run.mac&lt;/code&gt;과 같은 파일을 &lt;b&gt;매크로파일(macro file)&lt;/b&gt;이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;Tracking Verbose는 이러한 매크로파일을 이용하면 쉽게 설정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;현재 &lt;code&gt;run.mac&lt;/code&gt; 파일을 열어보면 다음과 같이 작성되어 있을 것입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Can be run in batch, without graphic
# or interactively: Idle&amp;gt; /control/execute run.mac

# Verbose
/control/verbose 2
/run/verbose 2
/event/verbose 0
/tracking/verbose 1

/run/beamOn 100
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    매크로파일에서 &lt;code&gt;#&lt;/code&gt; 이후는 주석으로 처리됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;주석 이후 위에서부터 4개 줄에 전부 verbose가 적혀있지요. 이 모두가 각 사항에 대한 출력 수준을 설정하는 부분입니다. 여기서는 &lt;code&gt;/tracking/verbose 1&lt;/code&gt;이라고 적힌 부분만 조절하며 살펴볼 것입니다. 적혀있는 숫자 &lt;code&gt;1&lt;/code&gt;은 &lt;strong&gt;출력 수준을 1로 설정&lt;/strong&gt;하겠다는 뜻입니다.&lt;/p&gt;
&lt;p&gt;마지막 줄에는 &lt;code&gt;/run/beamOn 100&lt;/code&gt;이라는 내용이 있는데요, 이 줄이 바로 Run을 실행하는 명령줄입니다. &lt;code&gt;/run/beamOn&lt;/code&gt;은 Geant4 프로그램이 입자 수송을 시작하도록 하는 명령어로, 뒤에 정수 인자를 받아 이 &lt;strong&gt;정수 값만큼 Event를 반복시행&lt;/strong&gt;하여 &lt;strong&gt;하나의 Run을 구성&lt;/strong&gt;하도록 합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    필요에 따라, &lt;code&gt;/run/beamOn&lt;/code&gt; 줄을 여러 회 입력하여 여러 개의 Run이 순차적으로 실행되게끔 할 수도 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;tracking-verbose-확인하기&#34;&gt;Tracking Verbose 확인하기&lt;/h3&gt;
&lt;p&gt;지금 상태인 출력 수준 1에서 출력이 제대로 되는지부터 확인해보겠습니다. &lt;code&gt;build&lt;/code&gt; 디렉토리에서 다음 명령어를 입력하여 Geant4 프로그램을 batch 모드로 실행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./g4_minimal run.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_batchrun&#34; srcset=&#34;
               /g4-noqasked-007-trkvb/01_batchrun_huc08464d3f5749a22c8510b2f1d8128b6_65792_89fd67b33e54a53b041a1cd8b34d5ae5.png 400w,
               /g4-noqasked-007-trkvb/01_batchrun_huc08464d3f5749a22c8510b2f1d8128b6_65792_ed09ae09db91898b21530b6a5d004529.png 760w,
               /g4-noqasked-007-trkvb/01_batchrun_huc08464d3f5749a22c8510b2f1d8128b6_65792_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-007-trkvb/01_batchrun_huc08464d3f5749a22c8510b2f1d8128b6_65792_89fd67b33e54a53b041a1cd8b34d5ae5.png&#34;
               width=&#34;760&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;많은 양의 글이 화면에 주르륵 뜨며 스크롤이 내려간 뒤, 다음 그림과 같이 Good Bye :)를 띄우며 끝나는 것을 확인할 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_batchrunend&#34; srcset=&#34;
               /g4-noqasked-007-trkvb/02_batchrunend_hu49339d8422ae1c6f14d1f0751b5cd448_74215_0d1d9efba2a3417b48143ece51b1486a.png 400w,
               /g4-noqasked-007-trkvb/02_batchrunend_hu49339d8422ae1c6f14d1f0751b5cd448_74215_5bfe2bf47194776a24ce55ab87d3f7d3.png 760w,
               /g4-noqasked-007-trkvb/02_batchrunend_hu49339d8422ae1c6f14d1f0751b5cd448_74215_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-007-trkvb/02_batchrunend_hu49339d8422ae1c6f14d1f0751b5cd448_74215_0d1d9efba2a3417b48143ece51b1486a.png&#34;
               width=&#34;760&#34;
               height=&#34;399&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기까지는 이미 이전 글에서 해봤던 작업이지요.&lt;/p&gt;
&lt;p&gt;지금 우리가 관심있는 부분은, 위에 스쳐지나간 &lt;strong&gt;많은 양의 글&lt;/strong&gt;입니다. 스크롤을 올리다보면 다음 그림과 같은 부분이 보일 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_trackingverbose&#34; srcset=&#34;
               /g4-noqasked-007-trkvb/03_trackingverbose_hu30349d2646ba777bd862190f29ee5ef2_39791_98f217962839ec3b722913781bf4b35c.png 400w,
               /g4-noqasked-007-trkvb/03_trackingverbose_hu30349d2646ba777bd862190f29ee5ef2_39791_f8050bdc195a790e4b4f807b93cb714a.png 760w,
               /g4-noqasked-007-trkvb/03_trackingverbose_hu30349d2646ba777bd862190f29ee5ef2_39791_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-007-trkvb/03_trackingverbose_hu30349d2646ba777bd862190f29ee5ef2_39791_98f217962839ec3b722913781bf4b35c.png&#34;
               width=&#34;760&#34;
               height=&#34;399&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이것이 Tracking Verbose 입니다. 보시다시피 출력되는 양이 너무 많기도 하고, 터미널 창에서 보기에는 불편함이 많지요. 그래서 일반적으로는 리눅스 표준 입출력을 redirection하는 명령어인 &lt;code&gt;&amp;gt;&lt;/code&gt; 기능을 사용하여 파일에 출력시켜 내용을 확인합니다. 이 명령어를 간단히 설명하면, &amp;ldquo;&lt;strong&gt;화면에 출력될 내용을 파일에 적고싶을 때 사용하는 명령어&lt;/strong&gt;&amp;ldquo;라고 보시면 됩니다.&lt;/p&gt;
&lt;p&gt;다음과 같이 입력해보겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./g4_minimal run.mac &amp;gt; vb.out
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_vbout&#34; srcset=&#34;
               /g4-noqasked-007-trkvb/04_vbout_hu3adb6c5584afbdff09ffc90d59ec6b07_4524_5042dc896246c24f3b1b10a35badd324.png 400w,
               /g4-noqasked-007-trkvb/04_vbout_hu3adb6c5584afbdff09ffc90d59ec6b07_4524_c317a56eba9b98c1efdfb9798396a7b3.png 760w,
               /g4-noqasked-007-trkvb/04_vbout_hu3adb6c5584afbdff09ffc90d59ec6b07_4524_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-007-trkvb/04_vbout_hu3adb6c5584afbdff09ffc90d59ec6b07_4524_5042dc896246c24f3b1b10a35badd324.png&#34;
               width=&#34;654&#34;
               height=&#34;38&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이러면 &lt;b&gt;build 디렉토리 안&lt;/b&gt;에 &lt;b&gt;vb.out이라는 새로운 파일이 생성&lt;/b&gt;되고, 화면에는 아무것도 출력되지 않을 것입니다. 화면에 출력될 내용을 vb.out에 담은 것이지요. 이런 방법을 통해 Verbose 수준을 올려서 &lt;strong&gt;출력되는 내용을 저장한 뒤에 확인&lt;/strong&gt;할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이제 Tracking Verbose의 출력 수준을 바꾸어가며, 실제로 어떤 내용이 출력되는지 차근차근 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;출력-수준--1-0&#34;&gt;출력 수준 -1, 0&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;-1: Silent&lt;/p&gt;
&lt;p&gt;0: Silent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;단계 -1과 0은 아무런 정보도 출력하지 않는 단계입니다.&lt;/p&gt;
&lt;h3 id=&#34;출력-수준-1&#34;&gt;출력 수준 1&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1: Minimum information of each Step&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tracking Verbose를 1로 설정하였을 때의 출력은 다음 그림과 같습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여러분이 앞서 배치한 지오메트리에 따라, Tracking Verbose의 내용이 약간 다를수도 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_vb1&#34; srcset=&#34;
               /g4-noqasked-007-trkvb/05_vb1_hue0951ee785ef860f82684cfb95d129ab_55161_162488fb707a31dedcf805b19bd5cedd.png 400w,
               /g4-noqasked-007-trkvb/05_vb1_hue0951ee785ef860f82684cfb95d129ab_55161_7dbf82f38a67872e1d4cf5d3eaf75457.png 760w,
               /g4-noqasked-007-trkvb/05_vb1_hue0951ee785ef860f82684cfb95d129ab_55161_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-007-trkvb/05_vb1_hue0951ee785ef860f82684cfb95d129ab_55161_162488fb707a31dedcf805b19bd5cedd.png&#34;
               width=&#34;760&#34;
               height=&#34;411&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 그림에서 보이는 것이 입자를 Tracking한 기록 3개 분량입니다. 빨간색 테두리로 표시한만큼이 입자 하나의 생성부터 소멸까지의 기록입니다.&lt;/p&gt;
&lt;p&gt;각 기록마다 맨 위에는 Tracking한 &lt;strong&gt;입자의 정보&lt;/strong&gt;가 간단하게 적혀 있습니다. (주황색 테두리로 표시한 부분)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Particle: &lt;strong&gt;Tracking을 수행한 이 입자의 이름&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Track ID: &lt;strong&gt;Tracking을 수행한 이 입자의 고유 번호&lt;/strong&gt;. 해당 입자가 &lt;strong&gt;초기입자라면 1번&lt;/strong&gt;이 부여됨. 이후에는 반응을 통해 이차입자가 생성될 때마다 순차적으로 정수 값이 부여되는 식임.&lt;/li&gt;
&lt;li&gt;Parent ID: &lt;strong&gt;이 입자를 생성시킨 입자의 Track ID&lt;/strong&gt;. 해당 입자가 &lt;strong&gt;초기입자라면 0번&lt;/strong&gt;이 부여됨.(초기입자를 생성시킨 입자라는 개념은 존재하지 않음)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;여기서 입자의 이름으로 나타난 &lt;b&gt;geantino&lt;/b&gt;는 실제 존재하는 입자가 아니라 Geant4가 만들어낸 &lt;strong&gt;가상의 입자&lt;/strong&gt;입니다. 이 입자는 어떠한 반응도 일으키지 않는 입자로, 여러가지 테스트를 목적으로 종종 사용됩니다.&lt;/p&gt;
&lt;p&gt;자세한 사항은 선원항 정의를 다루게 될 다음 글에서 좀 더 살펴보도록 하겠습니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;초록색 테두리로 표시한 입자의 정보 아래 부분에는 해당 입자를 &lt;strong&gt;Tracking을 하며 획득한 다양한 정보가 순차적으로 기록&lt;/strong&gt;됩니다. 표 형태로 기록되어 있으며, &lt;strong&gt;Track이라는 스냅샷을 새로이 찍을 때마다 가로줄이 한 줄씩 추가&lt;/strong&gt;되는 식입니다. 각 열이 의미하는 바를 간단하게 설명하자면 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step #: 해당 Step의 ID. Track의 값이 변경되어 Step이 바뀔 때마다 순차적으로 정수 값이 부여되는 식&lt;/li&gt;
&lt;li&gt;X(mm), Y(mm), Z(mm): 해당 Track 시점에서의 입자의 위치&lt;/li&gt;
&lt;li&gt;KinE(MeV): 해당 Track 시점에서의 입자의 운동에너지&lt;/li&gt;
&lt;li&gt;dE(MeV): 해당 Step에서 입자의 운동에너지 변화량&lt;/li&gt;
&lt;li&gt;StepLeng: 해당 Step에서 입자가 이동한 경로의 길이. 단위는 mm. &lt;b&gt;위치의 차이는 직선거리로 측정되는 반면, StepLeng은 계산식을 통해 추산한 실제 입자의 이동경로의 길이라는 점에 주의&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;TrackLeng: 해당 입자가 생성된 최초 위치로부터 현재 Track 시점까지 이동한 경로의 길이. 단위는 mm. StepLeng과 마찬가지로, 직선거리가 아닌 실제 입자의 이동경로의 길이임&lt;/li&gt;
&lt;li&gt;NextVolume: 해당 Track 시점 직후에 입자가 지나가게 될 지오메트리의 Physical Volume의 이름&lt;/li&gt;
&lt;li&gt;ProcName: 해당 분절점이 생성된 원인이 되는 반응의 이름&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;출력-수준-2&#34;&gt;출력 수준 2&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;2: Addition to Level=1, info of secondary particles.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tracking Verbose를 2로 설정하면, 1일 때의 출력에 추가적으로 이차입자의 정보가 표시됩니다.&lt;/p&gt;
&lt;p&gt;현재 초기입자가 geantino라서 아무런 반응이 일어나지 않아 차이를 확인할 수 없을 것입니다.&lt;/p&gt;
&lt;p&gt;예시를 보여드리기 위해 제가 임의로 gamma를 수송할 때의 결과를 가져와 보았습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_vb2&#34; srcset=&#34;
               /g4-noqasked-007-trkvb/06_vb2_hu7833e2b777444a3cdb3cfc3d62278add_27763_090c0c4123be6ecdc5e2c9b23e464b71.png 400w,
               /g4-noqasked-007-trkvb/06_vb2_hu7833e2b777444a3cdb3cfc3d62278add_27763_47e845c2bec2bc5c79a9351cd6c574ac.png 760w,
               /g4-noqasked-007-trkvb/06_vb2_hu7833e2b777444a3cdb3cfc3d62278add_27763_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-007-trkvb/06_vb2_hu7833e2b777444a3cdb3cfc3d62278add_27763_090c0c4123be6ecdc5e2c9b23e464b71.png&#34;
               width=&#34;760&#34;
               height=&#34;202&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;출력 수준이 2가 되면 이차입자가 생성된 분절점에서, 그 이차입자에 대한 정보를 추가적으로 출력해 줍니다.&lt;/p&gt;
&lt;p&gt;앞서 말한 바와 같이, Geant4는 한 번에 한 입자만 수송하므로, 생성된 이차입자는 이처럼 기록만 해두고, 원래 수송하던 입자를 마저 수송하게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;출력-수준-3-4-5&#34;&gt;출력 수준 3, 4, 5&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;3: Addition to Level=1, pre/postStepoint information after all AlongStep/PostStep process executions.&lt;/p&gt;
&lt;p&gt;4: Addition to Level=3, pre/postStepoint information at each AlongStepPostStep process execuation.&lt;/p&gt;
&lt;p&gt;5 : Addition to Level=4, proposed Step length information from each AlongStepPostStep process.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;수준 3일 때의 출력은 다음 그림과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_vb3&#34; srcset=&#34;
               /g4-noqasked-007-trkvb/07_vb3_huf54de9fc2d2acda1437a8e24e9c3594e_118645_38002bc4ef871200c08e712da95aaebb.png 400w,
               /g4-noqasked-007-trkvb/07_vb3_huf54de9fc2d2acda1437a8e24e9c3594e_118645_368d31128ba139585d75c8c8c8c143f6.png 760w,
               /g4-noqasked-007-trkvb/07_vb3_huf54de9fc2d2acda1437a8e24e9c3594e_118645_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-007-trkvb/07_vb3_huf54de9fc2d2acda1437a8e24e9c3594e_118645_38002bc4ef871200c08e712da95aaebb.png&#34;
               width=&#34;393&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;지금 보시는 이만큼이 &lt;strong&gt;분절점 한 개&lt;/strong&gt; 입니다. 입자 한 개 분량이 아닙니다. 엄청나게 길죠.&lt;/p&gt;
&lt;p&gt;여기부터는 Geant4에 어느정도 익숙해지시고 난 뒤에 공부하셔도 충분할 것이라 생각합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;Tracking Verbose는 Geant4 시뮬레이션 코드를 작성함에 있어 반드시 익숙해져야 하는 기능입니다. 현재 시뮬레이션이 계획한대로 진행되고 있는지 디버깅 목적으로 활용할 수 있는 아주 유용한 도구이기 때문입니다.&lt;/p&gt;
&lt;p&gt;자주 사용되는 수준은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: 검토를 다 마치고 실제 시뮬레이션을 수행할 때 아무런 출력이 필요 없는 경우 설정&lt;/li&gt;
&lt;li&gt;1: 시뮬레이션 코드 작성 단계에서 검토용으로 활용. 경우에 따라 2단계를 사용하는 때도 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다음 글에서는 선원항을 정의해서 어떤 입자가 어떻게 수송되는지 직접 살펴보도록 하겠습니다.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;시간의 흐름에 따라 작업, 성능, 컴퓨터/네트워크 사용 등 일련의 작업 흐름을 기록해 둔 것&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 8. 선원항 정의하기</title>
      <link>https://evandde.github.io/g4-noqasked-008-prigen/</link>
      <pubDate>Sun, 20 Jun 2021 21:56:43 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-008-prigen/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 여덟번째. Event의 시작에 해당하는 선원항을 정의하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;코드-작성-위치&#34;&gt;코드 작성 위치&lt;/h2&gt;
&lt;p&gt;지오메트리를 정의할 때와 마찬가지로, Geant4 코드 작성 시 초기 입자에 대한 내용을 적는 곳도 정해져 있습니다.&lt;/p&gt;
&lt;p&gt;G4VUserPrimaryGeneratorAction 클래스를 상속받아 만드는 UserClass에 적어야 하며, 이 중에서도 void GeneratePrimaries(G4Event*) 함수가 매 Event마다 초기 입자를 발생시키는 역할을 담당합니다.&lt;/p&gt;
&lt;p&gt;제가 제공해드린 템플릿 코드의 &lt;strong&gt;src 디렉토리&lt;/strong&gt; 내부에 &lt;b&gt;PrimaryGeneratorAction.cc&lt;/b&gt;라는 파일이 있을 것입니다. 이 파일을 열면 다음과 같은 코드가 나옵니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_prigen&#34; srcset=&#34;
               /g4-noqasked-008-prigen/01_prigen_hu89531972ca7191c618249de582806470_59719_a01ed8d64ce24b9950ef18807c29c6ba.png 400w,
               /g4-noqasked-008-prigen/01_prigen_hu89531972ca7191c618249de582806470_59719_cc61a88b0145898e3d56fd6c0407394b.png 760w,
               /g4-noqasked-008-prigen/01_prigen_hu89531972ca7191c618249de582806470_59719_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/01_prigen_hu89531972ca7191c618249de582806470_59719_a01ed8d64ce24b9950ef18807c29c6ba.png&#34;
               width=&#34;760&#34;
               height=&#34;502&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 16번째 줄부터 나오는 &lt;b&gt;void PrimaryGeneratorAction::GeneratePrimaries(G4Event *anEvent)&lt;/b&gt; 함수 안에 초기 입자에 대한 내용을 적으면 됩니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;엄밀히 말하면, Event마다 바뀌는 설정값은 이 함수 안에 적고, 바뀌지 않는 설정값은 생성자에 적는 것이 연산효율측면에서 이득이 있습니다.&lt;/p&gt;
&lt;p&gt;다만, 이 시리즈에서는 설명과 이해의 용이성을 위해 그냥 GeneratePrimaries 함수 안에 모두 작성하도록 하겠습니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;GeneratePrimaries 함수 안에는 다음과 같은 줄이 이미 작성되어 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;fPrimary-&amp;gt;GeneratePrimaryVertex(anEvent);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 fPrimary 변수는 &lt;strong&gt;초기 입자에 대한 설정을 담당&lt;/strong&gt;하는 클래스인 &lt;strong&gt;G4ParticleGun&lt;/strong&gt; 클래스 객체의 포인터입니다.&lt;/p&gt;
&lt;p&gt;이 클래스는 &lt;strong&gt;GeneratePrimaryVertex라는 함수&lt;/strong&gt;를 갖고 있습니다. 이 함수는 &amp;ldquo;&lt;strong&gt;초기 입자를 발생시켜서 Event를 한 회 수행하라&lt;/strong&gt;&amp;ldquo;는 기능을 가진 함수입니다. 즉 위의 코드 한 줄에 의해 &lt;strong&gt;초기 입자가 발생&lt;/strong&gt;되는 것이지요.&lt;/p&gt;
&lt;p&gt;우리가 할 일은, &amp;ldquo;&lt;b&gt;초기 입자를 발생시키기 &lt;font color=&#39;red&#39;&gt;전&lt;/font&gt;에 초기 입자의 특성을 설정&lt;/b&gt;&amp;ldquo;하는 것입니다. 그래서, 우리가 쓸 내용은 전부 &lt;code&gt;fPrimary-&amp;gt;GeneratePrimaryVertex(anEvent);&lt;/code&gt; 줄보다 &lt;font color=&#39;red&#39;&gt;&lt;b&gt;위쪽에 위치&lt;/b&gt;&lt;/font&gt;해야 합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;g4particlegun&#34;&gt;G4ParticleGun&lt;/h2&gt;
&lt;p&gt;fPrimary 변수는 G4ParticleGun 클래스 객체의 포인터라고 하였습니다. 이 클래스에서 초기 입자의 특성을 설정하기 위해 제공하는 함수 중 대표적으로 몇 가지를 알아봅시다.&lt;/p&gt;
&lt;h3 id=&#34;입자의-종류&#34;&gt;입자의 종류&lt;/h3&gt;
&lt;p&gt;입자의 종류를 설정하기 위한 함수로, SetParticleDefinition이라는 함수를 제공합니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetParticleDefinition(G4ParticleDefinition* aParticleDefinition);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;G4ParticleDefinition이라는 클래스가 생소하실텐데요, Geant4에서 입자에 대한 정의를 담당하는 클래스라고만 해두고 넘어가겠습니다.&lt;/p&gt;
&lt;p&gt;Geant4가 기본적으로 지원하는 입자의 모든 종류는 &lt;a href=&#34;https://geant4.kek.jp/Reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Doxygen&lt;/a&gt;에서 G4ParticleDefinition 클래스의 레퍼런스 페이지(&lt;a href=&#34;https://geant4.kek.jp/Reference/10.07.p01/classG4ParticleDefinition.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10.7.p01 버전&lt;/a&gt;)에 들어가면 상속받은 클래스 목록(&lt;em&gt;Inheritance diagram for G4VSolid&lt;/em&gt;)에서 확인할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    모든 입자를 초기 입자로 사용할 수 있는 것은 아닙니다. 일부 입자는 초기 입자로 설정하는 것이 불가능한 경우도 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;사실, Geant4 프로그램에서 사용 가능한 입자는 그 프로그램에서 어떤 PhysicsLists를 사용하느냐에 따라 좌우됩니다. 하지만 이 시리즈에서는 PhysicsLists를 아예 다루지 않을 예정이므로, 그냥 넘어가도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;참고로 &lt;code&gt;g4_minimal&lt;/code&gt; 템플릿 코드는 QBBC 물리모델을 사용하고 있습니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;여기서는 대표적으로 몇 가지 입자만 언급하도록 하겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Geantino, Charged Geantino&lt;/p&gt;
&lt;p&gt;각각 G4Geantino 클래스, G4ChargedGeantino 클래스를 통해 이용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;Geantino란 Geant4에서 정의한 가상의 입자로, 질량/스핀/parity가 0이며 어떠한 반응도 일으키지 않는 중성 입자입니다.&lt;/p&gt;
&lt;p&gt;Charged Geantino는 Geantino와 기본적인 특성은 동일하나, 전하만 +1인 입자입니다.&lt;/p&gt;
&lt;p&gt;이 두 가지 입자는 시뮬레이션의 검증단계에서 주로 활용됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gamma&lt;/p&gt;
&lt;p&gt;G4Gamma 클래스를 통해 이용할 수 있습니다. 일반적으로 알려진 광자(Photon)에 해당합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Electron, Positron&lt;/p&gt;
&lt;p&gt;각각 G4Electron 클래스, G4Positron 클래스를 통해 이용할 수 있습니다. 일반적으로 알려진 전자(Electron)와 양전자(Positron)에 해당합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proton&lt;/p&gt;
&lt;p&gt;G4Proton 클래스를 통해 이용 가능합니다. 일반적으로 알려진 양성자(Proton)에 해당합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neutron&lt;/p&gt;
&lt;p&gt;G4Neutron 클래스를 통해 이용 가능합니다. 일반적으로 알려진 중성자(Neutron)에 해당합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Muon, Antimuon&lt;/p&gt;
&lt;p&gt;각각 G4MuonMinus 클래스, G4MuonPlus 클래스를 통해 이용 가능합니다. 일반적으로 알려진 뮤온(Muon)과 반뮤온(Antimuon)에 해당합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;모든 입자 클래스들은 &lt;strong&gt;각 입자의 ParticleDefinition 클래스 객체의 포인터를 반환하는 static 함수&lt;/strong&gt;인 &lt;b&gt;Definition() 함수를 제공&lt;/b&gt;합니다. 즉, 어느 입자를 사용하든 &lt;code&gt;클래스명::Definition()&lt;/code&gt;이라고 입력하여 그 입자의 ParticleDefinition을 가져올 수 있습니다. 예를 들어 G4Gamma 클래스라면, &lt;code&gt;G4Gamma::Definition()&lt;/code&gt;과 같이 말이죠.&lt;/p&gt;
&lt;p&gt;여러가지 입자를 알아보았으니, 이들을 초기 입자로 설정하는 방법을 살펴봅시다. 다음의 두 단계를 거치면 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;해당 입자의 클래스 헤더를 포함시킴&lt;/li&gt;
&lt;li&gt;SetParticleDefinition 함수를 이용하여 해당 입자를 초기 입자로 설정&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;예를 들어 Gamma를 초기 입자로 설정하고 싶다면, 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;quot;G4Gamma.hh&amp;quot; // Include header for G4Gamma class
// ...    
void PrimaryGeneratorAction::GeneratePrimaries(G4Event *anEvent)
{
    fPrimary-&amp;gt;SetParticleDefinition(G4Gamma::Definition()); // Set primary as gamma    

    fPrimary-&amp;gt;GeneratePrimaryVertex(anEvent);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실제 코드는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_setparticledefinition&#34; srcset=&#34;
               /g4-noqasked-008-prigen/02_setparticledefinition_hu0f59cf3940c1654cbfe8203e02958934_18352_32d167492c24a95a6988e59e6df349a6.png 400w,
               /g4-noqasked-008-prigen/02_setparticledefinition_hu0f59cf3940c1654cbfe8203e02958934_18352_3e132e414c0571d63c8b21583388fed6.png 760w,
               /g4-noqasked-008-prigen/02_setparticledefinition_hu0f59cf3940c1654cbfe8203e02958934_18352_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/02_setparticledefinition_hu0f59cf3940c1654cbfe8203e02958934_18352_32d167492c24a95a6988e59e6df349a6.png&#34;
               width=&#34;575&#34;
               height=&#34;486&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이렇게 변경한 뒤, Tracking Verbose를 1레벨로 하여 출력해보면 다음과 같이 초기 입자가 바뀐 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_setparticledefinitionrslt&#34; srcset=&#34;
               /g4-noqasked-008-prigen/03_setparticledefinitionrslt_hu488620115a5d4793e904e992734ddaec_15184_17a904d86ad3619546894a5dbf3cba5b.png 400w,
               /g4-noqasked-008-prigen/03_setparticledefinitionrslt_hu488620115a5d4793e904e992734ddaec_15184_e7708c1df2f45f8c1e84b7afc5eb8a4f.png 760w,
               /g4-noqasked-008-prigen/03_setparticledefinitionrslt_hu488620115a5d4793e904e992734ddaec_15184_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/03_setparticledefinitionrslt_hu488620115a5d4793e904e992734ddaec_15184_17a904d86ad3619546894a5dbf3cba5b.png&#34;
               width=&#34;760&#34;
               height=&#34;133&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;입자의-운동에너지&#34;&gt;입자의 운동에너지&lt;/h3&gt;
&lt;p&gt;입자의 운동에너지를 설정하기 위한 함수로, SetParticleEnergy라는 함수를 제공합니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetParticleEnergy(G4double aKineticEnergy);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;입력 인자는 간단하게 G4double형입니다. 다만, 에너지에 대한 &lt;strong&gt;단위를 입력&lt;/strong&gt;할 필요가 있으므로, &lt;strong&gt;G4SystemOfUnits 헤더를 포함&lt;/strong&gt;시켜줘야 한다는 점에 주의하세요.&lt;/p&gt;
&lt;p&gt;예를 들어 초기 입자의 운동에너지를 0.662 MeV로 설정하고 싶다면, 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;G4SystemOfUnits.hh&amp;quot; // Include header for unit system
// ...    
void PrimaryGeneratorAction::GeneratePrimaries(G4Event *anEvent)
{
    // ...
    fPrimary-&amp;gt;SetParticleEnergy(0.662 * MeV);

    fPrimary-&amp;gt;GeneratePrimaryVertex(anEvent);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실제 코드는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_setparticleenergy&#34; srcset=&#34;
               /g4-noqasked-008-prigen/04_setparticleenergy_hu723eecd2d086adadc0bdf7dcd8a42271_21073_72d3cc1c6e76a903441ff7078da8534a.png 400w,
               /g4-noqasked-008-prigen/04_setparticleenergy_hu723eecd2d086adadc0bdf7dcd8a42271_21073_9a40539c79b2b87f91f63d4f3a6bc1fc.png 760w,
               /g4-noqasked-008-prigen/04_setparticleenergy_hu723eecd2d086adadc0bdf7dcd8a42271_21073_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/04_setparticleenergy_hu723eecd2d086adadc0bdf7dcd8a42271_21073_72d3cc1c6e76a903441ff7078da8534a.png&#34;
               width=&#34;573&#34;
               height=&#34;535&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이렇게 변경한 뒤, Tracking Verbose를 1레벨로 하여 출력해보면 다음과 같이 초기 입자의 운동에너지가 바뀐 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_setparticleenergyrslt&#34; srcset=&#34;
               /g4-noqasked-008-prigen/05_setparticleenergyrslt_hu6fb20b56156bc46b506c039095da0715_12796_a2c6ab58f653520a67bedb24f6b8f3fd.png 400w,
               /g4-noqasked-008-prigen/05_setparticleenergyrslt_hu6fb20b56156bc46b506c039095da0715_12796_790d84a259618e38d34a8be38090c265.png 760w,
               /g4-noqasked-008-prigen/05_setparticleenergyrslt_hu6fb20b56156bc46b506c039095da0715_12796_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/05_setparticleenergyrslt_hu6fb20b56156bc46b506c039095da0715_12796_a2c6ab58f653520a67bedb24f6b8f3fd.png&#34;
               width=&#34;760&#34;
               height=&#34;129&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;입자의-위치&#34;&gt;입자의 위치&lt;/h3&gt;
&lt;p&gt;입자의 위치를 설정하기 위한 함수로, SetParticlePosition이라는 함수를 제공합니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetParticlePosition(G4ThreeVector aPosition);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;입력 인자는 G4ThreeVector 객체입니다.&lt;/p&gt;
&lt;p&gt;예를 들어 초기 입자의 위치를 (0, 0, 0)으로 설정하고 싶다면, 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// ...    
void PrimaryGeneratorAction::GeneratePrimaries(G4Event *anEvent)
{
    // ...
    fPrimary-&amp;gt;SetParticlePosition(G4ThreeVector());

    fPrimary-&amp;gt;GeneratePrimaryVertex(anEvent);

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실제 코드는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_setparticleposition&#34; srcset=&#34;
               /g4-noqasked-008-prigen/06_setparticleposition_hudfe6f7b07e77ba648b03613a17774985_22737_ce85bc46944af188b7a916de325e4b9e.png 400w,
               /g4-noqasked-008-prigen/06_setparticleposition_hudfe6f7b07e77ba648b03613a17774985_22737_417820f43384d8ef4d11154e1b97679d.png 760w,
               /g4-noqasked-008-prigen/06_setparticleposition_hudfe6f7b07e77ba648b03613a17774985_22737_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/06_setparticleposition_hudfe6f7b07e77ba648b03613a17774985_22737_ce85bc46944af188b7a916de325e4b9e.png&#34;
               width=&#34;571&#34;
               height=&#34;553&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 부분은 원래 기본 값이 (0, 0, 0)이어서 바뀌지 않습니다만, 원하는 값으로 변경해보시면 Tracking Verbose에서 차이를 확인할 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_setparticlepositionrslt&#34; srcset=&#34;
               /g4-noqasked-008-prigen/07_setparticlepositionrslt_hu57c934c62944e5929fbbcaf7ecb2400e_9995_38dde91404d968c12583d9d4fd2fd0a6.png 400w,
               /g4-noqasked-008-prigen/07_setparticlepositionrslt_hu57c934c62944e5929fbbcaf7ecb2400e_9995_37483691aa7047e41598af9b054b59fd.png 760w,
               /g4-noqasked-008-prigen/07_setparticlepositionrslt_hu57c934c62944e5929fbbcaf7ecb2400e_9995_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/07_setparticlepositionrslt_hu57c934c62944e5929fbbcaf7ecb2400e_9995_38dde91404d968c12583d9d4fd2fd0a6.png&#34;
               width=&#34;760&#34;
               height=&#34;131&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;입자의-운동방향&#34;&gt;입자의 운동방향&lt;/h3&gt;
&lt;p&gt;입자의 운동방향을 설정하기 위한 함수로, SetParticleMomentumDirection이라는 함수를 제공합니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetParticleMomentumDirection(G4ParticleMomentum aMomDirection);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;입력 인자는 G4ParticleMomentum라고 적혀있습니다만, 이는 사실 &lt;strong&gt;G4ThreeVector의 다른 이름&lt;/strong&gt;일 뿐입니다. 위치 때와 동일하게 G4ThreeVector 객체를 넣으시면 됩니다.&lt;/p&gt;
&lt;p&gt;예를 들어 초기 입자의 운동방향을 +Z축인 (0, 0, 1)으로 설정하고 싶다면, 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// ...    
void PrimaryGeneratorAction::GeneratePrimaries(G4Event *anEvent)
{
    // ...
    fPrimary-&amp;gt;SetParticleMomentumDirection(G4ThreeVector(0., 0., 1.));

    fPrimary-&amp;gt;GeneratePrimaryVertex(anEvent);

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실제 코드는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;08_setparticlemomentumdirection&#34; srcset=&#34;
               /g4-noqasked-008-prigen/08_setparticlemomentumdirection_hu711af9a3c69fa0f79db13905504a5ef3_25334_d3c7202ba3168b69a057053b23ad60d7.png 400w,
               /g4-noqasked-008-prigen/08_setparticlemomentumdirection_hu711af9a3c69fa0f79db13905504a5ef3_25334_4f9e537a4ad072023f1696b548480044.png 760w,
               /g4-noqasked-008-prigen/08_setparticlemomentumdirection_hu711af9a3c69fa0f79db13905504a5ef3_25334_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/08_setparticlemomentumdirection_hu711af9a3c69fa0f79db13905504a5ef3_25334_d3c7202ba3168b69a057053b23ad60d7.png&#34;
               width=&#34;624&#34;
               height=&#34;572&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이렇게 변경한 뒤, Tracking Verbose를 1레벨로 하여 출력해보면 다음과 같이 초기 입자의 진행 방향이 바뀐 것을 확인할 수 있습니다. 제가 보여드리는 예제 코드의 경우 +Z축 방향에 앞서 정의했던 phantom이 있다보니, 감마선이 이 지오메트리와 충돌하여 여러 반응이 일어나는 모습까지 확인이 되네요.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;09_setparticlemomentumdirectionrslt&#34; srcset=&#34;
               /g4-noqasked-008-prigen/09_setparticlemomentumdirectionrslt_hu48327c2aac8118a064012d88cf4859bb_17710_4794c0e4c10aef43da3be01ec950b861.png 400w,
               /g4-noqasked-008-prigen/09_setparticlemomentumdirectionrslt_hu48327c2aac8118a064012d88cf4859bb_17710_862a9523061b48789d80e2e594b22541.png 760w,
               /g4-noqasked-008-prigen/09_setparticlemomentumdirectionrslt_hu48327c2aac8118a064012d88cf4859bb_17710_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/09_setparticlemomentumdirectionrslt_hu48327c2aac8118a064012d88cf4859bb_17710_4794c0e4c10aef43da3be01ec950b861.png&#34;
               width=&#34;760&#34;
               height=&#34;179&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ui로-확인해보기&#34;&gt;UI로 확인해보기&lt;/h2&gt;
&lt;p&gt;지금까지 변경한 내용을 UI로 실행하면 그래픽으로 살펴볼 수도 있습니다. build 디렉토리에서 &lt;code&gt;./g4_minimal&lt;/code&gt;을 입력하여 실행해서 UI창을 띄워봅니다. 다음 그림과 같이 Geometry가 보일 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;10_UI&#34; srcset=&#34;
               /g4-noqasked-008-prigen/10_UI_hub5e4f9dda5c9a6f8d964f69a1fd36abf_73842_076316abb158d7397cdc3766a289694d.png 400w,
               /g4-noqasked-008-prigen/10_UI_hub5e4f9dda5c9a6f8d964f69a1fd36abf_73842_e35f5674f5225dadafb15f58df8dd1fa.png 760w,
               /g4-noqasked-008-prigen/10_UI_hub5e4f9dda5c9a6f8d964f69a1fd36abf_73842_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/10_UI_hub5e4f9dda5c9a6f8d964f69a1fd36abf_73842_076316abb158d7397cdc3766a289694d.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서, 그림 하단에 빨간색으로 표시해 둔 &lt;strong&gt;Session&lt;/strong&gt; 입력창에 &lt;code&gt;/run/beamOn 100&lt;/code&gt;이라고 입력한 뒤 [Enter]를 누르면 UI 상에서 &lt;b&gt;Event 100개 묶음의 Run 한 번을 실행&lt;/b&gt;시킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;11_UIrun&#34; srcset=&#34;
               /g4-noqasked-008-prigen/11_UIrun_hudbcfa44ff639751693ce0a4c74436e4a_100196_43b606df937559c06b35a8a552159ca8.png 400w,
               /g4-noqasked-008-prigen/11_UIrun_hudbcfa44ff639751693ce0a4c74436e4a_100196_c520ed811f275c39ea2b4700ebb54635.png 760w,
               /g4-noqasked-008-prigen/11_UIrun_hudbcfa44ff639751693ce0a4c74436e4a_100196_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/11_UIrun_hudbcfa44ff639751693ce0a4c74436e4a_100196_43b606df937559c06b35a8a552159ca8.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;좀 확대해보시면 다음과 같은 모습을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;12_UIrunzoom&#34; srcset=&#34;
               /g4-noqasked-008-prigen/12_UIrunzoom_hu1009d96c1c1bedee9f979a794bb8fb49_132265_e87d8394edee414b94fdf74853e97057.png 400w,
               /g4-noqasked-008-prigen/12_UIrunzoom_hu1009d96c1c1bedee9f979a794bb8fb49_132265_81bde08eb3fff2fd48a12da5047b4111.png 760w,
               /g4-noqasked-008-prigen/12_UIrunzoom_hu1009d96c1c1bedee9f979a794bb8fb49_132265_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-008-prigen/12_UIrunzoom_hu1009d96c1c1bedee9f979a794bb8fb49_132265_e87d8394edee414b94fdf74853e97057.png&#34;
               width=&#34;760&#34;
               height=&#34;393&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    그래픽에서 보이는 선이나 점의 색상은 &lt;code&gt;vis.mac&lt;/code&gt; 등에서 설정한 값에 따라 달라질 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;기본적으로는 다음과 같이 해석하시면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;노란점: 입자를 수송하던 중, Track이 기록된 분절점의 위치&lt;/li&gt;
&lt;li&gt;초록선: Charge가 중성인 입자의 궤적(이 예시에서는 Gamma 입자에 해당함)&lt;/li&gt;
&lt;li&gt;빨간선: Charge가 음성(-)인 입자의 궤적(이 예시에서는 Electron 입자에 해당함)&lt;/li&gt;
&lt;li&gt;파란선: Charge가 양성(+)인 입자의 궤적(이 예시에서는 나타나지 않음)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이번 글에서는 초기 입자의 정보를 설정하고 확인하는 방법에 대해 살펴보았습니다. 그러나 이런식으로 입력하면, &lt;strong&gt;항상 동일한 조건의 초기 입자만 발생&lt;/strong&gt;될 것입니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 G4RandomTools 헤더를 활용하여, Event 마다 초기 입자의 위치나 방향을 변경하며 발생시키는 방법에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 9. 확률변수 이용하여 선원항 정의하기</title>
      <link>https://evandde.github.io/g4-noqasked-009-randtool/</link>
      <pubDate>Fri, 16 Jul 2021 14:43:20 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-009-randtool/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 아홉번째. 확률변수를 이용하여 Event마다 바뀌는 선원항을 정의하는 방법을 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;등방성-점선원-모사&#34;&gt;등방성 점선원 모사&lt;/h2&gt;
&lt;h3 id=&#34;문제-제기&#34;&gt;문제 제기&lt;/h3&gt;
&lt;p&gt;등방적으로 발생하는 점선원을 생각해봅시다. 일반적으로 다음 그림과 같은 모양이 떠오를 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_isotropic&#34; srcset=&#34;
               /g4-noqasked-009-randtool/01_isotropic_huf6baa88101f874f0c3ede1f096d1d7af_58450_3b814b4b544ccedf3310aca84e937ff9.png 400w,
               /g4-noqasked-009-randtool/01_isotropic_huf6baa88101f874f0c3ede1f096d1d7af_58450_db54ba0ace8e9c842bb631f984d25fe2.png 760w,
               /g4-noqasked-009-randtool/01_isotropic_huf6baa88101f874f0c3ede1f096d1d7af_58450_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-009-randtool/01_isotropic_huf6baa88101f874f0c3ede1f096d1d7af_58450_3b814b4b544ccedf3310aca84e937ff9.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;하지만 앞서 말씀드린 것처럼 Geant4는 한 번에 하나의 입자만을 수송하기 때문에, 실제로는 다음과 같이 매 Event마다 방향이 바뀌는 입자가 순차적으로 나오는 형태일 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_isotropic&#34;
           src=&#34;https://evandde.github.io/g4-noqasked-009-randtool/02_isotropic.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이제 앞서 배운 선원항의 방향 정의 부분을 다시 살펴봅시다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예를 들어 초기 입자의 운동방향을 +Z축인 (0, 0, 1)으로 설정하고 싶다면, 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt; // ...    
 void PrimaryGeneratorAction::GeneratePrimaries(G4Event *anEvent)
 {
     // ...
     fPrimary-&amp;gt;SetParticleMomentumDirection(G4ThreeVector(0., 0., 1.));

     fPrimary-&amp;gt;GeneratePrimaryVertex(anEvent);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;SetParticleMomentumDirection 함수를 통해 방향을 설정하고, 이 때 방향은 &lt;strong&gt;G4ThreeVector 형태로 입력&lt;/strong&gt;을 해주어야 합니다. 우리는 결국 &lt;strong&gt;방향&lt;/strong&gt;을 &lt;strong&gt;명시해서 입력&lt;/strong&gt;해 줘야만 하는데, 이 &lt;strong&gt;방향이 알아서 매 번 바뀌어야 하는 상황&lt;/strong&gt;에 놓였습니다.&lt;/p&gt;
&lt;h3 id=&#34;해결책&#34;&gt;해결책&lt;/h3&gt;
&lt;p&gt;이 문제를 해결하기 위해 다음과 같은 함수를 상상해봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이 함수는 &lt;strong&gt;G4ThreeVector를 반환&lt;/strong&gt;하는데, &lt;strong&gt;함수가 호출될 때마다 반환되는 값이 매번 바뀝니다&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반환되는 G4ThreeVector들을 쭉 모아서 &lt;strong&gt;분포&lt;/strong&gt;를 살펴보니, &lt;b&gt;단위구(Unit sphere) 표면 위의 점이 균일한 확률&lt;/b&gt;로 나옵니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4ThreeVector RandomDirection();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 함수를 어떻게 만들 수 있을 지는 나중에 생각해보기로 하고, 이 함수의 출력값을 먼저 살펴봅시다. 아마도 다음과 같이 나타날 것입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4ThreeVector dir;

dir = RandomDirection(); // dir = G4ThreeVector(-0.157616,-0.293535,-0.942865);
dir = RandomDirection(); // dir = G4ThreeVector(0.185649,-0.743512,0.642437);
dir = RandomDirection(); // dir = G4ThreeVector(0.643525,0.268099,0.716937);
dir = RandomDirection(); // dir = G4ThreeVector(0.636717,-0.421678,0.645584);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;바로 이 RandomDirection() 함수가 바로 우리가 원하던 &lt;strong&gt;방향을 등방적으로 균일하게 매 번 알아서 바꾸어서 제공해주는 함수&lt;/strong&gt;입니다. 이런 함수만 있다면 선원항을 다음과 같이 정의하여 우리의 문제를 해결할 수 있겠군요. 다음과 같이 말입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// ...    
void PrimaryGeneratorAction::GeneratePrimaries(G4Event *anEvent)
{
  // ...
  auto dir = RandomDirection();
  fPrimary-&amp;gt;SetParticleMomentumDirection(dir);

  fPrimary-&amp;gt;GeneratePrimaryVertex(anEvent);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;설명&#34;&gt;설명&lt;/h3&gt;
&lt;p&gt;이처럼 특정한 확률분포(Probability Distribution Function, PDF)를 따라 변하는 수를 확률변수라고 합니다. 그리고 이렇게 확률변수를 생성해내는 행위를 샘플링(sampling)한다고 합니다.&lt;/p&gt;
&lt;p&gt;확률변수에 있어 가장 기본이 되는 것은, 소위 난수(random number)라고 불리는 $ \xi \sim \mathcal{U}(0,1) $입니다. 0~1 범위 내의 실수가 균일하게 샘플링되는 난수 $ \xi $를 반환하는 함수는 대부분의 프로그래밍 언어가 기본으로 제공하고 있습니다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. 이 $ \xi $만 있으면, 이론상 &lt;b&gt;임의의 PDF를 따르는 확률변수를 샘플링하는 함수&lt;/b&gt;를 만들 수 있습니다.&lt;/p&gt;
&lt;p&gt;물론 이 부분은 수학적인 기교가 들어가는 내용이므로 여기서 다루지는 않겠습니다.&lt;/p&gt;
&lt;p&gt;중요한 점은, 이렇게 &lt;strong&gt;확률변수를 샘플링하는 함수&lt;/strong&gt;만 있으면 &lt;strong&gt;매 번 발생 조건이 바뀌는 선원항도 정의할 수 있게 된다&lt;/strong&gt;는 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;g4randomtoolshh&#34;&gt;G4RandomTools.hh&lt;/h2&gt;
&lt;p&gt;Geant4는 &lt;font color=red&gt;&lt;b&gt;G4RandomTools.hh&lt;/b&gt;&lt;/font&gt;라는 헤더를 통해, 자주 사용되는 PDF에 대해 &lt;strong&gt;확률변수를 샘플링하는 다양한 함수를 이미 만들어서 제공&lt;/strong&gt;하고 있습니다. 덕분에 이러한 함수를 굳이 공부하여 만들어 쓸 필요가 없습니다.&lt;/p&gt;
&lt;p&gt;대표적인 함수들을 일부 소개해드리겠습니다. (10.7 버전 기준)&lt;/p&gt;
&lt;h3 id=&#34;g4randomdirection&#34;&gt;G4RandomDirection&lt;/h3&gt;
&lt;p&gt;앞서 설명했던, 등방적으로 방향을 샘플링하는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4ThreeVector G4RandomDirection();
G4ThreeVector G4RandomDirection(G4double cosTheta);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 함수는 입력인자를 아예 입력하지 않고 사용할 수 있습니다. 이 경우 모든 방향($ 4\pi $)에 대해 균일하게 샘플링된 G4ThreeVector를 반환받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은, 입력인자로 임의의 각도 $ \theta $에 대해 $ \mathcal{cos} \theta $ 값에 해당하는 실수(G4double)를 넣을 수도 있습니다. 이 경우에는 $ +z $축을 중심축으로 하고 꼭짓각의 절반이 $ \theta $인 원뿔 형태로 제한된 영역에 대해 균일하게 샘플링된 G4ThreeVector를 반환받을 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;g4lambertianrand&#34;&gt;G4LambertianRand&lt;/h3&gt;
&lt;p&gt;입력된 벡터를 법선벡터로 갖는 평면에 대해 Lambert 코사인 법칙&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;을 따르게끔 방향을 샘플링하는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4ThreeVector G4LambertianRand(const G4ThreeVector&amp;amp; normal);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 함수는 입력인자로 G4ThreeVector 하나를 넣어줘야 합니다. 그러면 그 벡터를 법선벡터(normal vector)로 갖는 평면을 기준으로 하여 Lambert 코사인 법칙을 따르는 방향을 샘플링하여 G4ThreeVector 형태로 반환해 줍니다.&lt;/p&gt;
&lt;h3 id=&#34;g4planevectorrand&#34;&gt;G4PlaneVectorRand&lt;/h3&gt;
&lt;p&gt;입력된 벡터를 법선벡터로 갖는 무한 평면상의 점을 샘플링하는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4ThreeVector G4PlaneVectorRand(const G4ThreeVector&amp;amp; normal);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 함수는 입력인자로 G4ThreeVector 하나를 넣어줘야 합니다. 그러면 그 벡터를 법선벡터(normal vector)로 갖는 무한평면 상의 한 지점을 샘플링하여 G4ThreeVector 형태로 반환받을 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;g4randomradiusinring&#34;&gt;G4RandomRadiusInRing&lt;/h3&gt;
&lt;p&gt;평면 원 혹은 평면 고리에서 균일한 분포의 점을 샘플링 하기 위한 &lt;strong&gt;반경&lt;/strong&gt;의 샘플링을 수행해주는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4double G4RandomRadiusInRing(G4double rmin, G4double rmax);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;원이면 rmin을 0으로, rmax를 반지름으로 주면 됩니다. 고리라면 rmin을 내경으로, rmax를 외경으로 주면 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;g4randompointinellipse&#34;&gt;G4RandomPointInEllipse&lt;/h3&gt;
&lt;p&gt;평면 타원 내에서 균일한 분포의 &lt;strong&gt;2차원 점&lt;/strong&gt;을 샘플링하는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4TwoVector G4RandomPointInEllipse(G4double a, G4double b);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;$ {x^2 \over a^2} +  {y^2 \over b^2} = 1 $의 타원의 방정식을 따르는 평면 타원에 대해 $a$, $b$를 입력인자로 넣으면, 타원 내에서 균일한 분포의 2차원 점을 샘플링하여 반환해줍니다. G4TwoVector는 2차원 벡터를 다루는 클래스로,  G4ThreeVector와 유사하게 사용하면 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;g4randompointonellipse&#34;&gt;G4RandomPointOnEllipse&lt;/h3&gt;
&lt;p&gt;평면 타원의 &lt;strong&gt;원주 위&lt;/strong&gt;에서 균일한 분포의 &lt;strong&gt;2차원 점&lt;/strong&gt;을 샘플링하는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4TwoVector G4RandomPointOnEllipse(G4double a, G4double b);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;$ {x^2 \over a^2} +  {y^2 \over b^2} = 1 $의 타원의 방정식을 따르는 평면 타원에 대해 $a$, $b$를 입력인자로 넣으면, 타원의 원주 위에서 균일한 분포의 2차원 점을 샘플링하여 반환해줍니다. &lt;b&gt;In과 On의 차이에 주의하세요&lt;/b&gt;.&lt;/p&gt;
&lt;h3 id=&#34;g4randompointonellipsoid&#34;&gt;G4RandomPointOnEllipsoid&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;3차원 타원체의 표면 위&lt;/strong&gt;에서 균일한 분포의 &lt;strong&gt;3차원 점&lt;/strong&gt;을 샘플링하는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4ThreeVector G4RandomPointOnEllipsoid(G4double a, G4double b, G4double c);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;$ {x^2 \over a^2} +  {y^2 \over b^2} + {z^2 \over c^2} = 1 $의 타원체의 방정식을 따르는 3차원 타원체에 대해 $a$, $b$, $c$를 입력인자로 넣으면, 타원체의 겉표면 위에서 균일한 분포의 3차원 점을 샘플링하여 반환해줍니다.&lt;/p&gt;
&lt;h3 id=&#34;g4uniformrand&#34;&gt;G4UniformRand&lt;/h3&gt;
&lt;p&gt;$ X \sim \mathcal{U}(0,1) $를 따르는 &lt;strong&gt;실수&lt;/strong&gt;를 샘플링하는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;double G4UniformRand();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;g4randflatshoot&#34;&gt;G4RandFlat::shoot&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;균등분포&lt;/strong&gt;를 따르는 &lt;strong&gt;실수&lt;/strong&gt;를 샘플링하는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;double shoot(double a, double b); // example: G4RandFlat::shoot(a, b)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;$ X \sim \mathcal{U}(a,b) $를 따르는 확률변수 $ X $를 샘플링하는 함수입니다.&lt;/p&gt;
&lt;h3 id=&#34;g4randgaussqshoot&#34;&gt;G4RandGaussQ::shoot&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;정규분포&lt;/strong&gt;를 따르는 &lt;strong&gt;실수&lt;/strong&gt;를 샘플링하는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;double shoot(double mean, double stdDev); // example: G4RandGaussQ::shoot(mean, stdDev)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;평균(mean)이 $\mu$이고, 표준편차(stdDev)가 $\sigma$인 $ X \sim \mathcal{N}(\mu , {\sigma}^2) $를 따르는 확률변수 $ X $를 샘플링하는 함수입니다.&lt;/p&gt;
&lt;h3 id=&#34;g4randexponentialshoot&#34;&gt;G4RandExponential::shoot&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;지수분포&lt;/strong&gt;를 따르는 &lt;strong&gt;실수&lt;/strong&gt;를 샘플링하는 함수입니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;double shoot(double mean); // example: G4RandExponential::shoot(mean)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;평균(mean)이 $\lambda$인 $ X \sim Exp(\lambda) $를 따르는 확률변수 $ X $를 샘플링하는 함수입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;실제-적용---등방성-점선원&#34;&gt;실제 적용 - 등방성 점선원&lt;/h2&gt;
&lt;p&gt;이제 맨처음 고민하였던 등방성 점선원을 모사하는 방법을 모두 알아냈습니다.&lt;/p&gt;
&lt;p&gt;PrimaryGeneratorAction 코드를 다음과 같이 작성하면 등방성 점선원을 모사할 수 있게 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;헤더 &lt;b&gt;G4RandomTools.hh&lt;/b&gt;를 포함&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SetParticleMomentumDirection() 함수의 입력 인자&lt;/strong&gt;로, &lt;strong&gt;G4RandomDirection() 함수의 출력값&lt;/strong&gt;을 대입&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실제 소스코드는 다음과 같이 작성하면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_isotropic_code&#34; srcset=&#34;
               /g4-noqasked-009-randtool/03_isotropic_code_huf9814039e9a694a5d2c0466fbee79250_31171_06f7655ae73400be0b340c2d8c09eaa6.png 400w,
               /g4-noqasked-009-randtool/03_isotropic_code_huf9814039e9a694a5d2c0466fbee79250_31171_73906b086d23b6828dd99db790e906a2.png 760w,
               /g4-noqasked-009-randtool/03_isotropic_code_huf9814039e9a694a5d2c0466fbee79250_31171_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-009-randtool/03_isotropic_code_huf9814039e9a694a5d2c0466fbee79250_31171_06f7655ae73400be0b340c2d8c09eaa6.png&#34;
               width=&#34;650&#34;
               height=&#34;641&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;최종-파일-다운받는-법&#34;&gt;최종 파일 다운받는 법&lt;/h2&gt;
&lt;p&gt;이번 글에서 작성한 코드는 &lt;a href=&#34;https://github.com/evandde/g4_minimal/archive/e9016a9ad32b755390ef66c16bb89557c7cc7119.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;를 통해 다운받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은 git repository를 clone하신 분의 경우에는, example branch의 이전 커밋 중 V2 PriGen이라는 커밋을 참고하셔도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이로써 선원항을 정의하는 방법까지 마쳤습니다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 시뮬레이션을 돌리며 원하는 정보를 획득하는 &lt;strong&gt;스코어링&lt;/strong&gt;에 대해 살펴보도록 하겠습니다.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;사실 컴퓨터는 완전히 무작위적인 난수를 발생시키지는 못해서 의사난수(pseudo random number)를 샘플링하는 함수들을 제공합니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;이상적인 난반사 표면에서 방출되는 선속이 법선벡터로부터 벗어난 각도의 $ \mathcal{cos} $ 값에 비례한다는 법칙. 참고 링크: &lt;a href=&#34;https://en.wikipedia.org/wiki/Lambert%27s_cosine_law&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lambert&amp;rsquo;s cosine law - Wikipedia&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 10. 스코어링 이론</title>
      <link>https://evandde.github.io/g4-noqasked-010-scoringtheory/</link>
      <pubDate>Fri, 30 Jul 2021 16:48:26 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-010-scoringtheory/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 열번째. Geant4 시뮬레이션에서 원하는 물리량을 기록하는 스코어링에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 Geant4에서 스코어링 시스템의 기본적인 동작 이론에 대해 설명할 것입니다. 이를 바탕으로 다음 글에서 이어질 Geant4에서 기본적으로 제공하는 스코어러의 사용에 있어 이해도를 높이는 것이 이번 글의 목적입니다. 더 나아가, 이 개념을 잘 이해하시고 충분한 C++ 언어 지식을 갖추신다면 Geant4에서 기본 제공하는 스코어러를 넘어 여러분만의 스코어러를 직접 구현하여 이용할 수도 있을 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4의-스코어링-용어&#34;&gt;Geant4의 스코어링 용어&lt;/h2&gt;
&lt;p&gt;Geant4는 모든 구조물 내에서 방사선 수송에 필요한 물리량 전반을 다 계산하며 시뮬레이션을 돌립니다. 이 수많은 값들을 우리에게 모조리 알려주는 방식이 이전에 설명한 바 있는 &lt;a href=&#34;https://evandde.github.io/g4-noqasked-007-trkvb/&#34;&gt;verbose&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;하지만 우리는 이 모든 값이 다 필요한 것이 아닙니다. 이 중에 원하는 부분만 추려서 기록하면 좋겠지요. 이러한 작업을 &lt;strong&gt;스코어링&lt;/strong&gt;이라고 합니다. 즉, 스코어링이란 &lt;font color=red&gt;&lt;b&gt;관심 있는 지오메트리 내&lt;/b&gt;&lt;/font&gt;에서 &lt;font color=blue&gt;&lt;b&gt;관심 있는 물리량&lt;/b&gt;&lt;/font&gt;이 &lt;strong&gt;어떠한 값을 가지는지&lt;/strong&gt;를 살펴보는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;관심-있는-지오메트리&#34;&gt;관심 있는 지오메트리&lt;/h3&gt;
&lt;p&gt;사용자가 만든 다양한 지오메트리 중, 스코어링을 수행하고 싶은 &lt;b&gt;&lt;font color=red&gt;관심 있는 지오메트리(들)&lt;/font&gt;&lt;/b&gt;이 있을 것입니다. 이 지오메트리(들)의 &lt;b&gt;&lt;font color=red&gt;Logical Volume&lt;/font&gt;&lt;/b&gt;에 &lt;b&gt;Sensitive Detector를 세팅&lt;/b&gt;해줌으로써, 해당 지오메트리 내에서의 일을 스코어링하도록 프로그램에게 지시할 수 있습니다.&lt;/p&gt;
&lt;p&gt;여기서 &lt;b&gt;Sensitive Detector&lt;/b&gt;, 줄여서 &lt;b&gt;SD&lt;/b&gt;는, &lt;b&gt;&lt;font color=blue&gt;관심 있는 물리량&lt;/font&gt;&lt;/b&gt;을 어떤 조건 하에서 어떻게 가공하여 메모리 공간에 저장할 것인지와 같은 &lt;b&gt;스코어링 방법을 정의하는 클래스&lt;/b&gt;입니다.&lt;/p&gt;
&lt;h3 id=&#34;관심-있는-물리량&#34;&gt;관심 있는 물리량&lt;/h3&gt;
&lt;p&gt;사용자는 &lt;b&gt;&lt;font color=red&gt;해당 지오메트리&lt;/font&gt;&lt;/b&gt;에 &lt;b&gt;&lt;font color=blue&gt;전달된 에너지&lt;/font&gt;&lt;/b&gt;에 관심이 있을 수도 있고, &lt;b&gt;&lt;font color=blue&gt;반응 위치에 관심&lt;/font&gt;&lt;/b&gt;이 있을 수도 있으며, &lt;b&gt;&lt;font color=blue&gt;반응 위치와 해당 위치에 전달된 에너지를 한 세트로 묶어서&lt;/font&gt;&lt;/b&gt; 살펴보고 싶을 수도 있습니다. 이처럼 &lt;strong&gt;관심 있는 물리량&lt;/strong&gt; 혹은 그 &lt;strong&gt;물리량들을 조합한 한 세트&lt;/strong&gt;를 Geant4에서는 &lt;b&gt;&lt;font color=blue&gt;Hit&lt;/font&gt;&lt;/b&gt;이라는 클래스를 통해 관리합니다. 즉, &lt;strong&gt;Hit 하나&lt;/strong&gt;당 &lt;strong&gt;한 세트의 정보&lt;/strong&gt;가 된다고 보시면 됩니다.&lt;/p&gt;
&lt;p&gt;만약 여러 종류의 정보를 따로 관리하고 싶다면, 여러 종류의 Hit을 사용하면 됩니다. 예를 들어, 어떤 조건 하에서는 전달된 에너지만 기록하고 싶고, 또 다른 조건 하에서는 반응 위치만 기록하고 싶다면, &lt;b&gt;전달된 에너지라는 Hit&lt;/b&gt;과 &lt;b&gt;반응 위치라는 Hit&lt;/b&gt;으로 분리하여 두 종류의 Hit을 이용할 수 있습니다. 이는 반응 위치와 그 위치에 전달된 에너지를 한 세트로 묶은 Hit과는 다른 개념인 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4는 &lt;b&gt;같은 종류의 Hit들을 한 데 모아서 저장&lt;/b&gt;하는 &lt;b&gt;HitsCollection&lt;/b&gt; 이라는 클래스도 제공하고 있습니다. 이는 간단히 말해 &lt;b&gt;Hit을 담는 주머니&lt;/b&gt;라고 생각하면 됩니다. 하나의 HitsCollection에는 같은 종류의 Hit들만 들어가기 때문에, 예를 들어 전달된 에너지 Hit은 전달된 에너지 HitsCollection에 담기게 되고, 반응 위치 Hit은 반응 위치 HitsCollection에 담기는 식입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4의-스코어링-개념&#34;&gt;Geant4의 스코어링 개념&lt;/h2&gt;
&lt;h3 id=&#34;기본-원리&#34;&gt;기본 원리&lt;/h3&gt;
&lt;p&gt;스코어링은 기본적으로 &lt;strong&gt;Event 단위&lt;/strong&gt;로 이루어지며, 다음 과정이 매 Event마다 반복됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;입자를 수송하던 중, 입자가 &lt;b&gt;&lt;font color=red&gt;SD가 세팅된 지오메트리&lt;/font&gt;&lt;/b&gt; 내에 들어오는 순간부터, 해당 SD가 일을 하기 시작합니다.&lt;/li&gt;
&lt;li&gt;SD는 구현된 내용에 따라, &lt;b&gt;&lt;font color=blue&gt;매 Step마다 관심 있는 물리량 정보를 수집하여 Hit을 생성&lt;/font&gt;&lt;/b&gt;합니다. 생성된 Hit은 각 종류별로 상응하는 HitsCollection에 저장됩니다.&lt;/li&gt;
&lt;li&gt;Geant4는 매 Event가 끝날 때마다, 해당 Event에서 만들어진 HitsCollection들을 한 데 묶어 &lt;strong&gt;HCofThisEvent&lt;/strong&gt;라는 형태로 제공합니다. 사용자는 이 HCofThisEvent로부터 원하는 종류의 HitsCollection을 가져온 뒤, 그 안에 저장된 Hit들을 확인하고 기록할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그림으로 나타내면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_Scoring&#34; srcset=&#34;
               /g4-noqasked-010-scoringtheory/01_Scoring_hu83e7a473b484a0c712644511b7ab14c4_541136_cd0a9e3028ca4e62f4b8b07c068c3c3a.png 400w,
               /g4-noqasked-010-scoringtheory/01_Scoring_hu83e7a473b484a0c712644511b7ab14c4_541136_2bead1050922f64236121302b6dcc9e8.png 760w,
               /g4-noqasked-010-scoringtheory/01_Scoring_hu83e7a473b484a0c712644511b7ab14c4_541136_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-010-scoringtheory/01_Scoring_hu83e7a473b484a0c712644511b7ab14c4_541136_cd0a9e3028ca4e62f4b8b07c068c3c3a.png&#34;
               width=&#34;760&#34;
               height=&#34;523&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;sensitive-detector-설계방법&#34;&gt;Sensitive Detector 설계방법&lt;/h3&gt;
&lt;p&gt;Sensitive Detector를 설계하는 방법은 크게 다음의 두 가지가 있습니다만, 여기서는 &lt;b&gt;1번 방법&lt;/b&gt;만 다루겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;Multi Functional Detector&lt;/b&gt;에 사용자가 원하는 &lt;b&gt;Primitive Scorer들을 Register&lt;/b&gt;하여 설계&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;G4VSensitiveDetector 클래스를 상속받아 사용자가 직접 Sensitive Detector를 구현. 경우에 따라 Hit과 HitsCollection 수준부터 직접 구현하여 이용하기도 함.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Multi Functional Detector(MFD)는 일종의 틀로 보시면 되고, 이 틀에 실질적인 기능을 가진 Primitive Scorer(PS)를 조립해 넣는 식으로 SD를 구현합니다. 일종의 모듈형 시스템&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;처럼 조립된 전체가 하나의 SD가 되는 방식입니다. Geant4가 제공하는 PS들 중 일부를 소개해 드리겠습니다. (10.7 버전 기준)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4PSCellCharge: 해당 지오메트리 내에 deposit된 charge의 총합을 스코어링&lt;/li&gt;
&lt;li&gt;G4PSCellFlux: 해당 지오메트리 내의 플럭스를 스코어링 (트랙길이 / 부피 방식으로 계산)&lt;/li&gt;
&lt;li&gt;G4PSDoseDeposit: 해당 지오메트리 내에서의 흡수선량(absorbed dose)을 스코어링&lt;/li&gt;
&lt;li&gt;G4PSEnergyDeposit: 해당 지오메트리 내에 deposit된 에너지의 총합을 스코어링&lt;/li&gt;
&lt;li&gt;G4PSNofCollision: 해당 지오메트리에 입사한 입자의 개수를 스코어링&lt;/li&gt;
&lt;li&gt;G4PSPassageCellCurrent&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;: 해당 지오메트리를 지나쳐간(입사 후 빠져나간) track의 수를 스코어링&lt;/li&gt;
&lt;li&gt;G4PSPassageCellFlux: 해당 지오메트리를 지나쳐간(입사 후 빠져나간) track의 플럭스를 스코어링 (트랙길이 / 부피 방식으로 계산)&lt;/li&gt;
&lt;li&gt;G4PSPopulation&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;: 해당 지오메트리에 들어온 입자의 수를 스코어링&lt;/li&gt;
&lt;li&gt;G4PSTermination: 해당 지오메트리 내에서 종료&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;된 track의 수를 스코어링&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 외에도 더 많은 PS가 존재합니다. 그리고 이름 끝에 3D가 붙은 PS도 있는데, 이는 3D가 없는 것과 기능이 동일하며 해당 물리량을 복셀화된 각 볼륨마다 따로 저장하여 3D 분포를 살펴보는 데에 활용 가능합니다. (e.g. G4PSCellCharge3D)&lt;/p&gt;
&lt;p&gt;추가적으로, &lt;strong&gt;필터&lt;/strong&gt;를 활용하면 &lt;strong&gt;특정 조건 하에서만 스코어링&lt;/strong&gt;이 이루어지도록 할 수도 있습니다. 예를 들어, G4PSCellFlux를 사용하는데 여기에 입자 제한 필터로 Gamma만 스코어링하도록 제한하면, 해당 지오메트리 내에서 Gamma 입자의 플럭스만 스코어링할 수 있는 것입니다. 다만, &lt;b&gt;하나의 PS당 하나의 필터만 세팅&lt;/b&gt;할 수 있습니다. 필터의 종류는 다음과 같습니다. (10.7 버전 기준)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4SDChargedFillter: (+) 혹은 (-) 전하를 가진 입자만 스코어링하도록 제한&lt;/li&gt;
&lt;li&gt;G4SDNeutralFilter: 전하가 없는 중성 입자만 스코어링하도록 제한&lt;/li&gt;
&lt;li&gt;G4SDKineticEnergyFilter: 입자의 운동에너지가 일정 범위(하한~상한) 내에 들어오는 경우에만 스코어링하도록 제한&lt;/li&gt;
&lt;li&gt;G4SDParticleFilter: 입자의 이름을 이용하여, 그 입자만 스코어링하도록 제한 (여러 종류의 입자도 가능)&lt;/li&gt;
&lt;li&gt;G4SDParticleWithEnergyFilter: 입자의 이름과 운동에너지 범위를 이용하여, 그 입자의 운동에너지가 일정 범위(하한~상한) 내에 들어오는 경우에만 스코어링하도록 제한 (한 종류의 입자만 가능)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ps-hit-hc에-대한-상세-설명&#34;&gt;PS, Hit, HC에 대한 상세 설명&lt;/h2&gt;
&lt;h3 id=&#34;ps와-hc의-관계&#34;&gt;PS와 HC의 관계&lt;/h3&gt;
&lt;p&gt;결국 Primitive Scorer(PS)가 실질적으로 &lt;b&gt;&lt;font color=blue&gt;물리량(Hit)&lt;/font&gt;&lt;/b&gt;을 검출하는 기능을 가집니다. 그리고 PS가 검출한 물리량(Hit)들은 앞서 설명하였던 &lt;strong&gt;HitsCollection&lt;/strong&gt;에 담기게 될 것입니다.&lt;/p&gt;
&lt;p&gt;이 때, PS마다 스코어링하는 물리량의 종류가 다르므로 &lt;b&gt;&lt;u&gt;PS마다 각각 HitsCollection을 하나씩 담당&lt;/u&gt;&lt;/b&gt;하게 되는 것입니다. 각 PS가 담당하여 맡고 있는 HitsCollection에, 스코어링을 통해 검출해낸 Hit들을 저장하는 방식이 되는 것이지요.&lt;/p&gt;
&lt;h3 id=&#34;hc에-hit을-저장하는-방법&#34;&gt;HC에 Hit을 저장하는 방법&lt;/h3&gt;
&lt;p&gt;Hit은 스코어링 조건에만 부합하는 상황이라면 일단 매 Step마다 생성됩니다. 이렇게 생성되는 수 많은 Hit들은 HitsCollection(HC)에 저장되지요. PS를 이용하는 경우에는 Hit이 HC에 담길 때 &lt;strong&gt;누적&lt;/strong&gt;하는 방식으로 저장됩니다. 예를 들어, G4PSDoseDeposit의 경우에는 스코어링 된 흡수선량을 계속 더해서, 최종적으로 &lt;strong&gt;총 흡수선량의 합&lt;/strong&gt;이라는 하나의 값만 남는 것이죠.&lt;/p&gt;
&lt;h3 id=&#34;여러-지오메트리끼리의-구분&#34;&gt;여러 지오메트리끼리의 구분&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://evandde.github.io/g4-noqasked-002-detcon/#%ec%9d%91%ec%9a%a9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이전 글&lt;/a&gt;에서 Geant4에서는 지오메트리를 Solid, Logical, Physical로 나누어 관리하기 때문에, Logical Volume을 하나만 만들고 이를 공유하여 Physical Volume을 여러 개 둘 수 있다고 하였습니다. 이런 경우, &lt;b&gt;SD는 Logical Volume에 세팅&lt;/b&gt;하므로 &lt;b&gt;여러 개의 지오메트리에 동일한 SD가 세팅&lt;/b&gt; 될 것입니다.&lt;/p&gt;
&lt;p&gt;이처럼 여러 개의 Physical Volume으로 정의된 지오메트리는 실제로도 각각 서로 다른 지오메트리이므로, &lt;b&gt;각자의 스코어링 결과를 구분하여 기록&lt;/b&gt;하고 싶은 경우가 많을 것입니다. 이를 위해 Geant4는 HC에 Hit을 저장할 때 &lt;b&gt;지오메트리 별로 구분하여 누적하는 방식을 채택&lt;/b&gt;하였습니다.&lt;/p&gt;
&lt;p&gt;여기서 각각의 지오메트리를 구분하는 구분자가 바로 &lt;strong&gt;Copy Number&lt;/strong&gt;입니다. 이전에 Physical Volume에 대한 설명을 하던 &lt;a href=&#34;https://evandde.github.io/g4-noqasked-006-phyvol/#copy-number&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 글&lt;/a&gt;에서 Copy Number는 스코어링 결과를 따로따로 보관하기 위한 &lt;strong&gt;사물함 번호&lt;/strong&gt;라는 설명을 했었지요. 즉, G4PSDoseDeposit이 세팅된 Logical Volume을 공유하여 여러 개의 Physical Volume이 배치되었다면, &lt;font color=green&gt;Copy Number가 0번인 Physical Volume&lt;/font&gt;에서 스코어링 된 &lt;font color=green&gt;흡수선량은 0번 사물함에 누적&lt;/font&gt;되고, &lt;font color=violet&gt;Copy Number가 1번인 Physical Volume&lt;/font&gt;에서 스코어링 된 &lt;font color=violet&gt;흡수선량은 1번 사물함에 누적&lt;/font&gt;되는 식입니다. 최종적으로 사용자는 각 Copy Number에 상응하는 사물함에서 누적된 총 합을 확인함으로써 각 지오메트리 별로 구분할 수 있게 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;위 내용을 다이어그램으로 요약해보면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
    subgraph Sensitive Detector
    C &amp;amp; D --&amp;gt; B
    E --- C
    F --- D
    end
B ==&amp;gt; A
A[Logical Volume]
B[Multi Functional Detector]
C[Primitive Scorer 1]
D[Primitive Scorer 2]
E[Filter 1]
F[Filter 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph BT
A --&amp;gt; B
C --&amp;gt; D
B &amp;amp; D --&amp;gt; E === F
A[1번에서 스코어링된 Hit]
B[1번 사물함]
C[2번에서 스코어링된 Hit]
D[2번 사물함]
E[HitsCollection]
F[Primitive Scorer]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Geant4에서의 스코어링에 대한 큰 개념은 이것으로 끝입니다. 새로운 용어와 개념이 너무 많아, 처음 보면 어려울 수 있습니다. 맨 마지막에 보여드린 다이어그램만 대강 이해하셔도 괜찮습니다. 일단 사용하다보면 익숙해지기 마련이니까요.&lt;/p&gt;
&lt;p&gt;다음 글에서는 이 이론을 바탕으로 스코어링을 직접 구현해보도록 하겠습니다.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;여러 개의 기능적 구성요소(모듈)들을 조합하여 하나의 시스템으로 완성되는 구조.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Passage 유형은 해당 지오메트리를 빠져나갔던 track 다시 들어와서 또 빠져나가면 count가 추가됨.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Population 유형은 해당 지오메트리에 처음으로 들어올 때에만 count가 추가됨. 나갔다 다시 들어오면 무시.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;흡수되거나 운동에너지가 0이 되는 등의 이유로 멈춘 것. 엄밀히는 &lt;em&gt;fStopAndKill&lt;/em&gt; 상태가 된 track을 의미함.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 11. 스코어링 구현</title>
      <link>https://evandde.github.io/g4-noqasked-011-scoring/</link>
      <pubDate>Wed, 18 Aug 2021 14:11:10 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-011-scoring/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 열한번째. Geant4에서 스코어링을 구현하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;지난 글에서 살펴본 스코어링 이론을 바탕으로, 이번 글에서는 스코어링을 직접 구현해보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;스코어링을 구현하는 방법은 크게 다음의 3단계를 통해 진행됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;스코어링을 위한 Sensitive Detector 설계&lt;/li&gt;
&lt;li&gt;관심 있는 지오메트리의 Logical Volume에 Sensitive Detector를 세팅&lt;/li&gt;
&lt;li&gt;Event가 끝날 때 HCofThisEvent에서 Hit(관심 있는 물리량)을 꺼내어 확인&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;차례차례 살펴보도록 합시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sensitive-detector-설계&#34;&gt;Sensitive Detector 설계&lt;/h2&gt;
&lt;p&gt;Sensitive Detector를 설계하는 방법은 지난 글에서 말씀드렸습니다. 이 시리즈에서는 Multi Functional Detector(MFD)에 사용자가 원하는 Primitive Scorer들을 Register하여 설계하는 방법만 다루겠다고 하였지요.&lt;/p&gt;
&lt;p&gt;이 내용을 코드로 입력하는 곳도 정해져 있습니다. 바로 &lt;b&gt;DetectorConstruction.cc 파일&lt;/b&gt;에 있는 &lt;b&gt;ConstructSDandField() 함수 내부&lt;/b&gt;입니다. DetectorConstruction.cc 파일을 열어보시면, 대부분의 경우 맨 아래쪽 부근에 다음과 같은 함수가 있을 것입니다. 이 함수의 중괄호({}) 내부에 작성할 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_consdandfield&#34; srcset=&#34;
               /g4-noqasked-011-scoring/01_consdandfield_hud5d43139c37466f8384ee604e5938563_110949_2762534b1972bedebc739330bcc7b675.png 400w,
               /g4-noqasked-011-scoring/01_consdandfield_hud5d43139c37466f8384ee604e5938563_110949_ea3ae354bc37906f7c0fdca93bff164f.png 760w,
               /g4-noqasked-011-scoring/01_consdandfield_hud5d43139c37466f8384ee604e5938563_110949_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/01_consdandfield_hud5d43139c37466f8384ee604e5938563_110949_2762534b1972bedebc739330bcc7b675.png&#34;
               width=&#34;760&#34;
               height=&#34;504&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;물론, 관련한 헤더는 당연히 DetectorConstruction.cc 파일의 맨 위에 포함시켜 주셔야 합니다. 여기서 필요한 헤더는 다음과 같습니다.&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=red&gt;G4SDManager.hh&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=red&gt;G4MultiFunctionalDetector.hh&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=red&gt;사용한 PrimitiveScorer와 Filter의 헤더 (G4PSEnergyDeposit.hh 등)&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mfd-만들고-추가하기&#34;&gt;MFD 만들고 추가하기&lt;/h3&gt;
&lt;p&gt;Multi Functional Detector를 만드는 과정은 딱 두 가지만 하시면 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;G4MultiFunctionalDetector 클래스의 객체를 만든다.&lt;/li&gt;
&lt;li&gt;해당 객체를 G4SDManager에 추가한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;코드로는 다음의 두 줄입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto mfd = new G4MultiFunctionalDetector(&amp;quot;Detector&amp;quot;);
G4SDManager::GetSDMpointer()-&amp;gt;AddNewDetector(mfd);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mfd라는 변수명으로 객체를 만들고, 이를 추가해주었습니다.&lt;/p&gt;
&lt;p&gt;좀 더 자세히 살펴보도록 하죠.&lt;/p&gt;
&lt;h4 id=&#34;mfd-객체-만들기&#34;&gt;MFD 객체 만들기&lt;/h4&gt;
&lt;p&gt;Geant4에서는 Multi Functional Detector를 만들기 위해 이름 그대로 G4MultiFunctionalDetector라는 클래스를 제공하고 있습니다. 사용자는 이 클래스의 생성자를 이용하여 객체를 한 개 만들어주면 됩니다.&lt;/p&gt;
&lt;p&gt;이 클래스의 생성자는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4MultiFunctionalDetector(G4String name);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;name: Multi Functional Detector의 이름. 자유롭게 적으면 됨. &lt;b&gt;나중에 쓰이는 값이므로 기억&lt;/b&gt;해둘 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문자열 형태의 입력값 한 개만 자유롭게 넣어주면 됩니다. 입력 인자로 넣어준 &lt;b&gt;이 값은 MFD의 이름&lt;/b&gt;이 되는데, 나중에 HCofThisEvent에서 사용되니 적절한 이름으로 잘 지어주세요. 위 예시 코드에서는 &amp;ldquo;Detector&amp;quot;라는 이름을 지어주었습니다.&lt;/p&gt;
&lt;h4 id=&#34;mfd-추가하기&#34;&gt;MFD 추가하기&lt;/h4&gt;
&lt;p&gt;Geant4에서 Sensitive Detector를 사용하기 위해서는 &lt;b&gt;반드시 G4SDManager에 그 SD를 추가&lt;/b&gt;해주어야 합니다. 그래야 Geant4가 입자를 수송하면서 SD 목록 중 조건에 부합하는 것들에 대해 스코어링을 수행해주기 때문입니다.&lt;/p&gt;
&lt;p&gt;G4SDManager는 Geant4가 제공하는 것을 가져다 쓰면 되며, 이 클래스가 제공하는 &lt;b&gt;AddNewDetector()라는 함수를 통해 우리가 설계한 SD를 추가&lt;/b&gt;하게 됩니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void AddNewDetector(G4VSensitiveDetector *aSD);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;aSD: 추가할 Sensitive Detector 객체의 포인터&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    C++적인 내용을 덧붙이자면, G4MultiFunctionalDetector 클래스는 G4VSensitiveDetector 클래스를 상속받아 만들어진 클래스입니다. 따라서, MFD 객체를 AddNewDetector의 인자로 사용할 수 있는 것입니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;이 함수의 입력 인자로, 앞서 저희가 만들어둔 MFD 객체를 그대로 써주시면 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;ps-등록하기&#34;&gt;PS 등록하기&lt;/h3&gt;
&lt;p&gt;이제 MFD는 만들었으니, 실제 스코어링 기능을 수행하는 Primitive Scorer를 등록해야 합니다. 이 내용도 &lt;b&gt;ConstructSDandField() 함수 내부&lt;/b&gt;에 위에서 작성한 두 줄에 이어서 계속 써주시면 됩니다.&lt;/p&gt;
&lt;p&gt;여기도 딱 두 가지만 해주시면 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;원하는 Primitive Scorer 클래스의 객체를 만든다.&lt;/li&gt;
&lt;li&gt;해당 PS 객체를 MFD에 등록한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;예를 들어 해당 지오메트리 내에 deposit된 에너지의 총합을 스코어링하는 G4PSEnergyDeposit을 등록하고 싶다면, 다음과 같이 두 줄을 작성하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto psEDep = new G4PSEnergyDeposit(&amp;quot;EDep&amp;quot;);
mfd-&amp;gt;RegisterPrimitive(psEDep);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;psEDep이라는 변수명으로 G4PSEnergyDeposit 클래스의 객체를 만들고, 이를 앞서 만들어둔 mfd 변수명으로 정의된 MFD 객체에 등록해주었습니다.&lt;/p&gt;
&lt;p&gt;좀 더 자세히 살펴보겠습니다.&lt;/p&gt;
&lt;h4 id=&#34;ps-객체-만들기&#34;&gt;PS 객체 만들기&lt;/h4&gt;
&lt;p&gt;Primitive Scorer의 종류가 너무 많기 때문에, 이 글에서 모든 PS의 생성자를 살펴볼 수는 없습니다. 하지만 &lt;b&gt;모든 PS의 생성자에 있어 공통적으로 중요한 내용&lt;/b&gt;이 있습니다. 대표적으로 G4PSEnergyDeposit 클래스의 생성자를 살펴봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4PSEnergyDeposit(G4String name, G4int depth=0);
G4PSEnergyDeposit(G4String name, const G4String&amp;amp; unit, G4int depth=0);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;name: Primitive Scorer의 이름. 자유롭게 적으면 됨. &lt;b&gt;나중에 쓰이는 값이므로 기억&lt;/b&gt;해둘 것&lt;/li&gt;
&lt;li&gt;&lt;i&gt;depth:  &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;.지오메트리의 관계(mother-daughter)에 따라, 상위 몇 번째 단계에 있는 지오메트리의 copy number를 참고할 것인지를 지정하는 인자. 기본값은 0&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;unit:  &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 스코어링 결과의 입출력시 사용할 단위. 기본값은 MeV&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MFD 객체를 만들 때와 마찬가지로, 문자열 형태의 입력값 한 개만 자유롭게 넣어주면 됩니다. 이 &lt;b&gt;입력 인자는 어느 PS를 사용하든 무조건 입력해주도록 되어있으며, 이 값이 해당 PS의 이름&lt;/b&gt;이 됩니다.&lt;/p&gt;
&lt;p&gt;이 또한 나중에 HCofThisEvent에서 사용되니 적절한 이름으로 잘 지어주세요. 위 예시 코드에서는 &amp;ldquo;EDep&amp;quot;라는 이름을 지어주었습니다.&lt;/p&gt;
&lt;h4 id=&#34;mfd에-ps-등록하기&#34;&gt;MFD에 PS 등록하기&lt;/h4&gt;
&lt;p&gt;MFD에 PS를 등록할 때에는, G4MultiFunctionalDetector 클래스가 제공하는 &lt;b&gt;RegisterPrimitive() 함수를 이용&lt;/b&gt;합니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4bool RegisterPrimitive(G4VPrimitiveScorer *aPS);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;aPS: 등록할 Primitive Scorer 객체의 포인터&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 함수의 입력 인자로, 앞서 저희가 만들어둔 PS의 객체를 그대로 써주시면 됩니다.&lt;/p&gt;
&lt;h4 id=&#34;여러-개의-ps를-등록하는-법&#34;&gt;여러 개의 PS를 등록하는 법&lt;/h4&gt;
&lt;p&gt;하나의 MFD에 여러 개의 PS를 등록하는 방법도 간단합니다. 위에서 설명한 두 과정만 계속 반복해주시면 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;원하는 Primitive Scorer 클래스의 객체를 만든다.&lt;/li&gt;
&lt;li&gt;해당 PS 객체를 MFD에 등록한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;예를 들어 MFD를 만들고 G4PSEnergyDeposit과 G4PSDoseDeposit 두 개의 PS를 등록하는 경우를 코드로 작성한다면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto mfd = new G4MultiFunctionalDetector(&amp;quot;Detector&amp;quot;);
G4SDManager::GetSDMpointer()-&amp;gt;AddNewDetector(mfd);
auto psEDep = new G4PSEnergyDeposit(&amp;quot;EDep&amp;quot;);
mfd-&amp;gt;RegisterPrimitive(psEDep);
auto psDoseDep = new G4PSDoseDeposit(&amp;quot;DoseDep&amp;quot;);
mfd-&amp;gt;RegisterPrimitive(psDoseDep);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;filter-세팅하기&#34;&gt;Filter 세팅하기&lt;/h4&gt;
&lt;p&gt;Filter는 PS의 추가옵션 같은 기능입니다. Filter를 세팅하기 위해서는 PS를 등록할 때 Filter 관련 내용을 추가해야 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;원하는 Primitive Scorer 클래스의 객체를 만든다.&lt;/li&gt;
&lt;li&gt;&lt;font color=red&gt;원하는 Filter 클래스의 객체를 만든다.&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=red&gt;해당 Filter 객체를 PS에 세팅한다.&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;해당 PS 객체를 MFD에 등록한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;예를 들어, G4PSEnergyDeposit을 이용하는데, 전자(e-)가 deposit한 값만 스코어링하고 싶다면, 다음과 같이 작성하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto psEDep = new G4PSEnergyDeposit(&amp;quot;EDep&amp;quot;);
auto filterElectron = new G4SDParticleFilter(&amp;quot;e-Filter&amp;quot;, &amp;quot;e-&amp;quot;); // Create filter object
psEDep-&amp;gt;SetFilter(filterElectron); // Set the filter to PS
mfd-&amp;gt;RegisterPrimitive(psEDep);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;각 Filter마다 생성자의 형태나 사용방법은 상이하므로, 여기서 자세히 다루지는 않겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;logical-volume에-sd-세팅&#34;&gt;Logical Volume에 SD 세팅&lt;/h2&gt;
&lt;p&gt;이제 관심 있는 지오메트리의 Logical Volume에, 앞서 설계한 SD를 세팅해줄 차례입니다. 이 내용 또한 &lt;b&gt;ConstructSDandField() 함수 내부&lt;/b&gt;에 작성하며, 아주 간단하게 한 줄이면 끝납니다. &lt;b&gt;SetSensitiveDetector() 함수&lt;/b&gt;를 사용하면 됩니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;b&gt;&amp;ldquo;phantom&amp;quot;이라는 이름&lt;/b&gt;을 가진 Logical Volume에 앞서 만든 &lt;b&gt;mfd&lt;/b&gt; 변수명을 가진 SD를 세팅한다면, 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;SetSensitiveDetector(&amp;quot;phantom&amp;quot;, mfd);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;좀 더 자세히 살펴보도록 합시다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetSensitiveDetector(const G4String&amp;amp; logVolName,
                          G4VSensitiveDetector* aSD, G4bool multi = false);
void SetSensitiveDetector(G4LogicalVolume* logVol, G4VSensitiveDetector* aSD);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;logVolName: 관심 있는 지오메트리의 &lt;b&gt;Logical Volume의 이름&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;aSD: Sensitive Detector 객체의 포인터&lt;/li&gt;
&lt;li&gt;&lt;i&gt;multi:  &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. logVolName 이름을 가진 지오메트리가 여러 개일 경우, 여러 개의 지오메트리 모두에 대해 SD를 세팅할지의 여부를 결정하는 인자. 기본값은 false&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;logVol: 관심 있는 지오메트리의 &lt;b&gt;Logical Volume 객체의 포인터&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SetSensitiveDetector 함수를 사용할 때, 관심 있는 지오메트리의 Logical Volume을 입력하는 방법이 두 가지입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Logical Volume의 이름을 입력&lt;/li&gt;
&lt;li&gt;Logical Volume 객체의 포인터를 입력&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;일단 이 시리즈에서 추천하는 바는 &lt;b&gt;그냥 Logical Volume의 이름을 입력하는 것&lt;/b&gt;입니다. 제가 이전에 &lt;a href=&#34;https://evandde.github.io/g4-noqasked-004-material/#logical-volume-%ec%a0%95%ec%9d%98%ed%95%98%ea%b8%b0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Logical Volume을 정의하는 방법에 대해 적은 글&lt;/a&gt;에서, &lt;b&gt;Logical Volume의 이름을 지을 때 다른 Logical Volume과 겹치지 않게끔 고유의 이름을 권장&lt;/b&gt;한다고 하였습니다. 그 이유 중 하나가 이것입니다. 이름이 중복되면 그 중 어느 지오메트리에 SD를 세팅할 지가 불분명하기 때문입니다.&lt;/p&gt;
&lt;p&gt;물론, 이름이 중복되는 모든 Logical Volume들에게 다 동일한 SD를 세팅하고자 한다면, 이 함수의 &lt;i&gt;multi&lt;/i&gt; 인자 값을 true로 설정하여 사용할 수도 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;이 시리즈에서는 지역변수나 변수의 범위(scope) 등을 설명하기에는 지면이 부족하여, 그냥 Logical Volume의 이름을 사용하는 방법만 설명합니다.&lt;/p&gt;
&lt;p&gt;일반적으로 Logical Volume 객체는 Construct() 함수 내에 지역변수로 만들기 때문에, ConstructSDandField() 함수에서는 그 객체를 호출하지 못하기 때문이지요.&lt;/p&gt;
&lt;p&gt;물론 객체를 불러오기 위한 몇 가지 방법들이 있습니다만 여기서는 생략하도록 하겠습니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;중간-점검&#34;&gt;중간 점검&lt;/h2&gt;
&lt;p&gt;여기까지의 내용은 모두 &lt;b&gt;DetectorConstruction.cc 파일&lt;/b&gt;에 있는 &lt;b&gt;ConstructSDandField() 함수 내부&lt;/b&gt;에 작성하였습니다. 모두 마무리하셨다면, 일단 SD를 설계하고 이를 Logical Volume에 세팅하는 것까지 마친 상태입니다.&lt;/p&gt;
&lt;p&gt;예를 들어 &lt;b&gt;G4PSEnergyDeposit 클래스를 이용하여 설계한 SD&lt;/b&gt;를 &lt;b&gt;&amp;ldquo;phantom&amp;quot;이라는 이름을 가진 Logical Volume에 세팅&lt;/b&gt;한다면, 다음과 같이 코드가 작성되어야 합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_consdandfield_complete&#34; srcset=&#34;
               /g4-noqasked-011-scoring/02_consdandfield_complete_hudfe2e1998c310fd60c01f9222d12279a_10999_ef0db3ee3e7f2c8be3b55d7f4bea6056.png 400w,
               /g4-noqasked-011-scoring/02_consdandfield_complete_hudfe2e1998c310fd60c01f9222d12279a_10999_5d0f6efec8ea996e77db00e910019e1f.png 760w,
               /g4-noqasked-011-scoring/02_consdandfield_complete_hudfe2e1998c310fd60c01f9222d12279a_10999_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/02_consdandfield_complete_hudfe2e1998c310fd60c01f9222d12279a_10999_ef0db3ee3e7f2c8be3b55d7f4bea6056.png&#34;
               width=&#34;527&#34;
               height=&#34;175&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 중간 점검을 하는 이유는, &lt;b&gt;&lt;font color=red&gt;다음 내용부터는 작성하는 파일이 달라지기 때문&lt;/font&gt;&lt;/b&gt;입니다. 놓치지 말고 잘 따라오세요.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;event가-끝날-때-hit-확인&#34;&gt;Event가 끝날 때 Hit 확인&lt;/h2&gt;
&lt;p&gt;이제 마지막 단계입니다. 앞서 두 단계를 통해 Geant4는 알아서 &lt;b&gt;매 Event마다 Hit을 생성하고 이를 HitsCollection에 담아 HCofThisEvent로 묶어서 가지고 있을 것&lt;/b&gt;입니다. Event가 끝날 때 사용자가 이 Hit을 꺼내서 확인하지 않으면, 그 정보들은 그대로 사라집니다. 메모리를 날려버리고 새로운 다음 Event에 대한 정보를 기록하지요.&lt;/p&gt;
&lt;p&gt;사용자가 할 일은 &lt;b&gt;Event가 끝날 때마다&lt;/b&gt; Hit을 가져와서 확인하는 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4는 &lt;b&gt;매 Event마다 특정 행동을 반복적으로 수행하는 용도로 활용&lt;/b&gt;할 수 있게끔 하기 위해, &lt;b&gt;EventAction&lt;/b&gt;이라는 개념을 제공하고 있습니다. 이 시리즈에서는 &lt;b&gt;EventAction.cc라는 파일&lt;/b&gt;을 열어서 이용하시면 됩니다. 여기에는 BeginOfEventAction()이라는 함수와 EndOfEventAction()이라는 함수가 있는데, 이름 그대로 매 Event가 시작되기 직전과 끝난 직후에 해당 함수가 실행되는 식으로 동작합니다. 즉, 우리처럼 &lt;b&gt;매 Event가 끝날 때마다 무언가를 하고 싶다면 EndOfEventAction() 함수 안에 할 일을 적으면 되는 것&lt;/b&gt;이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    엄밀히 말하면, G4UserEventAction 클래스를 상속 받아서 사용자만의 고유한 EventAction클래스를 만들고, 이 클래스의 함수 중 BeginOfEventAction() 함수나 EndOfEventAction() 함수를 overriding하여 작성하면 그 내용이 매 Event가 시작되기 직전과 끝난 직후에 각각 실행됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;EventAction.cc 파일을 열어보시면 아래쪽에 &lt;b&gt;EndOfEventAction() 함수&lt;/b&gt;가 있을 것입니다. 이 함수 안에 내용을 작성할 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_EOE&#34; srcset=&#34;
               /g4-noqasked-011-scoring/03_EOE_hub0f16bd98e7b7ed8780fe6e1639a4c13_78360_bfda29b346a7d6ba8bbb97592c6e9b27.png 400w,
               /g4-noqasked-011-scoring/03_EOE_hub0f16bd98e7b7ed8780fe6e1639a4c13_78360_f588572f86f87eb00204661b74f13d92.png 760w,
               /g4-noqasked-011-scoring/03_EOE_hub0f16bd98e7b7ed8780fe6e1639a4c13_78360_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/03_EOE_hub0f16bd98e7b7ed8780fe6e1639a4c13_78360_bfda29b346a7d6ba8bbb97592c6e9b27.png&#34;
               width=&#34;760&#34;
               height=&#34;504&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이미 다음과 같은 내용이 작성되어 있네요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto HCE = anEvent-&amp;gt;GetHCofThisEvent();
if (!HCE)
	return;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;의미는 그냥 써있는 그대로 읽으시면 됩니다. 한글로 쓰자면 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이번 Event에서 만들어진 HCofThisEvent를 가져와서 HCE라는 변수로 지정&lt;/li&gt;
&lt;li&gt;만약 HCE가 유효하지 않다면
&lt;ul&gt;
&lt;li&gt;EndOfEventAction() 함수를 종료&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;del&gt;어때요, 참 쉽죠?&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;HCE 변수가 유효하지 않다면 if 조건문에 의해 함수가 종료되어 버리므로, &lt;b&gt;이 내용 아래 부분에 있는 내용은 반드시 HCE가 유효한 경우에만 실행될 것&lt;/b&gt;입니다.&lt;/p&gt;
&lt;p&gt;이제 HCofThisEvent로부터 Hit까지 가보도록 합시다.&lt;/p&gt;
&lt;h3 id=&#34;hitscollection의-id-가져오기&#34;&gt;HitsCollection의 ID 가져오기&lt;/h3&gt;
&lt;p&gt;HCofThisEvent는 HitsCollection들의 묶음이라고 하였습니다. 이 때 Geant4는 수많은 HC들을 쉽게 구분하기 위해 &lt;b&gt;HC마다 0 이상의 양의 정수값으로 된 고유의 ID번호를 부여&lt;/b&gt;합니다. 다만, 사용자가 이 정수값을 직접 기억할 필요는 없습니다. 사용자는 &lt;font color=red&gt;&lt;b&gt;HC의 이름&lt;/b&gt;&lt;/font&gt;을 이용하여 이 ID번호를 찾아올 수 있기 때문입니다.&lt;/p&gt;
&lt;p&gt;여기서 HC의 이름은 &lt;b&gt;Sensitive Detector를 설계할 때 결정&lt;/b&gt;됩니다. 우리가 했던 것처럼 MFD와 PS를 이용할 경우에는, HC의 이름이 &lt;code&gt;{MFD의 이름}/{PS의 이름}&lt;/code&gt;으로 결정됩니다. (대소문자 구분)&lt;/p&gt;
&lt;p&gt;이 글에서 예시로 든 것처럼 다음과 같이 SD를 설계하였다면, &lt;b&gt;&lt;font color=red&gt;HC의 이름은 &amp;ldquo;Detector/EDep&amp;rdquo;&lt;/font&gt;&lt;/b&gt;이 되는 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_consdandfield_complete&#34; srcset=&#34;
               /g4-noqasked-011-scoring/02_consdandfield_complete_hudfe2e1998c310fd60c01f9222d12279a_10999_ef0db3ee3e7f2c8be3b55d7f4bea6056.png 400w,
               /g4-noqasked-011-scoring/02_consdandfield_complete_hudfe2e1998c310fd60c01f9222d12279a_10999_5d0f6efec8ea996e77db00e910019e1f.png 760w,
               /g4-noqasked-011-scoring/02_consdandfield_complete_hudfe2e1998c310fd60c01f9222d12279a_10999_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/02_consdandfield_complete_hudfe2e1998c310fd60c01f9222d12279a_10999_ef0db3ee3e7f2c8be3b55d7f4bea6056.png&#34;
               width=&#34;527&#34;
               height=&#34;175&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;사용자는 이 HC의 이름만 있으면, G4SDManager로부터 GetCollectionID() 함수를 이용해 해당 HC의 고유 ID번호를 가져올 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;이 부분은 약간 C++ 측면의 깊은 설명이 필요합니다.&lt;/p&gt;
&lt;p&gt;먼저 아무도 사용하지 않는 원초적인 방법부터 보여드리겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4int fHCID = G4SDManager::GetSDMpointer()-&amp;gt;GetCollectionID(&amp;quot;Detector/EDep&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게하면 &lt;code&gt;fHCID&lt;/code&gt;라는 변수에 &amp;quot;Detector/EDep&amp;quot;이라는 HC의 고유 ID번호가 저장됩니다. &lt;b&gt;하지만, Geant4에서는 아무도 이렇게 사용하지 않습니다.&lt;/b&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;b&gt;GetCollectionID() 함수는 시간을 많이 잡아먹는 느린 함수&lt;/b&gt;입니다. 이런 함수를 매 Event가 종료될 때마다 실행하도록 하면 그만큼 시뮬레이션에 소요되는 시간이 길어지겠지요. 이런 문제를 해결하고자, &lt;b&gt;맨 처음에만 HC의 ID를 찾아오고&lt;/b&gt; 그 이후에는 전에 &lt;b&gt;찾아온 값을 재활용&lt;/b&gt;하기 위해 다음과 같이 코드를 작성하여 이용합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;include/EventAction.hh 파일&lt;/b&gt;&lt;/font&gt;을 열고, G4int 자료형의 fHCID라는 이름의 멤버변수를 만듭니다.&lt;/p&gt;
&lt;p&gt;멤버변수가 뭔지, 왜 hh파일이라는 곳에 쓰는지 잘 모르셔도 상관없습니다. 나중에 C++의 클래스 개념을 조금만 공부하시면 금방 이해될 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;일단 include 폴더에 있는 EventAction.hh 파일을 열어봅니다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;그리고 다음 그림과 같이 &lt;code&gt;private:&lt;/code&gt;라고 쓰여있는 줄과 &lt;code&gt;};&lt;/code&gt;가 적혀있는 줄 사이에, &lt;code&gt;G4int fHCID;&lt;/code&gt;라고 적어서 G4int 자료형의 fHCID 멤버변수를 선언합니다.&lt;/p&gt;
&lt;p&gt;(이미 만들어져 있다면 그냥 두시면 됩니다. 강의자료 제작 과정에서 혼선이 있었던 관계로, 이미 적혀있는 코드를 받으셨을 수도 있습니다)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_1_EOE_Header&#34; srcset=&#34;
               /g4-noqasked-011-scoring/03_1_EOE_Header_hu456fd6bb5b681706e7d917ab722d3d74_16660_420131c6ec5184dad0620257550b1841.png 400w,
               /g4-noqasked-011-scoring/03_1_EOE_Header_hu456fd6bb5b681706e7d917ab722d3d74_16660_62d35c2c64ef1bd10ffcc1f1b2b4b437.png 760w,
               /g4-noqasked-011-scoring/03_1_EOE_Header_hu456fd6bb5b681706e7d917ab722d3d74_16660_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/03_1_EOE_Header_hu456fd6bb5b681706e7d917ab722d3d74_16660_420131c6ec5184dad0620257550b1841.png&#34;
               width=&#34;604&#34;
               height=&#34;447&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;다시 src/EventAction.cc 파일로 돌아옵니다.&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;헤더를 포함시키는 부분(&lt;code&gt;#include ...&lt;/code&gt;) 바로 밑에 보면, EventAction 클래스의 생성자가 있을 것입니다. &lt;code&gt;EventAction::EventAction() ...&lt;/code&gt;과 같이 적혀있는 부분입니다.&lt;/p&gt;
&lt;p&gt;여기에 다음 그림과 같이 &lt;code&gt;, fHCID(-1)&lt;/code&gt;이라는 문구를 추가해줍니다.&lt;/p&gt;
&lt;p&gt;이는 &lt;b&gt;fHCID라는 멤버변수를 -1로 초기화하겠다는 의미&lt;/b&gt;입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_2_EOE_SourceInit&#34; srcset=&#34;
               /g4-noqasked-011-scoring/03_2_EOE_SourceInit_hu6cbf0e1cf314b2890451a75045bd2a43_16477_057685ea71afab821487b533a2f4325e.png 400w,
               /g4-noqasked-011-scoring/03_2_EOE_SourceInit_hu6cbf0e1cf314b2890451a75045bd2a43_16477_64fd7ac7bee735534338d60e891eb671.png 760w,
               /g4-noqasked-011-scoring/03_2_EOE_SourceInit_hu6cbf0e1cf314b2890451a75045bd2a43_16477_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/03_2_EOE_SourceInit_hu6cbf0e1cf314b2890451a75045bd2a43_16477_057685ea71afab821487b533a2f4325e.png&#34;
               width=&#34;564&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;EventAction.cc 파일의 맨 위에 G4SDManager.hh 헤더를 포함&lt;/b&gt;시킵니다.&lt;/p&gt;
&lt;p&gt;이는 G4SDManager 클래스의 GetCollectionID 함수를 사용하기 위함입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_3_EOE_SourceInclude&#34; srcset=&#34;
               /g4-noqasked-011-scoring/03_3_EOE_SourceInclude_hu04d38b5b4c71e8b7b7ffa8e8660f542e_17259_7057a4e88898c1b6ed75e84381eabb58.png 400w,
               /g4-noqasked-011-scoring/03_3_EOE_SourceInclude_hu04d38b5b4c71e8b7b7ffa8e8660f542e_17259_de71edf083d2e39428b23ff5a5d6a4eb.png 760w,
               /g4-noqasked-011-scoring/03_3_EOE_SourceInclude_hu04d38b5b4c71e8b7b7ffa8e8660f542e_17259_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/03_3_EOE_SourceInclude_hu04d38b5b4c71e8b7b7ffa8e8660f542e_17259_7057a4e88898c1b6ed75e84381eabb58.png&#34;
               width=&#34;567&#34;
               height=&#34;530&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;마지막으로 EndOfEventAction 함수에 다음 두 줄의 코드를 작성합니다.&lt;/p&gt;
&lt;p&gt;이렇게 하면 fHCID의 값이 -1일 때만(맨 처음) GetCollectionID 함수를 이용하여 fHCID를 적절한 HC의 ID로 설정하게 되고, 이후에는 fHCID에 -1이 아닌 다른 값이 들어있으므로 더이상 if문 내부가 실행되지 않습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;if(fHCID == -1)
	fHCID = G4SDManager::GetSDMpointer()-&amp;gt;GetCollectionID(&amp;quot;Detector/EDep&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_4_EOE_fHCIDsetting&#34; srcset=&#34;
               /g4-noqasked-011-scoring/03_4_EOE_fHCIDsetting_hu5b4c945e05198daec0fb9f33f07823de_23338_b8a8803476217edaf71504c5894faed5.png 400w,
               /g4-noqasked-011-scoring/03_4_EOE_fHCIDsetting_hu5b4c945e05198daec0fb9f33f07823de_23338_ff2977bd3fc99e35177cade788415e0b.png 760w,
               /g4-noqasked-011-scoring/03_4_EOE_fHCIDsetting_hu5b4c945e05198daec0fb9f33f07823de_23338_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/03_4_EOE_fHCIDsetting_hu5b4c945e05198daec0fb9f33f07823de_23338_b8a8803476217edaf71504c5894faed5.png&#34;
               width=&#34;745&#34;
               height=&#34;596&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;id를-이용하여-hc-꺼내기&#34;&gt;ID를 이용하여 HC 꺼내기&lt;/h3&gt;
&lt;p&gt;이어서, 이 ID를 이용하여 HCofThisEvent로부터 HC를 꺼내옵니다.&lt;/p&gt;
&lt;p&gt;EventAction.cc 파일의 맨 위에 &lt;b&gt;G4THitsMap.hh 헤더를 포함&lt;/b&gt;시켜 주시고, &lt;b&gt;EndOfEventAction 함수 안쪽에 다음의 한 줄&lt;/b&gt;만 써주시면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto hitsMap = static_cast&amp;lt;G4THitsMap&amp;lt;G4double&amp;gt; *&amp;gt;(HCE-&amp;gt;GetHC(fHCID));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_5_EOE_HitsMap&#34; srcset=&#34;
               /g4-noqasked-011-scoring/03_5_EOE_HitsMap_hu03347962c5d2d3387ccdd360427b085b_27668_caa8bf71f37784aaff5ed44c5bef19e9.png 400w,
               /g4-noqasked-011-scoring/03_5_EOE_HitsMap_hu03347962c5d2d3387ccdd360427b085b_27668_98764b85173eccd6a79179fbd160b779.png 760w,
               /g4-noqasked-011-scoring/03_5_EOE_HitsMap_hu03347962c5d2d3387ccdd360427b085b_27668_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/03_5_EOE_HitsMap_hu03347962c5d2d3387ccdd360427b085b_27668_caa8bf71f37784aaff5ed44c5bef19e9.png&#34;
               width=&#34;760&#34;
               height=&#34;661&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이상한 문구가 너무 많이 있어서 생소하실 수 있겠지만, 해석해보면 간단합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HCE-&amp;gt;GetHC(fHCID)&lt;/p&gt;
&lt;p&gt;HCE(HCofThisEvent)로부터 fHCID라는 ID를 가진 HC를 가져옴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static_cast&amp;lt;G4THitsMap&lt;G4double&gt; *&amp;gt;(HCE-&amp;gt;GetHC(fHCID))&lt;/p&gt;
&lt;p&gt;앞서 가져온 HC를 &lt;code&gt;G4THitsMap&amp;lt;G4double&amp;gt; *&lt;/code&gt; 자료형으로 형변환함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;auto hitsMap = static_cast&amp;lt;G4THitsMap&lt;G4double&gt; *&amp;gt;(HCE-&amp;gt;GetHC(fHCID));&lt;/p&gt;
&lt;p&gt;이걸 hitsMap이라는 변수명으로 저장&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이제 모르는 내용은 &lt;code&gt;G4THitsMap&amp;lt;G4double&amp;gt; *&lt;/code&gt;이라는 처음보는 자료형 뿐이군요. 이는 HitsCollection의 종류 중 하나입니다. &lt;a href=&#34;https://evandde.github.io/g4-noqasked-010-scoringtheory/#ps-hit-hc%ec%97%90-%eb%8c%80%ed%95%9c-%ec%83%81%ec%84%b8-%ec%84%a4%eb%aa%85&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이전 글&lt;/a&gt;에서 Hit을 저장하는 방법이 여러가지가 있지만, PS를 이용하는 경우에는 &lt;b&gt;값을 누적&lt;/b&gt;하여 &lt;b&gt;&lt;font color=blue&gt;하나의 값&lt;/font&gt;&lt;/b&gt;으로 저장하며, 이를 &lt;b&gt;&lt;font color=red&gt;Copy Number라는 사물함 번호로 분류&lt;/font&gt;&lt;/b&gt;하여 저장한다고 했었지요.&lt;/p&gt;
&lt;p&gt;C++에서 이처럼 사물함 번호마다 값을 분류하여 저장하는 데이터 저장 방식의 대표적인 예로 &lt;b&gt;Map&lt;/b&gt;이 있습니다. 그래서 Geant4에서는 이 Map이라는 구조를 활용하여 Hit을 저장하기 위한 Map이라는 이름으로 G4THitsMap이라는 클래스를 사용하고 있으며, 그 Map에 저장될 데이터가 G4double(실수)형이라는 것을 명시하기 위해 &lt;code&gt;G4THitsMap&amp;lt;G4double&amp;gt;&lt;/code&gt;과 같이 작성하게 됩니다. 끝의 &lt;code&gt;*&lt;/code&gt;는 이 자료형의 포인터형이라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;&lt;u&gt;이 설명을 잘 모르겠으면 그냥 넘어가시고, 나중에 C++ 공부를 좀 더 한 뒤에 이해하셔도 됩니다.&lt;/u&gt; 핵심은 다음의 두 가지입니다. 이거만 기억하셔도 충분합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto hitsMap = static_cast&amp;lt;G4THitsMap&amp;lt;G4double&amp;gt; *&amp;gt;(HCE-&amp;gt;GetHC(fHCID));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;라고 쓰면, hitsMap이라는 변수명으로 HitsCollection을 가져올 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 hitsMap에는 &lt;b&gt;&lt;font color=red&gt;Copy Number라는 사물함 번호&lt;/font&gt;&lt;/b&gt;마다, &lt;b&gt;&lt;font color=blue&gt;PS가 누적해서 기록한 값&lt;/font&gt;&lt;/b&gt;이 저장되어 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;hc에서-hit-꺼내기&#34;&gt;HC에서 Hit 꺼내기&lt;/h3&gt;
&lt;p&gt;앞서 가져온 HitsCollection에는 PS가 기록한 값이 Copy Number라는 번호로 분류된 사물함마다 저장되어 있을 것입니다.&lt;/p&gt;
&lt;p&gt;어떤 사용자는 Sensitive Detector를 딱 하나의 지오메트리에만 달았을 수도 있고, 어떤 사용자는 여러 개의 지오메트리에 달았을 수도 있습니다. 게다가, 이 Event에서 입자들이 그 지오메트리들을 아예 안지나갔을 수도 있고(Hit이 0개), 모두 다 지나갔을 수도 있습니다.&lt;/p&gt;
&lt;p&gt;이런 이유때문에, PS를 이용하여 설계한 SD를 이용한 경우에는 &lt;b&gt;HitsCollection 안에 몇 개의 Hit이 들어있을지 아무도 모릅니다&lt;/b&gt;. 이런 모든 경우를 다 아우르기 위해, &lt;b&gt;HC안에 들어있는 Hit을 모두 다 훑으며 확인하는 방식을 이용&lt;/b&gt;합니다. 이는 C++에서 제공하는 for-each 반복문을 사용하면 쉽게 해결됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;for (const auto &amp;amp;iter : *(hitsMap-&amp;gt;GetMap()))
{
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같이 작성하면, hitsMap 안에 있는 &lt;b&gt;모든 사물함&lt;/b&gt;들을 &lt;b&gt;iter&lt;/b&gt;라는 변수명으로 접근할 수 있게 됩니다. 이 때 &lt;code&gt;iter.first&lt;/code&gt;는 &lt;b&gt;&lt;font color=red&gt;사물함 번호&lt;/font&gt;&lt;/b&gt;가 되고, &lt;code&gt;*(iter.second)&lt;/code&gt;는 &lt;b&gt;&lt;font color=blue&gt;그 사물함 안에 들어있는 hit의 누적 값&lt;/font&gt;&lt;/b&gt;이 됩니다.&lt;/p&gt;
&lt;p&gt;예를 들어, G4PSEnergyDeposit을 통해 기록된 deposit된 에너지의 총합을 살펴보고, 이 값이 0보다 큰 경우 터미널 화면에 출력하고자 한다면 다음과 같이 코드를 작성합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;for (const auto &amp;amp;iter : *(hitsMap-&amp;gt;GetMap()))
{
    auto eDep = *(iter.second);
    if (eDep &amp;gt; 0.)
    {
    	G4cout &amp;lt;&amp;lt; &amp;quot;--- Energy Deposit:&amp;quot; &amp;lt;&amp;lt; eDep / MeV &amp;lt;&amp;lt; G4endl;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;G4cout&lt;/code&gt;과 &lt;code&gt;G4endl&lt;/code&gt;은 각각 &lt;code&gt;std::cout&lt;/code&gt;과 &lt;code&gt;std::endl&lt;/code&gt;과 동일하다고 생각하셔도 무방합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;아마 이렇게만 쓰시면 분명 &lt;code&gt;MeV&lt;/code&gt;라는게 무엇인지 모르겠다며 에러가 뜰 것입니다!&lt;/p&gt;
&lt;p&gt;앞서 지오메트리 파트에서 &lt;b&gt;단위&lt;/b&gt;를 사용하려면 &lt;b&gt;G4SystemOfUnits.hh&lt;/b&gt;라는 헤더가 필요하다고 했었죠?&lt;/p&gt;
&lt;p&gt;여기서도 &lt;code&gt;MeV&lt;/code&gt;를 사용해야 하므로, EventAction.cc 파일의 맨 위에 &lt;code&gt;#include &amp;quot;G4SystemOfUnits.hh&amp;quot;&lt;/code&gt;라는 내용을 추가해주셔야 합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;위의 코드를 해석하자면 다음과 같이 되겠군요&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hitsMap에 있는 사물함 각각을 iter라는 변수로 지정하여 반복문을 수행
&lt;ul&gt;
&lt;li&gt;사물함 안에 있는 값(&lt;code&gt;*(iter.second)&lt;/code&gt;)을 eDep이라는 변수명으로 저장&lt;/li&gt;
&lt;li&gt;만약 eDep의 값이 0보다 크다면
&lt;ul&gt;
&lt;li&gt;화면에 &amp;ldquo;&amp;mdash; Energy Deposit: &amp;ldquo;과 &amp;ldquo;eDep 값을 MeV로 나눈 값&amp;quot;을 이어서 출력하고 줄바꿈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 방법을 통해 PS가 저장한 값을 Event가 끝날 때 가져와서 확인할 수 있게 됩니다. 지금까지 수행한 내용을 모두 작성하면 EndOfEventAction 함수 내부는 다음과 같은 모습일 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_EOE_complete&#34; srcset=&#34;
               /g4-noqasked-011-scoring/04_EOE_complete_hu07471f2f3de2bed73ed399c2fc9bd200_18600_4ff49cc7251b55f4d926279580379630.png 400w,
               /g4-noqasked-011-scoring/04_EOE_complete_hu07471f2f3de2bed73ed399c2fc9bd200_18600_9a5b8e6000e5d3f3d38fef773c49c8b6.png 760w,
               /g4-noqasked-011-scoring/04_EOE_complete_hu07471f2f3de2bed73ed399c2fc9bd200_18600_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/04_EOE_complete_hu07471f2f3de2bed73ed399c2fc9bd200_18600_4ff49cc7251b55f4d926279580379630.png&#34;
               width=&#34;716&#34;
               height=&#34;443&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;결과-확인&#34;&gt;결과 확인&lt;/h3&gt;
&lt;p&gt;이렇게 작성하였을 때 출력되는 결과를 살펴보겠습니다. 개수가 너무 적으면 확률상 원하는 결과가 나오지 않을수도 있으니, run.mac 파일에서 &lt;code&gt;/run/beamOn 100&lt;/code&gt;이라고 되어있는 줄을 &lt;code&gt;/run/beamOn 1000&lt;/code&gt;과 같이 약간 늘려주세요.&lt;/p&gt;
&lt;p&gt;build 디렉토리에 들어와서, 다음 명령어를 통해 tracking verbose 1단계와 함께 출력해서 살펴봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make
./g4_minimal run.mac &amp;gt; vb.out
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;입자가 phantom에 들어가지 않은 다음과 같은 경우에는 추가적인 출력이 없는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_EOE_rslt1&#34; srcset=&#34;
               /g4-noqasked-011-scoring/05_EOE_rslt1_hube3480bcdce8df8ce362d378679da3fb_29968_714dbcae9f79898a6e98973c89ec1ea7.png 400w,
               /g4-noqasked-011-scoring/05_EOE_rslt1_hube3480bcdce8df8ce362d378679da3fb_29968_04e8c30eb59b473d9a3d0b2dfa9ffa20.png 760w,
               /g4-noqasked-011-scoring/05_EOE_rslt1_hube3480bcdce8df8ce362d378679da3fb_29968_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/05_EOE_rslt1_hube3480bcdce8df8ce362d378679da3fb_29968_714dbcae9f79898a6e98973c89ec1ea7.png&#34;
               width=&#34;760&#34;
               height=&#34;431&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이제 phantom이라는 문구를 검색해 보겠습니다.&lt;/p&gt;
&lt;p&gt;다음과 같이 phantom을 지나가긴 했지만, 별다른 반응이 일어나지 않아 deposit된 에너지가 없는 경우(&lt;code&gt;eDep &amp;gt; 0.&lt;/code&gt; 조건을 만족하지 못함)에도 추가적인 출력이 없는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_EOE_rslt2&#34; srcset=&#34;
               /g4-noqasked-011-scoring/06_EOE_rslt2_hu3df22452996cf15d77a3335f68242939_23642_2bec1d7b18e0f716b9c5481538fb9011.png 400w,
               /g4-noqasked-011-scoring/06_EOE_rslt2_hu3df22452996cf15d77a3335f68242939_23642_8b5edf53684d289de130f0398cd4da06.png 760w,
               /g4-noqasked-011-scoring/06_EOE_rslt2_hu3df22452996cf15d77a3335f68242939_23642_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/06_EOE_rslt2_hu3df22452996cf15d77a3335f68242939_23642_2bec1d7b18e0f716b9c5481538fb9011.png&#34;
               width=&#34;760&#34;
               height=&#34;306&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;좀 더 찾다보면 다음처럼 phantom에서 반응이 일어난 경우도 찾을 수 있습니다.&lt;/p&gt;
&lt;p&gt;노란색으로 표시한 각 반응에서의 dE(MeV)들을 한 Event 내에서 다 합쳐져서, 그 총 합 값이 Event가 끝난 뒤에 &lt;code&gt;--- Energy Deposit:...&lt;/code&gt;와 같이 출력되고 있음을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_EOE_rslt3&#34; srcset=&#34;
               /g4-noqasked-011-scoring/07_EOE_rslt3_hue3bba3d51fea93728d22ba41ad66cd1b_39083_3b205e1a10b8ad179606dc66dde338a4.png 400w,
               /g4-noqasked-011-scoring/07_EOE_rslt3_hue3bba3d51fea93728d22ba41ad66cd1b_39083_cc392163e3ce94fbee644f364d4acc62.png 760w,
               /g4-noqasked-011-scoring/07_EOE_rslt3_hue3bba3d51fea93728d22ba41ad66cd1b_39083_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-011-scoring/07_EOE_rslt3_hue3bba3d51fea93728d22ba41ad66cd1b_39083_3b205e1a10b8ad179606dc66dde338a4.png&#34;
               width=&#34;760&#34;
               height=&#34;489&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;최종-파일-다운받는-법&#34;&gt;최종 파일 다운받는 법&lt;/h2&gt;
&lt;p&gt;이번 글에서 작성한 코드는 &lt;a href=&#34;https://github.com/evandde/g4_minimal/archive/c34d4e9e75b7e2d44ac72317927c81181a74bde4.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;를 통해 다운받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은 git repository를 clone하신 분의 경우에는, example branch의 이전 커밋 중 V3 scoring이라는 커밋을 참고하셔도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;스코어링이 사실 쉽지 않습니다. 저도 많은 분들에게 강의를 수 차례 해보았지만, 제일 어려워하시는 부분이 스코어링입니다. C++의 문법을 모르면 생소한 코드가 너무 많아서 더욱 어려워보이는 것 같기도 합니다.&lt;/p&gt;
&lt;p&gt;어떻게 하면 더 쉽게 전달할 수 있을까 많이 고민해 보았습니다만, 아직도 쉬워보이지는 않네요 
  &lt;i class=&#34;far fa-frown  pr-1 fa-fw&#34;&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;하지만 스코어링 이론을 잘 숙지하고 있으시다면, 몇 번만 직접 구현해서 활용해보면 금방 터득하실 수 있으리라 생각합니다.&lt;/p&gt;
&lt;p&gt;이제 다음 내용이 이 시리즈의 마지막입니다. 다음 글부터는 스코어링 결과를 파일로 출력하는 법에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 12. 스코어링 기록(Histogram)</title>
      <link>https://evandde.github.io/g4-noqasked-012-writingrslt1/</link>
      <pubDate>Thu, 19 Aug 2021 10:49:41 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-012-writingrslt1/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 열두번째. Geant4에서 스코어링한 결과를 파일로 기록하는 방법, 그 중에서도 Histogram 형태로 기록하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;지난 글을 통해, 원하는 물리량을 스코어링 한 뒤 화면에 출력하는 작업까지 알아보았습니다. 이번 글과 다음 글에서는 이 스코어링 결과를 추후 분석작업에 용이하게 활용할 수 있도록 적절한 형태로 파일에 기록하는 방법을 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;이 시리즈에서 알아볼 기록 방법은 다음의 두 가지입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Histogram&lt;/strong&gt;으로 기록: 매 Event마다 얻은 값을 히스토그램으로 만들어, 히스토그램의 각 계급구간 별 도수만 기록하는 방식&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ntuple&lt;/strong&gt;로 기록: 매 Event마다 얻은 값(화면에 출력하던 것)을 표 형태로 만들어 파일에 기록하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Histogram과 Ntuple은 전부 독립적으로 관리되므로, 하나의 시뮬레이션 내에서 Histogram과 Ntuple을 원하는만큼 여러 개 기록하여도 괜찮습니다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;이번 글에서는 기본 이론 및 Histogram 기록 방법을 다루고, 다음 글에서는 Ntuple을 다루겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4에서의-데이터-출력&#34;&gt;Geant4에서의 데이터 출력&lt;/h2&gt;
&lt;p&gt;Geant4는 데이터를 정리하여 파일 형태로 출력하는 방식으로 다음의 4가지를 지원합니다. (10.7 버전 기준)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ROOT&lt;/li&gt;
&lt;li&gt;HDF5&lt;/li&gt;
&lt;li&gt;AIDA XML&lt;/li&gt;
&lt;li&gt;CSV&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Geant4를 개발한 CERN 그룹에서 ROOT도 개발했기 때문인지, ROOT쪽과 연계해서 이용할 때 좀 더 많은 기능이 제공됩니다.&lt;/p&gt;
&lt;p&gt;하지만 여기서는 제일 일반적으로 어느 프로그램에서나 무난하게 사용가능한 &lt;b&gt;CSV 형식으로 출력하는 방법&lt;/b&gt;에 대해 알아볼 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;csv란&#34;&gt;CSV란?&lt;/h3&gt;
&lt;p&gt;CSV란 comma-separated values의 약자로, 표 형태의 데이터를 comma(,)로 구분하여 텍스트 형식으로 기록하는 방식입니다. 행끼리는 줄바꿈으로 분리되며, 열끼리는 comma(,)로 분리된다고 보시면 됩니다. 경우에 따라 comma(,) 대신 공백이나 탭 등의 구분자로 대체되기도 합니다.&lt;/p&gt;
&lt;p&gt;예를 들어 다음과 같은 표를 생각해 봅시다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;이름&lt;/th&gt;
&lt;th&gt;학번&lt;/th&gt;
&lt;th&gt;생년월일&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;홍길동&lt;/td&gt;
&lt;td&gt;20201234&lt;/td&gt;
&lt;td&gt;20020101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;임꺽정&lt;/td&gt;
&lt;td&gt;20215678&lt;/td&gt;
&lt;td&gt;20030201&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;위 표를 csv 형식으로 쓰면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;이름, 학번, 생년월일
홍길동, 20201234, 20020101
임꺽정, 20215678, 20030201
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSV파일은 일반적으로 엑셀, 구글시트 등과 같이 표를 다루는 프로그램에서 쉽게 불러올 수 있으며, 대부분의 데이터 분석용 프로그램들 또한 CSV 파일을 읽어들이는 기능을 제공하고 있으니 편리하게 사용할 수 있으리라 생각합니다.&lt;/p&gt;
&lt;h3 id=&#34;runaction이란&#34;&gt;RunAction이란?&lt;/h3&gt;
&lt;p&gt;지난 글에서 매 Event마다 무언가 작업을 수행하고 싶을 때 EventAction이라는 것을 이용한다고 하였지요. 마찬가지로, &lt;b&gt;매 Run마다 무언가 작업을 수행&lt;/b&gt;하고 싶은 경우에는 &lt;b&gt;RunAction&lt;/b&gt;을 이용하면 됩니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 RunAction.cc 파일에서 매우 많은 작업을 해야하기 때문에, 간단하게 짚고 넘어가려 합니다.&lt;/p&gt;
&lt;p&gt;RunAction.cc 파일에 보면 함수가 총 4개 있습니다. 각 함수의 역할은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RunAction()&lt;/p&gt;
&lt;p&gt;&amp;ldquo;생성자&amp;quot;라고 부릅니다. 뭔지 모른다면 일단 이름만 기억해두고 넘어가셔도 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~RunAction()&lt;/p&gt;
&lt;p&gt;&amp;ldquo;소멸자&amp;quot;라고 부릅니다. 뭔지 모른다면 일단 이름만 기억해두고 넘어가셔도 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BeginOfRunAction()&lt;/p&gt;
&lt;p&gt;&lt;b&gt;매 Run이 시작되기 직전 호출되는 함수입니다.&lt;/b&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EndOfRunAction()&lt;/p&gt;
&lt;p&gt;&lt;b&gt;매 Run이 끝난 직후 호출되는 함수입니다.&lt;/b&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;g4analysismanager로-파일-관리&#34;&gt;G4AnalysisManager로 파일 관리&lt;/h2&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    작성하는 파일과 위치가 매우 자주 바뀝니다. 차분하게 따라오세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;원하는-출력-형식의-헤더-포함시키기&#34;&gt;원하는 출력 형식의 헤더 포함시키기&lt;/h3&gt;
&lt;p&gt;Geant4에서는 관련 기능을 사용할 수 있도록 G4AnalysisManager라는 클래스를 제공합니다. 사용자는 위에 설명한 4가지 파일 형식 중 어떤 것을 사용하든, 모두 다 동일한 G4AnalysisManager라는 클래스와 이 클래스에 포함된 함수를 이용하도록 되어있습니다. 때문에, &lt;font color=red&gt;&lt;b&gt;사용자가 헤더를 포함시킬 때 위 4가지 중 어떤 것을 이용할 지 명시&lt;/b&gt;&lt;/font&gt;해줘야 합니다.&lt;/p&gt;
&lt;p&gt;일단, &lt;font color=red&gt;&lt;b&gt;RunAction.cc 파일&lt;/b&gt;&lt;/font&gt;을 엽니다. 다음 그림과 같이 별다른 내용이 없을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_RunAction&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/01_RunAction_hu02f4f669d391c9b7549bee4e76ee414f_23823_409c9ecc245dd7864b518f4d4d163057.png 400w,
               /g4-noqasked-012-writingrslt1/01_RunAction_hu02f4f669d391c9b7549bee4e76ee414f_23823_b2953376b5667d439cf92f4c8277f97a.png 760w,
               /g4-noqasked-012-writingrslt1/01_RunAction_hu02f4f669d391c9b7549bee4e76ee414f_23823_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/01_RunAction_hu02f4f669d391c9b7549bee4e76ee414f_23823_409c9ecc245dd7864b518f4d4d163057.png&#34;
               width=&#34;475&#34;
               height=&#34;467&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 맨 위에 헤더를 쓰는 부분에 원하는 출력 형식에 따라 다음의 헤더를 추가합니다.&lt;/p&gt;
&lt;p&gt;(다른 헤더와 달리 &lt;b&gt;소문자로 입력해야 함&lt;/b&gt;에 주의)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ROOT: &lt;code&gt;g4root.hh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HDF5: &lt;code&gt;g4hdf5.hh&lt;/code&gt; (Geant4를 설치할 때 HDF5를 연동하여 설치한 경우에만 이용 가능)&lt;/li&gt;
&lt;li&gt;AIDA XML: &lt;code&gt;g4xml.hh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CSV: &lt;code&gt;g4csv.hh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우리는 CSV를 이용하기로 하였으므로, 헤더를 포함하는 부분에 다음을 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;g4csv.hh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;입력한 모습은 다음과 같을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_RunAction&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/02_RunAction_hua16a171a68c4916860dbbc75568aaa1c_13488_25d1084aa9d616de73738dd12debae1e.png 400w,
               /g4-noqasked-012-writingrslt1/02_RunAction_hua16a171a68c4916860dbbc75568aaa1c_13488_38b3b171ac247b3da8f840a10dfa1257.png 760w,
               /g4-noqasked-012-writingrslt1/02_RunAction_hua16a171a68c4916860dbbc75568aaa1c_13488_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/02_RunAction_hua16a171a68c4916860dbbc75568aaa1c_13488_25d1084aa9d616de73738dd12debae1e.png&#34;
               width=&#34;477&#34;
               height=&#34;468&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이런 헤더를 포함시키고 나면, G4AnalysisManager라는 클래스를 이용할 수 있게 됩니다. 여기서는 &lt;code&gt;g4csv.hh&lt;/code&gt;를 포함시켰지만, 다른 헤더를 포함시켰다고 하더라도 &lt;b&gt;이하의 내용은 동일하게 진행&lt;/b&gt;하시면 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;g4analysismanager의-핸들-만들기&#34;&gt;G4AnalysisManager의 핸들 만들기&lt;/h3&gt;
&lt;p&gt;G4AnalysisManager를 이용하려면 이 클래스의 객체를 생성해야할 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4의 공식 가이드에서는 이 클래스의 객체를 RunAction의 생성자에서 만들고, RunAction의 소멸자에서 파괴할 것을 권장합니다. &lt;u&gt;무슨 말인지 모르셔도 괜찮습니다. 그냥 따라오세요.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;일단 &lt;font color=red&gt;&lt;b&gt;생성자인 RunAction()의 중괄호({}) 안&lt;/b&gt;&lt;/font&gt;에 다음과 같이 적어줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto analysisManager = G4AnalysisManager::Instance();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고, &lt;font color=red&gt;&lt;b&gt;소멸자인 ~RunAction()의 중괄호({}) 안&lt;/b&gt;&lt;/font&gt;에는 다음과 같이 적어줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;delete G4AnalysisManager::Instance();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다 적으셨다면 다음 그림과 같이 되어있어야 합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_RunAction&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/03_RunAction_hu5de6c94e67068bb7a755854e79d79fbd_18087_4eb00c8b8041e42ed859bab3ce1b59a9.png 400w,
               /g4-noqasked-012-writingrslt1/03_RunAction_hu5de6c94e67068bb7a755854e79d79fbd_18087_b9dec7b3200c1b6b98a6aa385552cc2e.png 760w,
               /g4-noqasked-012-writingrslt1/03_RunAction_hu5de6c94e67068bb7a755854e79d79fbd_18087_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/03_RunAction_hu5de6c94e67068bb7a755854e79d79fbd_18087_4eb00c8b8041e42ed859bab3ce1b59a9.png&#34;
               width=&#34;560&#34;
               height=&#34;514&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;이제부터 여러분은 어디에서든 다음 코드만 입력하면 analysisManager라는 변수명으로 G4AnalysisManager를 이용할 수 있습니다.&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto analysisManager = G4AnalysisManager::Instance();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;g4analysismanager로-파일-열기&#34;&gt;G4AnalysisManager로 파일 열기&lt;/h3&gt;
&lt;p&gt;이제 실제로 출력 파일을 만들어봅시다. 출력파일을 &lt;b&gt;매 Run이 시작될 때마다 열어주기 위해, &lt;font color=red&gt;BeginOfRunAction() 함수 내&lt;/font&gt;에 적어주도록 합니다&lt;/b&gt;. 파일을 열 때에는 기본적으로 G4AnalysisManager 클래스가 제공하는 &lt;b&gt;OpenFile()이라는 함수&lt;/b&gt;를 제공합니다. 이 함수의 입력인자로 &lt;b&gt;파일의 이름&lt;/b&gt;을 적어줄 수 있습니다. 다음과 같이 작성해봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto analysisManager = G4AnalysisManager::Instance();
analysisManager-&amp;gt;OpenFile(&amp;quot;G4_Minimal&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;G4AnalysisManager의 객체를 가져오고, 그 객체로 OpenFile() 함수를 사용한 것입니다. 작성한 코드의 모습은 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_RunAction&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/04_RunAction_hu6aa1b10790627322d23c4f5c290a2878_22221_cf3d30c890e858c07fb9127a70468ce2.png 400w,
               /g4-noqasked-012-writingrslt1/04_RunAction_hu6aa1b10790627322d23c4f5c290a2878_22221_8d0a107778604bd181c16f42defa3125.png 760w,
               /g4-noqasked-012-writingrslt1/04_RunAction_hu6aa1b10790627322d23c4f5c290a2878_22221_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/04_RunAction_hu6aa1b10790627322d23c4f5c290a2878_22221_cf3d30c890e858c07fb9127a70468ce2.png&#34;
               width=&#34;569&#34;
               height=&#34;578&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 OpenFile() 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4bool OpenFile(const G4String&amp;amp; fileName = &amp;quot;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;fileName: &lt;b&gt;출력파일의 이름. 사용자가 원하는 이름으로 입력하여 사용.&lt;/b&gt; 입력하지 않아도 되며, 기본값은 &amp;quot;&amp;quot;(빈 문자열). 이 함수로 이름을 입력하지 않은 경우에는, 정상 동작을 위해 SetFileName() 등과 같은 별도의 출력파일의 이름을 설정하는 함수를 이용해야 함&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이름을 아예 지정하지 않으면 다음과 같은 경고 문구가 출력되며, 출력파일이 아예 열리지 않습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;ndash; WWWW &amp;mdash;&amp;mdash;- G4Exception-START &amp;mdash;&amp;mdash;&amp;ndash; WWWW &amp;mdash;&amp;mdash;-&lt;/p&gt;
&lt;p&gt;*** G4Exception : Analysis_W001&lt;/p&gt;
&lt;p&gt;​      issued by : G4VFileManager::OpenFile()&lt;/p&gt;
&lt;p&gt;Cannot open file. File name is not defined.&lt;/p&gt;
&lt;p&gt;*** This is just a warning message. ***&lt;/p&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;ndash; WWWW &amp;mdash;&amp;mdash;&amp;ndash; G4Exception-END &amp;mdash;&amp;mdash;&amp;mdash; WWWW &amp;mdash;&amp;mdash;-&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;g4analysismanager로-파일-닫기&#34;&gt;G4AnalysisManager로 파일 닫기&lt;/h3&gt;
&lt;p&gt;파일을 열었다면 내용을 다 적은 뒤에 파일을 닫는 작업까지 해주어야 합니다. 데이터를 어떻게 기록하는지에 대해서는 조금 뒤에 다루기로 하고, &lt;b&gt;파일을 닫는 것&lt;/b&gt;부터 해보도록 합시다.&lt;/p&gt;
&lt;p&gt;매 Run이 시작될 때 파일을 열었으니, 매 Run이 끝날 때 파일을 닫는 것이 좋겠지요. 따라서 이 내용은 &lt;font color=red&gt;&lt;b&gt;EndOfRunAction() 함수 내에 적도록 합니다&lt;/b&gt;&lt;/font&gt;. 파일을 닫기 위해서는 G4AnalysisManager 클래스가 제공하는 &lt;b&gt;CloseFile() 함수&lt;/b&gt;를 이용합니다. 다음과 같이 작성해봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto analysisManager = G4AnalysisManager::Instance();
analysisManager-&amp;gt;CloseFile();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;G4AnalysisManager의 객체를 가져오고, 그 객체로 CloseFile() 함수를 사용한 것입니다. 작성한 코드의 모습은 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_RunAction&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/05_RunAction_hu5d18257ebf280de7e47674edc8ac3e9f_26183_bfe6b6e5827ffdc1fc9e7b00a1eebd60.png 400w,
               /g4-noqasked-012-writingrslt1/05_RunAction_hu5d18257ebf280de7e47674edc8ac3e9f_26183_aa39eb3dee69e680447c9a02a318288e.png 760w,
               /g4-noqasked-012-writingrslt1/05_RunAction_hu5d18257ebf280de7e47674edc8ac3e9f_26183_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/05_RunAction_hu5d18257ebf280de7e47674edc8ac3e9f_26183_bfe6b6e5827ffdc1fc9e7b00a1eebd60.png&#34;
               width=&#34;571&#34;
               height=&#34;640&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 CloseFile() 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4bool CloseFile(G4bool reset = true);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;reset: &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 파일을 닫을 때, 메모리에 저장된 데이터를 reset시킬 지 여부에 대한 인자.기본값은 true&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;histogram-기록하기&#34;&gt;Histogram 기록하기&lt;/h2&gt;
&lt;p&gt;Histogram으로 기록하기 위해서는 다음의 세 가지만 수행하면 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateH1() 함수&lt;/b&gt;를 사용하여 히스토그램을 생성&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;FillH1() 함수&lt;/b&gt;를 사용하여 데이터 누적&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RunAction의 EndOfRunAction() 함수 안&lt;/b&gt;에서, 출력파일을 닫기 전에 &lt;b&gt;Write() 함수&lt;/b&gt;를 사용하여 데이터 기록&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;histogram-생성&#34;&gt;Histogram 생성&lt;/h3&gt;
&lt;p&gt;먼저 &amp;ldquo;1. &lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateH1() 함수&lt;/b&gt;를 사용하여 히스토그램을 생성 작업&amp;quot;을 수행하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;&lt;/font&gt;로 돌아갑니다. 여기에서 아까 만들어둔 analysisManager라는 변수명을 가진 객체를 이용해서 히스토그램을 생성해줄 것입니다. 이 때 사용하는 함수는 CreateH1() 함수인데요, 이 함수의 원형부터 살펴보겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4int CreateH1(const G4String&amp;amp; name, const G4String&amp;amp; title,
               G4int nbins, G4double xmin, G4double xmax,
               const G4String&amp;amp; unitName = &amp;quot;none&amp;quot;,
               const G4String&amp;amp; fcnName = &amp;quot;none&amp;quot;,
               const G4String&amp;amp; binSchemeName = &amp;quot;linear&amp;quot;);
G4int CreateH1(const G4String&amp;amp; name, const G4String&amp;amp; title,
               const std::vector&amp;lt;G4double&amp;gt;&amp;amp; edges,
               const G4String&amp;amp; unitName = &amp;quot;none&amp;quot;,
               const G4String&amp;amp; fcnName = &amp;quot;none&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;name: &lt;b&gt;히스토그램의 이름&lt;/b&gt;. 최종적인 출력 파일의 이름에 사용됨&lt;/li&gt;
&lt;li&gt;title: 히스토그램의 제목. 출력된 파일 내부에서 제목으로 쓰여져 있음.&lt;/li&gt;
&lt;li&gt;nbins: &lt;b&gt;히스토그램의 계급의 개수&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;xmin: &lt;b&gt;히스토그램의 계급의 최솟값&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;xmax: &lt;b&gt;히스토그램의 계급의 최댓값&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;edges: 히스토그램의 구간 경계. G4double 벡터 자료형으로 입력&lt;/li&gt;
&lt;li&gt;&lt;i&gt;unitName: &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 히스토그램의 정보 중 단위에 대한 내용을 저장. 기본값은 &amp;ldquo;none&amp;rdquo;&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;fcnName: &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 기본값은 &amp;ldquo;none&amp;rdquo;&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;binSchemeName: &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 기본값은 &amp;ldquo;linear&amp;rdquo;&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위쪽의 함수 원형은 최소, 최대, 구간 개수로 히스토그램을 정의하는 방식이고, 아래쪽의 함수 원형은 구간의 경계를 이용하여 히스토그램을 정의하는 방식입니다. 이 시리즈에서는 위쪽의 것만 설명하겠습니다.&lt;/p&gt;
&lt;p&gt;이 시리즈에서 앞서 스코어링한 물리량은 물 팬텀에 deposit된 에너지였습니다. 이를 &lt;b&gt;0.0 ~ 3.0까지 1024개의 구간&lt;/b&gt;으로 나누어 히스토그램을 만들어봅시다. 이 경우 &lt;b&gt;RunAction.cc 파일의 생성자&lt;/b&gt;에 다음과 같이 코드를 추가하면 됩니다. &lt;b&gt;다만, 여기서 MeV라는 단위를 사용하기 위해서는 헤더쪽에 &amp;quot;G4SystemOfUnits.hh&amp;quot;를 포함시켜야 한다는 점도 잊지마세요.&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;CreateH1(&amp;quot;EDep&amp;quot;, &amp;quot;Energy Deposition&amp;quot;, 1024, 0., 3.);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;히스토그램의 이름은 &amp;quot;EDep&amp;quot;, 제목은 &amp;quot;Energy Deposition&amp;quot;이며, 0.0 ~ 3.0의 구간을 1024개로 쪼개어 히스토그램을 생성하였습니다.&lt;/p&gt;
&lt;p&gt;실제 작성된 RunAction.cc 파일의 모습은 다음과 같아야 합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/06_Hist_hu30f625ded2fa16f03330b03aacd8325a_55218_dd4cbe6347e31efc5219d9a3d211777f.png 400w,
               /g4-noqasked-012-writingrslt1/06_Hist_hu30f625ded2fa16f03330b03aacd8325a_55218_a07cb1a63b11b5132d5d64ba43a21aca.png 760w,
               /g4-noqasked-012-writingrslt1/06_Hist_hu30f625ded2fa16f03330b03aacd8325a_55218_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/06_Hist_hu30f625ded2fa16f03330b03aacd8325a_55218_dd4cbe6347e31efc5219d9a3d211777f.png&#34;
               width=&#34;760&#34;
               height=&#34;654&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;histogram에-데이터-누적&#34;&gt;Histogram에 데이터 누적&lt;/h3&gt;
&lt;p&gt;이제 &amp;quot;2. &lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;FillH1() 함수&lt;/b&gt;를 사용하여 데이터 누적&amp;quot; 작업을 수행하겠습니다.&lt;/p&gt;
&lt;p&gt;이 작업은 매 Event가 끝난 뒤 Hit을 정리할 때마다 수행해야 하므로, &lt;font color=red&gt;&lt;b&gt;EventAction.cc 파일의 EndOfEventAction() 함수 내에 코드를 작성&lt;/b&gt;&lt;/font&gt;합니다. &lt;b&gt;물론 헤더도 추가&lt;/b&gt;해야합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    작성하는 파일과 위치에 주의하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;현재 &lt;b&gt;EventAction.cc&lt;/b&gt; 파일의 모습은 다음과 같을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/07_Hist_hub17028edc57f24dd1f826f9927f8c387_66195_cd1384a0bfe08e2a431f35ae35661a17.png 400w,
               /g4-noqasked-012-writingrslt1/07_Hist_hub17028edc57f24dd1f826f9927f8c387_66195_2dd2f881826b65a2195bb8209faa192c.png 760w,
               /g4-noqasked-012-writingrslt1/07_Hist_hub17028edc57f24dd1f826f9927f8c387_66195_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/07_Hist_hub17028edc57f24dd1f826f9927f8c387_66195_cd1384a0bfe08e2a431f35ae35661a17.png&#34;
               width=&#34;650&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 다음의 세 가지 작업을 할 것입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;파일의 맨 위에 CSV용 G4AnalysisManager 사용을 위해, &lt;code&gt;g4csv.hh&lt;/code&gt; 헤더 포함&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#incldue &amp;quot;g4csv.hh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EndOfEventAction() 함수 내, for 반복문의 위쪽에 G4AnalysisManager 객체를 만듦&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto analysisManager = G4AnalysisManager::Instance();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EndOfEventAction() 함수 내, for 반복문 안에서 eDep이 0보다 큰지 확인하는 if 조건문 안에 히스토그램에 누적하는 내용을 작성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;FillH1(0, eDep / MeV);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 사용된 FillH1() 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4bool G4VAnalysisManager::FillH1(G4int id, G4double value, G4double weight = 1.0);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;id: &lt;b&gt;히스토그램의 ID&lt;/b&gt;. 앞서 히스토그램을 생성할 때 별도로 설정하지 않았다면, &lt;b&gt;만들어진 순서대로 0, 1, 2, &amp;hellip; 와 같이 부여&lt;/b&gt;됨.&lt;/li&gt;
&lt;li&gt;value: &lt;b&gt;히스토그램에 누적시킬 값&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;weight: &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 히스토그램에 값을 누적시킬 때의 가중치. 기본값은 1.0&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;히스토그램의 ID 번호&lt;/b&gt;와 &lt;b&gt;누적시킬 값&lt;/b&gt;을 입력해서 사용하면 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;08_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/08_Hist_hu83449043b55f85752a70dd754a3cceae_74814_d9f971a534d778116aca5cb71ca2e67d.png 400w,
               /g4-noqasked-012-writingrslt1/08_Hist_hu83449043b55f85752a70dd754a3cceae_74814_1f36dbf637e8060accd7b7621b7aaab5.png 760w,
               /g4-noqasked-012-writingrslt1/08_Hist_hu83449043b55f85752a70dd754a3cceae_74814_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/08_Hist_hu83449043b55f85752a70dd754a3cceae_74814_d9f971a534d778116aca5cb71ca2e67d.png&#34;
               width=&#34;595&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;histogram을-파일에-기록&#34;&gt;Histogram을 파일에 기록&lt;/h3&gt;
&lt;p&gt;마지막으로, &amp;ldquo;3. &lt;b&gt;RunAction의 EndOfRunAction() 함수 안&lt;/b&gt;에서, 출력파일을 닫기 전에 &lt;b&gt;Write() 함수&lt;/b&gt;를 사용하여 데이터 기록&amp;quot;을 진행하겠습니다.&lt;/p&gt;
&lt;p&gt;다시 &lt;font color=red&gt;&lt;b&gt;RunAction.cc 파일&lt;/b&gt;&lt;/font&gt;로 돌아옵니다. 여기서 &lt;font color=red&gt;&lt;b&gt;EndOfRunAction() 함수&lt;/b&gt;&lt;/font&gt;에서 아까 적어둔 CloseFile() 함수 줄 바로 위에, G4AnalysisManager 클래스가 제공하는 Write() 함수를 사용해주면 됩니다. 코드로는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;Write();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;작성하고 나면 다음과 같은 모습일 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;09_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/09_Hist_hu77979dcff9ca7695a1598bbe0a7bf188_57644_5caee0bbe8164c149a495192d671b89c.png 400w,
               /g4-noqasked-012-writingrslt1/09_Hist_hu77979dcff9ca7695a1598bbe0a7bf188_57644_a188531d7a3ffb9a31d1b0c5bfab755b.png 760w,
               /g4-noqasked-012-writingrslt1/09_Hist_hu77979dcff9ca7695a1598bbe0a7bf188_57644_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/09_Hist_hu77979dcff9ca7695a1598bbe0a7bf188_57644_5caee0bbe8164c149a495192d671b89c.png&#34;
               width=&#34;760&#34;
               height=&#34;679&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;결과-확인&#34;&gt;결과 확인&lt;/h3&gt;
&lt;p&gt;다 끝났습니다. 이제 build 디렉토리에 들어가서, 다음 명령어를 입력하여 시뮬레이션을 수행해봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make
./g4_minimal run.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;시뮬레이션이 정상적으로 종료되고 &amp;ldquo;Good bye :)&amp;ldquo;를 확인하셨다면, build 디렉토리 안에 다음 그림과 같이 G4_Minimal_h1_EDep.csv 라는 파일이 생성된 것을 확인할 수 있습니다. 여기서 알 수 있듯, 최종 히스토그램 파일의 이름은 &lt;code&gt;{OpenFile()에서 입력한 파일 이름}_h1_{CreateH1()에서 입력한 히스토그램이름}.csv&lt;/code&gt;으로 결정됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;10_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/10_Hist_hu717eb6394220038e2ff6da44b1b487ba_14807_077f60185e937b13aca0b9e149316a3c.png 400w,
               /g4-noqasked-012-writingrslt1/10_Hist_hu717eb6394220038e2ff6da44b1b487ba_14807_23063a5844b1b9843a21b6538f2fbb51.png 760w,
               /g4-noqasked-012-writingrslt1/10_Hist_hu717eb6394220038e2ff6da44b1b487ba_14807_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/10_Hist_hu717eb6394220038e2ff6da44b1b487ba_14807_077f60185e937b13aca0b9e149316a3c.png&#34;
               width=&#34;748&#34;
               height=&#34;99&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;파일을 열어보시면 다음과 같이 맨 위의 헤더 형태로 적힌 히스토그램의 정보와 함께, 히스토그램 결과가 5열로 기록되어 있는 것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;11_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/11_Hist_huc86d9a616db5b766ebc53d25025a6875_25216_e6942ab5ffa7fe35f1ad5bb757ddb5f3.png 400w,
               /g4-noqasked-012-writingrslt1/11_Hist_huc86d9a616db5b766ebc53d25025a6875_25216_5c0d37835b355b612924312b45fb22df.png 760w,
               /g4-noqasked-012-writingrslt1/11_Hist_huc86d9a616db5b766ebc53d25025a6875_25216_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/11_Hist_huc86d9a616db5b766ebc53d25025a6875_25216_e6942ab5ffa7fe35f1ad5bb757ddb5f3.png&#34;
               width=&#34;308&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 각 열은 순서대로 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;entries: 각 계급 구간의 도수 (값이 구간에 들어온 개수)&lt;/li&gt;
&lt;li&gt;Sw: 가중치의 합 (기본적으로 가중치는 1이며, 모든 가중치가 1인 경우 entries와 값이 동일함. 이 가중치는 variance reduction 등에 관한 내용이므로 생략)&lt;/li&gt;
&lt;li&gt;Sw2: 가중치의 제곱합 (기본적으로 가중치는 1이며, 모든 가중치가 1인 경우 entries와 값이 동일함. 이 가중치는 variance reduction 등에 관한 내용이므로 생략)&lt;/li&gt;
&lt;li&gt;Sxw0: 기록한 값과 가중치의 곱의 합 (기록한 값이란, 히스토그램에 누적하기 위해 입력한 실제 값을 의미함)&lt;/li&gt;
&lt;li&gt;Sx2w0: 기록한 값의 제곱과 가중치의 곱의 합&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 행은 계급 구간의 좌우 경계 값에 대해 &lt;b&gt;왼쪽 값 이상~오른쪽 값 미만&lt;/b&gt;의 범위에 들어온 데이터에 대해 기록됩니다. 또한, 총 행의 수는 CreateH1() 함수에서 기록한 개수보다 2개 더 많으며, &lt;b&gt;맨 첫 행에 최솟값 미만&lt;/b&gt;인 경우, &lt;b&gt;맨 마지막 행에 최댓값 이상&lt;/b&gt;인 경우가 추가적으로 기록됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이번 글에서는 스코어링한 데이터를 csv 형식으로 Histogram 형태에 맞추어 출력하는 방법에 대해 알아보았습니다. 다음 글에서는 이어서 Ntuple 형태에 맞추어 출력하는 방법에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 13. 스코어링 기록(Ntuple)</title>
      <link>https://evandde.github.io/g4-noqasked-013-writingrslt2/</link>
      <pubDate>Thu, 19 Aug 2021 20:49:41 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-013-writingrslt2/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 열세번째. Geant4에서 스코어링한 결과를 파일로 기록하는 방법 중 Ntuple 형태로 기록하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;지난 글에 이어, 이번 글에서는 스코어링 결과를 Ntuple 형태로 기록하는 방법에 대해 알아보겠습니다. 이전 글에서 작성했던 Histogram 출력 내용과 관련한 코드는 그대로 두고, 여기에 이어서 작업을 진행하도록 하겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ntuple-기록하기&#34;&gt;Ntuple 기록하기&lt;/h2&gt;
&lt;p&gt;Ntuple이란, 간단히 말해 &lt;b&gt;표&lt;/b&gt;입니다. 사실은 n개의 순서쌍으로 묶인 데이터라는 뜻입니다만, 이런 데이터를 m개 쌓아놓으면 그냥 m×n 크기의 표가 됩니다.&lt;/p&gt;
&lt;p&gt;그래서, Ntuple로 기록하는 과정은 사용자가 표를 직접 그리듯이 작업이 진행됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateNtuple() 함수&lt;/b&gt;를 사용하여 Ntuple을 생성&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateNtuple?Column() 함수&lt;/b&gt;를 사용하여 Ntuple의 &lt;b&gt;열&lt;/b&gt;을 생성&lt;/li&gt;
&lt;li&gt;모든 열을 추가한 뒤, &lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;FinishNtuple() 함수&lt;/b&gt;를 사용하여 Ntuple의 디자인을 완성&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;FillNtuple?Column() 함수&lt;/b&gt;를 사용하여 각 열에 데이터를 기록&lt;/li&gt;
&lt;li&gt;한 행에 해당하는 모든 열 데이터를 기록한 뒤, &lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;AddNtupleRow() 함수&lt;/b&gt;를 사용하여 한 행만큼의 데이터를 Ntuple에 추가&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RunAction의 EndOfRunAction() 함수 안&lt;/b&gt;에서, 출력파일을 닫기 전에 &lt;b&gt;Write() 함수&lt;/b&gt;를 사용하여 데이터 기록&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ntuple-생성-및-디자인&#34;&gt;Ntuple 생성 및 디자인&lt;/h3&gt;
&lt;p&gt;먼저, 다음의 세 단계를 통해 Ntuple이라는 데이터 양식을 생성하겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateNtuple() 함수&lt;/b&gt;를 사용하여 Ntuple을 생성&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateNtuple?Column() 함수&lt;/b&gt;를 사용하여 Ntuple의 &lt;b&gt;열&lt;/b&gt;을 생성&lt;/li&gt;
&lt;li&gt;모든 열을 추가한 뒤, &lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;FinishNtuple() 함수&lt;/b&gt;를 사용하여 Ntuple의 디자인을 완성&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;RunAction.cc 파일을 열고, RunAction의 생성자 내&lt;/b&gt;&lt;/font&gt;에 작성합니다 . 이전 글에서 만들었던 analysisManager라는 변수명을 가진 객체를 이용해서 Ntuple을 생성해줄 것입니다. 이 때 사용하는 함수는 CreateNtuple() 함수인데요, 이 함수의 원형부터 살펴보겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4int CreateNtuple(const G4String&amp;amp; name, const G4String&amp;amp; title);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;name: &lt;b&gt;Ntuple의 이름&lt;/b&gt;. 최종적인 출력 파일의 이름에 사용됨&lt;/li&gt;
&lt;li&gt;title: Ntuple의 제목. 출력된 파일 내부에서 제목으로 쓰여져 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어, 이름을 &amp;quot;EDep&amp;quot;라고 짓고, 제목은 &amp;quot;Energy Deposition&amp;quot;이라고 지은 Ntuple을 만든다면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;CreateNtuple(&amp;quot;EDep&amp;quot;, &amp;quot;Energy Deposition&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이어서, 이 Ntuple의 열을 추가합니다. 열을 추가하는 데에 사용하는 함수들의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4int CreateNtupleIColumn(const G4String&amp;amp; name): &lt;b&gt;정수형&lt;/b&gt;(&lt;b&gt;i&lt;/b&gt;nteger) 값이 기록될 열을 추가하는 함수. 입력 인자 name은 이 열의 이름을 의미함.&lt;/li&gt;
&lt;li&gt;G4int CreateNtupleFColumn(const G4String&amp;amp; name): &lt;b&gt;실수형&lt;/b&gt;(&lt;b&gt;f&lt;/b&gt;loat) 값이 기록될 열을 추가하는 함수. 입력 인자 name은 이 열의 이름을 의미함.&lt;/li&gt;
&lt;li&gt;G4int CreateNtupleDColumn(const G4String&amp;amp; name): &lt;b&gt;실수형&lt;/b&gt;(&lt;b&gt;d&lt;/b&gt;ouble) 값이 기록될 열을 추가하는 함수. 입력 인자 name은 이 열의 이름을 의미함.&lt;/li&gt;
&lt;li&gt;G4int CreateNtupleSColumn(const G4String&amp;amp; name): &lt;b&gt;문자열형&lt;/b&gt;(&lt;b&gt;s&lt;/b&gt;tring) 값이 기록될 열을 추가하는 함수. 입력 인자 name은 이 열의 이름을 의미함.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;데이터를 기록할 때 이 표의 열마다 어떤 자료형을 기록할 지 생각하며 &lt;b&gt;순서대로 추가&lt;/b&gt;해나가면 됩니다.&lt;/p&gt;
&lt;p&gt;여기서는 Energy Deposition 값에 해당하는 &lt;b&gt;한 열&lt;/b&gt;만 기록하도록 하겠습니다. 열의 이름은 &amp;quot;EDep&amp;quot;으로 하겠습니다. 이는 &lt;b&gt;실수값 double형&lt;/b&gt;이므로, &lt;b&gt;CreateNtupleDColumn() 함수&lt;/b&gt;를 이용합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;CreateNtupleDColumn(&amp;quot;EDep&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;기록하고 싶은 데이터 열이 더 많다면 같은 방식으로 이어붙여서 더 추가&lt;/b&gt;하시면 됩니다.&lt;/p&gt;
&lt;p&gt;다 추가하셨다면 이제 이 디자인으로 Ntuple을 완성해야 합니다. 이 때에는 &lt;b&gt;FinishNtuple() 함수&lt;/b&gt;를 사용합니다. 여기서는 한 열만 추가하기로 하였으므로, 위에 열을 추가한 내용에 이어서 FinishNtuple() 함수를 적어주면 됩니다. 다음과 같이 말이죠.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;FinishNtuple();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;최종적으로 작성된 RunAction.cc 파일의 모습은 다음과 같아야 합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;12_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/12_Ntuple_hu68214706d433b542a1a512a1062a3657_70724_b5ec96256ce7e480bdb1f8695fa00ae8.png 400w,
               /g4-noqasked-013-writingrslt2/12_Ntuple_hu68214706d433b542a1a512a1062a3657_70724_8198c090a018507dad481fd6f2ce4956.png 760w,
               /g4-noqasked-013-writingrslt2/12_Ntuple_hu68214706d433b542a1a512a1062a3657_70724_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/12_Ntuple_hu68214706d433b542a1a512a1062a3657_70724_b5ec96256ce7e480bdb1f8695fa00ae8.png&#34;
               width=&#34;740&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;ntuple-작성&#34;&gt;Ntuple 작성&lt;/h3&gt;
&lt;p&gt;이제 다음의 두 단계에 해당하는 내용을 작성하겠습니다.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;FillNtuple?Column() 함수&lt;/b&gt;를 사용하여 각 열에 데이터를 기록&lt;/li&gt;
&lt;li&gt;한 행에 해당하는 모든 열 데이터를 기록한 뒤, &lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;AddNtupleRow() 함수&lt;/b&gt;를 사용하여 한 행만큼의 데이터를 Ntuple에 추가&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 작업은 매 Event가 끝난 뒤 Hit을 정리할 때마다 수행해야 하므로, &lt;font color=red&gt;&lt;b&gt;EventAction.cc 파일의 EndOfEventAction() 함수 내에 코드를 작성&lt;/b&gt;&lt;/font&gt;합니다. &lt;b&gt;물론 &lt;code&gt;g4csv.hh&lt;/code&gt;와 같은 헤더도 추가&lt;/b&gt;해야합니다만, 앞서 Histogram할 때 추가해뒀으므로 생략하겠습니다.&lt;/p&gt;
&lt;p&gt;현재 EventAction.cc 파일의 모습은 다음과 같을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;13_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/13_Ntuple_hu24a617866c52b3f4d49494e11be43312_74059_77c7c0d86956814489f8450044769fa8.png 400w,
               /g4-noqasked-013-writingrslt2/13_Ntuple_hu24a617866c52b3f4d49494e11be43312_74059_cab0dc8f3b8098ba79087db73b9f2ad3.png 760w,
               /g4-noqasked-013-writingrslt2/13_Ntuple_hu24a617866c52b3f4d49494e11be43312_74059_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/13_Ntuple_hu24a617866c52b3f4d49494e11be43312_74059_77c7c0d86956814489f8450044769fa8.png&#34;
               width=&#34;601&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 아까 만들어 둔 analysisManager 객체를 활용하여 두 가지 작업을 수행할 것입니다.&lt;/p&gt;
&lt;p&gt;먼저, &lt;font color=red&gt;&lt;b&gt;EndOfEventAction() 함수&lt;/b&gt;&lt;/font&gt; 내의 for 반복문 안에서 eDep이 0보다 큰지 확인하는 if 조건문 안에서 G4AnalysisManager 클래스가 제공하는 &lt;b&gt;FillNtuple?Column() 함수&lt;/b&gt;를 이용하여 &lt;b&gt;Ntuple의 0번째 열에 eDep 데이터를 기록&lt;/b&gt;합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;FillNtupleDColumn(0, eDep / MeV);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CreateNtuple?Column() 함수와 동일하게 &lt;b&gt;I(정수)&lt;/b&gt;/&lt;b&gt;F(실수)&lt;/b&gt;/&lt;b&gt;D(실수)&lt;/b&gt;/&lt;b&gt;S(문자열)&lt;/b&gt;의 &lt;b&gt;4종류&lt;/b&gt;가 있습니다. 대표적으로 FillNtupleDColumn() 함수의 원형만 살펴보면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4bool FillNtupleDColumn(G4int columnId, G4double value);
G4bool FillNtupleDColumn(G4int ntupleId, G4int columnId, G4double value);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;columnId: Ntuple에서 데이터를 기록할 &lt;b&gt;열의 번호&lt;/b&gt; (0부터 시작하여 0, 1, 2, &amp;hellip; 로 올라감)&lt;/li&gt;
&lt;li&gt;value: Ntuple에 기록할 &lt;b&gt;데이터 값&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;ntupleId: Ntuple이 여러 개일 경우, 데이터를 기록할 &lt;b&gt;Ntuple의 ID 번호&lt;/b&gt;. Ntuple을 생성할 때 별도로 지정하지 않았다면, &lt;b&gt;만든 순서대로 0, 1, 2, &amp;hellip;로 부여&lt;/b&gt;됨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ntuple을 한 개만 이용한다면 위의 함수를 이용하여 열 번호와 값만 입력하면 됩니다. Ntuple을 여러 개 이용하고 있다면 아래의 함수를 이용하여 Ntuple의 ID 번호, 열 번호, 값의 순서로 입력하면 됩니다.&lt;/p&gt;
&lt;p&gt;모든 열을 다 추가하였다면, G4AnalysisManager 클래스가 제공하는 &lt;b&gt;AddNtupleRow() 함수&lt;/b&gt;를 이용하여 한 행 단위로 마무리해 줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;AddNtupleRow();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;코드를 다 적으면 다음과 같은 모양일 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;14_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/14_Ntuple_hua5d049ded43bfc855ca46a2995c65bf1_78921_fcba76ac968e8046259240425704a562.png 400w,
               /g4-noqasked-013-writingrslt2/14_Ntuple_hua5d049ded43bfc855ca46a2995c65bf1_78921_08215f10bebc810cf74e29caf14d226e.png 760w,
               /g4-noqasked-013-writingrslt2/14_Ntuple_hua5d049ded43bfc855ca46a2995c65bf1_78921_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/14_Ntuple_hua5d049ded43bfc855ca46a2995c65bf1_78921_fcba76ac968e8046259240425704a562.png&#34;
               width=&#34;564&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;ntuple을-파일에-기록&#34;&gt;Ntuple을 파일에 기록&lt;/h3&gt;
&lt;p&gt;마지막으로, &amp;ldquo;6. &lt;b&gt;RunAction의 EndOfRunAction() 함수 안&lt;/b&gt;에서, 출력파일을 닫기 전에 &lt;b&gt;Write() 함수&lt;/b&gt;를 사용하여 데이터 기록&amp;quot;을 진행해야 합니다만, 이 내용은 &lt;b&gt;앞서 Histogram을 할 때 해두었으므로 여기서 따로 또 할필요는 없습니다&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;RunAction.cc 파일&lt;/b&gt;&lt;/font&gt;의 &lt;font color=red&gt;&lt;b&gt;EndOfRunAction() 함수&lt;/b&gt;&lt;/font&gt;에 아까 적어둔 &lt;code&gt;analysisManager-&amp;gt;Write();&lt;/code&gt; 코드가 잘 적혀있는지 확인만 하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;15_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/15_Ntuple_hub67d0d4aeac9225003144941d4788486_69855_ebe2270078f05e1d02848583037e4b01.png 400w,
               /g4-noqasked-013-writingrslt2/15_Ntuple_hub67d0d4aeac9225003144941d4788486_69855_7760f6ce0ec16e19f4f5c05a40ac87bf.png 760w,
               /g4-noqasked-013-writingrslt2/15_Ntuple_hub67d0d4aeac9225003144941d4788486_69855_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/15_Ntuple_hub67d0d4aeac9225003144941d4788486_69855_ebe2270078f05e1d02848583037e4b01.png&#34;
               width=&#34;739&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;결과-확인&#34;&gt;결과 확인&lt;/h3&gt;
&lt;p&gt;Ntuple 기록하기도 다 끝났습니다. 이제 build 디렉토리에 들어가서, 다음 명령어를 입력하여 시뮬레이션을 수행해봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make
./g4_minimal run.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;시뮬레이션이 정상적으로 종료되고 &amp;ldquo;Good bye :)&amp;ldquo;를 확인하셨다면, build 디렉토리 안에 다음 그림과 같이 G4_Minimal_nt_EDep.csv 라는 파일이 생성된 것을 확인할 수 있습니다. 여기서 알 수 있듯, 최종 히스토그램 파일의 이름은 &lt;code&gt;{OpenFile()에서 입력한 파일 이름}_nt_{CreateNtuple()에서 입력한 Ntuple이름}.csv&lt;/code&gt;으로 결정됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;16_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/16_Ntuple_hu1040e2def15fc55c46367f73613d8eea_10614_5bbae02f010306e65214c474584240c5.png 400w,
               /g4-noqasked-013-writingrslt2/16_Ntuple_hu1040e2def15fc55c46367f73613d8eea_10614_01e2fb50e22139907fd80e588fcfeaf0.png 760w,
               /g4-noqasked-013-writingrslt2/16_Ntuple_hu1040e2def15fc55c46367f73613d8eea_10614_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/16_Ntuple_hu1040e2def15fc55c46367f73613d8eea_10614_5bbae02f010306e65214c474584240c5.png&#34;
               width=&#34;760&#34;
               height=&#34;67&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;파일을 열어보시면 다음과 같이 맨 위의 헤더 형태로 적힌 Ntuple의 정보와 함께, 결과가 1열로 기록되어 있는 것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;17_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/17_Ntuple_hu9b1612882ead44547ec1c4b3fb8e8be4_6848_f783611fbbd316cb457ab1203c064a25.png 400w,
               /g4-noqasked-013-writingrslt2/17_Ntuple_hu9b1612882ead44547ec1c4b3fb8e8be4_6848_361c630c08eb8de0aafb27f4a029ccb0.png 760w,
               /g4-noqasked-013-writingrslt2/17_Ntuple_hu9b1612882ead44547ec1c4b3fb8e8be4_6848_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/17_Ntuple_hu9b1612882ead44547ec1c4b3fb8e8be4_6848_f783611fbbd316cb457ab1203c064a25.png&#34;
               width=&#34;298&#34;
               height=&#34;250&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;지금 이 결과는 &lt;code&gt;/run/beamOn 1000&lt;/code&gt;으로 돌렸을 때의 결과입니다만, 기록된 Event가 많지 않네요.&lt;/p&gt;
&lt;p&gt;제가 돌린 시뮬레이션은 5×5×5 cm&lt;sup&gt;3&lt;/sup&gt; 크기의 작은 물팬텀을 10 cm 거리에 둔 데다가, 선원도 0.662 MeV의 등방성 감마선원이라 반응 자체가 별로 일어나지 않아서 그런 것으로 판단됩니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;최종-파일-다운받는-법&#34;&gt;최종 파일 다운받는 법&lt;/h2&gt;
&lt;p&gt;지난 글과 이번 글에서 작성한 스코어링 결과 기록 관련 코드는 &lt;a href=&#34;https://github.com/evandde/g4_minimal/archive/refs/heads/example.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;를 통해 다운받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은 git repository를 clone하신 분의 경우에는, example branch의 가장 최신 커밋인 V4 analysis 커밋을 참고하셔도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이번 글에서는 스코어링한 데이터를 csv 형식으로 Ntuple 형태에 맞추어 출력하는 방법에 대해 알아보았습니다. 여기까지의 내용을 통해, 여러분은 이제 시뮬레이션 결과를 원하는 형태로 파일에 기록하여 출력할 수 있게 되었습니다.&lt;/p&gt;
&lt;p&gt;이번 글로서 Geant4 무작정 따라하기 시리즈는 끝입니다. 다음 글에서 후기와 함께 마무리 짓도록 하겠습니다!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 시리즈를 마치며</title>
      <link>https://evandde.github.io/g4-noqasked-014-closing/</link>
      <pubDate>Fri, 20 Aug 2021 09:42:35 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-014-closing/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈를 함께해주신 분들께 감사드립니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;최종-코드-되돌아보기&#34;&gt;최종 코드 되돌아보기&lt;/h2&gt;
&lt;p&gt;이 시리즈를 통해 우리가 작성했던 모든 내용을 쭉 훑어보는 시간을 가질까 합니다.&lt;/p&gt;
&lt;h3 id=&#34;detectorconstruction&#34;&gt;DetectorConstruction&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_DetCon&#34; srcset=&#34;
               /g4-noqasked-014-closing/01_DetCon_hu0b11d2faa912dfa9ec954fab220cce7b_130591_55d08f8a5a66778ab6177493b330d371.png 400w,
               /g4-noqasked-014-closing/01_DetCon_hu0b11d2faa912dfa9ec954fab220cce7b_130591_7437f489999a06c1b8666aba49b59822.png 760w,
               /g4-noqasked-014-closing/01_DetCon_hu0b11d2faa912dfa9ec954fab220cce7b_130591_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-014-closing/01_DetCon_hu0b11d2faa912dfa9ec954fab220cce7b_130591_55d08f8a5a66778ab6177493b330d371.png&#34;
               width=&#34;620&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;primarygeneratoraction&#34;&gt;PrimaryGeneratorAction&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_PrimGen&#34; srcset=&#34;
               /g4-noqasked-014-closing/02_PrimGen_hu14aa7f133057c8806c070d2cde5b1515_57473_44245512045bb8dbd0cce6ef5a6c5104.png 400w,
               /g4-noqasked-014-closing/02_PrimGen_hu14aa7f133057c8806c070d2cde5b1515_57473_fcb2d35b5a6379ef604b0bda99bf45d2.png 760w,
               /g4-noqasked-014-closing/02_PrimGen_hu14aa7f133057c8806c070d2cde5b1515_57473_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-014-closing/02_PrimGen_hu14aa7f133057c8806c070d2cde5b1515_57473_44245512045bb8dbd0cce6ef5a6c5104.png&#34;
               width=&#34;593&#34;
               height=&#34;595&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;runmac&#34;&gt;run.mac&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_runmac&#34; srcset=&#34;
               /g4-noqasked-014-closing/03_runmac_hua9cfa26db1908bd52a9230d561227046_20299_85a514d54c071edd14a829bf80754135.png 400w,
               /g4-noqasked-014-closing/03_runmac_hua9cfa26db1908bd52a9230d561227046_20299_32237322e06aac8815677706d0ca3967.png 760w,
               /g4-noqasked-014-closing/03_runmac_hua9cfa26db1908bd52a9230d561227046_20299_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-014-closing/03_runmac_hua9cfa26db1908bd52a9230d561227046_20299_85a514d54c071edd14a829bf80754135.png&#34;
               width=&#34;622&#34;
               height=&#34;226&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;eventaction&#34;&gt;EventAction&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_EventAction&#34; srcset=&#34;
               /g4-noqasked-014-closing/04_EventAction_huf9901a187972bca6dcd6fb103040e7eb_98543_dc8125e4ffde145d464b0e0f4dc64036.png 400w,
               /g4-noqasked-014-closing/04_EventAction_huf9901a187972bca6dcd6fb103040e7eb_98543_b141551665a2f6887dbf27b6d3c8df1a.png 760w,
               /g4-noqasked-014-closing/04_EventAction_huf9901a187972bca6dcd6fb103040e7eb_98543_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-014-closing/04_EventAction_huf9901a187972bca6dcd6fb103040e7eb_98543_dc8125e4ffde145d464b0e0f4dc64036.png&#34;
               width=&#34;600&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;runaction&#34;&gt;RunAction&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_RunAction&#34; srcset=&#34;
               /g4-noqasked-014-closing/05_RunAction_hudb8b5cf4b87b5ca83bf43fe734755ffe_89461_1912d34332b5e02b385c3b862a78d897.png 400w,
               /g4-noqasked-014-closing/05_RunAction_hudb8b5cf4b87b5ca83bf43fe734755ffe_89461_d2bb62160d8393ec879637345b86b77f.png 760w,
               /g4-noqasked-014-closing/05_RunAction_hudb8b5cf4b87b5ca83bf43fe734755ffe_89461_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-014-closing/05_RunAction_hudb8b5cf4b87b5ca83bf43fe734755ffe_89461_1912d34332b5e02b385c3b862a78d897.png&#34;
               width=&#34;755&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;후기&#34;&gt;후기&lt;/h2&gt;
&lt;p&gt;6월에 이 시리즈를 시작하여, 거의 세 달만에 시리즈를 마치게 되었네요.&lt;/p&gt;
&lt;p&gt;처음에 이 시리즈를 기획할 때에는 &#39;일단 쓸 수 있게 하는게 목표니까, 최대한 쉽고 간단하게 설명해야지&#39;라고 생각했습니다만&amp;hellip;&lt;/p&gt;
&lt;p&gt;막상 글을 쓰다보니, &#39;다들 사용 목적이 다를텐데, 이정도까지는 알아야 각자 상황에 맞는 시뮬레이션을 돌리지 않을까?&#39; 하는 생각이 들어서 자꾸 설명이 길어지더라구요.&lt;/p&gt;
&lt;p&gt;그리고 C++ 내용을 아예 배제하자니 코드 측면에서 설명이 안되고, C++ 설명을 넣자니 부연설명이 너무 길어지는지라 이 부분에서 고민도 많았습니다.&lt;/p&gt;
&lt;p&gt;부족함이 많았던 것 같지만 그래도 일단은 처음에 생각했던 내용까지 다 담아서 시리즈를 마무리했기에 홀가분하네요. 이 시리즈가 여러분에게 많은 도움이 되었으면 좋겠습니다.&lt;/p&gt;
&lt;p&gt;긴 글 따라오시느라 다들 고생 많으셨습니다!&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;좀 더 준비가 되면, 다음 번에는 아예 C++ 수준부터 차근차근 다뤄볼까 싶습니다. 제 지식 수준도 되짚어볼 겸, 공부도 할 겸 말이죠 :)&lt;/p&gt;
&lt;p&gt;다음에 만나요~&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
