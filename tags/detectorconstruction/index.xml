<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DetectorConstruction | EvaNote</title>
    <link>https://evandde.github.io/tags/detectorconstruction/</link>
      <atom:link href="https://evandde.github.io/tags/detectorconstruction/index.xml" rel="self" type="application/rss+xml" />
    <description>DetectorConstruction</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2021 Evan Kim</copyright><lastBuildDate>Thu, 10 Jun 2021 09:52:13 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>DetectorConstruction</title>
      <link>https://evandde.github.io/tags/detectorconstruction/</link>
    </image>
    
    <item>
      <title>Geant4 무작정 따라하기 - 2. 지오메트리 정의하기</title>
      <link>https://evandde.github.io/g4-noqasked-002-detcon/</link>
      <pubDate>Thu, 10 Jun 2021 09:52:13 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-002-detcon/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 두번째. 지오메트리를 정의하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4의-지오메트리-개념&#34;&gt;Geant4의 지오메트리 개념&lt;/h2&gt;
&lt;h3 id=&#34;기본&#34;&gt;기본&lt;/h3&gt;
&lt;p&gt;Geant4에서의 지오메트리 정의 과정은 다음의 세 클래스가 분리하여 담당합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Solid (형태): 지오메트리의 &lt;strong&gt;모양&lt;/strong&gt;, &lt;strong&gt;크기&lt;/strong&gt; 등에 대한 정보를 담당&lt;/li&gt;
&lt;li&gt;Logical Volume (특성): 지오메트리의 &lt;strong&gt;매질&lt;/strong&gt; 등 질적인 특성에 대한 정보를 담당&lt;/li&gt;
&lt;li&gt;Physical Volume (배치): 지오메트리의 &lt;strong&gt;위치&lt;/strong&gt;, &lt;strong&gt;회전&lt;/strong&gt;, &lt;strong&gt;소속&lt;/strong&gt; 등 배치에 대한 정보를 담당&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 세 가지 클래스가 다음 다이어그램과 같이 유기적으로 연결되어 하나의 지오메트리 객체를 정의하게 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B --&amp;gt; C
A[Solid]
B[Logical Volume]
C[Physical Volume]
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;모양에 대한 정보를 담은 Solid 객체를 정의.&lt;/li&gt;
&lt;li&gt;이 Solid 객체에 매질 정보를 넣어 Logical Volume 객체를 정의.&lt;/li&gt;
&lt;li&gt;이 Logical Volume 객체에 위치, 회전, 소속에 대한 정보를 넣어 Physical Volume 객체를 정의.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;좀 더 구체적인 예시로 다이어그램을 그려보면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B --&amp;gt; C
A[직육면체]
B[물이 담긴 직육면체]
C[&amp;quot;(10, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;중요한 부분은, &lt;strong&gt;Physical Volume까지 정의되어야만&lt;/strong&gt; 비로소 &lt;strong&gt;시뮬레이션 세계에 존재&lt;/strong&gt;하게 된다는 점입니다.&lt;/p&gt;
&lt;p&gt;즉, Solid만 정의된 상태인 &amp;ldquo;직육면체&amp;quot;나, Logical Volume까지만 정의된 &amp;ldquo;물이 담긴 직육면체&amp;quot;는 아직 시뮬레이션 세계에 존재하지 않는 &lt;strong&gt;개념적인 존재일 뿐&lt;/strong&gt;입니다. 이를 &lt;u&gt;&lt;strong&gt;Physical Volume으로서 &amp;quot;(10, 0, 0)에 놓겠다&amp;quot;는 부분이 정의되어야 그제서야 시뮬레이션 세계에 존재&lt;/strong&gt;&lt;/u&gt;하게 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;응용&#34;&gt;응용&lt;/h3&gt;
&lt;p&gt;Geant4에서는 지오메트리를 &lt;strong&gt;Solid(형태)&lt;/strong&gt;, &lt;strong&gt;Logical Volume(특성)&lt;/strong&gt;, &lt;b&gt;Physical Volume(배치)&lt;/b&gt;의 세 단계로 나누어 관리하기 때문에, 유사한 지오메트리를 여러개 배치하여야 할 때 이전에 만들어둔 객체를 재사용하여 효율적인 코딩이 가능합니다. Logical Volume을 재사용하는 다음의 다이어그램을 살펴봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B --&amp;gt; C &amp;amp; D &amp;amp; E
A[직육면체]
B[물이 담긴 직육면체]
C[&amp;quot;(0, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
D[&amp;quot;(10, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
E[&amp;quot;(20, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;물이 담긴 직육면체&amp;quot; 라는 Logical Volume을 여러 위치에 배치해야 하는 경우, 위 다이어그램과 같이 Physical Volume만을 변경하며 여러 번 정의해줄 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은, 모양이 동일한데 매질이 달라져야 하는 경우에는 다음과 같이 Solid 객체를 재사용하여 구성할 수도 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR
A --&amp;gt; B &amp;amp; C
B --&amp;gt; D &amp;amp; E
C --&amp;gt; F
A[직육면체]
B[물이 담긴 직육면체]
C[공기가 담긴 직육면체]
D[&amp;quot;(0, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
E[&amp;quot;(10, 0, 0)&amp;quot;에 위치한 물이 담긴 직육면체]
F[&amp;quot;(20, 0, 0)&amp;quot;에 위치한 공기가 담긴 직육면체]
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;실전&#34;&gt;실전&lt;/h2&gt;
&lt;p&gt;일단 이론은 이정도만 해두고, 코드를 직접 작성해봅시다.&lt;/p&gt;
&lt;p&gt;Geant4 코드 작성 시, 지오메트리에 대한 내용을 적는 곳은 정해져 있습니다. G4VUserDetectorConstruction 클래스를 상속받아 만드는 UserClass에 존재하는 G4VPhysicalVolume* Construct() 함수입니다. 하지만 이렇게 정석대로 설명하면 너무 생소하실테니 제가 제공해드렸던 템플릿 코드에서 살펴보도록 하죠.&lt;/p&gt;
&lt;p&gt;템플릿 코드의 &lt;strong&gt;src 디렉토리&lt;/strong&gt; 내부에 &lt;b&gt;DetectorConstruction.cc&lt;/b&gt;라는 파일이 있을 것입니다. 이 파일을 열면 다음 그림과 같은 코드가 나옵니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_detcon&#34; srcset=&#34;
               /g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_98254c7e6515c22bccd06a6a250bc279.png 400w,
               /g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_877b941cb9d0383047c8cfc68f9bee58.png 760w,
               /g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/01_detcon_hufb6bccb991e7259a24d74e047ad0cf74_92695_98254c7e6515c22bccd06a6a250bc279.png&#34;
               width=&#34;760&#34;
               height=&#34;485&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 18번째 줄부터 나오는 &lt;b&gt;G4VPhysicalVolume *DetectorConstruction::Construct() 함수 안&lt;/b&gt;에 지오메트리에 대한 내용을 적으면 됩니다.&lt;/p&gt;
&lt;p&gt;다음과 같이 정의되는 물이 담긴 팬텀&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;를 만들어보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solid: 가로, 세로, 높이가 5 cm인 정육면체&lt;/li&gt;
&lt;li&gt;Logical Volume: 매질을 물로 채움&lt;/li&gt;
&lt;li&gt;Physical Volume: 팬텀의 중심이 (0, 0, 10 cm)가 되게끔 위치시킴&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;물-정의하기&#34;&gt;&amp;quot;물&amp;quot; 정의하기&lt;/h3&gt;
&lt;p&gt;일단 물이라는 물질을 가져와야 합니다. 자세한 설명은 나중에 하기로 하고, 아래 그림에서 표시된 위치에 다음 한 줄을 적어넣습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto matWater = nist-&amp;gt;FindOrBuildMaterial(&amp;quot;G4_WATER&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_material&#34; srcset=&#34;
               /g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_f0925dfeb3f749d46fcf665f23279291.png 400w,
               /g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_1b3d3fda0dbb6a171c1198db0cd40522.png 760w,
               /g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/02_material_hu7eb2cffc733e93b6701398af02651224_33661_f0925dfeb3f749d46fcf665f23279291.png&#34;
               width=&#34;760&#34;
               height=&#34;273&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 한 줄을 통해, &lt;strong&gt;matWater&lt;/strong&gt; 라는 변수는 &amp;ldquo;물&amp;quot;이라는 물질로 정의되었습니다.&lt;/p&gt;
&lt;h3 id=&#34;물이-담긴-팬텀-위치시키기&#34;&gt;물이 담긴 팬텀 위치시키기&lt;/h3&gt;
&lt;p&gt;이제 solid, logical volume, physical volume을 정의해봅시다.&lt;/p&gt;
&lt;p&gt;아래 그림에서 표시된 위치에 다음 내용을 적어 넣습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Water phantom
auto phantomSize = 5. * cm;
auto phantomPos = G4ThreeVector(0., 0., 10.*cm);
auto phantomSol = new G4Box(&amp;quot;phantom&amp;quot;, .5 * phantomSize, .5 * phantomSize, .5 * phantomSize);
auto phantomLog = new G4LogicalVolume(phantomSol, matWater, &amp;quot;phantom&amp;quot;);
new G4PVPlacement(nullptr, phantomPos, phantomLog, &amp;quot;phantom&amp;quot;, worldLog, false, 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_waterbox&#34; srcset=&#34;
               /g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_fcaacd02e82498e2b0b060072cf4aeb6.png 400w,
               /g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_745c6650d358e625439864280e5f9e97.png 760w,
               /g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/03_waterbox_hu6c403cf4e9ae045854b274de7e7c14fa_74536_fcaacd02e82498e2b0b060072cf4aeb6.png&#34;
               width=&#34;760&#34;
               height=&#34;390&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    phantomSize, phantomPos와 같은 변수의 경우에는, 사실 따로 변수로 만들지 않고 직접 solid나 physical volume에 값을 적어도 됩니다. 하지만 재사용성 및 가독성을 고려하여 변수로 만들어 사용하였습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;실행해보기&#34;&gt;실행해보기&lt;/h3&gt;
&lt;p&gt;이제 작성한 코드를 저장하고 빌드를 한 뒤 UI모드로 실행하면, 물 팬텀이 추가된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;지난 글에서 만들어뒀던 build 디렉토리에 들어간 뒤, make 명령어만 입력하면 빌드가 수행됩니다.&lt;/p&gt;
&lt;p&gt;이어서, &lt;b&gt;./g4_minimal&lt;/b&gt; 이라고 입력하여 실행하면 UI모드로 실행할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd build
make
./g4_minimal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실행하면 다음 그림과 같은 창이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_UI&#34; srcset=&#34;
               /g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_a41c4580aa9af7a66a5e2de48c3b9182.png 400w,
               /g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_0d5238257ae692deab4467d3847ec8a4.png 760w,
               /g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/04_UI_hu14d7d4da1c2065ed53626b816f20effd_102424_a41c4580aa9af7a66a5e2de48c3b9182.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;왼쪽의 탭에서 &lt;strong&gt;Scene tree&lt;/strong&gt;를 클릭하면, 화면에 나타나는 지오메트리의 트리구조를 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 중, &lt;strong&gt;Touchables&lt;/strong&gt; 하위에 있는 것이 여러분이 만든 지오메트리 목록입니다.&lt;/p&gt;
&lt;p&gt;지금 저희가 만들었던 물 팬텀은 &lt;strong&gt;phantom&lt;/strong&gt;이라는 이름으로 표시되고 있으며, 왼쪽의 체크박스를 누르면 오른쪽 그림에서 조그마한 직육면체가 나타났다 사라졌다 하는 것을 확인할 수 있을 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;최종-파일-다운받는-법&#34;&gt;최종 파일 다운받는 법&lt;/h2&gt;
&lt;p&gt;이번 글에서 작성한 코드는 &lt;a href=&#34;https://github.com/evandde/g4_minimal/archive/c6018b5845fbce089a1eee309ea7546d4d8319e4.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;를 통해 다운받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은 git repository를 clone하신 분의 경우에는, example branch의 이전 커밋 중 V1_DetCon이라는 커밋을 참고하셔도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;새로 추가된 코드 부분을 정리하면 다음 그림과 같습니다. 주석이나 단순히 변수를 정의한 부분은 따로 표시하지 않았습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_newcode&#34; srcset=&#34;
               /g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_9d7c2331a92c6d7139f550cbe762a9e4.png 400w,
               /g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_5cb5a5e93bd5842c5c70997286a543a9.png 760w,
               /g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-002-detcon/05_newcode_hu2e504eeb35f3ac4ab6ae17d5c03410c8_81300_9d7c2331a92c6d7139f550cbe762a9e4.png&#34;
               width=&#34;760&#34;
               height=&#34;390&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;위 코드에서 어떤 코드가 무슨 역할을 하고 있는지만 기억하시면 됩니다.&lt;/p&gt;
&lt;p&gt;세부적인 설명은 다음 글에서 하도록 하겠습니다.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;의료영상 혹은 방사선 조사 등의 특수한 목적을 위해 제작된 구조물&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
  </channel>
</rss>
