<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csv | EvaNote</title>
    <link>https://evandde.github.io/tags/csv/</link>
      <atom:link href="https://evandde.github.io/tags/csv/index.xml" rel="self" type="application/rss+xml" />
    <description>csv</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2021 Evan Kim</copyright><lastBuildDate>Thu, 19 Aug 2021 20:49:41 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>csv</title>
      <link>https://evandde.github.io/tags/csv/</link>
    </image>
    
    <item>
      <title>Geant4 무작정 따라하기 - 12. 스코어링 기록(Histogram)</title>
      <link>https://evandde.github.io/g4-noqasked-012-writingrslt1/</link>
      <pubDate>Thu, 19 Aug 2021 10:49:41 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-012-writingrslt1/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 열두번째. Geant4에서 스코어링한 결과를 파일로 기록하는 방법, 그 중에서도 Histogram 형태로 기록하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;지난 글을 통해, 원하는 물리량을 스코어링 한 뒤 화면에 출력하는 작업까지 알아보았습니다. 이번 글과 다음 글에서는 이 스코어링 결과를 추후 분석작업에 용이하게 활용할 수 있도록 적절한 형태로 파일에 기록하는 방법을 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;이 시리즈에서 알아볼 기록 방법은 다음의 두 가지입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Histogram&lt;/strong&gt;으로 기록: 매 Event마다 얻은 값을 히스토그램으로 만들어, 히스토그램의 각 계급구간 별 도수만 기록하는 방식&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ntuple&lt;/strong&gt;로 기록: 매 Event마다 얻은 값(화면에 출력하던 것)을 표 형태로 만들어 파일에 기록하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Histogram과 Ntuple은 전부 독립적으로 관리되므로, 하나의 시뮬레이션 내에서 Histogram과 Ntuple을 원하는만큼 여러 개 기록하여도 괜찮습니다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;이번 글에서는 기본 이론 및 Histogram 기록 방법을 다루고, 다음 글에서는 Ntuple을 다루겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;geant4에서의-데이터-출력&#34;&gt;Geant4에서의 데이터 출력&lt;/h2&gt;
&lt;p&gt;Geant4는 데이터를 정리하여 파일 형태로 출력하는 방식으로 다음의 4가지를 지원합니다. (10.7 버전 기준)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ROOT&lt;/li&gt;
&lt;li&gt;HDF5&lt;/li&gt;
&lt;li&gt;AIDA XML&lt;/li&gt;
&lt;li&gt;CSV&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Geant4를 개발한 CERN 그룹에서 ROOT도 개발했기 때문인지, ROOT쪽과 연계해서 이용할 때 좀 더 많은 기능이 제공됩니다.&lt;/p&gt;
&lt;p&gt;하지만 여기서는 제일 일반적으로 어느 프로그램에서나 무난하게 사용가능한 &lt;b&gt;CSV 형식으로 출력하는 방법&lt;/b&gt;에 대해 알아볼 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;csv란&#34;&gt;CSV란?&lt;/h3&gt;
&lt;p&gt;CSV란 comma-separated values의 약자로, 표 형태의 데이터를 comma(,)로 구분하여 텍스트 형식으로 기록하는 방식입니다. 행끼리는 줄바꿈으로 분리되며, 열끼리는 comma(,)로 분리된다고 보시면 됩니다. 경우에 따라 comma(,) 대신 공백이나 탭 등의 구분자로 대체되기도 합니다.&lt;/p&gt;
&lt;p&gt;예를 들어 다음과 같은 표를 생각해 봅시다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;이름&lt;/th&gt;
&lt;th&gt;학번&lt;/th&gt;
&lt;th&gt;생년월일&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;홍길동&lt;/td&gt;
&lt;td&gt;20201234&lt;/td&gt;
&lt;td&gt;20020101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;임꺽정&lt;/td&gt;
&lt;td&gt;20215678&lt;/td&gt;
&lt;td&gt;20030201&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;위 표를 csv 형식으로 쓰면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;이름, 학번, 생년월일
홍길동, 20201234, 20020101
임꺽정, 20215678, 20030201
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSV파일은 일반적으로 엑셀, 구글시트 등과 같이 표를 다루는 프로그램에서 쉽게 불러올 수 있으며, 대부분의 데이터 분석용 프로그램들 또한 CSV 파일을 읽어들이는 기능을 제공하고 있으니 편리하게 사용할 수 있으리라 생각합니다.&lt;/p&gt;
&lt;h3 id=&#34;runaction이란&#34;&gt;RunAction이란?&lt;/h3&gt;
&lt;p&gt;지난 글에서 매 Event마다 무언가 작업을 수행하고 싶을 때 EventAction이라는 것을 이용한다고 하였지요. 마찬가지로, &lt;b&gt;매 Run마다 무언가 작업을 수행&lt;/b&gt;하고 싶은 경우에는 &lt;b&gt;RunAction&lt;/b&gt;을 이용하면 됩니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 RunAction.cc 파일에서 매우 많은 작업을 해야하기 때문에, 간단하게 짚고 넘어가려 합니다.&lt;/p&gt;
&lt;p&gt;RunAction.cc 파일에 보면 함수가 총 4개 있습니다. 각 함수의 역할은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RunAction()&lt;/p&gt;
&lt;p&gt;&amp;ldquo;생성자&amp;quot;라고 부릅니다. 뭔지 모른다면 일단 이름만 기억해두고 넘어가셔도 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~RunAction()&lt;/p&gt;
&lt;p&gt;&amp;ldquo;소멸자&amp;quot;라고 부릅니다. 뭔지 모른다면 일단 이름만 기억해두고 넘어가셔도 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BeginOfRunAction()&lt;/p&gt;
&lt;p&gt;&lt;b&gt;매 Run이 시작되기 직전 호출되는 함수입니다.&lt;/b&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EndOfRunAction()&lt;/p&gt;
&lt;p&gt;&lt;b&gt;매 Run이 끝난 직후 호출되는 함수입니다.&lt;/b&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;g4analysismanager로-파일-관리&#34;&gt;G4AnalysisManager로 파일 관리&lt;/h2&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    작성하는 파일과 위치가 매우 자주 바뀝니다. 차분하게 따라오세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;원하는-출력-형식의-헤더-포함시키기&#34;&gt;원하는 출력 형식의 헤더 포함시키기&lt;/h3&gt;
&lt;p&gt;Geant4에서는 관련 기능을 사용할 수 있도록 G4AnalysisManager라는 클래스를 제공합니다. 사용자는 위에 설명한 4가지 파일 형식 중 어떤 것을 사용하든, 모두 다 동일한 G4AnalysisManager라는 클래스와 이 클래스에 포함된 함수를 이용하도록 되어있습니다. 때문에, &lt;font color=red&gt;&lt;b&gt;사용자가 헤더를 포함시킬 때 위 4가지 중 어떤 것을 이용할 지 명시&lt;/b&gt;&lt;/font&gt;해줘야 합니다.&lt;/p&gt;
&lt;p&gt;일단, &lt;font color=red&gt;&lt;b&gt;RunAction.cc 파일&lt;/b&gt;&lt;/font&gt;을 엽니다. 다음 그림과 같이 별다른 내용이 없을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_RunAction&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/01_RunAction_hu02f4f669d391c9b7549bee4e76ee414f_23823_409c9ecc245dd7864b518f4d4d163057.png 400w,
               /g4-noqasked-012-writingrslt1/01_RunAction_hu02f4f669d391c9b7549bee4e76ee414f_23823_b2953376b5667d439cf92f4c8277f97a.png 760w,
               /g4-noqasked-012-writingrslt1/01_RunAction_hu02f4f669d391c9b7549bee4e76ee414f_23823_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/01_RunAction_hu02f4f669d391c9b7549bee4e76ee414f_23823_409c9ecc245dd7864b518f4d4d163057.png&#34;
               width=&#34;475&#34;
               height=&#34;467&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 맨 위에 헤더를 쓰는 부분에 원하는 출력 형식에 따라 다음의 헤더를 추가합니다.&lt;/p&gt;
&lt;p&gt;(다른 헤더와 달리 &lt;b&gt;소문자로 입력해야 함&lt;/b&gt;에 주의)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ROOT: &lt;code&gt;g4root.hh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HDF5: &lt;code&gt;g4hdf5.hh&lt;/code&gt; (Geant4를 설치할 때 HDF5를 연동하여 설치한 경우에만 이용 가능)&lt;/li&gt;
&lt;li&gt;AIDA XML: &lt;code&gt;g4xml.hh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CSV: &lt;code&gt;g4csv.hh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우리는 CSV를 이용하기로 하였으므로, 헤더를 포함하는 부분에 다음을 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;g4csv.hh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;입력한 모습은 다음과 같을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_RunAction&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/02_RunAction_hua16a171a68c4916860dbbc75568aaa1c_13488_25d1084aa9d616de73738dd12debae1e.png 400w,
               /g4-noqasked-012-writingrslt1/02_RunAction_hua16a171a68c4916860dbbc75568aaa1c_13488_38b3b171ac247b3da8f840a10dfa1257.png 760w,
               /g4-noqasked-012-writingrslt1/02_RunAction_hua16a171a68c4916860dbbc75568aaa1c_13488_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/02_RunAction_hua16a171a68c4916860dbbc75568aaa1c_13488_25d1084aa9d616de73738dd12debae1e.png&#34;
               width=&#34;477&#34;
               height=&#34;468&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이런 헤더를 포함시키고 나면, G4AnalysisManager라는 클래스를 이용할 수 있게 됩니다. 여기서는 &lt;code&gt;g4csv.hh&lt;/code&gt;를 포함시켰지만, 다른 헤더를 포함시켰다고 하더라도 &lt;b&gt;이하의 내용은 동일하게 진행&lt;/b&gt;하시면 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;g4analysismanager의-핸들-만들기&#34;&gt;G4AnalysisManager의 핸들 만들기&lt;/h3&gt;
&lt;p&gt;G4AnalysisManager를 이용하려면 이 클래스의 객체를 생성해야할 것입니다.&lt;/p&gt;
&lt;p&gt;Geant4의 공식 가이드에서는 이 클래스의 객체를 RunAction의 생성자에서 만들고, RunAction의 소멸자에서 파괴할 것을 권장합니다. &lt;u&gt;무슨 말인지 모르셔도 괜찮습니다. 그냥 따라오세요.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;일단 &lt;font color=red&gt;&lt;b&gt;생성자인 RunAction()의 중괄호({}) 안&lt;/b&gt;&lt;/font&gt;에 다음과 같이 적어줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto analysisManager = G4AnalysisManager::Instance();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고, &lt;font color=red&gt;&lt;b&gt;소멸자인 ~RunAction()의 중괄호({}) 안&lt;/b&gt;&lt;/font&gt;에는 다음과 같이 적어줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;delete G4AnalysisManager::Instance();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다 적으셨다면 다음 그림과 같이 되어있어야 합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_RunAction&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/03_RunAction_hu5de6c94e67068bb7a755854e79d79fbd_18087_4eb00c8b8041e42ed859bab3ce1b59a9.png 400w,
               /g4-noqasked-012-writingrslt1/03_RunAction_hu5de6c94e67068bb7a755854e79d79fbd_18087_b9dec7b3200c1b6b98a6aa385552cc2e.png 760w,
               /g4-noqasked-012-writingrslt1/03_RunAction_hu5de6c94e67068bb7a755854e79d79fbd_18087_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/03_RunAction_hu5de6c94e67068bb7a755854e79d79fbd_18087_4eb00c8b8041e42ed859bab3ce1b59a9.png&#34;
               width=&#34;560&#34;
               height=&#34;514&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;이제부터 여러분은 어디에서든 다음 코드만 입력하면 analysisManager라는 변수명으로 G4AnalysisManager를 이용할 수 있습니다.&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto analysisManager = G4AnalysisManager::Instance();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;g4analysismanager로-파일-열기&#34;&gt;G4AnalysisManager로 파일 열기&lt;/h3&gt;
&lt;p&gt;이제 실제로 출력 파일을 만들어봅시다. 출력파일을 &lt;b&gt;매 Run이 시작될 때마다 열어주기 위해, &lt;font color=red&gt;BeginOfRunAction() 함수 내&lt;/font&gt;에 적어주도록 합니다&lt;/b&gt;. 파일을 열 때에는 기본적으로 G4AnalysisManager 클래스가 제공하는 &lt;b&gt;OpenFile()이라는 함수&lt;/b&gt;를 제공합니다. 이 함수의 입력인자로 &lt;b&gt;파일의 이름&lt;/b&gt;을 적어줄 수 있습니다. 다음과 같이 작성해봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto analysisManager = G4AnalysisManager::Instance();
analysisManager-&amp;gt;OpenFile(&amp;quot;G4_Minimal&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;G4AnalysisManager의 객체를 가져오고, 그 객체로 OpenFile() 함수를 사용한 것입니다. 작성한 코드의 모습은 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_RunAction&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/04_RunAction_hu6aa1b10790627322d23c4f5c290a2878_22221_cf3d30c890e858c07fb9127a70468ce2.png 400w,
               /g4-noqasked-012-writingrslt1/04_RunAction_hu6aa1b10790627322d23c4f5c290a2878_22221_8d0a107778604bd181c16f42defa3125.png 760w,
               /g4-noqasked-012-writingrslt1/04_RunAction_hu6aa1b10790627322d23c4f5c290a2878_22221_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/04_RunAction_hu6aa1b10790627322d23c4f5c290a2878_22221_cf3d30c890e858c07fb9127a70468ce2.png&#34;
               width=&#34;569&#34;
               height=&#34;578&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 OpenFile() 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4bool OpenFile(const G4String&amp;amp; fileName = &amp;quot;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;fileName: &lt;b&gt;출력파일의 이름. 사용자가 원하는 이름으로 입력하여 사용.&lt;/b&gt; 입력하지 않아도 되며, 기본값은 &amp;quot;&amp;quot;(빈 문자열). 이 함수로 이름을 입력하지 않은 경우에는, 정상 동작을 위해 SetFileName() 등과 같은 별도의 출력파일의 이름을 설정하는 함수를 이용해야 함&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이름을 아예 지정하지 않으면 다음과 같은 경고 문구가 출력되며, 출력파일이 아예 열리지 않습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;ndash; WWWW &amp;mdash;&amp;mdash;- G4Exception-START &amp;mdash;&amp;mdash;&amp;ndash; WWWW &amp;mdash;&amp;mdash;-&lt;/p&gt;
&lt;p&gt;*** G4Exception : Analysis_W001&lt;/p&gt;
&lt;p&gt;​      issued by : G4VFileManager::OpenFile()&lt;/p&gt;
&lt;p&gt;Cannot open file. File name is not defined.&lt;/p&gt;
&lt;p&gt;*** This is just a warning message. ***&lt;/p&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;ndash; WWWW &amp;mdash;&amp;mdash;&amp;ndash; G4Exception-END &amp;mdash;&amp;mdash;&amp;mdash; WWWW &amp;mdash;&amp;mdash;-&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;g4analysismanager로-파일-닫기&#34;&gt;G4AnalysisManager로 파일 닫기&lt;/h3&gt;
&lt;p&gt;파일을 열었다면 내용을 다 적은 뒤에 파일을 닫는 작업까지 해주어야 합니다. 데이터를 어떻게 기록하는지에 대해서는 조금 뒤에 다루기로 하고, &lt;b&gt;파일을 닫는 것&lt;/b&gt;부터 해보도록 합시다.&lt;/p&gt;
&lt;p&gt;매 Run이 시작될 때 파일을 열었으니, 매 Run이 끝날 때 파일을 닫는 것이 좋겠지요. 따라서 이 내용은 &lt;font color=red&gt;&lt;b&gt;EndOfRunAction() 함수 내에 적도록 합니다&lt;/b&gt;&lt;/font&gt;. 파일을 닫기 위해서는 G4AnalysisManager 클래스가 제공하는 &lt;b&gt;CloseFile() 함수&lt;/b&gt;를 이용합니다. 다음과 같이 작성해봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto analysisManager = G4AnalysisManager::Instance();
analysisManager-&amp;gt;CloseFile();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;G4AnalysisManager의 객체를 가져오고, 그 객체로 CloseFile() 함수를 사용한 것입니다. 작성한 코드의 모습은 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_RunAction&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/05_RunAction_hu5d18257ebf280de7e47674edc8ac3e9f_26183_bfe6b6e5827ffdc1fc9e7b00a1eebd60.png 400w,
               /g4-noqasked-012-writingrslt1/05_RunAction_hu5d18257ebf280de7e47674edc8ac3e9f_26183_aa39eb3dee69e680447c9a02a318288e.png 760w,
               /g4-noqasked-012-writingrslt1/05_RunAction_hu5d18257ebf280de7e47674edc8ac3e9f_26183_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/05_RunAction_hu5d18257ebf280de7e47674edc8ac3e9f_26183_bfe6b6e5827ffdc1fc9e7b00a1eebd60.png&#34;
               width=&#34;571&#34;
               height=&#34;640&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 CloseFile() 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4bool CloseFile(G4bool reset = true);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;reset: &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 파일을 닫을 때, 메모리에 저장된 데이터를 reset시킬 지 여부에 대한 인자.기본값은 true&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;histogram-기록하기&#34;&gt;Histogram 기록하기&lt;/h2&gt;
&lt;p&gt;Histogram으로 기록하기 위해서는 다음의 세 가지만 수행하면 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateH1() 함수&lt;/b&gt;를 사용하여 히스토그램을 생성&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;FillH1() 함수&lt;/b&gt;를 사용하여 데이터 누적&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RunAction의 EndOfRunAction() 함수 안&lt;/b&gt;에서, 출력파일을 닫기 전에 &lt;b&gt;Write() 함수&lt;/b&gt;를 사용하여 데이터 기록&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;histogram-생성&#34;&gt;Histogram 생성&lt;/h3&gt;
&lt;p&gt;먼저 &amp;ldquo;1. &lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateH1() 함수&lt;/b&gt;를 사용하여 히스토그램을 생성 작업&amp;quot;을 수행하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;&lt;/font&gt;로 돌아갑니다. 여기에서 아까 만들어둔 analysisManager라는 변수명을 가진 객체를 이용해서 히스토그램을 생성해줄 것입니다. 이 때 사용하는 함수는 CreateH1() 함수인데요, 이 함수의 원형부터 살펴보겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4int CreateH1(const G4String&amp;amp; name, const G4String&amp;amp; title,
               G4int nbins, G4double xmin, G4double xmax,
               const G4String&amp;amp; unitName = &amp;quot;none&amp;quot;,
               const G4String&amp;amp; fcnName = &amp;quot;none&amp;quot;,
               const G4String&amp;amp; binSchemeName = &amp;quot;linear&amp;quot;);
G4int CreateH1(const G4String&amp;amp; name, const G4String&amp;amp; title,
               const std::vector&amp;lt;G4double&amp;gt;&amp;amp; edges,
               const G4String&amp;amp; unitName = &amp;quot;none&amp;quot;,
               const G4String&amp;amp; fcnName = &amp;quot;none&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;name: &lt;b&gt;히스토그램의 이름&lt;/b&gt;. 최종적인 출력 파일의 이름에 사용됨&lt;/li&gt;
&lt;li&gt;title: 히스토그램의 제목. 출력된 파일 내부에서 제목으로 쓰여져 있음.&lt;/li&gt;
&lt;li&gt;nbins: &lt;b&gt;히스토그램의 계급의 개수&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;xmin: &lt;b&gt;히스토그램의 계급의 최솟값&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;xmax: &lt;b&gt;히스토그램의 계급의 최댓값&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;edges: 히스토그램의 구간 경계. G4double 벡터 자료형으로 입력&lt;/li&gt;
&lt;li&gt;&lt;i&gt;unitName: &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 히스토그램의 정보 중 단위에 대한 내용을 저장. 기본값은 &amp;ldquo;none&amp;rdquo;&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;fcnName: &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 기본값은 &amp;ldquo;none&amp;rdquo;&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i&gt;binSchemeName: &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 기본값은 &amp;ldquo;linear&amp;rdquo;&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위쪽의 함수 원형은 최소, 최대, 구간 개수로 히스토그램을 정의하는 방식이고, 아래쪽의 함수 원형은 구간의 경계를 이용하여 히스토그램을 정의하는 방식입니다. 이 시리즈에서는 위쪽의 것만 설명하겠습니다.&lt;/p&gt;
&lt;p&gt;이 시리즈에서 앞서 스코어링한 물리량은 물 팬텀에 deposit된 에너지였습니다. 이를 &lt;b&gt;0 MeV ~ 3.0 MeV까지 1024개의 구간&lt;/b&gt;으로 나누어 히스토그램을 만들어봅시다. 이 경우 &lt;b&gt;RunAction.cc 파일의 생성자&lt;/b&gt;에 다음과 같이 코드를 추가하면 됩니다. &lt;b&gt;다만, 여기서 MeV라는 단위를 사용하기 위해서는 헤더쪽에 &amp;ldquo;G4SystemOfUnits.hh&amp;quot;를 포함시켜야 한다는 점도 잊지마세요.&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;CreateH1(&amp;quot;EDep&amp;quot;, &amp;quot;Energy Deposition&amp;quot;, 1024, 0., 3. * MeV);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;히스토그램의 이름은 &amp;ldquo;EDep&amp;rdquo;, 제목은 &amp;ldquo;Energy Deposition&amp;quot;이며, 0 MeV ~ 3 MeV의 구간을 1024개로 쪼개어 히스토그램을 생성하였습니다.&lt;/p&gt;
&lt;p&gt;실제 작성된 RunAction.cc 파일의 모습은 다음과 같아야 합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/06_Hist_huc503821bd31bd8503b048f492795907b_31699_59759efb4556b1755e65123101a11546.png 400w,
               /g4-noqasked-012-writingrslt1/06_Hist_huc503821bd31bd8503b048f492795907b_31699_ca158dfe582d052770315e790871d44f.png 760w,
               /g4-noqasked-012-writingrslt1/06_Hist_huc503821bd31bd8503b048f492795907b_31699_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/06_Hist_huc503821bd31bd8503b048f492795907b_31699_59759efb4556b1755e65123101a11546.png&#34;
               width=&#34;756&#34;
               height=&#34;705&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;histogram에-데이터-누적&#34;&gt;Histogram에 데이터 누적&lt;/h3&gt;
&lt;p&gt;이제 &amp;ldquo;2. &lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;FillH1() 함수&lt;/b&gt;를 사용하여 데이터 누적&amp;rdquo; 작업을 수행하겠습니다.&lt;/p&gt;
&lt;p&gt;이 작업은 매 Event가 끝난 뒤 Hit을 정리할 때마다 수행해야 하므로, &lt;font color=red&gt;&lt;b&gt;EventAction.cc 파일의 EndOfEventAction() 함수 내에 코드를 작성&lt;/b&gt;&lt;/font&gt;합니다. &lt;b&gt;물론 헤더도 추가&lt;/b&gt;해야합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    작성하는 위치에 주의하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;현재 EventAction.cc 파일의 모습은 다음과 같을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/07_Hist_hub17028edc57f24dd1f826f9927f8c387_66195_cd1384a0bfe08e2a431f35ae35661a17.png 400w,
               /g4-noqasked-012-writingrslt1/07_Hist_hub17028edc57f24dd1f826f9927f8c387_66195_2dd2f881826b65a2195bb8209faa192c.png 760w,
               /g4-noqasked-012-writingrslt1/07_Hist_hub17028edc57f24dd1f826f9927f8c387_66195_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/07_Hist_hub17028edc57f24dd1f826f9927f8c387_66195_cd1384a0bfe08e2a431f35ae35661a17.png&#34;
               width=&#34;650&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 다음의 세 가지 작업을 할 것입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;파일의 맨 위에 CSV용 G4AnalysisManager 사용을 위해, &lt;code&gt;g4csv.hh&lt;/code&gt; 헤더 포함&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#incldue &amp;quot;g4csv.hh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EndOfEventAction() 함수 내, for 반복문의 위쪽에 G4AnalysisManager 객체를 만듦&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto analysisManager = G4AnalysisManager::Instance();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EndOfEventAction() 함수 내, for 반복문 안에서 eDep이 0보다 큰지 확인하는 if 조건문 안에 히스토그램에 누적하는 내용을 작성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;FillH1(0, eDep);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 사용된 FillH1() 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4bool G4VAnalysisManager::FillH1(G4int id, G4double value, G4double weight = 1.0);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;id: &lt;b&gt;히스토그램의 ID&lt;/b&gt;. 앞서 히스토그램을 생성할 때 별도로 설정하지 않았다면, &lt;b&gt;만들어진 순서대로 0, 1, 2, &amp;hellip; 와 같이 부여&lt;/b&gt;됨.&lt;/li&gt;
&lt;li&gt;value: &lt;b&gt;히스토그램에 누적시킬 값&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;weight: &lt;b&gt;입력하지 않아도 되는 인자&lt;/b&gt;. 히스토그램에 값을 누적시킬 때의 가중치. 기본값은 1.0&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;히스토그램의 ID 번호&lt;/b&gt;와 &lt;b&gt;누적시킬 값&lt;/b&gt;을 입력해서 사용하면 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;추가적으로, 이제 화면에 출력할 필요가 없으니 &amp;ldquo;G4SystemOfUnits.hh&amp;rdquo; 헤더와 G4cout 줄은 삭제해도 괜찮습니다. 다 마무리하면 다음과 같은 모양일 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;08_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/08_Hist_hu7cd94a6d663b61a437415829c15eabb6_41656_fadf0618fced7e830e341c595b5ef573.png 400w,
               /g4-noqasked-012-writingrslt1/08_Hist_hu7cd94a6d663b61a437415829c15eabb6_41656_dc41b9d60fc2413052a8b42cb75abd19.png 760w,
               /g4-noqasked-012-writingrslt1/08_Hist_hu7cd94a6d663b61a437415829c15eabb6_41656_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/08_Hist_hu7cd94a6d663b61a437415829c15eabb6_41656_fadf0618fced7e830e341c595b5ef573.png&#34;
               width=&#34;595&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;histogram을-파일에-기록&#34;&gt;Histogram을 파일에 기록&lt;/h3&gt;
&lt;p&gt;마지막으로, &amp;ldquo;3. &lt;b&gt;RunAction의 EndOfRunAction() 함수 안&lt;/b&gt;에서, 출력파일을 닫기 전에 &lt;b&gt;Write() 함수&lt;/b&gt;를 사용하여 데이터 기록&amp;quot;을 진행하겠습니다.&lt;/p&gt;
&lt;p&gt;다시 &lt;font color=red&gt;&lt;b&gt;RunAction.cc 파일&lt;/b&gt;&lt;/font&gt;로 돌아옵니다. 여기서 &lt;font color=red&gt;&lt;b&gt;EndOfRunAction() 함수&lt;/b&gt;&lt;/font&gt;에서 아까 적어둔 CloseFile() 함수 줄 바로 위에, G4AnalysisManager 클래스가 제공하는 Write() 함수를 사용해주면 됩니다. 코드로는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;Write();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;작성하고 나면 다음과 같은 모습일 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;09_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/09_Hist_hua23d443093897df972769286727b6140_32990_61e75ecd522c08a3c6700cf0849f4364.png 400w,
               /g4-noqasked-012-writingrslt1/09_Hist_hua23d443093897df972769286727b6140_32990_11ea242119c44b54b09476c1e6775da1.png 760w,
               /g4-noqasked-012-writingrslt1/09_Hist_hua23d443093897df972769286727b6140_32990_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/09_Hist_hua23d443093897df972769286727b6140_32990_61e75ecd522c08a3c6700cf0849f4364.png&#34;
               width=&#34;753&#34;
               height=&#34;728&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;결과-확인&#34;&gt;결과 확인&lt;/h3&gt;
&lt;p&gt;다 끝났습니다. 이제 build 디렉토리에 들어가서, 다음 명령어를 입력하여 시뮬레이션을 수행해봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make
./g4_minimal run.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;시뮬레이션이 정상적으로 종료되고 &amp;ldquo;Good bye :)&amp;ldquo;를 확인하셨다면, build 디렉토리 안에 다음 그림과 같이 G4_Minimal_h1_EDep.csv 라는 파일이 생성된 것을 확인할 수 있습니다. 여기서 알 수 있듯, 최종 히스토그램 파일의 이름은 &lt;code&gt;{OpenFile()에서 입력한 파일 이름}_h1_{CreateH1()에서 입력한 히스토그램이름}.csv&lt;/code&gt;으로 결정됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;10_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/10_Hist_hu717eb6394220038e2ff6da44b1b487ba_14807_077f60185e937b13aca0b9e149316a3c.png 400w,
               /g4-noqasked-012-writingrslt1/10_Hist_hu717eb6394220038e2ff6da44b1b487ba_14807_23063a5844b1b9843a21b6538f2fbb51.png 760w,
               /g4-noqasked-012-writingrslt1/10_Hist_hu717eb6394220038e2ff6da44b1b487ba_14807_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/10_Hist_hu717eb6394220038e2ff6da44b1b487ba_14807_077f60185e937b13aca0b9e149316a3c.png&#34;
               width=&#34;748&#34;
               height=&#34;99&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;파일을 열어보시면 다음과 같이 맨 위의 헤더 형태로 적힌 히스토그램의 정보와 함께, 히스토그램 결과가 5열로 기록되어 있는 것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;11_Hist&#34; srcset=&#34;
               /g4-noqasked-012-writingrslt1/11_Hist_huc86d9a616db5b766ebc53d25025a6875_25216_e6942ab5ffa7fe35f1ad5bb757ddb5f3.png 400w,
               /g4-noqasked-012-writingrslt1/11_Hist_huc86d9a616db5b766ebc53d25025a6875_25216_5c0d37835b355b612924312b45fb22df.png 760w,
               /g4-noqasked-012-writingrslt1/11_Hist_huc86d9a616db5b766ebc53d25025a6875_25216_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-012-writingrslt1/11_Hist_huc86d9a616db5b766ebc53d25025a6875_25216_e6942ab5ffa7fe35f1ad5bb757ddb5f3.png&#34;
               width=&#34;308&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 각 열은 순서대로 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;entries: 각 계급 구간의 도수 (값이 구간에 들어온 개수)&lt;/li&gt;
&lt;li&gt;Sw: 가중치의 합 (기본적으로 가중치는 1이며, 모든 가중치가 1인 경우 entries와 값이 동일함. 이 가중치는 variance reduction 등에 관한 내용이므로 생략)&lt;/li&gt;
&lt;li&gt;Sw2: 가중치의 제곱합 (기본적으로 가중치는 1이며, 모든 가중치가 1인 경우 entries와 값이 동일함. 이 가중치는 variance reduction 등에 관한 내용이므로 생략)&lt;/li&gt;
&lt;li&gt;Sxw0: 기록한 값과 가중치의 곱의 합 (기록한 값이란, 히스토그램에 누적하기 위해 입력한 실제 값을 의미함)&lt;/li&gt;
&lt;li&gt;Sx2w0: 기록한 값의 제곱과 가중치의 곱의 합&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 행은 계급 구간의 좌우 경계 값에 대해 &lt;b&gt;왼쪽 값 이상~오른쪽 값 미만&lt;/b&gt;의 범위에 들어온 데이터에 대해 기록됩니다. 또한, 총 행의 수는 CreateH1() 함수에서 기록한 개수보다 2개 더 많으며, &lt;b&gt;맨 첫 행에 최솟값 미만&lt;/b&gt;인 경우, &lt;b&gt;맨 마지막 행에 최댓값 이상&lt;/b&gt;인 경우가 추가적으로 기록됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이번 글에서는 스코어링한 데이터를 csv 형식으로 Histogram 형태에 맞추어 출력하는 방법에 대해 알아보았습니다. 다음 글에서는 이어서 Ntuple 형태에 맞추어 출력하는 방법에 대해 알아보겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 무작정 따라하기 - 13. 스코어링 기록(Ntuple)</title>
      <link>https://evandde.github.io/g4-noqasked-013-writingrslt2/</link>
      <pubDate>Thu, 19 Aug 2021 20:49:41 +0900</pubDate>
      <guid>https://evandde.github.io/g4-noqasked-013-writingrslt2/</guid>
      <description>&lt;p&gt;Geant4 무작정 따라하기 시리즈의 열세번째. Geant4에서 스코어링한 결과를 파일로 기록하는 방법 중 Ntuple 형태로 기록하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;지난 글에 이어, 이번 글에서는 스코어링 결과를 Ntuple 형태로 기록하는 방법에 대해 알아보겠습니다. 이전 글에서 작성했던 Histogram 출력 내용과 관련한 코드는 그대로 두고, 여기에 이어서 작업을 진행하도록 하겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ntuple-기록하기&#34;&gt;Ntuple 기록하기&lt;/h2&gt;
&lt;p&gt;Ntuple이란, 간단히 말해 &lt;b&gt;표&lt;/b&gt;입니다. 사실은 n개의 순서쌍으로 묶인 데이터라는 뜻입니다만, 이런 데이터를 m개 쌓아놓으면 그냥 m×n 크기의 표가 됩니다.&lt;/p&gt;
&lt;p&gt;그래서, Ntuple로 기록하는 과정은 사용자가 표를 직접 그리듯이 작업이 진행됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateNtuple() 함수&lt;/b&gt;를 사용하여 Ntuple을 생성&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateNtuple?Column() 함수&lt;/b&gt;를 사용하여 Ntuple의 &lt;b&gt;열&lt;/b&gt;을 생성&lt;/li&gt;
&lt;li&gt;모든 열을 추가한 뒤, &lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;FinishNtuple() 함수&lt;/b&gt;를 사용하여 Ntuple의 디자인을 완성&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;FillNtuple?Column() 함수&lt;/b&gt;를 사용하여 각 열에 데이터를 기록&lt;/li&gt;
&lt;li&gt;한 행에 해당하는 모든 열 데이터를 기록한 뒤, &lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;AddNtupleRow() 함수&lt;/b&gt;를 사용하여 한 행만큼의 데이터를 Ntuple에 추가&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RunAction의 EndOfRunAction() 함수 안&lt;/b&gt;에서, 출력파일을 닫기 전에 &lt;b&gt;Write() 함수&lt;/b&gt;를 사용하여 데이터 기록&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ntuple-생성-및-디자인&#34;&gt;Ntuple 생성 및 디자인&lt;/h3&gt;
&lt;p&gt;먼저, 다음의 세 단계를 통해 Ntuple이라는 데이터 양식을 생성하겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateNtuple() 함수&lt;/b&gt;를 사용하여 Ntuple을 생성&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;CreateNtuple?Column() 함수&lt;/b&gt;를 사용하여 Ntuple의 &lt;b&gt;열&lt;/b&gt;을 생성&lt;/li&gt;
&lt;li&gt;모든 열을 추가한 뒤, &lt;b&gt;RunAction의 생성자&lt;/b&gt;에서 &lt;b&gt;FinishNtuple() 함수&lt;/b&gt;를 사용하여 Ntuple의 디자인을 완성&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;RunAction.cc 파일을 열고, RunAction의 생성자 내&lt;/b&gt;&lt;/font&gt;에 작성합니다 . 이전 글에서 만들었던 analysisManager라는 변수명을 가진 객체를 이용해서 Ntuple을 생성해줄 것입니다. 이 때 사용하는 함수는 CreateNtuple() 함수인데요, 이 함수의 원형부터 살펴보겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4int CreateNtuple(const G4String&amp;amp; name, const G4String&amp;amp; title);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;name: &lt;b&gt;Ntuple의 이름&lt;/b&gt;. 최종적인 출력 파일의 이름에 사용됨&lt;/li&gt;
&lt;li&gt;title: Ntuple의 제목. 출력된 파일 내부에서 제목으로 쓰여져 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어, 이름을 &amp;quot;EDep&amp;quot;라고 짓고, 제목은 &amp;quot;Energy Deposition&amp;quot;이라고 지은 Ntuple을 만든다면 다음과 같이 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;CreateNtuple(&amp;quot;EDep&amp;quot;, &amp;quot;Energy Deposition&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이어서, 이 Ntuple의 열을 추가합니다. 열을 추가하는 데에 사용하는 함수들의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4int CreateNtupleIColumn(const G4String&amp;amp; name): &lt;b&gt;정수형&lt;/b&gt;(&lt;b&gt;i&lt;/b&gt;nteger) 값이 기록될 열을 추가하는 함수. 입력 인자 name은 이 열의 이름을 의미함.&lt;/li&gt;
&lt;li&gt;G4int CreateNtupleFColumn(const G4String&amp;amp; name): &lt;b&gt;실수형&lt;/b&gt;(&lt;b&gt;f&lt;/b&gt;loat) 값이 기록될 열을 추가하는 함수. 입력 인자 name은 이 열의 이름을 의미함.&lt;/li&gt;
&lt;li&gt;G4int CreateNtupleDColumn(const G4String&amp;amp; name): &lt;b&gt;실수형&lt;/b&gt;(&lt;b&gt;d&lt;/b&gt;ouble) 값이 기록될 열을 추가하는 함수. 입력 인자 name은 이 열의 이름을 의미함.&lt;/li&gt;
&lt;li&gt;G4int CreateNtupleSColumn(const G4String&amp;amp; name): &lt;b&gt;문자열형&lt;/b&gt;(&lt;b&gt;s&lt;/b&gt;tring) 값이 기록될 열을 추가하는 함수. 입력 인자 name은 이 열의 이름을 의미함.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;데이터를 기록할 때 이 표의 열마다 어떤 자료형을 기록할 지 생각하며 &lt;b&gt;순서대로 추가&lt;/b&gt;해나가면 됩니다.&lt;/p&gt;
&lt;p&gt;여기서는 Energy Deposition 값에 해당하는 &lt;b&gt;한 열&lt;/b&gt;만 기록하도록 하겠습니다. 이는 &lt;b&gt;실수값 double형&lt;/b&gt;이므로, &lt;b&gt;CreateNtupleDColumn() 함수&lt;/b&gt;를 이용합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;CreateNtupleDColumn(&amp;quot;E(MeV)&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;기록하고 싶은 데이터 열이 더 많다면 같은 방식으로 이어붙여서 더 추가&lt;/b&gt;하시면 됩니다.&lt;/p&gt;
&lt;p&gt;다 추가하셨다면 이제 이 디자인으로 Ntuple을 완성해야 합니다. 이 때에는 &lt;b&gt;FinishNtuple() 함수&lt;/b&gt;를 사용합니다. 여기서는 한 열만 추가하기로 하였으므로, 위에 열을 추가한 내용에 이어서 FinishNtuple() 함수를 적어주면 됩니다. 다음과 같이 말이죠.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;FinishNtuple();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;최종적으로 작성된 RunAction.cc 파일의 모습은 다음과 같아야 합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;12_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/12_Ntuple_hu75bee668e8940aaa7812360d76f857cf_40158_5f8dfa54f39a94e43fc8f2f71fec11d4.png 400w,
               /g4-noqasked-013-writingrslt2/12_Ntuple_hu75bee668e8940aaa7812360d76f857cf_40158_ce313438856793342143b8b0e64a21c3.png 760w,
               /g4-noqasked-013-writingrslt2/12_Ntuple_hu75bee668e8940aaa7812360d76f857cf_40158_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/12_Ntuple_hu75bee668e8940aaa7812360d76f857cf_40158_5f8dfa54f39a94e43fc8f2f71fec11d4.png&#34;
               width=&#34;661&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;ntuple-작성&#34;&gt;Ntuple 작성&lt;/h3&gt;
&lt;p&gt;이제 다음의 두 단계에 해당하는 내용을 작성하겠습니다.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;FillNtuple?Column() 함수&lt;/b&gt;를 사용하여 각 열에 데이터를 기록&lt;/li&gt;
&lt;li&gt;한 행에 해당하는 모든 열 데이터를 기록한 뒤, &lt;b&gt;EventAction의 EndOfEventAction() 함수 안&lt;/b&gt;에서 &lt;b&gt;AddNtupleRow() 함수&lt;/b&gt;를 사용하여 한 행만큼의 데이터를 Ntuple에 추가&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 작업은 매 Event가 끝난 뒤 Hit을 정리할 때마다 수행해야 하므로, &lt;font color=red&gt;&lt;b&gt;EventAction.cc 파일의 EndOfEventAction() 함수 내에 코드를 작성&lt;/b&gt;&lt;/font&gt;합니다. &lt;b&gt;물론 &lt;code&gt;g4csv.hh&lt;/code&gt;와 같은 헤더도 추가&lt;/b&gt;해야합니다만, 앞서 Histogram할 때 추가해뒀으므로 생략하겠습니다.&lt;/p&gt;
&lt;p&gt;현재 EventAction.cc 파일의 모습은 다음과 같을 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;13_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/13_Ntuple_huf635c00c54918b5d9fb9fe93c45669f6_71202_7aebda96a00c26ba223f9df3e460b569.png 400w,
               /g4-noqasked-013-writingrslt2/13_Ntuple_huf635c00c54918b5d9fb9fe93c45669f6_71202_5547841aca816c62817f759885eca3a8.png 760w,
               /g4-noqasked-013-writingrslt2/13_Ntuple_huf635c00c54918b5d9fb9fe93c45669f6_71202_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/13_Ntuple_huf635c00c54918b5d9fb9fe93c45669f6_71202_7aebda96a00c26ba223f9df3e460b569.png&#34;
               width=&#34;622&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 아까 만들어 둔 analysisManager 객체를 활용하여 두 가지 작업을 수행할 것입니다.&lt;/p&gt;
&lt;p&gt;먼저, &lt;font color=red&gt;&lt;b&gt;EndOfEventAction() 함수&lt;/b&gt;&lt;/font&gt; 내의 for 반복문 안에서 eDep이 0보다 큰지 확인하는 if 조건문 안에서 G4AnalysisManager 클래스가 제공하는 &lt;b&gt;FillNtuple?Column() 함수&lt;/b&gt;를 이용하여 &lt;b&gt;Ntuple의 0번째 열에 eDep 데이터를 기록&lt;/b&gt;합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;FillNtupleDColumn(0, eDep);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CreateNtuple?Column() 함수와 동일하게 &lt;b&gt;I(정수)&lt;/b&gt;/&lt;b&gt;F(실수)&lt;/b&gt;/&lt;b&gt;D(실수)&lt;/b&gt;/&lt;b&gt;S(문자열)&lt;/b&gt;의 &lt;b&gt;4종류&lt;/b&gt;가 있습니다. 대표적으로 FillNtupleDColumn() 함수의 원형만 살펴보면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4bool FillNtupleDColumn(G4int columnId, G4double value);
G4bool FillNtupleDColumn(G4int ntupleId, G4int columnId, G4double value);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;columnId: Ntuple에서 데이터를 기록할 &lt;b&gt;열의 번호&lt;/b&gt; (0부터 시작하여 0, 1, 2, &amp;hellip; 로 올라감)&lt;/li&gt;
&lt;li&gt;value: Ntuple에 기록할 &lt;b&gt;데이터 값&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;ntupleId: Ntuple이 여러 개일 경우, 데이터를 기록할 &lt;b&gt;Ntuple의 ID 번호&lt;/b&gt;. Ntuple을 생성할 때 별도로 지정하지 않았다면, &lt;b&gt;만든 순서대로 0, 1, 2, &amp;hellip;로 부여&lt;/b&gt;됨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ntuple을 한 개만 이용한다면 위의 함수를 이용하여 열 번호와 값만 입력하면 됩니다. Ntuple을 여러 개 이용하고 있다면 아래의 함수를 이용하여 Ntuple의 ID 번호, 열 번호, 값의 순서로 입력하면 됩니다.&lt;/p&gt;
&lt;p&gt;모든 열을 다 추가하였다면, G4AnalysisManager 클래스가 제공하는 &lt;b&gt;AddNtupleRow() 함수&lt;/b&gt;를 이용하여 한 행 단위로 마무리해 줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;analysisManager-&amp;gt;AddNtupleRow();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;코드를 다 적으면 다음과 같은 모양일 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;14_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/14_Ntuple_hu315f518ac5731b2fe8eef048cd703cac_42804_5c00430008b8336d3a11c0fcad62b564.png 400w,
               /g4-noqasked-013-writingrslt2/14_Ntuple_hu315f518ac5731b2fe8eef048cd703cac_42804_c42e3b16d5f01355df0aac272ce16876.png 760w,
               /g4-noqasked-013-writingrslt2/14_Ntuple_hu315f518ac5731b2fe8eef048cd703cac_42804_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/14_Ntuple_hu315f518ac5731b2fe8eef048cd703cac_42804_5c00430008b8336d3a11c0fcad62b564.png&#34;
               width=&#34;577&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;ntuple을-파일에-기록&#34;&gt;Ntuple을 파일에 기록&lt;/h3&gt;
&lt;p&gt;마지막으로, &amp;ldquo;6. &lt;b&gt;RunAction의 EndOfRunAction() 함수 안&lt;/b&gt;에서, 출력파일을 닫기 전에 &lt;b&gt;Write() 함수&lt;/b&gt;를 사용하여 데이터 기록&amp;quot;을 진행해야 합니다만, 이 내용은 &lt;b&gt;앞서 Histogram을 할 때 해두었으므로 여기서 따로 또 할필요는 없습니다&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;RunAction.cc 파일&lt;/b&gt;&lt;/font&gt;의 &lt;font color=red&gt;&lt;b&gt;EndOfRunAction() 함수&lt;/b&gt;&lt;/font&gt;에 아까 적어둔 &lt;code&gt;analysisManager-&amp;gt;Write();&lt;/code&gt; 코드가 잘 적혀있는지 확인만 하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;15_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/15_Ntuple_hua23d443093897df972769286727b6140_32990_4178c5d0f3d2e7f140b278cb52f0665d.png 400w,
               /g4-noqasked-013-writingrslt2/15_Ntuple_hua23d443093897df972769286727b6140_32990_98e374a04916d8e84b3d40c72e07c482.png 760w,
               /g4-noqasked-013-writingrslt2/15_Ntuple_hua23d443093897df972769286727b6140_32990_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/15_Ntuple_hua23d443093897df972769286727b6140_32990_4178c5d0f3d2e7f140b278cb52f0665d.png&#34;
               width=&#34;753&#34;
               height=&#34;728&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;결과-확인&#34;&gt;결과 확인&lt;/h3&gt;
&lt;p&gt;Ntuple 기록하기도 다 끝났습니다. 이제 build 디렉토리에 들어가서, 다음 명령어를 입력하여 시뮬레이션을 수행해봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make
./g4_minimal run.mac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;시뮬레이션이 정상적으로 종료되고 &amp;ldquo;Good bye :)&amp;ldquo;를 확인하셨다면, build 디렉토리 안에 다음 그림과 같이 G4_Minimal_nt_EDep.csv 라는 파일이 생성된 것을 확인할 수 있습니다. 여기서 알 수 있듯, 최종 히스토그램 파일의 이름은 &lt;code&gt;{OpenFile()에서 입력한 파일 이름}_nt_{CreateNtuple()에서 입력한 Ntuple이름}.csv&lt;/code&gt;으로 결정됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;16_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/16_Ntuple_hu1040e2def15fc55c46367f73613d8eea_10614_5bbae02f010306e65214c474584240c5.png 400w,
               /g4-noqasked-013-writingrslt2/16_Ntuple_hu1040e2def15fc55c46367f73613d8eea_10614_01e2fb50e22139907fd80e588fcfeaf0.png 760w,
               /g4-noqasked-013-writingrslt2/16_Ntuple_hu1040e2def15fc55c46367f73613d8eea_10614_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/16_Ntuple_hu1040e2def15fc55c46367f73613d8eea_10614_5bbae02f010306e65214c474584240c5.png&#34;
               width=&#34;760&#34;
               height=&#34;67&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;파일을 열어보시면 다음과 같이 맨 위의 헤더 형태로 적힌 Ntuple의 정보와 함께, 결과가 1열로 기록되어 있는 것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;17_Ntuple&#34; srcset=&#34;
               /g4-noqasked-013-writingrslt2/17_Ntuple_hu9b1612882ead44547ec1c4b3fb8e8be4_6848_f783611fbbd316cb457ab1203c064a25.png 400w,
               /g4-noqasked-013-writingrslt2/17_Ntuple_hu9b1612882ead44547ec1c4b3fb8e8be4_6848_361c630c08eb8de0aafb27f4a029ccb0.png 760w,
               /g4-noqasked-013-writingrslt2/17_Ntuple_hu9b1612882ead44547ec1c4b3fb8e8be4_6848_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/g4-noqasked-013-writingrslt2/17_Ntuple_hu9b1612882ead44547ec1c4b3fb8e8be4_6848_f783611fbbd316cb457ab1203c064a25.png&#34;
               width=&#34;298&#34;
               height=&#34;250&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;지금 이 결과는 &lt;code&gt;/run/beamOn 1000&lt;/code&gt;으로 돌렸을 때의 결과입니다만, 기록된 Event가 많지 않네요.&lt;/p&gt;
&lt;p&gt;제가 돌린 시뮬레이션은 5×5×5 cm&lt;sup&gt;3&lt;/sup&gt; 크기의 작은 물팬텀을 10 cm 거리에 둔 데다가, 선원도 0.662 MeV의 등방성 감마선원이라 반응 자체가 별로 일어나지 않아서 그런 것으로 판단됩니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;최종-파일-다운받는-법&#34;&gt;최종 파일 다운받는 법&lt;/h2&gt;
&lt;p&gt;지난 글과 이번 글에서 작성한 스코어링 결과 기록 관련 코드는 &lt;a href=&#34;https://github.com/evandde/g4_minimal/archive/refs/heads/example.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;를 통해 다운받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은 git repository를 clone하신 분의 경우에는, example branch의 가장 최신 커밋인 V4 analysis 커밋을 참고하셔도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이번 글에서는 스코어링한 데이터를 csv 형식으로 Ntuple 형태에 맞추어 출력하는 방법에 대해 알아보았습니다. 여기까지의 내용을 통해, 여러분은 이제 시뮬레이션 결과를 원하는 형태로 파일에 기록하여 출력할 수 있게 되었습니다.&lt;/p&gt;
&lt;p&gt;이번 글로서 Geant4 무작정 따라하기 시리즈는 끝입니다. 다음 글에서 후기와 함께 마무리 짓도록 하겠습니다!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
