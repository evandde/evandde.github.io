<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>포스트 | EvaNote</title>
    <link>https://evandde.github.io/post/</link>
      <atom:link href="https://evandde.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>포스트</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2022 Evan Kim</copyright><lastBuildDate>Fri, 04 Feb 2022 15:42:18 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>포스트</title>
      <link>https://evandde.github.io/post/</link>
    </image>
    
    <item>
      <title>Geant4 11.0 릴리즈노트 살펴보기</title>
      <link>https://evandde.github.io/geant4-v110-releasenote/</link>
      <pubDate>Fri, 04 Feb 2022 15:42:18 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-v110-releasenote/</guid>
      <description>&lt;p&gt;2021년 12월 10일 새로이 출시된 &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 11.0 버전의 릴리즈노트&lt;/a&gt;를 살펴봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr-역자-주관적&#34;&gt;TL;DR (역자 주관적)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17 기반으로 변경&lt;/li&gt;
&lt;li&gt;G4String 관련 기능 변경&lt;/li&gt;
&lt;li&gt;G4PhysicsVector 관련 기능 변경&lt;/li&gt;
&lt;li&gt;기존의 g4csv.hh, g4root.hh 등의 분석클래스가 G4AnalysisManger(혹은 이와 동일한 G4GenericAnalysisManager) 클래스로 통합됨에 따라 사용자 코드 수정이 필요함. 파일명에 확장자까지 입력하면 알아서 해당 파일형식으로 기록해줌&lt;/li&gt;
&lt;li&gt;Optical 물질 특성 정의와 관련한 함수 개선&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;역자서문&#34;&gt;역자서문&lt;/h2&gt;
&lt;p&gt;Geant4 10.x의 버전을 뒤로하고, 새로운 메이저버전인 11.x의 시대가 열렸습니다.&lt;/p&gt;
&lt;p&gt;겸사겸사 릴리즈노트를 번역하며 살펴보고자 글을 작성하였습니다.&lt;/p&gt;
&lt;p&gt;전체 내용을 번역하기에는 너무 내용이 방대하기에, 전체적인 내용을 요약한 앞부분만 번역하였습니다.&lt;/p&gt;
&lt;p&gt;일부 오역이 존재할 수 있습니다. 발견하시면 댓글이나 메일(&lt;a href=&#34;mailto:evandde@gmail.com&#34;&gt;evandde@gmail.com&lt;/a&gt;)로 알려주시면 감사하겠습니다.&lt;/p&gt;
&lt;p&gt;이하는 원문에 대한 번역입니다. 일부 이탤릭체로 표시된 내용은, 번역이 어렵거나 마땅한 번역이 떠오르지 않아 원문을 옮겨적은 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;서문&#34;&gt;서문&lt;/h2&gt;
&lt;p&gt;지원하는 시스템에 대한 소스코드 및 실행파일 등은 &lt;a href=&#34;http://cern.ch/geant4/support/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;소스 코드 웹페이지&lt;/a&gt;를 통해 이용 가능합니다.&lt;/p&gt;
&lt;p&gt;여러 이슈에 대해 상세한 피드백과 종합적인 문건을 통해 보고해주신 Geant4 사용자 여러분의 노력에 깊은 감사를 표합니다. 특히, 이번 릴리즈의 수정, 개선, 개발에 기여한 분들께 감사드립니다.&lt;/p&gt;
&lt;p&gt;자세한 사항은 &lt;a href=&#34;http://cern.ch/geant4/support/user_documentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 User Documentation&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;목차&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;지원하는 플랫폼 및 테스트된 환경&lt;/li&gt;
&lt;li&gt;지원하는 CLHEP 및 VecGeom 버전&lt;/li&gt;
&lt;li&gt;사용자 코드를 새 버전으로 마이그레이션 할 때 살펴야 할 항목&lt;/li&gt;
&lt;li&gt;새로운 기능&lt;/li&gt;
&lt;li&gt;Physics와 성능에 관해 기대되는 효과&lt;/li&gt;
&lt;li&gt;알려진 실행 상의 문제 및 한계점&lt;/li&gt;
&lt;li&gt;컴파일 경고&lt;/li&gt;
&lt;li&gt;Geant4 소프트웨어 라이센스&lt;/li&gt;
&lt;li&gt;변경사항 및 수정사항의 세부 목록&lt;/li&gt;
&lt;li&gt;부록&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-지원하는-플랫폼-및-테스트된-환경&#34;&gt;1. 지원하는 플랫폼 및 테스트된 환경&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;플랫폼&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux, gcc-8.3.1
CERN CentOS Linux 8 (CentOS Linux 8 기반), 64 bit 아키텍처(Intel, AMD) 상에서 테스트 수행&lt;/li&gt;
&lt;li&gt;macOS 12.01 Monterey, Apple LLVM/Clang-13
64 bit 아키텍처(Intel, Apple Silicon) 상에서 테스트 수행&lt;/li&gt;
&lt;li&gt;Windows 10, Visual C++ 14.29 (Visual Studio 2019)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;추가적으로 검증/테스트된 조합 (64 bit)&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux, gcc-9.3/10.2/11.2, clang-9/10/11&lt;/li&gt;
&lt;li&gt;Linux, Intel-icc 2021.4&lt;/li&gt;
&lt;li&gt;macOS 10.15 Catalina, Apple LLVM/Clang-12&lt;/li&gt;
&lt;li&gt;macOS 11.6 Big Sur, Apple LLVM/Clang-12&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-지원하는-clhep-및-vecgeom-버전&#34;&gt;2. 지원하는 CLHEP 및 VecGeom 버전&lt;/h3&gt;
&lt;p&gt;이번 Geant4 릴리즈는 &lt;a href=&#34;http://cern.ch/clhep/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CLHEP&lt;/a&gt; &lt;b&gt;2.4.5.1&lt;/b&gt; 버전을 요구하며, 이 버전으로 검증이 이루어졌습니다. 다른 버전의 CLHEP을 사용하는 경우 전산모사 결과가 부정확할 수 있습니다.&lt;/p&gt;
&lt;p&gt;NOTE: Geant4에서 내부적으로 활용하는 CLHEP 클래스 모듈이 기본적으로 제공됩니다. 혹은, 사용자가 직접 CLHEP 라이브러리를 설치하여 연동할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;Geant4 설치 시 옵션을 통해 &lt;a href=&#34;https://gitlab.cern.ch/VecGeom/VecGeom/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VecGeom&lt;/a&gt; 라이브러리를 Geant4 솔리드보다 우선하여 사용할 지에 대해 설정할 수 있습니다. 이 설정을 사용하기 위해서는 VecGeom 버전 &lt;b&gt;1.1.18&lt;/b&gt;이 요구됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-사용자-코드를-새-버전으로-마이그레이션-할-때-살펴야-할-항목&#34;&gt;3. 사용자 코드를 새 버전으로 마이그레이션 할 때 살펴야 할 항목&lt;/h3&gt;
&lt;p&gt;다음은 이 릴리즈의 개발사항에 관련한 몇 가지 정보입니다. 새로운 버전의 적용을 위해, 모든 사용자는 Geant4 라이브러리의 전체 재설치(전체 재컴파일)를 수행해야 하며, 사용자 코드 각각에 대해서도 재컴파일을 수행해야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;일반&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11/17에 맞추어 G4String 인터페이스 및 구현의 단순화. 오래되어 사용되지 않거나 std::string의 멤버함수와 기능이 중복되거나 std::string의 멤버함수가 아닌 함수를 제거하거나 G4StrUtil 네임스페이스를 통해 새로이 제공되는 함수로 대체하였음. 사용자 코드에서 G4String의 멤버함수를 명시적으로 사용한 사항이 있다면 수정을 해야 할 수도 있음. 자세한 사항은 &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html#string-migration-notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10. 부록&lt;/a&gt;을 참고&lt;/li&gt;
&lt;li&gt;G4PhysicsVector와 관련 클래스에 대한 대규모 업데이트를 수행함. 새로운 public 접근 함수를 도입하고, 사용되지 않는 기능을 제거하였으며, 다른 Spline 기법을 사용할 수 있도록 하였음&lt;/li&gt;
&lt;li&gt;사용되지 않는 클래스인 G4LPhysicsFreeVector와 G4PhysicsLnVector를 제거하였음. G4PhysicsOrderedFreeVector는 G4PhysicsFreeVector로 리디렉션됨&lt;/li&gt;
&lt;li&gt;Physics model의 카탈로그에 관한 클래스인 G4PhysicsModelCatalog 클래스 개선. Physics model 각각에 대해 고유한 정수 ID에 해당하는 modelID를 도입하여, 유사하거나 관련성이 있는 physics model 간에 비슷한 정수 값이 부여되도록 하였음. 또한, 모든 application이나 physics list나 향후 Geant4 버전에 대해 동일한 modelID가 동일한 physics model에 상응하도록 수정함&lt;/li&gt;
&lt;li&gt;Geant4 컴파일 및 application 컴파일을 위한 최소 ISO C++ 표준을 C++17으로 설정&lt;/li&gt;
&lt;li&gt;Geant4 빌드 시 multithreading 옵션이 기본적으로 활성화됨&lt;/li&gt;
&lt;li&gt;Geant4 빌드를 위한 최소 CMake 버전을 3.16으로 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analysis 클래스에 대한 대규모 개편. 모든 analysis manager 클래스와 reader 클래스의 G4ThreadLocalSingleton에 대한 마이그레이션이 이루어졌음. 이제 싱글톤 객체는 Geant4 커널에 의해 자동으로 해제(delete)됨. 따라서 사용자가 코드 상에서 명시적으로 객체의 해제를 수행했던 내용이 있다면 삭제해야 함&lt;/li&gt;
&lt;li&gt;G4AnalysisManager를 G4GenericAnalysisManager로 정의함. G4GenericAnalysisManager 클래스가 모든 지원되는 파일포맷을 전부 핸들링하는 식으로 변경됨. 따라서, 파일 이름을 제공할 때 확장자(.csv, .hdf5, .root, .xml)까지 제공하거나, 새로운 멤버함수인 SetDefaultFiletype() 멤버함수를 통해 확장자를 명시해주어야 함. 이에 따라 기존의 각 확장자에 따른 헤더파일은 삭제되었음&lt;/li&gt;
&lt;li&gt;G4Analysis::MasterInstance() 팩토리메서드와 g4analysis.hh 헤더가 삭제되었음&lt;/li&gt;
&lt;li&gt;프로그램 종료 전이나 모든 reader의 구현 시 사용자에 의해 호출 가능한 public 함수인 CloseFiles()를 G4VAnalysisReader에 추가하였음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;지오메트리, field, transportation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4Sphere와 G4Tubs에 대한 미사용 접근자를 제거하였음&lt;/li&gt;
&lt;li&gt;G4[Partial]PhantomParameterization에서 일관성을 위해 Get/SetNoVoxel*() 접근자를 Get/SetNoVoxels*()로 변경하였음. 사용자 코드에서 변경이 필요할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;EM, optical physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4EmProcessOptions 클래스를 제거하였음. 이를 이용하여 사용자 physics-list를 만든 경우, 수정이 필요할 수 있음&lt;/li&gt;
&lt;li&gt;G4Scintillation에서 사용되지 않는 material properties를 제거하였음. 이제 10.7 버전의 &amp;ldquo;enhanced&amp;rdquo; time constant를 이용한 방법을 통해서만 scintillation 특성을 정의할 수 있음&lt;/li&gt;
&lt;li&gt;material property 이름에 대해 오탈자 방지를 위한 기능을 추가하였음. 이제 사용자가 직접 정의하는 material property나 material constant property를 사용하는 경우에는 Add(Const)Property() 함수의 입력인자로 createNewKey=true를 추가해야 함&lt;/li&gt;
&lt;li&gt;중복되는 optical UI 명령어를 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hadronic physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Constructors for inelastic processes have changed signature, as well as for elastic and inelastic cross-sections.&lt;/em&gt; 이는 physics-list의 내부 구성에 영향을 미칠 수 있으므로, &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html#hadronic-migration-notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10. 부록&lt;/a&gt;을 참고하여 사용자 physics-list를 수정해야 할 수 있음&lt;/li&gt;
&lt;li&gt;NeutronHP, ParticleHP, Radioactive Decay에서 사용되지 않는 환경변수를 제거하였음. 이는 동일한 기능을 수행하는 UI command로 대체되었음. 해당 UI command는 이전 버전에서 도입되었으므로 해당 내용 참고&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;가시화 및 모델링&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 릴리즈에서 권장하며 지원되는 Open Inventor 드라이버는 Qt 기반의 드라이버임 (OIQt 뷰어 옵션). Xt/Xm 드라이버(OIX, OIXE)도 여전히 사용가능하나, 향후 릴리즈에서 제거될 예정임&lt;/li&gt;
&lt;li&gt;Qt 드라이버는 Qt-5 플랫폼 기반이며, Qt-6는 아직 지원하지 않음&lt;/li&gt;
&lt;li&gt;G4VModel의 인터페이스를 단순화함. transformation과 extent에 대한 책임을 각각의 개별 모델로 위임시켰음. 이에 따라, 예를 들면 G4VModel::GetTransformedExtent()와 같은 메서드는 더이상 존재하지 않으며, 구체화된 클래스가 직접 transformation이나 extent를 유지/관리하고 GetExtent() 등의 메서드를 통해 현재 상태를 반환하도록 해야함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;데이터 셋&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새로운 버전의 데이터 셋을 제공함. 자세한 사항은 &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html#data-notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;9. 변경사항 및 수정사항의 세부 목록&lt;/a&gt;을 참고
&lt;ul&gt;
&lt;li&gt;G4EMLOW-8.0, G4PARTICLEXS-4.0&lt;/li&gt;
&lt;li&gt;하전입자에 대해 ParticleHP를 사용하려면, 선택적 데이터 셋인 G4TENDL-1.4가 필요함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-새로운-기능&#34;&gt;4. 새로운 기능&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;일반&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PTL (Parallel Tasking Library) v2.0.0 기반의 작업관리 시스템이 multi-threading의 병렬연산에 있어 기본 방식으로 사용됨. 이에 상응하는 run manager 클래스 (G4TaskRunManager)와 factory 클래스 (G4RunManagerFactory)가 제공되어, 이벤트 루프에 대한 작업 제어가 가능하도록 하였음. 작업관리 시스템은 Intel TBB와도 완벽하게 호환되며, 이는 Geant4 라이브러리 설치 시 CMake 인자로서 GEANT4_USE_TBB=ON으로 설정하여 configure를 수행하면 됨. 기본적으로는 내부 쓰레드 풀과 작업 큐에 작업을 보내 수행하도록 하는 방식을 취함&lt;/li&gt;
&lt;li&gt;G4SteppingVerboseWithUnits 클래스를 새로이 도입하였음. 이는 기존 G4SteppingVerbose 클래스의 대체제로, verbose에 적절한 단위계가 함께 출력되도록 함. 모든 sequential, MT 등 모든 작업 방식에서 공통적으로 사용할 수 있는 간단한 방법이 될 것임.&lt;/li&gt;
&lt;li&gt;G4VTrackingManager 클래스를 신규 도입. 이는 하나 이상의 입자 유형에 특화되어 사용자가 구현 가능한 tracking manager 인터페이스임. 이러한 사용자 tracking manager는 G4VUserPhysicsList에 등록하여 사용할 수 있음. 만약 어떤 입자에 대해 사용자의 tracking manager 클래스가 등록되어 있다면, G4EventManager가 track에 관한 정보를 해당 클래스에 전달해주는 방식으로 작동함&lt;/li&gt;
&lt;li&gt;새로운 난수 엔진인 Ranlux++가 추가됨&lt;/li&gt;
&lt;li&gt;G4String이 G4StrUtil이라는 네임스페이스를 제공하며, 이에 포함된 간단한 문자열조작, 왼쪽/오른쪽 스트리핑(stripping), 대소문자 변환, 검색 등의 기능을 수행하는 함수를 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4VAnalysisManager 클래스의 새로운 public 멤버함수 Reset()과 Clear()가 제공되며, 이는 할당된 analysis 객체를 reset하거나 해제(delete)하도록 하며, 이들이 수집한 데이터들을 지우는 기능을 수행함. (&lt;em&gt;New public functions G4VAnalysisManager::Reset() and Clear() allowing resetting and deleting all allocated analysis objects and clearing their collections.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;String vector로 구성된 n-tuple 열에 대해, G4VAnalysisManager와 G4VAnalysisReader의 public 멤버함수를 통한 지원을 추가&lt;/li&gt;
&lt;li&gt;CSV 출력 형태에 대해, 파일시스템 디렉토리를 지원. 만약 디렉토리명이 설정되어 있고, 파일시스템에 해당 이름의 디렉토리가 존재한다면, 히스토그램과 n-tuple 파일이 해당 디렉토리 내에 저장되도록 함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Digitization, Hits &amp;amp; Scoring&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tube 및 분할된 tube 형태의 원통형 scoring 메쉬기능 확장&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;지오메트리 및 field&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map을 도입하여, 이름을 기반으로한 solid, region, volume store에서의 검색 속도를 향상시킴&lt;/li&gt;
&lt;li&gt;복셀화/최적화된 지오메트리에 대한 navigation 알고리즘을 G4VoxelNavigation 클래스와 같이 대체하여 사용할 수 있게 하였음&lt;/li&gt;
&lt;li&gt;VecGeom navigator 시연에 관한 예제를 추가하였음 (beta)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;매질&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G4Material에서의 G4Exception을 수정하고 개편하여, 좀 더 완전한 정보를 제공하고 개선된 진단이 가능하도록 하였음&lt;/li&gt;
&lt;li&gt;G4Material 업데이트: 필요에 따라 G4Element의 const pointer를 사용하도록 함&lt;/li&gt;
&lt;li&gt;G4OpticalMaterialProperties 클래스를 신규로 도입하여, optical material property를 저장하고 이미 정의된 항목을 사용할 수 있도록 함&lt;/li&gt;
&lt;li&gt;G4MaterialPropertiesTable 클래스에서, material property나 material const property를 작성할 때 std::map 대신 std::vector를 사용하도록 함. 이를 통해 map 내 요소를 검색할 필요성을 배제시킴&lt;/li&gt;
&lt;/ul&gt;
&lt;i&gt;
&lt;p&gt;&lt;strong&gt;Electromagnetic physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General code cleanup in EM modules; removed obsolete models and processes, removed G4EmProcessOptions class.&lt;/li&gt;
&lt;li&gt;Updates to G4GammaGeneralProcess: exclude gamma-nuclear from the 2nd energy area.&lt;/li&gt;
&lt;li&gt;Fixed model per region definition for all base processes G4VEmProcess, G4VMultipleScattering, G4VEnergyLossProcess; removed sub-cut facility for energy loss processes but left G4VSubCutProducer interface.&lt;/li&gt;
&lt;li&gt;Updated EM integral approach by introduction of a cross-section shape type including cross-section shape with 2 maxima.&lt;/li&gt;
&lt;li&gt;Reviewed EM part of G4PhysicsModelCatalog to adopt new numbering convention. Created new enum for low-energy electromagnetic process sub-types.&lt;/li&gt;
&lt;li&gt;Updated G4UrbanMscModel to not apply energy correction at small steps below 1% of a particle range.&lt;/li&gt;
&lt;li&gt;G4VEmFluctuationModel: changed interface; both cut value and max energy transfer are parameters of main methods.&lt;/li&gt;
&lt;li&gt;In G4UniversalFluctuation, substantially simplified sampling algorithm for faster computation.&lt;/li&gt;
&lt;li&gt;Updated Livermore models to use EPICS2017 data.&lt;/li&gt;
&lt;li&gt;Included new PIXE data libraries following ANSTO recommendations.&lt;/li&gt;
&lt;li&gt;New data structure for ICRU73 and ICRU90 ion stopping power data shared between threads and used in G4LinhardSorensenIonModel.&lt;/li&gt;
&lt;li&gt;Implement and use base material approach only if base materials are defined, this should bring a minor speedup of the code and little reduction of memory.&lt;/li&gt;
&lt;li&gt;Enable synchrotron radiation only for electrons, positrons, muons, protons, and anti-protons.&lt;/li&gt;
&lt;li&gt;Introducing quantum entanglement of e+ annihilation. Currently implemented only in G4eplusAnnihilation and G4LivermorePolarizedComptonModel.&lt;/li&gt;
&lt;li&gt;New class G4OpticalMaterialProperties, a store for optical material properties and allow use of predefined optical material properties.&lt;/li&gt;
&lt;li&gt;Added new IRT-syn model for DNA.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hadronic physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General code clean-up in hadronic processes and models; removed obsolete and deprecated classes; removed obsolete &amp;ldquo;rpg&amp;rdquo; model.&lt;/li&gt;
&lt;li&gt;Introduced a new threshold parameter in radioactive-decay for analogue mode to kill very long radioactive decays at rest of nuclides happening later than such threshold.&lt;/li&gt;
&lt;li&gt;Introduced six light hypernuclei and their corresponding antiparticles (for the time being, only electromagnetic interactions of these particles are available, but switched off by default).&lt;/li&gt;
&lt;li&gt;Extended the interface of hadronic models for projectile hypernuclei and anti-hypernuclei (but not yet hadronic physics for these particles).&lt;/li&gt;
&lt;li&gt;Added implementation of hypercluster emission in INCLXX.&lt;/li&gt;
&lt;li&gt;Extended interface of the Fritiof (FTF) string model to get the number of projectile/target spectator nucleons, number of nucleon-nucleon collisions and impact parameter (see example Hadr09).&lt;/li&gt;
&lt;/ul&gt;
&lt;/i&gt;
&lt;p&gt;&lt;strong&gt;Physics List&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;버보스 관점에서 균일한 접근이 이루어지도록 physics list를 수정하였음 (&lt;em&gt;Updated physics lists to use a uniform approach for verbosity.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Light hypernuclei에 대한 EM physics (기본적으로는 꺼져 있음)는 어떠한 physics list에도 C++ 인터페이스를 통해 실행하도록 설정할 수 있음 (G4HadronicParameters::Instance()-&amp;gt;SetEnableHyperNuclei(true))&lt;/li&gt;
&lt;li&gt;원자의 안정화(de-excitation)에 대한 ANSTO 데이터 옵션은 C++ 인터페이스나 UI command(권장)를 통해 어떠한 physics list에도 실행하도록 설정할 수 있음&lt;/li&gt;
&lt;li&gt;Livermore 감마 반응에 대해 EPICS2017 parameterisation이 활성화될 수 있음&lt;/li&gt;
&lt;li&gt;Tau 쌍에 대한 양전자의 annihilation이 활성화될 수 있음&lt;/li&gt;
&lt;li&gt;LinhardSorensenlonModel을 G4EmStandardPhysicsWVI 생성자와 함께 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;i&gt;
&lt;p&gt;&lt;strong&gt;Visualization and Interfaces&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New ToolsSG (TSG) visualisation package based on g4tools, providing four new (mutually exclusive) visualisation drivers: TOOLSSG_X11_GLES, TOOLSSG_WINDOWS_GLES, TOOLSSG_XT_GLES and TOOLSSG_QT_GLE.&lt;/li&gt;
&lt;li&gt;New VtkQt and VtkNative visualisation drivers.&lt;/li&gt;
&lt;li&gt;Introducing in-app plotting with visualization and related UI command.&lt;/li&gt;
&lt;li&gt;Introducing G4Mesh, a light class that encapsulates and validates visualisation of a nested parameterisation.&lt;/li&gt;
&lt;li&gt;Extended G4UIWin32 driver with new features.&lt;/li&gt;
&lt;li&gt;Revised all visualisation models, to have G4PhysicalVolumeModel taking care of the transformation of any primitives that it generates.&lt;/li&gt;
&lt;li&gt;Removed obsolete network visualisation options for VRML driver and FukuiRenderer driver.&lt;/li&gt;
&lt;li&gt;Removed obsolete GAG/Gain/MOMO and HepRep(WIRED) modules/driver.&lt;/li&gt;
&lt;li&gt;Removed deprecated functions in visualization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CaTS - New application implementing a flexible and extendable framework for the simulation of calorimeter and tracking detectors. It also demonstrates how to use &lt;a href=&#34;https://bitbucket.org/simoncblyth/opticks.git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Opticks&lt;/a&gt; for the creation and propagation of optical photons.&lt;/li&gt;
&lt;li&gt;pythia/py8decayer - New example demonstrating how to outfit Pythia8-based decay features to those resonances in Geant4 where decay tables are not implemented by default. In addition, it shows how to replace existing Geant4 decay tables to such resonances as tau+/- or B+/- with the Pythia8-based ones.&lt;/li&gt;
&lt;li&gt;geometry/VecGeomNavigation - New example demonstrating integration of VecGeom navigation, based on the prototype package G4VecGeomNav, being integrated in the example at build time.&lt;/li&gt;
&lt;li&gt;hadronic/Hadr05 - New example demonstrating how to collect energy deposition in a sampling calorimeter and how to survey energy flow.&lt;/li&gt;
&lt;li&gt;hadronic/Hadr10 - New hadronic example aimed to exercise the decay of tau leptons, as well as charmed and bottom hadrons.&lt;/li&gt;
&lt;li&gt;parameterisations/Par04 - New example demonstrating how to use the Machine Learning (ML) inference to create energy deposits as a fast simulation model using ONNX runtime and LWTNN libraries.&lt;/li&gt;
&lt;li&gt;runAndEvent/RE07 - New example demonstrating how to register specialized tracking managers for a particle or a set of particles.&lt;/li&gt;
&lt;li&gt;dna/AuNP - New example simulating the track-structure of electrons in microscopic gold volume. Also simulating that in liquid water medium surrounding the gold volume.&lt;/li&gt;
&lt;li&gt;dna/scavenger - New example showing how to activate the scavenging process in chemistry using the deterministic treatment of the IRT model.&lt;/li&gt;
&lt;li&gt;visualization/movies - New example illustrating how to make a movie with /vis/viewer/save and /vis/viewer/interpolate UI commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;/i&gt;
&lt;hr&gt;
&lt;h3 id=&#34;5-physics와-성능에-관해-기대되는-효과&#34;&gt;5. Physics와 성능에 관해 기대되는 효과&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;지오메트리&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복셀 최적화 구조에 대해 G4Allocator를 사용하여 노드와 프록시를 동적으로 할당. 이는 메모리 단편화(memory fragmentation)를 줄이는 데에 도움을 줄 것임&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;EM physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EM 전산모사에 있어 수% 수준의 속도 향상이 기대됨. 10.6이나 10.7 버전에서의 calorimeter 모사를 기반으로 비교한 결과임&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hadronic physics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10.7 버전에 비해, 일반적으로 모든 hadronic physics의 관측가능량에 대해 (특히 calorimeter에서의 hadronic shower) 보다 안정적인 결과를 제공할 것으로 기대됨&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;6-알려진-실행-상의-문제-및-한계점&#34;&gt;6. 알려진 실행 상의 문제 및 한계점&lt;/h3&gt;
&lt;p&gt;미해결된 실행 상의 문제점 목록을 확인하거나 여러분이 겪은 실행 상의 문제점을 제출하려면, &lt;a href=&#34;http://cern.ch/geant4/problemreport&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 Problem Reporting System&lt;/a&gt;을 이용해 주세요.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;7-컴파일-경고&#34;&gt;7. 컴파일 경고&lt;/h3&gt;
&lt;p&gt;일부 플랫폼의 경우 컴파일 시 경고가 발생할 수 있습니다. 다만, 이들이 실행 상에 문제를 야기하지는 않을 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;8-geant4-소프트웨어-라이센스&#34;&gt;8. Geant4 소프트웨어 라이센스&lt;/h3&gt;
&lt;p&gt;A Software License applies to the Geant4 code. Users must accept this license in order to use it.
The details and the list of copyright holders is available at &lt;a href=&#34;http://cern.ch/geant4/license&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://cern.ch/geant4/license&lt;/a&gt; and also in the text file LICENSE distributed with the source code.&lt;/p&gt;
&lt;p&gt;역자 주석: 이 항목은 라이센스 내용이기에 따로 번역하지 않았습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;9-변경사항-및-수정사항의-세부-목록&#34;&gt;9. 변경사항 및 수정사항의 세부 목록&lt;/h3&gt;
&lt;p&gt;역자 주석: 이 항목은 내용이 너무 많아 번역하지 않습니다. &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html#9.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;원문&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;10-부록&#34;&gt;10. 부록&lt;/h3&gt;
&lt;p&gt;역자 주석: 이 항목은 내용이 너무 많아 번역하지 않습니다. &lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html#10.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;원문&lt;/a&gt;을 참고하시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geant4-data.web.cern.ch/ReleaseNotes/ReleaseNotes.11.0.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geant4 11.0 Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2022-02-04: 최초 게시. 1절 ~ 3절 번역&lt;/li&gt;
&lt;li&gt;2022-02-07: 글 교정. 4절 이후 번역내용 추가&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4용 개선된 ParticleGun 클래스(지오메트리 선원항/타겟 설정, 동위원소 모델링)</title>
      <link>https://evandde.github.io/advancedparticlegun/</link>
      <pubDate>Thu, 25 Nov 2021 16:03:52 +0900</pubDate>
      <guid>https://evandde.github.io/advancedparticlegun/</guid>
      <description>&lt;p&gt;Geant4에서 기본 제공하는 G4ParticleGun 클래스보다 좀 더 많은 기능이 필요해서 제가 직접 만들어 쓰고 있는 &lt;b&gt;AdvancedParticleGun 클래스&lt;/b&gt;를 소개합니다. &lt;b&gt;특정 지오메트리를 선원항으로 사용&lt;/b&gt;하려는 경우, &lt;b&gt;특정 지오메트리 방향으로만 방사선을 방출&lt;/b&gt;시키고자 하는 경우, &lt;b&gt;방사성동위원소&lt;/b&gt;를 선원으로 설정하려는 경우에 유용하게 사용할 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;h3 id=&#34;용도&#34;&gt;용도&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;00_advpg&#34;
           src=&#34;https://evandde.github.io/advancedparticlegun/00_advpg.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이미 모사해 둔 &lt;b&gt;지오메트리 중 하나를 선원항으로 지정&lt;/b&gt;하고 싶을 때&lt;/li&gt;
&lt;li&gt;방사선이 방출되는 &lt;b&gt;방향을 특정 지오메트리 쪽으로 제한&lt;/b&gt;하고 싶을 때&lt;/li&gt;
&lt;li&gt;방사성동위원소가 방출하는 &lt;b&gt;감마선 및 엑스선&lt;/b&gt;만을 선원항으로 두고 싶을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;다운로드-경로&#34;&gt;다운로드 경로&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;필요한 항목만 압축한 파일: &lt;a href=&#34;https://evandde.github.io/uploads/advpg.zip&#34; target=&#34;_blank&#34;&gt;advpg.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;예제가 담긴 GitHub repository: &lt;a href=&#34;https://github.com/evandde/example_advpg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;evandde/example_advpg: Example of Advanced Particle Gun class for Geant4. (github.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;예제 압축파일 다운 링크(GitHub repository에서 받는 것과 동일): &lt;a href=&#34;https://github.com/evandde/example_advpg/archive/refs/heads/main.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example_advpg.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;사용방법&#34;&gt;사용방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;위에서 advpg.zip을 다운받아, 압축을 풀어서 나오는 3개 폴더(ICRP07DATA, include, src)를 프로젝트에 붙여넣기 (Geant4의 일반적인 디렉토리 구성을 따른다고 가정)&lt;/li&gt;
&lt;li&gt;사용자의 PrimaryGeneratorAction에서, ParticleGun 대신 AdvancedParticleGun 객체를 만들어서 사용&lt;/li&gt;
&lt;li&gt;기존 ParticleGun의 기능은 그대로 사용 가능&lt;/li&gt;
&lt;li&gt;추가적으로 다음의 멤버함수를 사용 가능
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void SetNuclideSource(G4String nuclideName)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void SetMinPhotonEnergy(G4double minPhotonEnergy)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void SetSourceVolume(G4String sourceVolName)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void SetTargetVolume(G4String targetVolName, G4double margin)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기능에 따라 초기 입자의 가중치(weight)가 조절될 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;다운로드&#34;&gt;다운로드&lt;/h2&gt;
&lt;p&gt;여러분의 Geant4 프로젝트는 다음과 같은 일반적인 디렉토리 구성을 따른다고 가정하여 진행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;projectDirectory
|- main.cc
|- include/
|  |- .hh
|  |- ...
|- src/
|  |- .cc
|  |- ...
|- CMakeLists.txt
|- .mac
|- ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;일단, &lt;a href=&#34;https://evandde.github.io/uploads/advpg.zip&#34; target=&#34;_blank&#34;&gt;advpg.zip&lt;/a&gt; 파일을 다운로드 받습니다. 제공해드리는 advpg.zip 압축파일에는 다음과 같은 내용물이 들어 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ICRP07DATA/
|- ICRP-07.NDX	# ICRP107 제공; Index File
|- ICRP-07.RAD	# ICRP107 제공; Radiation File
include/
|- AdvancedParticleGun.hh
|- ICRP07Manager.hh
src/
|- AdvancedParticleGun.cc
|- ICRP07Manager.cc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이를 그대로 여러분의 프로젝트에 옮겨 넣으시면, &lt;code&gt;ICRP07DATA&lt;/code&gt;라는 디렉토리가 추가로 생기고, &lt;code&gt;include&lt;/code&gt;와 &lt;code&gt;src&lt;/code&gt; 디렉토리는 기존의 것과 합쳐져 &lt;code&gt;AdvancedParticleGun&lt;/code&gt;과 &lt;code&gt;ICRP07Manager&lt;/code&gt;클래스에 관한 두 개씩의 파일만 추가될 것입니다.&lt;/p&gt;
&lt;p&gt;최종적으로 여러분의 프로젝트가 다음과 같이 되어있으면 세팅은 끝입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;projectDirectory
|- main.cc
|- ICRP07DATA/
|  |- ICRP-07.NDX
|  |- ICRP-07.RAD
|- include/
|  |- AdvancedParticleGun.hh
|  |- ICRP07Manager.hh
|  |- ...
|- src/
|  |- AdvancedParticleGun.cc
|  |- ICRP07Manager.cc
|  |- ...
|- CMakeLists.txt
|- .mac
|- ...
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;클래스-설명&#34;&gt;클래스 설명&lt;/h2&gt;
&lt;h3 id=&#34;advancedparticlegun-클래스&#34;&gt;AdvancedParticleGun 클래스&lt;/h3&gt;
&lt;p&gt;AdvancedParticleGun 클래스는 Geant4에서 공식으로 제공하는 G4ParticleGun 클래스를 public으로 상속받아 만들어진 클래스입니다. 따라서 여러분이 기존에 G4ParticleGun 클래스를 사용하던 방식과 동일하게 AdvancedParticleGun 클래스를 사용하시면 됩니다. 여러분이 G4VUserPrimaryGeneratorAction 클래스를 상속받아 만든 클래스 내에서 AdvancedParticleGun 클래스의 객체를 만들고, 기존과 동일한 방법으로 GeneratePrimaryVertex() 멤버함수를 이용하여 초기 입자를 생성할 수 있습니다.&lt;/p&gt;
&lt;p&gt;G4ParticleGun 클래스가 제공하는 다음과 같은 멤버함수도 동일하게 사용 가능합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SetParticleDefinition()&lt;/li&gt;
&lt;li&gt;SetParticleCharge()&lt;/li&gt;
&lt;li&gt;SetParticleEnergy()&lt;/li&gt;
&lt;li&gt;SetParticleMomentumDirection()&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이와 더불어, AdvancedParticleGun 클래스는 추가적으로 다음과 같은 멤버함수를 제공합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SetSourceVolume()&lt;/li&gt;
&lt;li&gt;GetSourceVolume()&lt;/li&gt;
&lt;li&gt;SetTargetVolume()&lt;/li&gt;
&lt;li&gt;GetTargetVolume()&lt;/li&gt;
&lt;li&gt;SetTargetVolumeMargin()&lt;/li&gt;
&lt;li&gt;GetTargetVolumeMargin()&lt;/li&gt;
&lt;li&gt;SetNuclideSource()&lt;/li&gt;
&lt;li&gt;GetNuclideSource()&lt;/li&gt;
&lt;li&gt;SetMinPhotonEnergy()&lt;/li&gt;
&lt;li&gt;GetMinPhotonEnergy()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;icrp07manager-클래스&#34;&gt;ICRP07Manager 클래스&lt;/h3&gt;
&lt;p&gt;ICRP07Manager 클래스는 &lt;code&gt;ICRP07DATA&lt;/code&gt; 디렉토리 내에 존재하는 ICRP Publication 107의 데이터를 읽어오고 활용하기 위한 클래스입니다.&lt;/p&gt;
&lt;p&gt;사용자가 ICRP07Manager 클래스를 직접 핸들링할 필요는 없으며, ICRP07Manager 클래스의 기능 중 사용자가 필요한 기능은 AdvancedParticleGun 클래스를 통해 사용할 수 있도록 포장(wrapping)해 두었습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;사용방법-상세&#34;&gt;사용방법 상세&lt;/h2&gt;
&lt;h3 id=&#34;지오메트리를-선원항으로-설정&#34;&gt;지오메트리를 선원항으로 설정&lt;/h3&gt;
&lt;p&gt;사용자가 만들어 둔 &lt;b&gt;G4VPhysicalVolume 클래스의 객체 중 하나&lt;/b&gt;를 &lt;b&gt;균일하게 방사선을 방출하는 선원항으로 설정&lt;/b&gt;합니다. 이 기능을 사용하면 다음 그림과 같이 특정 지오메트리를 선원항으로 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_source&#34;
           src=&#34;https://evandde.github.io/advancedparticlegun/01_source.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 SetSourceVolume() 함수를 사용합니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetSourceVolume(G4VPhysicalVolume *sourceVol);
void SetSourceVolume(G4String sourceVolName);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사용자는 SetSourceVolume() 함수의 입력인자로 G4VPhysicalVolume 클래스 객체의 포인터를 직접 입력할 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은, 해당 객체의 이름(Geant4 내에서 명명된 G4String형 이름)이 유일하다면, 포인터 대신 이름만 입력할 수도 있습니다. 이 경우에는 G4PhysicalVolumeStore 클래스를 활용하여, 해당 이름을 갖는 G4VPhysicalVolume 클래스의 객체를 자동으로 찾아옵니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    G4PhysicalVolumeStore 클래스의 특성 상, 이름이 중복되는 경우에는 그 중 먼저 검색된 하나의 객체만을 반환합니다. 이 경우, 의도와 달리 동작할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;선원항으로 사용할 G4VPhysicalVolume 클래스 객체가 선택되면, 앞으로 AdvancedParticleGun 클래스는 &lt;b&gt;선원의 위치를 해당 선원 객체 내부의 임의의 지점으로 균일하게 샘플링&lt;/b&gt;합니다. 샘플링 방식은 해당 지오메트리를 감싸는 직육면체를 상정하여 샘플링한 뒤, rejection method 기법을 활용합니다. 따라서, 지오메트리의 형태에 따라 선원의 위치를 샘플링하는 데에 소요되는 시간이 상이할 수 있습니다.&lt;/p&gt;
&lt;p&gt;만약 해당 기능을 해제하여 사용하지 않고자 하는 경우에는, SetSourceVolume() 함수의 입력인자로 &lt;code&gt;nullptr&lt;/code&gt;을 넣어주시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 기능은 선원의 위치를 지정하므로, SetParticlePosition() 함수와 기능상 충돌합니다. 만약 SetSourceVolume() 함수를 통해 유효한 G4VPhysicalVolume 객체로 선원항이 설정된 상태라면, &lt;b&gt;SetParticlePosition() 함수를 무시하고 이 함수로 설정된 지오메트리를 우선&lt;/b&gt;합니다. 이를 원치 않는다면 반드시 SetSourceVolume() 함수의 기능을 해제하셔야 합니다.&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 GetSourceVolume() 함수를 사용하면, 현재 설정된 선원 지오메트리의 G4VPhysicalVolume 클래스 객체의 포인터를 확인할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4VPhysicalVolume *GetSourceVolume() const;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;지오메트리를-타겟으로-설정&#34;&gt;지오메트리를 타겟으로 설정&lt;/h3&gt;
&lt;p&gt;사용자가 만들어 둔 &lt;b&gt;G4VPhysicalVolume 클래스의 객체 중 하나&lt;/b&gt;를 &lt;b&gt;방사선이 도달할 타겟으로 설정&lt;/b&gt;합니다. 이 기능을 사용하면 다음 그림과 같이 특정 지오메트리를 타겟으로 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_target&#34;
           src=&#34;https://evandde.github.io/advancedparticlegun/02_target.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 SetTargetVolume() 함수를 사용합니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetTargetVolume(G4VPhysicalVolume *targetVol, G4double margin = 0.);
void SetTargetVolume(G4String targetVolName, G4double margin = 0.);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사용자는 SetTargetVolume() 함수의 입력인자로 G4VPhysicalVolume 클래스 객체의 포인터를 직접 입력할 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은, 해당 객체의 이름(Geant4 내에서 명명된 G4String형 이름)이 유일하다면, 포인터 대신 이름만 입력할 수도 있습니다. 이 경우에는 G4PhysicalVolumeStore 클래스를 활용하여, 해당 이름을 갖는 G4VPhysicalVolume 클래스의 객체를 자동으로 찾아옵니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    G4PhysicalVolumeStore 클래스의 특성 상, 이름이 중복되는 경우에는 그 중 먼저 검색된 하나의 객체만을 반환합니다. 이 경우, 의도와 달리 동작할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;타겟으로 사용할 G4VPhysicalVolume 클래스 객체가 선택되면, 앞으로 AdvancedParticleGun 클래스는 &lt;b&gt;현재 선원의 위치로부터 해당 타겟 객체를 완전히 감싸는 원뿔 내부의 임의의 방향으로 균일하게 샘플링&lt;/b&gt;합니다. 샘플링 방식은 한 지점으로부터 isotropic한 방향을 샘플링하되 공간각을 원뿔 내부로 제한하는 방식을 사용합니다.&lt;/p&gt;
&lt;p&gt;추가적으로 SetTargetVolume() 함수는 두 번째 인자로 &lt;b&gt;길이 형태(G4double 자료형)의 &lt;code&gt;margin&lt;/code&gt; 값을 입력&lt;/b&gt;받습니다. 이는 타겟 G4VPhysicalVolume 객체를 딱 맞게 감싸는 원뿔을 기준으로, 이보다 좀 더 여유를 두어 공간각이 큰 원뿔로 방향을 설정하고자 할 때 사용합니다. 사용자는 &lt;code&gt;margin&lt;/code&gt;값을 별도로 입력하지 않아도 되며, 이 경우 &lt;b&gt;기본값은 0&lt;/b&gt;이 되어 타겟 G4VPhysicalVolume 객체를 딱 맞게 감싸는 원뿔로 방향이 설정됩니다.&lt;/p&gt;
&lt;p&gt;만약 &lt;code&gt;margin&lt;/code&gt; 값만 바꾸고 싶은 경우에는, SetTargetVolumeMargin() 멤버함수를 사용할 수도 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetTargetVolumeMargin(G4double margin);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;만약 해당 기능을 해제하여 사용하지 않고자 하는 경우에는, SetTargetVolume() 함수의 입력인자로 &lt;code&gt;nullptr&lt;/code&gt;을 넣어주시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 기능은 선원의 방향을 지정하므로, SetParticleMomentumDirection() 함수와 기능상 충돌합니다. 만약 SetTargetVolume() 함수를 통해 유효한 G4VPhysicalVolume 객체로 선원항이 설정된 상태라면, &lt;b&gt;SetParticleMomentumDirection() 함수를 무시하고 이 함수로 설정된 지오메트리를 우선&lt;/b&gt;합니다. 이를 원치 않는다면 반드시 SetTargetVolume() 함수의 기능을 해제하셔야 합니다.&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 GetTargetVolume() 함수를 사용하면, 현재 설정된 타겟 지오메트리의 G4VPhysicalVolume 클래스 객체의 포인터를 확인할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4VPhysicalVolume *GetTargetVolume() const;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;더불어, GetTargetVolumeMargin() 함수를 사용하면, 현재 설정된 &lt;code&gt;margin&lt;/code&gt; 값을 확인할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4double GetTargetVolumeMargin() const;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;가중치-변화&#34;&gt;가중치 변화&lt;/h4&gt;
&lt;p&gt;SetTargetVolume() 함수의 주요한 특징 중 하나는 초기입자의 가중치(weight)를 변화시킨다는 것입니다.&lt;/p&gt;
&lt;p&gt;전 방향($\Omega=4\pi$)으로의 등방적(isotropic) 방향분포가 기본이라고 보았을 때, 이 함수가 제공하는 기능은 방향분포를 일부 공간각으로 편향(bias)시키는 효과가 있습니다. 따라서, 등방적 방향분포가 제공하는 결과값과 비교하여, 변화된 공간각의 비율만큼 달라질 수 있습니다. 이를 보정하기 위해, 초기입자의 가중치를 변화시킬 필요가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;SetTargetVolume() 함수는 이 작업을 자동으로 수행&lt;/b&gt;합니다.&lt;/p&gt;
&lt;p&gt;SetTargetVolume() 함수를 통해 결정된 원뿔의 공간각을 $\Omega$라 할 때, 초기입자의 가중치는 $\frac{\Omega}{4\pi}$배가 됩니다. 이를 통해, 공간각을 제한함으로써 결과값이 커지는 영향을 정확하게 보상해줍니다.&lt;/p&gt;
&lt;p&gt;이렇게 변화된 가중치는 G4Track 클래스의 멤버함수인 GetWeight() 함수 등을 통해 확인할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;방사성동위원소를-선원항으로-설정&#34;&gt;방사성동위원소를 선원항으로 설정&lt;/h3&gt;
&lt;p&gt;선원항의 초기입자를 &lt;b&gt;특정 방사성동위원소가 붕괴되며 방출하는 감마선 및 엑스선으로 설정&lt;/b&gt;합니다. 방사성동위원소의 핵종을 결정하면, 그 핵종이 붕괴하며 방출하는 감마선과 엑스선의 방출률(yield)을 반영하여 자동으로 초기입자가 샘플링됩니다. 붕괴된 딸핵종이 불안정한 핵종인 경우에는 딸핵종이 붕괴하며 방출하는 감마선과 엑스선도 붕괴확률 및 방출률을 반영하여 초기입자 군에 포함됩니다. 이때 붕괴도식, 붕괴확률, 방출률 등의 정보는 &lt;a href=&#34;https://www.icrp.org/publication.asp?id=ICRP%20Publication%20107&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ICRP Publication 107&lt;/a&gt;의 정보를 따릅니다.&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 SetNuclideSource() 함수를 사용합니다. 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetNuclideSource(G4String nuclideName);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사용자는 SetNuclideSource() 함수의 입력인자로 G4String 형 데이터인 핵종명(&lt;code&gt;nuclideName&lt;/code&gt;)을 입력할 수 있습니다. 이 때 핵종명은 &amp;quot;Cs-137&amp;quot;, &amp;quot;Co-60&amp;quot; 등과 같이, &amp;quot;{원소기호}-{질량수}&amp;quot;의 형태로 입력해야 합니다.&lt;/p&gt;
&lt;p&gt;ICRP Publication 107에서 제공하는 데이터가 존재하는 유효한 방사성동위원소가 선택된 경우, 앞으로 AdvancedParticleGun 클래스는 &lt;b&gt;초기입자를 광자(G4Gamma)로 고정하고, 매 초기입자를 발생시킬 때마다 광자의 에너지를 붕괴도식, 붕괴확률, 방출률에 따라 샘플링&lt;/b&gt;합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;이 기능은 모든 붕괴도식에 대해 단순히 각 딸핵종으로의 붕괴 확률만 고려합니다.&lt;/p&gt;
&lt;p&gt;반감기, 모핵종/딸핵종 간의 방사능 비율, 시간에 따른 방사능 변화 등은 반영하지 않습니다.&lt;/p&gt;
&lt;p&gt;따라서, 영년평형(secular equilibrium)을 이루지 않는 핵종의 경우에는 의도하지 않은 결과가 도출될 수 있음에 주의하시기 바랍니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;만약 해당 기능을 해제하여 사용하지 않고자 하는 경우에는, SetNuclideSource() 함수의 입력인자로 빈 스트링(&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;)을 넣어주시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 기능은 선원의 입자와 에너지를 지정하므로, SetParticleDefinition() 함수 및 SetParticleEnergy() 함수와 기능상 충돌합니다. 만약 SetNuclideSource() 함수를 통해 유효한 방사성동위원소로 선원항이 설정된 상태라면, &lt;b&gt;SetParticleDefinition() 함수와 SetParticleEnergy() 함수를 무시하고 이 함수로 설정된 선원항 정보를 우선&lt;/b&gt;합니다. 이를 원치 않는다면 반드시 SetNuclideSource() 함수의 기능을 해제하셔야 합니다.&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 GetNuclideSource() 함수를 사용하면, 현재 설정된 방사성동위원소의 핵종명을 확인할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4String GetNuclideSource() const;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;에너지-하한선-설정&#34;&gt;에너지 하한선 설정&lt;/h4&gt;
&lt;p&gt;추가적으로, 사용자가 저에너지 엑스선의 방출을 원하지 않는 경우에는 AdvancedParticleGun 클래스의 멤버함수인 SetMinPhotonEnergy() 함수를 통해, 발생하게 될 감마선과 엑스선의 에너지 하한선을 설정할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void SetMinPhotonEnergy(G4double minPhotonEnergy);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;만약 별도로 이를 설정하지 않은 경우에는 에너지 하한선(&lt;code&gt;minPhotonEnergy&lt;/code&gt;)이 0으로 설정된 것으로 간주하며, ICRP Publication 107 데이터에 제시된 모든 감마선과 엑스선이 선원항으로 설정됩니다.&lt;/p&gt;
&lt;p&gt;AdvancedParticleGun 클래스의 멤버함수인 GetMinPhotonEnergy() 함수를 사용하면, 현재 설정된 에너지 하한선의 값을 확인할 수 있습니다. 이 함수의 원형은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;G4double GetMinPhotonEnergy() const;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;가중치-변화-1&#34;&gt;가중치 변화&lt;/h4&gt;
&lt;p&gt;SetNuclideSource() 함수의 주요한 특징 중 하나는 초기입자의 가중치(weight)를 변화시킨다는 것입니다.&lt;/p&gt;
&lt;p&gt;방사성동위원소의 핵이 한 번 붕괴하는 것을 하나의 초기입자로 보았을 때, 이 함수가 제공하는 기능은 붕괴를 통해 발생되는 감마선(혹은 엑스선) 자체를 하나의 초기입자로 설정한다는 편향(bias)이 발생합니다.&lt;/p&gt;
&lt;p&gt;예를 들어, Co-60과 같이 1회의 붕괴로 1.173 MeV의 감마선과 1.332 MeV의 감마선이 각각 1.0의 Yield로 발생하는 경우를 생각해봅시다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Co-60 핵 하나가 붕괴하였다면 하나의 초기입자로부터 감마선의 &lt;b&gt;Yield의 총 합인 2.0개 만큼&lt;/b&gt;의 감마선이 나와야 합니다. 그러나 AdvancedParticleGun 클래스의 SetNuclideSource() 함수를 사용하면, 1.173 MeV의 감마선과 1.332 MeV의 감마선 중 &lt;b&gt;한 개만 살아남아&lt;/b&gt; 초기입자가 될 것입니다. 따라서, 하나의 감마선이 &lt;b&gt;Yield의 총 합인 2.0만큼&lt;/b&gt;의 가중치(weight)를 가지고 수송이 이루어져야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;SetNuclideSource() 함수는 이에 따른 가중치 변화를 자동으로 수행&lt;/b&gt;합니다.&lt;/p&gt;
&lt;p&gt;SetNuclideSource() 함수를 통해 발생되는 초기입자는, 설정된 방사성동위원소가 방출하는 &lt;b&gt;모든 감마선과 엑스선의 방출률(Yield)의 총 합만큼 곱해진 가중치&lt;/b&gt;를 가지게 됩니다. 위에서 예로 들은 Co-60라면, 각 감마선은 원래 가중치의 두 배로 설정되는 것입니다.&lt;/p&gt;
&lt;p&gt;만약, 사용자가 SetMinPhotonEnergy() 함수를 통해 에너지 하한선을 설정하였다면, 이로 인해 &lt;b&gt;배제되는 감마선과 엑스선의 방출률은 제외&lt;/b&gt;하고 총 합을 구하게 됩니다.&lt;/p&gt;
&lt;p&gt;이렇게 변화된 가중치는 G4Track 클래스의 멤버함수인 GetWeight() 함수 등을 통해 확인할 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright (C) 2021, Evan Kim (&lt;a href=&#34;mailto:evandde@gmail.com&#34;&gt;evandde@gmail.com&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;All files except &lt;code&gt;ICRP07DATA&lt;/code&gt; directory and its inside are licensed under a Creative Commons license: &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://creativecommons.org/licenses/by-nc-sa/4.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The files in &lt;code&gt;ICRP07DATA&lt;/code&gt; directory is from ICRP 107 copyright 2008 Eckerman and Endo. This data is provided with the following text in the license.txt file:&lt;/p&gt;
&lt;p&gt;ICRP-07 Data Files Copyright Notice&lt;/p&gt;
&lt;p&gt;Copyright (C) 2008 A. Endo and K.F. Eckerman, Authors. All Rights Reserved.&lt;/p&gt;
&lt;p&gt;Permission is hereby granted to any person obtaining a copies of the ICRP-07 data files and associated documentation to use, copy, and distribute these materials and the documentation for educational, research, and not-for-profit purposes, without fee and without a signed licensing agreement provided that the file LICENSE.TXT containing the above copyright notice, this paragraph and the following two paragraphs appears in all copies, modifications, and distributions.&lt;/p&gt;
&lt;p&gt;IN NO EVENT SHALL THE AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THE SOFTWARE, ITS DATA FILES, AND THE DOCUMENTATION.&lt;/p&gt;
&lt;p&gt;THE AUTHORS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE, DATA FILES AND ACCOMPANYING DOCUMENTATION PROVIDED HEREUNDER IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;. THE AUTHORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, FUTURE UPDATES, ENHANCEMENTS, OR MODIFICATIONS TO THE SOFTWARE.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;계산의 편의를 위해 Yield값을 근사적으로 이용하였으며 엑스선의 방출률을 무시했습니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Windows용 패키지 관리자 Winget 설치 및 이용하기</title>
      <link>https://evandde.github.io/winget/</link>
      <pubDate>Sun, 21 Nov 2021 17:31:37 +0900</pubDate>
      <guid>https://evandde.github.io/winget/</guid>
      <description>&lt;p&gt;Microsoft에서 정식으로 개발한 Windows용 패키지 관리자 &lt;strong&gt;Winget&lt;/strong&gt;을 설치하고 이용하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/winget-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Winget&lt;/a&gt;은 Linux에서의 &lt;a href=&#34;https://salsa.debian.org/apt-team/apt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt(apt-get)&lt;/a&gt;, &lt;a href=&#34;http://yum.baseurl.org/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;yum&lt;/a&gt;이나 macOS에서의 &lt;a href=&#34;https://brew.sh/index_ko.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Homebrew&lt;/a&gt;처럼 패키지를 설치/업데이트/제거 등 관리하는 데에 사용하는 Windows용 프로그램입니다. 기존에도 서드파티에서 개발하여 Windows용 패키지 관리자로 사용되던 &lt;a href=&#34;https://chocolatey.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chocolatey&lt;/a&gt;나 &lt;a href=&#34;https://scoop.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Scoop&lt;/a&gt;등이 있었습니다만, &lt;strong&gt;Winget&lt;/strong&gt;은 MS 공식 개발한 것이라는 점에서 의의가 크다고 하겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;winget-설치하기&#34;&gt;Winget 설치하기&lt;/h2&gt;
&lt;h3 id=&#34;요구사항&#34;&gt;요구사항&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 1709(빌드 16299) 이상 / 혹은 Windows 11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;설치-방법&#34;&gt;설치 방법&lt;/h3&gt;
&lt;p&gt;이전에는 안정 버전이 나오지 않아 github 등에서 받는게 편했습니다만, 이제는 MS Store에서 손쉽게 설치가 가능합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;[WIN]+[S]를 눌러 검색창을 띄웁니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;microsoft store&lt;/code&gt;를 검색하여 &lt;strong&gt;Microsoft Store&lt;/strong&gt; 어플리케이션을 실행합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_msstore&#34; srcset=&#34;
               /winget/01_msstore_hu272532b1b19756baa059d406a35b1431_68993_c95e19d31fc6d0f93697cc80bfe44171.png 400w,
               /winget/01_msstore_hu272532b1b19756baa059d406a35b1431_68993_6475e67a19f087d82a2ecf29e7b281b3.png 760w,
               /winget/01_msstore_hu272532b1b19756baa059d406a35b1431_68993_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/winget/01_msstore_hu272532b1b19756baa059d406a35b1431_68993_c95e19d31fc6d0f93697cc80bfe44171.png&#34;
               width=&#34;760&#34;
               height=&#34;621&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;검색창에 &lt;code&gt;app installer&lt;/code&gt;를 검색하여 &lt;strong&gt;앱 설치 관리자&lt;/strong&gt;를 다운로드합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_msstore&#34; srcset=&#34;
               /winget/02_msstore_hu8177803e43a5ebdf824d073acd036292_83645_9ddf2868ca31ffcd444b43d5c1a31848.png 400w,
               /winget/02_msstore_hu8177803e43a5ebdf824d073acd036292_83645_d9dfe3f60f97d722f28cd7defdafa645.png 760w,
               /winget/02_msstore_hu8177803e43a5ebdf824d073acd036292_83645_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/winget/02_msstore_hu8177803e43a5ebdf824d073acd036292_83645_9ddf2868ca31ffcd444b43d5c1a31848.png&#34;
               width=&#34;760&#34;
               height=&#34;590&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;winget-이용하기&#34;&gt;Winget 이용하기&lt;/h2&gt;
&lt;h3 id=&#34;기본&#34;&gt;기본&lt;/h3&gt;
&lt;p&gt;Winget이 설치되면, &lt;strong&gt;cmd&lt;/strong&gt;나 &lt;strong&gt;PowerShell&lt;/strong&gt;에서 &lt;code&gt;winget&lt;/code&gt; 명령어를 통해 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;winget -?&lt;/code&gt;를 입력하여 winget 뒤에 연이어 사용가능한 명령어에 대한 설명을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;winget &amp;lt;command&amp;gt; -?&lt;/code&gt;를 입력하여, winget의 &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; 뒤에 연이어 사용 가능한 옵션에 대한 설명을 확인할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;패키지-검색하기&#34;&gt;패키지 검색하기&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;winget search &amp;lt;appname&amp;gt;&lt;/code&gt;을 입력하여 패키지를 검색할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;winget search powertoys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_winget_search&#34; srcset=&#34;
               /winget/03_winget_search_hu4122bc7419da285169c470ea54b645b3_13353_f5d1f442994a212ae30d432401f6f031.png 400w,
               /winget/03_winget_search_hu4122bc7419da285169c470ea54b645b3_13353_39e753476186a25ea709c4434cb04886.png 760w,
               /winget/03_winget_search_hu4122bc7419da285169c470ea54b645b3_13353_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/winget/03_winget_search_hu4122bc7419da285169c470ea54b645b3_13353_f5d1f442994a212ae30d432401f6f031.png&#34;
               width=&#34;314&#34;
               height=&#34;106&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;추가적으로 다음과 같은 옵션을 사용할 수도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;검색할내용과 정확하게 일치하는 항목만 출력하기: &lt;code&gt;-e&lt;/code&gt; (&lt;code&gt;--exact&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ID를 기준으로 결과 필터링: &lt;code&gt;--id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름을 기준으로 결과 필터링: &lt;code&gt;--name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;지정된 개수를 넘지 않는 결과 표시: &lt;code&gt;-n&lt;/code&gt; (&lt;code&gt;--count&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;패키지-설치하기&#34;&gt;패키지 설치하기&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;winget install &amp;lt;appname&amp;gt;&lt;/code&gt;을 입력하여 패키지를 설치할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;winget install powertoys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_winget_install&#34; srcset=&#34;
               /winget/04_winget_install_hu9dfd7777c9556d1217be099c5570b6d0_20392_abcc815be2ead7058f41e7f12f29e7b1.png 400w,
               /winget/04_winget_install_hu9dfd7777c9556d1217be099c5570b6d0_20392_f26590474ee20e128132bb01b86294e7.png 760w,
               /winget/04_winget_install_hu9dfd7777c9556d1217be099c5570b6d0_20392_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/winget/04_winget_install_hu9dfd7777c9556d1217be099c5570b6d0_20392_abcc815be2ead7058f41e7f12f29e7b1.png&#34;
               width=&#34;427&#34;
               height=&#34;143&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;추가적으로 다음과 같은 옵션을 사용할 수도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;검색할내용과 정확하게 일치하는 항목을 설치하기: &lt;code&gt;-e&lt;/code&gt; (&lt;code&gt;--exact&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ID를 기준으로 결과 필터링: &lt;code&gt;--id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름을 기준으로 결과 필터링: &lt;code&gt;--name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;지정된 버전을 사용: &lt;code&gt;-v&lt;/code&gt; (&lt;code&gt;--version&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;설치한-패키지-목록-보기&#34;&gt;설치한 패키지 목록 보기&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;winget list&lt;/code&gt;를 입력하여 현재 컴퓨터에 설치된 패키지 목록을 확인할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;winget list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_winget_list&#34; srcset=&#34;
               /winget/05_winget_list_hu14a4e76271d0b171ef6414aae12d1795_22945_5d3758acc739919f662bb345b846d734.png 400w,
               /winget/05_winget_list_hu14a4e76271d0b171ef6414aae12d1795_22945_86ce4c4f82168d59758fe48d9ee56d7a.png 760w,
               /winget/05_winget_list_hu14a4e76271d0b171ef6414aae12d1795_22945_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/winget/05_winget_list_hu14a4e76271d0b171ef6414aae12d1795_22945_5d3758acc739919f662bb345b846d734.png&#34;
               width=&#34;760&#34;
               height=&#34;161&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서, 원본(source)이 &lt;strong&gt;winget&lt;/strong&gt;으로 된 것이 &lt;strong&gt;winget을 통해 설치한 항목&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;또한, 버전(version)과 사용 가능(Available)을 확인하여, upgrade 가능한 항목을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;추가적으로 다음과 같은 옵션을 사용할 수도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;출력되는 목록을 원본(source) 이름으로 제한: &lt;code&gt;-s&lt;/code&gt; (&lt;code&gt;--source&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;검색할내용과 정확하게 일치하는 항목을 설치하기: &lt;code&gt;-e&lt;/code&gt; (&lt;code&gt;--exact&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ID를 기준으로 결과 필터링: &lt;code&gt;--id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름을 기준으로 결과 필터링: &lt;code&gt;--name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;패키지-업그레이드최신화-하기&#34;&gt;패키지 업그레이드(최신화) 하기&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;winget upgrade &amp;lt;appname&amp;gt;&lt;/code&gt;을 입력하여 패키지를 업그레이드(최신화)할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;winget upgrade bandizip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_winget_upgrade&#34; srcset=&#34;
               /winget/06_winget_upgrade_hu786ea34a99fc4b65146c01c930f19df9_17226_ece73b3e2fef9cccdae933b0a80d310a.png 400w,
               /winget/06_winget_upgrade_hu786ea34a99fc4b65146c01c930f19df9_17226_0d427bd117078b576800c0f4c29973d3.png 760w,
               /winget/06_winget_upgrade_hu786ea34a99fc4b65146c01c930f19df9_17226_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/winget/06_winget_upgrade_hu786ea34a99fc4b65146c01c930f19df9_17226_ece73b3e2fef9cccdae933b0a80d310a.png&#34;
               width=&#34;729&#34;
               height=&#34;194&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;추가적으로 다음과 같은 옵션을 사용할 수도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;검색할내용과 정확하게 일치하는 항목을 설치하기: &lt;code&gt;-e&lt;/code&gt; (&lt;code&gt;--exact&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ID를 기준으로 결과 필터링: &lt;code&gt;--id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름을 기준으로 결과 필터링: &lt;code&gt;--name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;지정된 버전으로 업그레이드: &lt;code&gt;-v&lt;/code&gt; (&lt;code&gt;--version&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;사용 가능한 모든 패키지를 최신화: &lt;code&gt;--all&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ko-kr/windows/package-manager/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows 패키지 관리자 | Microsoft Docs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BIT Hacks - 자연수 승수 계산을 비트연산으로 빠르게 하는 법</title>
      <link>https://evandde.github.io/bithacks-power/</link>
      <pubDate>Fri, 24 Sep 2021 14:21:45 +0900</pubDate>
      <guid>https://evandde.github.io/bithacks-power/</guid>
      <description>&lt;p&gt;자연수 승수 연산에 한해, 비트연산 트릭을 활용하여 C++에서 기본으로 제공하는 pow() 함수보다 빠르게 계산하는 방법을 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;double pow_int(double base, int exp)
{
    double result = 1.;
    while (exp)
    {
        if (exp &amp;amp; 1)
            result *= base;
        exp &amp;gt;&amp;gt;= 1;
        base *= base;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_result&#34; srcset=&#34;
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_2f48893f03abd14ce0c371db43bdab63.png 400w,
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_5bd99c34fd40afc05a3b7cebaf84cbc7.png 760w,
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_2f48893f03abd14ce0c371db43bdab63.png&#34;
               width=&#34;261&#34;
               height=&#34;148&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;원리&#34;&gt;원리&lt;/h2&gt;
&lt;p&gt;실수 $a$와 자연수 $n$에 대하여, $a^n$을 계산하는 경우를 살펴보겠습니다.&lt;/p&gt;
&lt;p&gt;여기서 $n$은 2진법 변환을 통해 다음과 같이 표현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;$$n = \sum_{i=0} b_i 2^i \text{, where }b_i=0 \text{ or }1$$&lt;/p&gt;
&lt;p&gt;위 식을 이용하면 $a^n$은 다음과 같이 변형됩니다.&lt;/p&gt;
&lt;p&gt;$$
\begin{equation}
\begin{aligned}
a^n &amp;amp; = a^{\sum_{i=0} b_i 2^i} \\
&amp;amp; = \prod_{i=0} {a^{b_i 2^i}} \text{ (} \because x^{m+n} = x^m x^n \text{)} \\
&amp;amp; = \prod_{i=0} ({a^{2^i}})^{b_i} \text{ (} \because x^{mn} = (x^m)^n \text{)} \\
&amp;amp; = (b_0 \times a) \times (b_1 \times a^2) \times (b_2 \times (a^2)^2) \times (b_3 \times ((a^2)^2)^2) \times &amp;hellip;
\end{aligned}
\end{equation}
$$
이 식의 의미를 해석해보면 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$n$을 2진법으로 나타내었을 때 낮은 자리수부터 확인($b_0, b_1, &amp;hellip;$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매 $b_i$를 확인할 때마다, $a, a^2, (a^2)^2, &amp;hellip;$의 형태로 계속 제곱해 나감&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$b_i$가 0이면 그냥 넘어가고,&lt;/p&gt;
&lt;p&gt;$b_i$가 1이면 2에서 구한 $a^{2^i}$를 누적하여 곱함&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;예시&#34;&gt;예시&lt;/h2&gt;
&lt;p&gt;$3^5$를 계산해보겠습니다. 여기서 $a=3$이고, $n=5$가 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;먼저, $n$을 2진법으로 변환하여 $b_i$들을 구합니다.&lt;/p&gt;
&lt;p&gt;$$n=5=1+4=1\times2^0+0\times2^1+1\times2^2$$&lt;/p&gt;
&lt;p&gt;$$\text{i.e. }b_0=1 \text{, } b_1=0 \text{, } b_2 = 1 \text{, and } b_k = 0 \text{ for }k&amp;gt;=3$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 낮은 자리 수부터 확인하며 누적곱 작업을 수행합니다. 누적곱의 초기 값은 곱셈의 항등원인 &lt;font color=blue&gt;&lt;b&gt;1&lt;/b&gt;&lt;/font&gt;로 설정합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$a$는 &lt;font color=red&gt;&lt;b&gt;3&lt;/b&gt;&lt;/font&gt;입니다.&lt;/p&gt;
&lt;p&gt;$b_0$을 확인합니다. $b_0$가 $1$이므로, &lt;font color=blue&gt;&lt;b&gt;1&lt;/b&gt;&lt;/font&gt;에 &lt;font color=red&gt;&lt;b&gt;3&lt;/b&gt;&lt;/font&gt;을 곱합니다.&lt;/p&gt;
&lt;p&gt;결과는 &lt;font color=blue&gt;&lt;b&gt;3&lt;/b&gt;&lt;/font&gt;이 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$a^2$는 &lt;font color=red&gt;&lt;b&gt;9&lt;/b&gt;&lt;/font&gt;입니다.&lt;/p&gt;
&lt;p&gt;$b_1$을 확인합니다. $b_1$가 $0$이므로, 아무것도 곱하지 않습니다.&lt;/p&gt;
&lt;p&gt;결과는 여전히 &lt;font color=blue&gt;&lt;b&gt;3&lt;/b&gt;&lt;/font&gt;입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$(a^2)^2$는 &lt;font color=red&gt;&lt;b&gt;81&lt;/b&gt;&lt;/font&gt;입니다.&lt;/p&gt;
&lt;p&gt;$b_2$을 확인합니다. $b_2$가 $1$이므로, &lt;font color=blue&gt;&lt;b&gt;3&lt;/b&gt;&lt;/font&gt;에 &lt;font color=red&gt;&lt;b&gt;81&lt;/b&gt;&lt;/font&gt;을 곱합니다.&lt;/p&gt;
&lt;p&gt;결과는 &lt;font color=blue&gt;&lt;b&gt;243&lt;/b&gt;&lt;/font&gt;이 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이후의 $b_k$들은 모두 $0$이므로 최종 결과는 &lt;font color=blue&gt;&lt;b&gt;243&lt;/b&gt;&lt;/font&gt;입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;코드로의-적용c&#34;&gt;코드로의 적용(C++)&lt;/h2&gt;
&lt;p&gt;위 내용을 코드로 변환하면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;변수명의 의미를 고려하여, 위 식에서 $a$를 &lt;code&gt;base&lt;/code&gt;로, $n$을 &lt;code&gt;exp&lt;/code&gt;로 명명하였습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;double pow_int(double base, int exp)
{
    double result = 1.;
    while (exp)
    {
        if (exp &amp;amp; 1)
            result *= base;
        exp &amp;gt;&amp;gt;= 1;
        base *= base;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;누적곱을 수행하기 위한 &lt;code&gt;result&lt;/code&gt; 변수의 초기 값을 곱셈의 항등원인 &lt;font color=blue&gt;&lt;b&gt;1&lt;/b&gt;&lt;/font&gt;로 설정합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exp&lt;/code&gt; 값이 유효한 동안 while 반복문을 수행합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exp&lt;/code&gt;를 2진법으로 표현하였을 때 의 가장 낮은 자리수를 구합니다. (&lt;code&gt;exp &amp;amp; 1&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;만약 이 값이 1이라면, $b_i$가 1인 경우에 해당합니다. 따라서, 현재의 &lt;code&gt;base&lt;/code&gt; 값을 &lt;code&gt;result&lt;/code&gt;에 누적하여 곱합니다.&lt;/p&gt;
&lt;p&gt;만약 이 값이 0이라면, $b_i$가 0인 경우에 해당합니다. 따라서 &lt;code&gt;result&lt;/code&gt;에 아무것도 곱하지 않고 넘어갑니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;exp&lt;/code&gt;의 $b_0$ 값이 1이었다면, while 반복문을 맨 처음 수행할 때 이 if 조건이 참이 되어, &lt;code&gt;result *= base;&lt;/code&gt; 구문이 수행되고, 위 설명에서 $a$를 곱해주는 것과 동일한 작업이 이루어집니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exp&lt;/code&gt;를 오른쪽으로 한 칸 비트시프트를 수행합니다. (&lt;code&gt;exp &amp;gt;&amp;gt;= 1;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;이를 통해, 방금 살펴본 $b_i$가 버려지고, 그 다음 자리에 해당하는 $b_{i+1}$이 가장 낮은 자리로 옮겨지는 과정이 반복됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;base&lt;/code&gt;를 제곱합니다. (&lt;code&gt;base *= base;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;이를 통해 $(&amp;hellip;(a^2)^2)&amp;hellip;)^2$에 해당하는 반복 연산이 수행됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최종적으로 누적곱이 수행된 결과를 반환합니다. (&lt;code&gt;return result;&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pow-함수와의-비교용-예시-코드&#34;&gt;pow() 함수와의 비교용 예시 코드&lt;/h2&gt;
&lt;h3 id=&#34;코드&#34;&gt;코드&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

double pow_int(double base, int exp)
{
    double result = 1.;
    while (exp)
    {
        if (exp &amp;amp; 1)
            result *= base;
        exp &amp;gt;&amp;gt;= 1;
        base *= base;
    }
    return result;
}

int main()
{
    const int N = 100000000;
    double base = 12.345;
    int exp = 67;
    double result1, result2;

    std::cout &amp;lt;&amp;lt; base &amp;lt;&amp;lt; &amp;quot;^&amp;quot; &amp;lt;&amp;lt; exp &amp;lt;&amp;lt; &amp;quot;\n\n&amp;quot;;

    auto startT1 = clock();
    for (int i = 0; i &amp;lt; N; ++i)
        result1 = pow(base, exp);
    auto endT1 = clock();
    std::cout &amp;lt;&amp;lt; &amp;quot;Calculated by pow() function\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Answer: &amp;quot; &amp;lt;&amp;lt; result1 &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Elapsed time: &amp;quot; &amp;lt;&amp;lt; (endT1 - startT1) &amp;lt;&amp;lt; &amp;quot; ms\n\n&amp;quot;;
    
    auto startT2 = clock();
    for (int i = 0; i &amp;lt; N; ++i)
        result2 = pow_int(base, exp);
    auto endT2 = clock();
    std::cout &amp;lt;&amp;lt; &amp;quot;Calculated by pow_int() function\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Answer: &amp;quot; &amp;lt;&amp;lt; result2 &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Elapsed time: &amp;quot; &amp;lt;&amp;lt; (endT2 - startT2) &amp;lt;&amp;lt; &amp;quot; ms\n\n&amp;quot;;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;결과&#34;&gt;결과&lt;/h3&gt;
&lt;p&gt;i5-9500 @ 3.00GHz 기준&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_result&#34; srcset=&#34;
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_2f48893f03abd14ce0c371db43bdab63.png 400w,
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_5bd99c34fd40afc05a3b7cebaf84cbc7.png 760w,
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_2f48893f03abd14ce0c371db43bdab63.png&#34;
               width=&#34;261&#34;
               height=&#34;148&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 Version에 따라 동작을 달리하도록 코딩하는 법</title>
      <link>https://evandde.github.io/geant4-coding-asversion/</link>
      <pubDate>Fri, 24 Sep 2021 10:05:36 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-coding-asversion/</guid>
      <description>&lt;p&gt;Geant4 코드 작성 시, 연동되는 Geant4의 버전을 확인하고 버전에 따라 동작을 달리 하도록 코딩하는 방법을 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;G4Version.hh 헤더를 포함시킴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;#define&lt;/code&gt; 전처리기를 통해 정의되는 &lt;code&gt;G4VERSION_NUMBER&lt;/code&gt; 매크로상수를 이용하여 Geant4의 &lt;strong&gt;버전 번호&lt;/strong&gt; 확인&lt;/p&gt;
&lt;p&gt;버전 번호는 정수값으로 부여되며 다음의 규칙을 따름&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;A&lt;/font&gt;&lt;font color=blue&gt;B&lt;/font&gt;&lt;font color=green&gt;C&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;A&lt;/font&gt;: Major version number&lt;/p&gt;
&lt;p&gt;&lt;font color=blue&gt;B&lt;/font&gt;: Minor version number&lt;/p&gt;
&lt;p&gt;&lt;font color=green&gt;C&lt;/font&gt;: patch number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예시&lt;/p&gt;
&lt;p&gt;Geant4 Version &lt;font color=red&gt;9&lt;/font&gt;.&lt;font color=blue&gt;6&lt;/font&gt;의 &lt;code&gt;G4VERSION_NUMBER&lt;/code&gt;는 &lt;font color=red&gt;9&lt;/font&gt;&lt;font color=blue&gt;6&lt;/font&gt;&lt;font color=green&gt;0&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;Geant4 Version &lt;font color=red&gt;10&lt;/font&gt;.&lt;font color=blue&gt;7&lt;/font&gt; patch 0&lt;font color=green&gt;2&lt;/font&gt;의 &lt;code&gt;G4VERSION_NUMBER&lt;/code&gt;는 &lt;font color=red&gt;10&lt;/font&gt;&lt;font color=blue&gt;7&lt;/font&gt;&lt;font color=green&gt;2&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 외, &lt;code&gt;G4VERSION_TAG&lt;/code&gt; 매크로상수나, G4String 자료형의 &lt;code&gt;G4Version&lt;/code&gt;, &lt;code&gt;G4Date&lt;/code&gt; 변수를 이용할 수도 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;g4versionhh&#34;&gt;G4Version.hh&lt;/h2&gt;
&lt;p&gt;Geant4에서는 현재 이용중인 Geant4 라이브러리의 버전 정보를 담고있는 G4Version.hh 헤더를 제공합니다.&lt;/p&gt;
&lt;p&gt;사용자는, 코드 어느 곳에서든 이 헤더를 포함시켜서 Geant4의 버전 정보를 이용할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;g4version_number&#34;&gt;G4VERSION_NUMBER&lt;/h3&gt;
&lt;p&gt;가장 많이 쓰일 것으로 생각되는 매크로상수입니다.&lt;/p&gt;
&lt;p&gt;G4Version.hh 파일 내에서, 다음과 같은 코드를 통해 정의되어 있습니다. (Version 10.7 patch 02 기준)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#ifndef G4VERSION_NUMBER
	#define G4VERSION_NUMBER 1072
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;G4VERSION_NUMBER&lt;/code&gt;라는 매크로상수는 Geant4의 버전 번호를 의미하는 정수값으로 부여되며 다음의 규칙을 따릅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=red&gt;A&lt;/font&gt;&lt;font color=blue&gt;B&lt;/font&gt;&lt;font color=green&gt;C&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;A&lt;/font&gt;: Major version number&lt;/p&gt;
&lt;p&gt;&lt;font color=blue&gt;B&lt;/font&gt;: Minor version number&lt;/p&gt;
&lt;p&gt;&lt;font color=green&gt;C&lt;/font&gt;: patch number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;예를 들어 Geant4 Version &lt;font color=red&gt;9&lt;/font&gt;.&lt;font color=blue&gt;6&lt;/font&gt;의 &lt;code&gt;G4VERSION_NUMBER&lt;/code&gt;는 &lt;font color=red&gt;9&lt;/font&gt;&lt;font color=blue&gt;6&lt;/font&gt;&lt;font color=green&gt;0&lt;/font&gt;이 됩니다. (patch 번호가 없으면 0번으로 붙게됩니다)&lt;/p&gt;
&lt;p&gt;또 다른 예로, Geant4 Version &lt;font color=red&gt;10&lt;/font&gt;.&lt;font color=blue&gt;7&lt;/font&gt; patch 0&lt;font color=green&gt;2&lt;/font&gt;의 &lt;code&gt;G4VERSION_NUMBER&lt;/code&gt;는 &lt;font color=red&gt;10&lt;/font&gt;&lt;font color=blue&gt;7&lt;/font&gt;&lt;font color=green&gt;2&lt;/font&gt;가 됩니다. (10.x 버전 이후의 경우에는 major version number가 두자리수가 됩니다)&lt;/p&gt;
&lt;p&gt;사용자는 이 매크로상수를 다음과 같이 활용할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;quot;G4Version.hh&amp;quot;

// ...

if(G4VERSION_NUMBER &amp;gt;= 1000)
{
	// What to do when the version is 10.x
}
else
{
	// What to do when the version is 9.x
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;g4version_tag&#34;&gt;G4VERSION_TAG&lt;/h3&gt;
&lt;p&gt;이 매크로상수는 G4Version.hh 파일 내에서, 다음과 같은 코드를 통해 정의되어 있습니다. (Version 10.7 patch 02 기준)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#ifndef G4VERSION_TAG
	#define G4VERSION_TAG &amp;quot;$Name: geant4-10-07-patch-02 $&amp;quot;
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Geant4의 버전명이 보다 상세하게 풀어서 쓰여있습니다.&lt;/p&gt;
&lt;h3 id=&#34;g4version&#34;&gt;G4Version&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;G4Version&lt;/code&gt;은 G4Version.hh에 정의된 G4String형 변수입니다. 다음과 같은 코드를 통해 정의되어 있습니다. (Version 10.7 patch 02 기준)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#ifdef G4MULTITHREADED
static const G4String G4Version = &amp;quot;$Name: geant4-10-07-patch-02 [MT]$&amp;quot;;
#else
static const G4String G4Version = &amp;quot;$Name: geant4-10-07-patch-02 $&amp;quot;;
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;G4VERSION_TAG&lt;/code&gt; 매크로상수와 기본적으로 같은 값을 가집니다만, Multi-threading 옵션을 켜고 설치한 Geant4의 경우에는 &lt;code&gt;G4Version&lt;/code&gt;변수의 끝에 &lt;code&gt;[MT]&lt;/code&gt; 표시가 추가됩니다.&lt;/p&gt;
&lt;h3 id=&#34;g4date&#34;&gt;G4Date&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;G4Date&lt;/code&gt;은 G4Version.hh에 정의된 G4String형 변수입니다. 다음과 같은 코드를 통해 정의되어 있습니다. (Version 10.7 patch 02 기준)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;static const G4String G4Date = &amp;quot;(11-June-2021)&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;해당 버전이 출시된 날짜가 저장되어 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code에서 MSVC 기반 C&#43;&#43;, CMake 환경 설정하기</title>
      <link>https://evandde.github.io/vscode-msvc/</link>
      <pubDate>Thu, 26 Aug 2021 10:05:15 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-msvc/</guid>
      <description>&lt;p&gt;VSCode에서 Microsoft Visual Studio 빌드 도구인 &lt;b&gt;MSVC&lt;/b&gt;를 이용하여 &lt;b&gt;C/C++ 언어&lt;/b&gt; 및 &lt;b&gt;CMake&lt;/b&gt;를 사용하기 위한 환경을 구축하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;VSCode 설치를 완료한 상태&lt;/b&gt;라고 가정합니다. VSCode 설치 및 기본 세팅은 &lt;a href=&#34;https://evandde.github.io/vscode/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    MSVC는 Windows에서만 이용 가능합니다. Linux나 Mac을 이용하시는 경우에는 &lt;b&gt;gcc&lt;/b&gt;와 같은 다른 대안을 이용하시기 바랍니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;vs2019-빌드-도구-설치&#34;&gt;VS2019 빌드 도구 설치&lt;/h2&gt;
&lt;p&gt;VSCode는 C 언어용 컴파일러나 디버거를 자체적으로 내장하고있지 않습니다. 때문에 C 언어를 VSCode에서 사용하려면, 컴파일러와 디버거를 직접 설치하고 이를 연동해주는 작업이 필요합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Extension을 설치한다고 해서 컴파일러나 디버거가 설치되는 것은 아닙니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;이 글에서는 Microsoft사에서 제공하는 MSVC(Microsoft Visual C++)를 이용하여 진행할 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;다운로드&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;Microsoft에서 제공하는 Visual Studio 2019용 Build Tools는 &lt;a href=&#34;https://visualstudio.microsoft.com/ko/downloads/#build-tools-for-visual-studio-2019&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 무료로 받을 수 있습니다. 아래 그림에서 보이는 다운로드 링크를 누르면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_download&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_df9e25f1c544aa68a78a92d89e0c13a0.png 400w,
               /vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_b06efe6e544273a41390ecc7e564f614.png 760w,
               /vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_download_hub57466a22a601cab6b68f2e5874681b3_25611_df9e25f1c544aa68a78a92d89e0c13a0.png&#34;
               width=&#34;760&#34;
               height=&#34;135&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 뒤 실행하면, 아래 그림과 같은 창이 뜰 것입니다. 이 중 &lt;b&gt;C++를 사용한 데스크톱 개발&lt;/b&gt;을 클릭합니다. 오른쪽 설치 세부 정보에서, 자동으로 선택사항 중 일부가 선택될 것입니다. 혹시라도 &lt;b&gt;Windows용 C++ CMake 도구&lt;/b&gt;가 선택이 안되어있다면, &lt;b&gt;꼭 선택&lt;/b&gt;해주시기 바랍니다. 선택을 완료하셨다면 설치를 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_install&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_c5d8029504a4fb8ef927f8c6b3a180ce.png 400w,
               /vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_0b55a1d22f1be37baad8292a20a41ba4.png 760w,
               /vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_install_huefd9916a1e1dc2faa688934edddc7916_120879_c5d8029504a4fb8ef927f8c6b3a180ce.png&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;제대로 설치가 되었는지 확인해보겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[S]&lt;/b&gt; 를 눌러 검색을 띄움&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;developer powershell&lt;/code&gt;을 입력하여 &lt;b&gt;Developer PowerShell for VS 2019&lt;/b&gt;를 찾은 뒤 실행&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_test1&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_226fbd82f31d51e44fa9627733e16400.png 400w,
               /vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_be659fa34a05acdcb7fbe530b7909974.png 760w,
               /vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_test1_hu607f4985e581e7292b5d47d4b801dedf_138468_226fbd82f31d51e44fa9627733e16400.png&#34;
               width=&#34;760&#34;
               height=&#34;623&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cl&lt;/code&gt; 명령어와 &lt;code&gt;cmake&lt;/code&gt; 명령어를 입력하여, 다음 그림과 같이 사용법(usage)이 뜨는지 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_test2&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_2a6a75a7035c6176fb951ab1b20f22f7.png 400w,
               /vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_d0b2445390538f91ec4903fd6b0dd1b7.png 760w,
               /vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_test2_hu94a7aa42ba3a8e8312a5ae88b2edc2c9_24846_2a6a75a7035c6176fb951ab1b20f22f7.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이제 여러분은 MSVC에 포함된 C/C++ 빌드 도구 및 CMake 도구를 사용할 수 있게 되었습니다.&lt;/p&gt;
&lt;h3 id=&#34;vscode-실행&#34;&gt;VSCode 실행&lt;/h3&gt;
&lt;p&gt;VSCode와 MSVC를 연동하여 사용하고자 하는 경우에는, &lt;b&gt;&lt;font color=red&gt;반드시 Developer PowerShell for VS 2019를 통해 VSCode를 실행시켜야만 합니다.&lt;/font&gt;&lt;/b&gt; 그렇지 않으면, VSCode에서 MSVC 관련 툴을 인지하지 못합니다.&lt;/p&gt;
&lt;p&gt;Developer PowerShell for VS 2019에서 VSCode를 실행시키는 법은 간단합니다. 다음 그림과 같이 &lt;code&gt;code&lt;/code&gt;라는 명령어만 실행시키시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vs2019buildtools_vscode&#34; srcset=&#34;
               /vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_bfa1e99fb80419795fa53111b638bdeb.png 400w,
               /vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_1f77e81671e3dadffa69895898cd2817.png 760w,
               /vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vs2019buildtools_vscode_hu8348c4528a86525fa2392b0a2da116ad_13291_bfa1e99fb80419795fa53111b638bdeb.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;VSCode 창이 뜨면, &lt;b&gt;[File] - [Open Folder]&lt;/b&gt;를 선택하여, 작업을 진행할 폴더를 선택해주시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vscode_openfolder&#34; srcset=&#34;
               /vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_a42ed27b8f7572ec2f92b245192b2eee.png 400w,
               /vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_6c6f446b400d5cb8ef78e06bf19e9ada.png 760w,
               /vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/vscode_openfolder_hu04d48c7a25e5aaf0265aedbf430106de_54019_a42ed27b8f7572ec2f92b245192b2eee.png&#34;
               width=&#34;760&#34;
               height=&#34;647&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extension-설치&#34;&gt;Extension 설치&lt;/h2&gt;
&lt;p&gt;이제 VSCode에서 extension을 설치할 차례입니다.&lt;/p&gt;
&lt;h3 id=&#34;cc&#34;&gt;C/C++&lt;/h3&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 &amp;ldquo;&lt;strong&gt;c&lt;/strong&gt;&amp;ldquo;를 검색하세요. 맨 위에 C/C++ extension이 뜰 것입니다. Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_c&#34; srcset=&#34;
               /vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_6effe4ec295e401b02f8e8d25bd8cb0e.png 400w,
               /vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_d7e0729455c36626dfc5123f0d498ede.png 760w,
               /vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_6effe4ec295e401b02f8e8d25bd8cb0e.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;cmake&#34;&gt;CMake&lt;/h3&gt;
&lt;p&gt;이어서 CMake 관련 extension도 설치합니다.&lt;/p&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 “&lt;strong&gt;cmake&lt;/strong&gt;“를 검색하세요. 맨 위부터 &lt;strong&gt;CMake&lt;/strong&gt;와 &lt;strong&gt;CMake Tools&lt;/strong&gt;가 뜰 것입니다. 두 가지 모두 Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_cmake&#34; srcset=&#34;
               /vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png 400w,
               /vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_46089bc2159dbb4772073c745321d074.png 760w,
               /vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;각각의 용도는 이렇습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMake extension: CMake 명령어에 대한 자동완성 제공. CMakeLists.txt 파일 작성에 도움&lt;/li&gt;
&lt;li&gt;CMake Tools extension: CMake 기반 프로젝트를 관리하는데에 도움&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;테스트&#34;&gt;테스트&lt;/h2&gt;
&lt;p&gt;이제 제대로 설치가 되었는지 확인할 시간입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    경로에 &lt;strong&gt;한글&lt;/strong&gt;이 있으면 제대로 동작하지 않습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;hello-world-프로젝트-만들어보기&#34;&gt;Hello world 프로젝트 만들어보기&lt;/h3&gt;
&lt;p&gt;CMake Tools는 &lt;b&gt;CMake: Quick Start&lt;/b&gt;라는 기능을 제공합니다. 손쉽게 CMake 기반의 Hello world 프로젝트를 만들어주는 것이죠.&lt;/p&gt;
&lt;p&gt;적당한 경로에 빈 폴더를 만들어주고 다음과 같이 진행합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs1&#34; srcset=&#34;
               /vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png 400w,
               /vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_3da3f460f72e8cabaaf3889ef5780923.png 760w,
               /vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs2&#34; srcset=&#34;
               /vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png 400w,
               /vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_f9f11df871b2487e26ca5679338a6be8.png 760w,
               /vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs3&#34; srcset=&#34;
               /vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png 400w,
               /vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_c10044573126886eedd0e2d972091b76.png 760w,
               /vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs4&#34; srcset=&#34;
               /vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png 400w,
               /vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_8cd8b9516849d5a9d8d75ca9fb813464.png 760w,
               /vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs5&#34; srcset=&#34;
               /vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png 400w,
               /vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_2a9520c56ea9bd1f1d8c0f10ab602f8f.png 760w,
               /vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs6&#34; srcset=&#34;
               /vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png 400w,
               /vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_7c3275d6d1a0e5d48b7a79780d75038b.png 760w,
               /vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행-1&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 실행하시면 됩니다. 동일 폴더 내에 &lt;b&gt;.vscode&lt;/b&gt;라는 폴더가 생기고 그 안에 CMake 설정 등에 관한 &lt;code&gt;.json&lt;/code&gt; 파일이 자동으로 생성될 것입니다. 또한, &lt;b&gt;build&lt;/b&gt;라는 폴더가 생기고 그 안에 &lt;strong&gt;CMake를 통한 빌드 부산물 및 컴파일 결과물&lt;/strong&gt;이 자동으로 생성될 것입니다.&lt;/p&gt;
&lt;p&gt;이후 아래쪽의 &lt;strong&gt;TERMINAL&lt;/strong&gt; 탭을 확인하시면, 자동 생성된 main.cpp의 내용대로 Hello, world!가 출력되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run1&#34; srcset=&#34;
               /vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png 400w,
               /vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_0830794d6928faa454db44cb37713ac3.png 760w,
               /vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run2&#34; srcset=&#34;
               /vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png 400w,
               /vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_51d0b8047f56d8954d98888e1a03ec14.png 760w,
               /vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;디버깅&#34;&gt;디버깅&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 진행하여 디버깅도 가능합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    맨 처음 그림에서 보이는 바와 같이, CMake type을 Debug로 설정해야 함에 주의하세요!
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug1&#34; srcset=&#34;
               /vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png 400w,
               /vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_8bd4fe75f72748f2f1abec2b49ee6738.png 760w,
               /vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug2&#34; srcset=&#34;
               /vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png 400w,
               /vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_f9d287c1cb825e1f442a098e2e351024.png 760w,
               /vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug3&#34; srcset=&#34;
               /vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png 400w,
               /vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_7a86a29cff6db9ce2bed4c66f0c4ae71.png 760w,
               /vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug4&#34; srcset=&#34;
               /vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png 400w,
               /vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_dc1e0e7796f2a56584f0e24fc089a09d.png 760w,
               /vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug5&#34; srcset=&#34;
               /vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png 400w,
               /vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_48f79a1d99308f24c3c1818ab0a64c3b.png 760w,
               /vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;command-line-argument-설정&#34;&gt;Command line argument 설정&lt;/h3&gt;
&lt;p&gt;실행하거나 디버깅할 때, command line argument를 넘겨주도록 설정하고 싶을 때가 있습니다.&lt;/p&gt;
&lt;p&gt;이는 &lt;b&gt;.vscode/settings.json 파일을 생성&lt;/b&gt;해주고, 해당 파일에서 &lt;code&gt;cmake.debugConfig&lt;/code&gt;인자로서 입력해줘야 합니다.&lt;/p&gt;
&lt;h4 id=&#34;테스트-코드-수정&#34;&gt;테스트 코드 수정&lt;/h4&gt;
&lt;p&gt;그 전에 먼저 argument가 제대로 동작하는지 확인하기 위해 main.cpp 코드를 수정하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

int main(int argc, char**) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Hello, world!\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;argc: &amp;quot; &amp;lt;&amp;lt; argc &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 상태로 그냥 실행해보면 다음과 같이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg1&#34; srcset=&#34;
               /vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png 400w,
               /vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_f4a8f7ec275524a9111222bf92809d79.png 760w,
               /vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;settingsjson-설정-및-실행&#34;&gt;settings.json 설정 및 실행&lt;/h4&gt;
&lt;p&gt;이제 settings.json 파일을 만들어 보겠습니다. (이미 만들어져 있을 수도 있습니다만, 그대로 진행하시면 됩니다)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;다음 그림과 같이 File - Preferences - Settings를 클릭합니다. 단축키는 &lt;b&gt;[CTRL]+[,]&lt;/b&gt; 입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg2&#34; srcset=&#34;
               /vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png 400w,
               /vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_65c616437706abe59a2dbc43109e2633.png 760w,
               /vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 Workspace 탭을 클릭합니다. 이 프로젝트(workspace)에만 적용되는 설정항목이라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg3&#34; srcset=&#34;
               /vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png 400w,
               /vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_13eb3447d52efcc9587d006f0fe4e81b.png 760w,
               /vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상단 검색창에 &lt;code&gt;cmake.debugConfig&lt;/code&gt;를 검색한 뒤, &lt;u&gt;Edit in settings.json&lt;/u&gt; 부분을 클릭합니다. &lt;code&gt;cmake.debug&lt;/code&gt; 정도만 입력하셔도 바로 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg4&#34; srcset=&#34;
               /vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png 400w,
               /vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_748696740cce29f2715b14ab0cbbe055.png 760w,
               /vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클릭하시면 바로 다음과 같이 &lt;code&gt;.vscode/settings.json&lt;/code&gt; 폴더 및 파일이 생성되고, settings.json 파일이 열리며, 그 안에 다음 그림과 같은 내용이 자동으로 작성되어 있을 것입니다. (추가로 다른 내용이 더 쓰여있을 수도 있습니다.)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg5&#34; srcset=&#34;
               /vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png 400w,
               /vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_31882fb69a1599a520fda4d0b80951be.png 760w,
               /vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 이 안에 &lt;code&gt;args&lt;/code&gt; 항목을 만들어 command line argument를 설정합니다. 실행파일명 뒤에 이어질 추가적인 argument들만 적어주면 되며, 각 항목은 &amp;ldquo;&amp;quot;(double-quote)로 묶어주고 ,(comma)로 분리해주면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg6&#34; srcset=&#34;
               /vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png 400w,
               /vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_c9ff1596f853439e269c3e58da89d3ba.png 760w,
               /vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 저장한 뒤, 실행이나 디버깅을 해보면 다음과 같이 command line argument가 잘 반영된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg7&#34; srcset=&#34;
               /vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png 400w,
               /vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_193e7f64d30ffcba4b84ba7d57d00d13.png 760w,
               /vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-msvc/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>VSCode Python 환경에서 Jupyter 및 plotly 사용하기</title>
      <link>https://evandde.github.io/vscode-jupyter-python-plotly/</link>
      <pubDate>Mon, 23 Aug 2021 23:54:44 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-jupyter-python-plotly/</guid>
      <description>&lt;p&gt;VSCode에서 Python3 언어를 사용할 때, Jupyter와 plotly를 연동하여 사용하는 환경을 구축하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;VSCode에서의 python3 환경을 구축한 상태&lt;/b&gt;라고 가정합니다. 이에 관한 내용은 &lt;a href=&#34;https://evandde.github.io/vscode-python/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;소개&#34;&gt;소개&lt;/h2&gt;
&lt;h3 id=&#34;jupyter&#34;&gt;Jupyter&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://jupyter.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jupyter&lt;/a&gt;는 프로그래밍 언어를 이용할 때 &lt;b&gt;인터랙티브하게 개발할 수 있는 환경을 제공&lt;/b&gt;하는 오픈소스 소프트웨어입니다. Python과 연동하게 되면, 셀단위 실행, 변수 모니터링 등 다양한 기능을 활용할 수 있죠.&lt;/p&gt;
&lt;h3 id=&#34;plotly&#34;&gt;plotly&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://plotly.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;plotly&lt;/a&gt;는 인터랙티브하게 이용할 수 있는 데이터 가시화 패키지입니다. Python과도 연동하여 사용 가능하며, 무엇보다 UI가 고급스럽고 마우스를 이용한 여러가지 조작이 가능합니다. 데이터 가시화를 위해 가장 많이 알려진 패키지는 matplotlib입니다만, 저는 개인적으로 plotly가 더 예뻐서 이쪽을 선호합니다.&lt;/p&gt;
&lt;h3 id=&#34;사용-예시&#34;&gt;사용 예시&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;00_example&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/00_example_hu84b3308bc8aaa370638fd580fe0a687c_176482_109edb5ec40c64e4e0479da7ccc609ab.png 400w,
               /vscode-jupyter-python-plotly/00_example_hu84b3308bc8aaa370638fd580fe0a687c_176482_0cdc06034602e3d4b765570b9c0b4e05.png 760w,
               /vscode-jupyter-python-plotly/00_example_hu84b3308bc8aaa370638fd580fe0a687c_176482_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/00_example_hu84b3308bc8aaa370638fd580fe0a687c_176482_109edb5ec40c64e4e0479da7ccc609ab.png&#34;
               width=&#34;760&#34;
               height=&#34;619&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;jupyter-설치-및-실행&#34;&gt;Jupyter 설치 및 실행&lt;/h2&gt;
&lt;h3 id=&#34;extension설치&#34;&gt;Extension설치&lt;/h3&gt;
&lt;p&gt;먼저 VSCode에서 Jupyter extension을 설치하겠습니다.&lt;/p&gt;
&lt;p&gt;VSCode를 켜고, extension 탭으로 간 뒤 &amp;quot;&lt;b&gt;jupyter&lt;/b&gt;&amp;quot;를 검색하세요. 맨 위에 jupyter extension이 뜰 것입니다. Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_extension_jupyter&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/01_extension_jupyter_hucf331c4ef50858724f10e1d614990a97_98890_5827adfa0276741e7449619fc8b6dd8e.png 400w,
               /vscode-jupyter-python-plotly/01_extension_jupyter_hucf331c4ef50858724f10e1d614990a97_98890_dad5b1bfe85c8bac300eb0dc569217bb.png 760w,
               /vscode-jupyter-python-plotly/01_extension_jupyter_hucf331c4ef50858724f10e1d614990a97_98890_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/01_extension_jupyter_hucf331c4ef50858724f10e1d614990a97_98890_5827adfa0276741e7449619fc8b6dd8e.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;ipykernel-설치&#34;&gt;ipykernel 설치&lt;/h3&gt;
&lt;p&gt;python에서 jupyter를 사용하기 위해서는, python 패키지 중 &lt;b&gt;ipykernel&lt;/b&gt;을 설치해야 합니다. VSCode에서 Jupyter를 실행해보면 ipykernel이 없는 경우 다음 그림과 같이 &lt;b&gt;ipykernel을 설치할 것인지 묻는 알림창이 자동으로 뜹니다&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_install_ipykernel&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/02_install_ipykernel_hu7c5969babf2ed4168b4504aaf1c01636_48594_740cb887a2947aac2590b50eed08b0b3.png 400w,
               /vscode-jupyter-python-plotly/02_install_ipykernel_hu7c5969babf2ed4168b4504aaf1c01636_48594_a68919893e6a489beb591d5b89d2a495.png 760w,
               /vscode-jupyter-python-plotly/02_install_ipykernel_hu7c5969babf2ed4168b4504aaf1c01636_48594_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/02_install_ipykernel_hu7c5969babf2ed4168b4504aaf1c01636_48594_740cb887a2947aac2590b50eed08b0b3.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;만약 이 창이 안뜬다면, powershell이나 vscode의 Terminal에서 다음 명령어를 입력하여 직접 설치해주셔도 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install ipykernel
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;[View] - [Command Palette]를 눌러 명령창을 띄운 뒤, &amp;quot;&lt;b&gt;jupyter interactive&lt;/b&gt;&amp;quot;를 입력하여 Jupyter: Create Interactive Window를 클릭합니다. 다음 그림을 참고하세요.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_run_jupyter&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/03_run_jupyter_hu625978a17bd1a8668e96036751bba67f_51742_9d9a31ada0268504e86a8016d29a7ee1.png 400w,
               /vscode-jupyter-python-plotly/03_run_jupyter_hu625978a17bd1a8668e96036751bba67f_51742_2944e1121b61fdc0b1a58993230e1dcb.png 760w,
               /vscode-jupyter-python-plotly/03_run_jupyter_hu625978a17bd1a8668e96036751bba67f_51742_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/03_run_jupyter_hu625978a17bd1a8668e96036751bba67f_51742_9d9a31ada0268504e86a8016d29a7ee1.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_run_jupyter&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/04_run_jupyter_hu6ed25e2c3ad2973c88acd659e3feee89_54354_dee4eb1faa0930088a0d65064ba2e270.png 400w,
               /vscode-jupyter-python-plotly/04_run_jupyter_hu6ed25e2c3ad2973c88acd659e3feee89_54354_0bc16652c785ecc542c67633062b0932.png 760w,
               /vscode-jupyter-python-plotly/04_run_jupyter_hu6ed25e2c3ad2973c88acd659e3feee89_54354_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/04_run_jupyter_hu6ed25e2c3ad2973c88acd659e3feee89_54354_dee4eb1faa0930088a0d65064ba2e270.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Jupyter Interactive Window가 잘 떴다면, 아래쪽의 명령줄 부분에 명령어를 입력한 뒤 &lt;b&gt;[SHIFT]+[ENTER]&lt;/b&gt; 키를 눌러 정상 동작 여부를 확인해보실 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_install_ipykernel&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/05_install_ipykernel_hu69cce9727a4d5ee17f46e7f28c15b5d8_87260_404ef556bfacf4b50fa6e40df5ebdba5.png 400w,
               /vscode-jupyter-python-plotly/05_install_ipykernel_hu69cce9727a4d5ee17f46e7f28c15b5d8_87260_946adedda8dd0ef3019d6cc377d2c19a.png 760w,
               /vscode-jupyter-python-plotly/05_install_ipykernel_hu69cce9727a4d5ee17f46e7f28c15b5d8_87260_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/05_install_ipykernel_hu69cce9727a4d5ee17f46e7f28c15b5d8_87260_404ef556bfacf4b50fa6e40df5ebdba5.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;더불어, 창 위쪽의 Variables 버튼을 누르면 다음 그림과 같이 현재 메모리에 저장된 변수도 모니터링할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_variables&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/06_variables_hu1399600719818c75ef5c973b561de23b_51335_c39410c47c8059b1e5c53a2564460c48.png 400w,
               /vscode-jupyter-python-plotly/06_variables_hu1399600719818c75ef5c973b561de23b_51335_f1b47011e5e113df055096305288ab8a.png 760w,
               /vscode-jupyter-python-plotly/06_variables_hu1399600719818c75ef5c973b561de23b_51335_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/06_variables_hu1399600719818c75ef5c973b561de23b_51335_c39410c47c8059b1e5c53a2564460c48.png&#34;
               width=&#34;760&#34;
               height=&#34;648&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;python-인터프리터-설정&#34;&gt;python 인터프리터 설정&lt;/h3&gt;
&lt;p&gt;Jupyter에서 사용할 인터프리터는 Jupyter Interactive Window의 오른쪽 위에서 선택할 수 있습니다. venv 등을 사용하고 있거나, 여러 버전의 python을 이용하는 경우에는 이를 통해 원하는 인터프리터로 변경하여 선택할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_pythonselect&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/07_pythonselect_huf637478f69785b337c9523802c51b2f5_84611_885940754a5c4ab9fcccafe683b2e9dd.png 400w,
               /vscode-jupyter-python-plotly/07_pythonselect_huf637478f69785b337c9523802c51b2f5_84611_97532b06853e94cb25097ae7b0d3e77b.png 760w,
               /vscode-jupyter-python-plotly/07_pythonselect_huf637478f69785b337c9523802c51b2f5_84611_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/07_pythonselect_huf637478f69785b337c9523802c51b2f5_84611_885940754a5c4ab9fcccafe683b2e9dd.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;py-파일과의-연동&#34;&gt;.py 파일과의 연동&lt;/h3&gt;
&lt;p&gt;python 코드로 작성한 파일에 대해서도 Jupyter를 통해 실행시킬 수 있습니다. 테스트를 위해 main.py 파일을 만들고 다음과 같이 코드를 작성하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# %%
arr = [1, 2, 3]

# %%
for i in arr:
    print(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 주석을 &lt;code&gt;# %%&lt;/code&gt;라고 달았는데요, 이렇게 달아주면 Jupyter에서 &lt;code&gt;# %%&lt;/code&gt;와 다음 &lt;code&gt;# %%&lt;/code&gt;까지의 영역을 &lt;b&gt;Cell&lt;/b&gt;이라는 단위로 구분지어줍니다. 그러면, Jupyter에서 각 Cell 단위로 실행시키거나 디버깅을 수행해볼 수 있습니다. 다음 그림을 참고하세요.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;08_cell&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/08_cell_huca81c7c74f805326abd99b5423ef466d_65950_4ac80e5251a2425d5cf0a2cff50f3177.png 400w,
               /vscode-jupyter-python-plotly/08_cell_huca81c7c74f805326abd99b5423ef466d_65950_e2b6bc513c07a6ee50aa43c1b14de14d.png 760w,
               /vscode-jupyter-python-plotly/08_cell_huca81c7c74f805326abd99b5423ef466d_65950_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/08_cell_huca81c7c74f805326abd99b5423ef466d_65950_4ac80e5251a2425d5cf0a2cff50f3177.png&#34;
               width=&#34;760&#34;
               height=&#34;648&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;plotly-설치-및-jupyter-연동&#34;&gt;plotly 설치 및 Jupyter 연동&lt;/h2&gt;
&lt;h3 id=&#34;설치&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;이제 &lt;b&gt;plotly&lt;/b&gt;를 사용하기 위한 환경을 구축해봅시다.&lt;/p&gt;
&lt;p&gt;필요한 패키지는 3가지입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plotly 패키지: plotly를 사용하기 위해 당연히 필수&lt;/li&gt;
&lt;li&gt;nbformat 패키지: plotly를 Jupyter에서 사용하기 위해 필요한 패키지&lt;/li&gt;
&lt;li&gt;pandas 패키지: plotly에 넣어줄 데이터 관리를 위해 사실상 필수인 패키지&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;세 가지 패키지 모두 &lt;code&gt;pip&lt;/code&gt;를 이용하여 설치를 할 것입니다. &lt;b&gt;Powershell&lt;/b&gt;이나 &lt;b&gt;vscode의 Terminal&lt;/b&gt;에서 다음 명령어를 입력하여 설치할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install plotly
pip install nbformat
pip install pandas
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;실행-1&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;모든 패키지를 설치하셨다면, &lt;b&gt;&lt;font color=red&gt;실행에 앞서 Jupyter Interactive Window 창을 다시 한 번 껐다가 켜시기 바랍니다.&lt;/font&gt;&lt;/b&gt; 그래야만 Jupyter에서 방금 설치한 패키지 상황을 인지합니다.&lt;/p&gt;
&lt;p&gt;이제 간단한 예제를 통해 테스트를 해봅시다. 다음 코드는 plotly 홈페이지에서 제공하는 공식 예제 중 하나입니다. (&lt;a href=&#34;https://plotly.com/python/plotly-express/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;참고링크&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;앞서 Jupyter의 test를 수행했던 명령줄에 다음 코드를 입력한 뒤, &lt;b&gt;[SHIFT]+[ENTER]&lt;/b&gt; 키를 눌러줍니다. 참고로, 명령줄 내에서 그냥 [ENTER] 키를 누르시면 줄바꿈이 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.express as px
df = px.data.iris()
fig = px.scatter(df, x=&amp;quot;sepal_width&amp;quot;, y=&amp;quot;sepal_length&amp;quot;, color=&amp;quot;species&amp;quot;)
fig.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음 그림과 같이, 실행 결과로 그래프가 잘 나오면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;09_plotly&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/09_plotly_hu07d51a1745c38e8e1a633129b3cf4bdf_85789_a8c43ee5d59c630ea06ae426272fd760.png 400w,
               /vscode-jupyter-python-plotly/09_plotly_hu07d51a1745c38e8e1a633129b3cf4bdf_85789_48ca846e018f4d84598a98127e06eab5.png 760w,
               /vscode-jupyter-python-plotly/09_plotly_hu07d51a1745c38e8e1a633129b3cf4bdf_85789_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/09_plotly_hu07d51a1745c38e8e1a633129b3cf4bdf_85789_a8c43ee5d59c630ea06ae426272fd760.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;10_plotly&#34; srcset=&#34;
               /vscode-jupyter-python-plotly/10_plotly_hu72315a7564607626f096777b42aef0c3_136558_af1533c167b558b4516ffa60acafdef3.png 400w,
               /vscode-jupyter-python-plotly/10_plotly_hu72315a7564607626f096777b42aef0c3_136558_c999626570426091a1dfb4d517702364.png 760w,
               /vscode-jupyter-python-plotly/10_plotly_hu72315a7564607626f096777b42aef0c3_136558_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-jupyter-python-plotly/10_plotly_hu72315a7564607626f096777b42aef0c3_136558_af1533c167b558b4516ffa60acafdef3.png&#34;
               width=&#34;760&#34;
               height=&#34;619&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jupyter.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Project Jupyter | Home&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/datascience/jupyter-notebooks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Working with Jupyter Notebooks in Visual Studio Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://plotly.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Plotly: The front end for ML and data science models&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PyQt5 이용 시 qt.qpa.plugin 오류 해결</title>
      <link>https://evandde.github.io/python-cannotfind-qtplatform/</link>
      <pubDate>Tue, 06 Apr 2021 15:39:13 +0900</pubDate>
      <guid>https://evandde.github.io/python-cannotfind-qtplatform/</guid>
      <description>&lt;p&gt;Python에서 PyQt5 라이브러리를 연동하여 GUI 프로그래밍을 할 때 발생한 &amp;ldquo;&lt;b&gt;qt.qpa.plugin: Could not find the Qt platform plugin &amp;quot;windows&amp;quot; in &amp;quot;&amp;quot;.&lt;/b&gt;&amp;rdquo; 과 같은 오류를 해결하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;error&#34; srcset=&#34;
               /python-cannotfind-qtplatform/error_hu2a7690d5c5b903129d6d684495ca992a_5063_ddd8afe814aa43159c3f0f5c6398366b.png 400w,
               /python-cannotfind-qtplatform/error_hu2a7690d5c5b903129d6d684495ca992a_5063_7e193f59731bf897576490bbdb61a0a1.png 760w,
               /python-cannotfind-qtplatform/error_hu2a7690d5c5b903129d6d684495ca992a_5063_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/python-cannotfind-qtplatform/error_hu2a7690d5c5b903129d6d684495ca992a_5063_ddd8afe814aa43159c3f0f5c6398366b.png&#34;
               width=&#34;760&#34;
               height=&#34;33&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    이 글에서는 &lt;code&gt;pip install pyqt5 pyqt5-tools&lt;/code&gt; 등의 과정을 통해 pyqt5는 이미 설치한 상태라고 가정합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;python 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령줄 입력하여 python이 설치된 경로 확인 (venv로 실행 중이라면 venv 경로로 뜰 것임)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
sys.executable
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;뜨는 경로 중 &lt;strong&gt;시작부터 Scripts 이전까지&lt;/strong&gt;를 복사&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;pyexepath&#34; srcset=&#34;
               /python-cannotfind-qtplatform/pyexepath_huc30f9c59f7b2c1f418fb90567114822a_15257_8b1e541b51847c1519af2598ce8dc4c6.png 400w,
               /python-cannotfind-qtplatform/pyexepath_huc30f9c59f7b2c1f418fb90567114822a_15257_664e989523045a51bb4fc7a2e67502d1.png 760w,
               /python-cannotfind-qtplatform/pyexepath_huc30f9c59f7b2c1f418fb90567114822a_15257_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/python-cannotfind-qtplatform/pyexepath_huc30f9c59f7b2c1f418fb90567114822a_15257_8b1e541b51847c1519af2598ce8dc4c6.png&#34;
               width=&#34;760&#34;
               height=&#34;122&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PowerShell을 관리자권한으로 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령줄 입력하여 &lt;strong&gt;환경변수 설정&lt;/strong&gt;. 이 때 따옴표 안의 경로는, &lt;strong&gt;앞서 3번에서 복사한 경로&lt;/strong&gt; 뒤에 &lt;code&gt;\Lib\site-packages\PyQt5\Qt\plugins\platforms&lt;/code&gt;를 이어 붙임. \(역슬래시)는 한 개씩이든 두 개씩이든 상관 없음&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;setx QT_QPA_PLATFORM_PLUGIN_PATH &amp;quot;C:\\Users\\---\\python\\venv\Lib\site-packages\PyQt5\Qt\plugins\platforms&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;재부팅&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;원인&#34;&gt;원인&lt;/h2&gt;
&lt;p&gt;문제가 발생하는 원인은 에러문구에 적힌 바와 같이, Qt platform plugin의 경로를 찾지 못했기 때문입니다.&lt;/p&gt;
&lt;p&gt;환경변수 &lt;code&gt;QT_QPA_PLATFORM_PLUGIN_PATH&lt;/code&gt;를 통해 해당 플러그인의 위치를 찾는데, 해당 내용이 설정되어 있지 않아 경로를 찾지못한다는 오류가 발생하는 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;해결책&#34;&gt;해결책&lt;/h2&gt;
&lt;p&gt;우리가 설치해준 pyqt5 라이브러리 내에 있는 platforms 항목과 연동해주면 문제가 해결됩니다.&lt;/p&gt;
&lt;p&gt;pip를 통해 설치하게 되면, python 경로의 &lt;code&gt;Lib\site-packages\&lt;/code&gt; 안에 설치한 내용물이 보관됩니다.&lt;/p&gt;
&lt;p&gt;python 경로는 python을 실행하여 다음 명령어를 입력하면 확인할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
sys.executable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 나오는 경로는 python.exe라는 실행파일의 경로이므로, Scripts라는 폴더 이전까지의 경로 부분만 복사해둡니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;pyexepath&#34; srcset=&#34;
               /python-cannotfind-qtplatform/pyexepath-16307493249411_huc30f9c59f7b2c1f418fb90567114822a_15257_535dc2a3d62ca743db7c9d1381a66519.png 400w,
               /python-cannotfind-qtplatform/pyexepath-16307493249411_huc30f9c59f7b2c1f418fb90567114822a_15257_7b1f6ffff426805e83b42123c5208ff3.png 760w,
               /python-cannotfind-qtplatform/pyexepath-16307493249411_huc30f9c59f7b2c1f418fb90567114822a_15257_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/python-cannotfind-qtplatform/pyexepath-16307493249411_huc30f9c59f7b2c1f418fb90567114822a_15257_535dc2a3d62ca743db7c9d1381a66519.png&#34;
               width=&#34;760&#34;
               height=&#34;122&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이후, PowerShell을 관리자권한으로 실행하고 다음 명령어를 입력해 환경변수를 설정해 줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;setx QT_QPA_PLATFORM_PLUGIN_PATH &amp;quot;C:\\Users\\---\\python\\venv\Lib\site-packages\PyQt5\Qt\plugins\platforms&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &lt;code&gt;C:\\Users\\---\\python\\venv&lt;/code&gt; 부분은 여러분이 앞서 확인하신 경로로 바꿔주셔야 합니다.&lt;/p&gt;
&lt;p&gt;앞부분 경로를 변경하고, 뒤의 &lt;code&gt;\Lib\site-packages\PyQt5\Qt\plugins\platforms&lt;/code&gt; 부분만 그대로 유지하시면 됩니다.&lt;/p&gt;
&lt;p&gt;환경변수 설정이 완료되었다면, 환경변수 적용을 위해 &lt;strong&gt;재부팅&lt;/strong&gt;을 해주면 해결됩니다!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4 UI command 소개 - 반복문</title>
      <link>https://evandde.github.io/geant4-uicommand-loop/</link>
      <pubDate>Mon, 05 Apr 2021 17:13:04 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-uicommand-loop/</guid>
      <description>&lt;p&gt;Geant4 UI command에서 활용 가능한 반복문. &lt;code&gt;/control/loop&lt;/code&gt;와 &lt;code&gt;/control/foreach&lt;/code&gt;에 대해 알아봅니다.&lt;/p&gt;
&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;Geant4에서 built-in UI command로 제공하는 반복문은 두 가지입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/control/loop&lt;/li&gt;
&lt;li&gt;/control/foreach&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 반복문의 중요한 특징은 &amp;ldquo;&lt;strong&gt;다른 매크로파일을 반복적으로 실행시킨다&lt;/strong&gt;&amp;ldquo;는 점입니다.&lt;/p&gt;
&lt;p&gt;각각의 용법과 함께 좀 더 자세히 살펴보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controlloop&#34;&gt;/control/loop&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/loop&lt;/code&gt; 반복문은 대개의 프로그래밍 언어가 제공하는 for문과 유사합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;시작&lt;/strong&gt;, &lt;strong&gt;끝&lt;/strong&gt;, &lt;strong&gt;간격&lt;/strong&gt;을 입력하여 &lt;strong&gt;카운터를 증감&lt;/strong&gt;시키며 &lt;strong&gt;다른 매크로파일을 실행&lt;/strong&gt;시켜줍니다.&lt;/p&gt;
&lt;h3 id=&#34;사용법&#34;&gt;사용법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/control/loop 매크로파일명 카운터변수명 시작값 끝값 간격&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;이 때, &lt;code&gt;매크로파일명&lt;/code&gt;과 &lt;code&gt;카운터변수명&lt;/code&gt;은 문자열(string)로 인식하고, &lt;code&gt;시작값&lt;/code&gt;, &lt;code&gt;끝값&lt;/code&gt;, &lt;code&gt;간격&lt;/code&gt;은 실수형(double)으로 인식합니다.&lt;/p&gt;
&lt;p&gt;이렇게 입력하면, &lt;code&gt;매크로파일&lt;/code&gt;에서 &lt;code&gt;카운터변수&lt;/code&gt;를 &lt;code&gt;시작&lt;/code&gt;~&lt;code&gt;끝&lt;/code&gt;값으로 aliasing 시켜줍니다. 즉, &lt;code&gt;매크로파일&lt;/code&gt; 내에서는 &lt;code&gt;{카운터변수}&lt;/code&gt;와 같이 입력하면 되는 것이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;간격&lt;/code&gt; 값은 생략 가능합니다. 생략할 경우 기본값으로 &lt;strong&gt;1&lt;/strong&gt;이 사용됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;사용예시&#34;&gt;사용예시&lt;/h3&gt;
&lt;p&gt;다음과 같은 매크로를 만들어봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/energy 10. MeV
/run/beamOn 10000

/gun/energy 12. MeV
/run/beamOn 10000

/gun/energy 14. MeV
/run/beamOn 10000

/gun/energy 16. MeV
/run/beamOn 10000

/gun/energy 18. MeV
/run/beamOn 10000

/gun/energy 20. MeV
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 에너지 값이 10~20으로 2씩 바뀌고 있을 뿐, 나머지는 반복됩니다.&lt;/p&gt;
&lt;p&gt;이 경우 다음과 같이 두 개의 파일로 나누어 작성하면 동일하게 동작합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;주 매크로파일&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/loop myRun.mac ene 10. 20. 2.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;myRun.mac&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/energy {ene} MeV
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controlforeach&#34;&gt;/control/foreach&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/foreach&lt;/code&gt; 반복문은 대개의 프로그래밍 언어가 제공하는 range-based for문과 유사합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;카운터&lt;/strong&gt;를 &lt;strong&gt;제시된 목록의 각 값&lt;/strong&gt;으로 바꾸어가며 &lt;strong&gt;다른 매크로파일을 반복적으로 실행&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;h3 id=&#34;사용법-1&#34;&gt;사용법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/control/foreach 매크로파일명 카운터변수명 &amp;quot;반복할값목록&amp;quot;&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;여기서 &lt;code&gt;&amp;quot;반복할값목록&amp;quot;&lt;/code&gt;을 &lt;font color=red&gt;입력할 때 주의점&lt;/font&gt;이 두 가지 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;목록 전체를 반드시 &amp;quot;&amp;quot;(double-quote)로 감쌀 것&lt;/li&gt;
&lt;li&gt;목록의 각 값은 띄어쓰기로 구분할 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 입력하면, &lt;code&gt;매크로파일&lt;/code&gt;에서 &lt;code&gt;카운터변수&lt;/code&gt;를 &lt;code&gt;&amp;quot;반복할값목록&amp;quot;&lt;/code&gt;에 적힌 각각의 값으로 aliasing 시켜줍니다. 즉, &lt;code&gt;매크로파일&lt;/code&gt; 내에서는 &lt;code&gt;{카운터변수}&lt;/code&gt;와 같이 입력하면 되는 것이죠.&lt;/p&gt;
&lt;h3 id=&#34;사용예시-1&#34;&gt;사용예시&lt;/h3&gt;
&lt;p&gt;다음과 같은 매크로를 만들어 봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/particle p
/run/beamOn 10000

/gun/particle e-
/run/beamOn 10000

/gun/particle e+
/run/beamOn 10000

/gun/particle gamma
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서는 입자가 p, e-, e+, gamma로 바뀌고 있을 뿐, 나머지는 반복됩니다.&lt;/p&gt;
&lt;p&gt;이 경우 다음과 같이 두 개의 파일로 나누어 작성하면 동일하게 동작합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;주 매크로파일&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/foreach myRun.mac pname &amp;quot;p e- e+ gamma&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;myRun.mac&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/particle {pname}
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4 UI command 소개 - /control/alias</title>
      <link>https://evandde.github.io/geant4-uicommand-alias/</link>
      <pubDate>Mon, 05 Apr 2021 15:20:37 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-uicommand-alias/</guid>
      <description>&lt;p&gt;Geant4 UI command 중, 자주 반복되는 문구를 간단하게 줄여주는 명령어. &amp;ldquo;/control/alias&amp;quot;에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/alias&lt;/code&gt; 명령어는 &lt;strong&gt;특정 문구를 반복적으로 사용&lt;/strong&gt;해야 할 때, 별명을 지어주는 명령어입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;사용법&#34;&gt;사용법&lt;/h2&gt;
&lt;h3 id=&#34;별명-지어주기&#34;&gt;별명 지어주기&lt;/h3&gt;
&lt;p&gt;별명을 지어줄 때에는 &lt;code&gt;/control/alias 별명 원래내용&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;/tracking/verbose&lt;/code&gt;라는 명령어를 &lt;code&gt;tv&lt;/code&gt;로 줄여서 사용하고 싶다면 다음과 같이 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/alias tv /tracking/verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    만약 입력하는 내용에 띄어쓰기가 포함되어 있다면, &amp;ldquo;&amp;quot;(double-quote)로 묶어서 입력합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;별명-사용하기&#34;&gt;별명 사용하기&lt;/h3&gt;
&lt;p&gt;앞서 부여한 별명을 사용할 때에는 &lt;code&gt;{별명}&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;예를 &lt;code&gt;tv&lt;/code&gt;에 대해 위에서처럼 별명을 붙여줬다면, &lt;code&gt;/tracking/verbose 1&lt;/code&gt;을 다음과 같이 줄여서 사용할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /tracking/verbose 1
{tv} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;중요한-특징&#34;&gt;중요한 특징&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;alias로 호출되어 불려온 값은 무조건 string 형태로 인식합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;명령어만 별명을 부여할 수 있는 것이 아닙니다. 어떤 문자열이든 별명을 부여해줄 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;alias된 값을 중첩하여 불러올 수도 있습니다.&lt;/p&gt;
&lt;p&gt;예시)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/alias file1 /diskA/dirX/fileXX.dat
/control/alias file2 /diskA/dirY/fileYY.dat
/control/alias run 1

# /myDirectory/myCommand /diskA/dirX/fileXX.dat
# /myDirectory/myCommand {file1}
/myDirectory/myCommand {file{run}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;/control/loop, /control/foreach 명령어와 조합하여 응용하면 상당히 강력한 효과를 얻을 수 있습니다.&lt;/b&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4의 UI Command 기초 이론</title>
      <link>https://evandde.github.io/geant4-uicommand-basic/</link>
      <pubDate>Mon, 22 Mar 2021 11:06:31 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-uicommand-basic/</guid>
      <description>&lt;p&gt;Geant4는 UI command라는 개념을 통해 C++ 언어로 하드코딩 하지 않고도 시뮬레이션 전반을 핸들링하거나 모니터링할 수 있도록 합니다. 이 글에서는 Geant4의 UI Command 사용에 대한 기초 이론을 다룹니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ui-command-개념&#34;&gt;UI Command 개념&lt;/h2&gt;
&lt;p&gt;Geant4는 시뮬레이션 이전, 도중, 이후에 시뮬레이션의 조건 등을 조작하거나 정보를 추출하는 등의 다양한 기능을 수행할 수 있도록 UI Command라는 기능을 제공합니다.&lt;/p&gt;
&lt;p&gt;UI Command는 Geant4에서 &lt;strong&gt;기본적으로 제공&lt;/strong&gt;하는 &lt;strong&gt;built-in command&lt;/strong&gt;와, &lt;strong&gt;사용자가 직접 만들어 사용&lt;/strong&gt;하는 &lt;strong&gt;messenger 기반 command&lt;/strong&gt;로 구분할 수 있습니다. 둘 다 사용방법과 기본 이론은 동일합니다.&lt;/p&gt;
&lt;h3 id=&#34;built-in-command-일람&#34;&gt;Built-in Command 일람&lt;/h3&gt;
&lt;p&gt;Built-in command 목록을 확인하는 방법을 소개합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;공식 홈페이지에서 제공하는 &lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/Control/AllResources/Control/UIcommands/_.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;웹페이지&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qt 기반 GUI 형식으로 Geant4 어플리케이션을 실행한 뒤 &lt;strong&gt;왼쪽 부분의 Help 탭&lt;/strong&gt; 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qtui-help&#34; srcset=&#34;
               /geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_5c66d9ea9836c7cb1e4822537a16e814.png 400w,
               /geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_e44cb3a007f6c0ef711f95fe22458759.png 760w,
               /geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_5c66d9ea9836c7cb1e4822537a16e814.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ui-command의-구성&#34;&gt;UI Command의 구성&lt;/h2&gt;
&lt;h3 id=&#34;기본-요소&#34;&gt;기본 요소&lt;/h3&gt;
&lt;p&gt;UI Command는 다음의 세 가지로 구성됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=blue&gt;Command directory&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=green&gt;Command&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=red&gt;Parameter(s)&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실제 예시는 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/&lt;font color=blue&gt;run&lt;/font&gt;/&lt;font color=green&gt;verbose&lt;/font&gt; &lt;font color=red&gt;1&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;/&lt;font color=blue&gt;vis&lt;/font&gt;/&lt;font color=blue&gt;viewer&lt;/font&gt;/&lt;font color=green&gt;flush&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 &lt;font color=red&gt;Parameter(s)&lt;/font&gt;가 여러 개 사용될 경우 각각을 구분하는 구분자는 &lt;strong&gt;공백&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    공백이 있는 string을 파라미터로 사용해야 하는 경우에는, &amp;ldquo;&amp;quot;(double-quote)로 묶어줍니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Command 중에는 일부 parameter의 기본값이 존재해서 생략할 수 있는 경우도 있습니다. 만약 앞의 값을 생략하고 뒤의 값만 입력하려면, 생략할 값에 &lt;code&gt;!&lt;/code&gt;를 적으면 됩니다. 예를 들어, 처음 값을 생략하여 기본값을 사용하고, 두번째 값만 직접 입력한다면 다음과 같이 적을 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/directory/command ! second
&lt;/code&gt;&lt;/pre&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;주석&#34;&gt;주석&lt;/h3&gt;
&lt;p&gt;각 줄마다, &lt;code&gt;#&lt;/code&gt; 표시 이후는 주석처리됩니다.&lt;/p&gt;
&lt;p&gt;예를 들면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# This line will be commented
/run/verbose 1
/run/verbose 2 # After # mark will be commented.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ui-command의-입력&#34;&gt;UI Command의 입력&lt;/h2&gt;
&lt;p&gt;UI Command는 다음의 방법을 통해 입력 가능합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++ 코드 상에서 직접 입력&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;외부 파일을 통한 입력&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그램 실행 후, (G)UI 명령줄을 통한 입력&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c-코드-상에서-입력하기&#34;&gt;C++ 코드 상에서 입력하기&lt;/h3&gt;
&lt;p&gt;G4UImanager라는 클래스가 관련 기능을 담당합니다.&lt;/p&gt;
&lt;p&gt;이 클래스는 singleton 형태로 짜여있으며, GetUIpointer()라는 static 멤버함수를 통해 클래스 객체를 가져올 수 있습니다.&lt;/p&gt;
&lt;p&gt;멤버함수 중 ApplyCommand() 함수를 활용하면 UI command를 실행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 함수의 원형은 G4int ApplyCommand(const G4String&amp;amp; aCommand)로, 문자열을 입력으로 받고, 실행 결과를 정수값으로 반환합니다.&lt;/p&gt;
&lt;p&gt;사용 예시는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;G4UImanager::GetUIPointer()-&amp;gt;ApplyCommand(&amp;quot;/run/verbose 1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;ApplyCommand() 함수는 정상 실행 시 &lt;code&gt;0&lt;/code&gt;을 반환하고, 오류가 있을 시 &lt;code&gt;xyy&lt;/code&gt;형태의 양의 정수로 오류코드를 반환합니다. &lt;code&gt;x&lt;/code&gt;는 G4UIcommandStatus.hh의 enum에 정의된 값이고, &lt;code&gt;yy&lt;/code&gt;는 문제를 일으킨 첫 parameter의 번호입니다. 다음은 10.7 버전의 G4UIcommandStatus 클래스에서 발췌한 내용입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;enum G4UIcommandStatus
{
  fCommandSucceeded         = 0,
  fCommandNotFound          = 100,
  fIllegalApplicationState  = 200,
  fParameterOutOfRange      = 300,
  fParameterUnreadable      = 400,
  fParameterOutOfCandidates = 500,
  fAliasNotFound            = 600
};
&lt;/code&gt;&lt;/pre&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    ApplyCommand() 함수로 UI command 실행을 시도하였다가 모종의 문제로 인해 &lt;strong&gt;실행을 실패하더라도&lt;/strong&gt;, &lt;strong&gt;프로그램은 아무런 알림 없이 그냥 진행됩니다&lt;/strong&gt;. 필요하다면 코드 작성 시 반환되는 오류코드 값에 따라 대응하도록 &lt;strong&gt;직접&lt;/strong&gt; 코딩해주셔야 합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;외부-파일을-통한-입력&#34;&gt;외부 파일을 통한 입력&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;대부분의 경우&lt;/strong&gt; UI command는 이 방법을 통해 입력됩니다.&lt;/p&gt;
&lt;p&gt;이 방식을 이용하기 위해서는, 사용할 UI command를 ASCII 형태로 입력해 둔 파일이 필요합니다. 이 파일을 일반적으로 &lt;strong&gt;매크로파일&lt;/strong&gt;이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;이 방법의 가장 큰 장점은 &lt;strong&gt;소스코드를 다시 컴파일하지 않고도 수정 가능&lt;/strong&gt;하다는 점입니다.&lt;/p&gt;
&lt;p&gt;특정 인자를 약간씩 바꿔가며 여러 번 시뮬레이션을 돌려야하는 등의 작업을 수행할 때, 컴파일을 한 번만 해서 실행파일을 생성한 뒤 매크로파일만 수정하며 손쉽게 여러 조건의 시뮬레이션을 돌릴 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;사용을 위해서는 두 가지 준비가 필요합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;소스코드에서 매크로 파일을 사용하겠다는 선언 (UI command 중 &lt;code&gt;/control/execute 매크로파일명&lt;/code&gt; 이용)&lt;/p&gt;
&lt;p&gt;예를 들어, 일련의 UI command를 적어둔 파일 이름이 &lt;b&gt;run.mac&lt;/b&gt;이라면 다음과 같이 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;G4UImanager::GetUIPointer()-&amp;gt;ApplyCommand(&amp;quot;/control/execute run.mac&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매크로파일 작성 (&lt;b&gt;run.mac&lt;/b&gt; 파일의 예시)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/run/verbose 1
/tracking/verbose 1

# empty line will be ignored.

# You can also call another macro file here.
/control/execute run2.mac

/run/beamOn 100
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;매크로파일을 사용할 때의 주의사항은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;매크로파일 내의 내용 중 실행할 수 없는 명령줄을 만나면, &lt;code&gt;COMMAND NOT FOUND&lt;/code&gt; 경고문구가 발생하고 해당 매크로파일을 읽는 작업을 중단한 뒤 건너뜁니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매크로파일에 사용되는 명령어는 full-path로 작성해야 합니다. cd 등으로 경로이동을 시도하거나, 경로 정보 없이 command만 입력하면 오류가 발생합니다. 다음은 &lt;font color=red&gt;잘못된 사용 예&lt;/font&gt;입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /run/ # A macro file cannot contain &amp;quot;cd&amp;quot; command.
verbose 1 # &amp;quot;verbose&amp;quot; does not contain its path.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매크로파일의 경로가 프로그램 실행파일의 경로와 다를 경우, 경로까지 입력해줘야 합니다. 예를 들어, 한 단계 상위 디렉토리(&lt;code&gt;../&lt;/code&gt;)에 있는 &lt;b&gt;run.mac&lt;/b&gt; 파일을 이용하려면 다음과 같이 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;G4UImanager::GetUIPointer()-&amp;gt;ApplyCommand(&amp;quot;/control/execute ../run.mac&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gui-명령줄을-통한-입력&#34;&gt;(G)UI 명령줄을 통한 입력&lt;/h3&gt;
&lt;p&gt;프로그램을 실행한 뒤, GUI 혹은 UI 상에서 직접 명령줄을 통해 입력할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;여기에서는 마치 linux 상에서 디렉토리를 탐색하듯, &lt;code&gt;cd&lt;/code&gt; 명령어와 &lt;code&gt;ls&lt;/code&gt; 명령어 등도 이용 가능합니다.&lt;/p&gt;
&lt;p&gt;다음은 가장 많이 사용되는 Qt 기반 GUI에서 UI command를 입력하는 모습입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qtui-session&#34; srcset=&#34;
               /geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_eae5d0d054764d04283735ee9729f478.png 400w,
               /geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_b033bd2a7e94d3ad6d02f24eb48ee3ef.png 760w,
               /geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_eae5d0d054764d04283735ee9729f478.png&#34;
               width=&#34;751&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>리눅스 시스템 관련 명령어 모음</title>
      <link>https://evandde.github.io/linux-sysinfo/</link>
      <pubDate>Tue, 16 Mar 2021 09:28:22 +0900</pubDate>
      <guid>https://evandde.github.io/linux-sysinfo/</guid>
      <description>&lt;p&gt;리눅스 운영체제에서 하드웨어 및 시스템의 정보나 현재 상태를 살펴보는 데에 사용되는 명령어를 정리하였습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;os-확인&#34;&gt;OS 확인&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsb_release -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;lsb_release&#34; srcset=&#34;
               /linux-sysinfo/lsb_release_hu1ae3037d451d2f8c8eed18279649d073_7650_f6e750712ed0d4476ccbbabe26708db3.png 400w,
               /linux-sysinfo/lsb_release_hu1ae3037d451d2f8c8eed18279649d073_7650_65a87b62765d1078706ec48241fb113e.png 760w,
               /linux-sysinfo/lsb_release_hu1ae3037d451d2f8c8eed18279649d073_7650_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/linux-sysinfo/lsb_release_hu1ae3037d451d2f8c8eed18279649d073_7650_f6e750712ed0d4476ccbbabe26708db3.png&#34;
               width=&#34;320&#34;
               height=&#34;114&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;메모리-및-swap-영역-상태-확인&#34;&gt;메모리 및 swap 영역 상태 확인&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;free -h
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;free&#34; srcset=&#34;
               /linux-sysinfo/free_hub0df18e3f914a7dc604e2353fe2a50aa_7717_23f4245750990b0c863603c109f16666.png 400w,
               /linux-sysinfo/free_hub0df18e3f914a7dc604e2353fe2a50aa_7717_d0062d407dc539c117a2f859c2398f5e.png 760w,
               /linux-sysinfo/free_hub0df18e3f914a7dc604e2353fe2a50aa_7717_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/linux-sysinfo/free_hub0df18e3f914a7dc604e2353fe2a50aa_7717_23f4245750990b0c863603c109f16666.png&#34;
               width=&#34;720&#34;
               height=&#34;78&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;디스크-용량-확인&#34;&gt;디스크 용량 확인&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;df -h
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;df&#34; srcset=&#34;
               /linux-sysinfo/df_hu73cd4ae11b543103d5a6c0fa04b5e9e5_16297_44fdd7b577ca065eef5acaf3203dd396.png 400w,
               /linux-sysinfo/df_hu73cd4ae11b543103d5a6c0fa04b5e9e5_16297_99060a5aaca90bd92c788e3b23fa76ba.png 760w,
               /linux-sysinfo/df_hu73cd4ae11b543103d5a6c0fa04b5e9e5_16297_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/linux-sysinfo/df_hu73cd4ae11b543103d5a6c0fa04b5e9e5_16297_44fdd7b577ca065eef5acaf3203dd396.png&#34;
               width=&#34;481&#34;
               height=&#34;248&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;파티션-정보-확인&#34;&gt;파티션 정보 확인&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsblk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;lsblk&#34; srcset=&#34;
               /linux-sysinfo/lsblk_hu814b36fabd9e2ebaab5a4ffb0fe04e20_5814_4d0de8d1e8b63b1d12eb50a5c986247e.png 400w,
               /linux-sysinfo/lsblk_hu814b36fabd9e2ebaab5a4ffb0fe04e20_5814_02cf47ebd31761e44e8125742390b1e8.png 760w,
               /linux-sysinfo/lsblk_hu814b36fabd9e2ebaab5a4ffb0fe04e20_5814_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/linux-sysinfo/lsblk_hu814b36fabd9e2ebaab5a4ffb0fe04e20_5814_4d0de8d1e8b63b1d12eb50a5c986247e.png&#34;
               width=&#34;371&#34;
               height=&#34;78&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cpu-모델명-확인&#34;&gt;CPU 모델명 확인&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /proc/cpuinfo | grep CPU | head -1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cpuinfo&#34; srcset=&#34;
               /linux-sysinfo/cpuinfo_hue0ca0f2f4f8dd6a448397b2c4dfda5d8_6194_75d8d1e0d736a28d505df7b052a4721f.png 400w,
               /linux-sysinfo/cpuinfo_hue0ca0f2f4f8dd6a448397b2c4dfda5d8_6194_c76850ec59059b9120f2c6066d7123fe.png 760w,
               /linux-sysinfo/cpuinfo_hue0ca0f2f4f8dd6a448397b2c4dfda5d8_6194_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/linux-sysinfo/cpuinfo_hue0ca0f2f4f8dd6a448397b2c4dfda5d8_6194_75d8d1e0d736a28d505df7b052a4721f.png&#34;
               width=&#34;528&#34;
               height=&#34;36&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cpu-코어-수-확인&#34;&gt;CPU 코어 수 확인&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /proc/cpuinfo | grep CPU | wc -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cpucore&#34; srcset=&#34;
               /linux-sysinfo/cpucore_huedf4a06927d3078492580f98784c777f_3634_31cd3be7af7f55e5fbb44e93aebe434f.png 400w,
               /linux-sysinfo/cpucore_huedf4a06927d3078492580f98784c777f_3634_ec55e8ecd668e76c1e1a79a7b3c083c4.png 760w,
               /linux-sysinfo/cpucore_huedf4a06927d3078492580f98784c777f_3634_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/linux-sysinfo/cpucore_huedf4a06927d3078492580f98784c777f_3634_31cd3be7af7f55e5fbb44e93aebe434f.png&#34;
               width=&#34;496&#34;
               height=&#34;40&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;서버-상태-확인&#34;&gt;서버 상태 확인&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;w
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;w&#34; srcset=&#34;
               /linux-sysinfo/w_hu55b3e37888b954b71f09343586bdf9a3_11214_c8406a23afb9ee96a65a1b604b7e63e6.png 400w,
               /linux-sysinfo/w_hu55b3e37888b954b71f09343586bdf9a3_11214_635aefad6d824b1bc4da4786e1c8c321.png 760w,
               /linux-sysinfo/w_hu55b3e37888b954b71f09343586bdf9a3_11214_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/linux-sysinfo/w_hu55b3e37888b954b71f09343586bdf9a3_11214_c8406a23afb9ee96a65a1b604b7e63e6.png&#34;
               width=&#34;632&#34;
               height=&#34;95&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code에서 Python3의 venv 사용하기</title>
      <link>https://evandde.github.io/vscode-python-venv/</link>
      <pubDate>Mon, 22 Feb 2021 12:50:01 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-python-venv/</guid>
      <description>&lt;p&gt;VSCode에서 Python3의 기능 중 가상환경을 설정하는 venv를 사용하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;VSCode에서의 python3 환경을 구축한 상태&lt;/b&gt;라고 가정합니다. 이에 관한 내용은 &lt;a href=&#34;https://evandde.github.io/vscode-python/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;가상환경-생성&#34;&gt;가상환경 생성&lt;/h2&gt;
&lt;p&gt;다음 명령어를 통해 python3에서 제공하는 venv 기능을 사용할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;python -m venv ./venv
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;vscode에서의-설정&#34;&gt;VSCode에서의 설정&lt;/h2&gt;
&lt;p&gt;vscode를 실행하고, &lt;code&gt;.py&lt;/code&gt; 확장자의 빈 파일을 한 개 생성합니다. 그러면, vscode에서 자동으로 python 파일임을 인식하여 &lt;strong&gt;왼쪽 아래에 python 인터프리터가 연동되는 것을 확인할 수 있습니다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;newfile&#34; srcset=&#34;
               /vscode-python-venv/newfile_hufbedf9c76eedf5682024779181477235_38316_d4ed2b67376f93ba31de438cddc58cb1.png 400w,
               /vscode-python-venv/newfile_hufbedf9c76eedf5682024779181477235_38316_37d04a63028dcb9501134a7ab4b50b67.png 760w,
               /vscode-python-venv/newfile_hufbedf9c76eedf5682024779181477235_38316_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python-venv/newfile_hufbedf9c76eedf5682024779181477235_38316_d4ed2b67376f93ba31de438cddc58cb1.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 곳을 클릭하면 다음과 같이 연동할 python 인터프리터의 목록이 뜹니다.&lt;/p&gt;
&lt;p&gt;다음 그림을 따라 우리가 만들어둔 &lt;code&gt;venv/Scripts/python.exe&lt;/code&gt;를 인터프리터로 선택해주면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;selectpython1&#34; srcset=&#34;
               /vscode-python-venv/selectpython1_hu1814e1b35c11d8f3a219191ee330fac8_52889_a4c0c4f74ffb8d6b6454679cbeeed090.png 400w,
               /vscode-python-venv/selectpython1_hu1814e1b35c11d8f3a219191ee330fac8_52889_5f4e4faf1c5302fccb6da2f17d2b577c.png 760w,
               /vscode-python-venv/selectpython1_hu1814e1b35c11d8f3a219191ee330fac8_52889_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python-venv/selectpython1_hu1814e1b35c11d8f3a219191ee330fac8_52889_a4c0c4f74ffb8d6b6454679cbeeed090.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;selectpython2&#34; srcset=&#34;
               /vscode-python-venv/selectpython2_huf3c3f0c157cbe815198cc7c758825965_32669_5f87d5c7aec8ec38e4c2e5b82b4ee184.png 400w,
               /vscode-python-venv/selectpython2_huf3c3f0c157cbe815198cc7c758825965_32669_5c2d4767ae0f3328a7bb3107bc815029.png 760w,
               /vscode-python-venv/selectpython2_huf3c3f0c157cbe815198cc7c758825965_32669_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python-venv/selectpython2_huf3c3f0c157cbe815198cc7c758825965_32669_5f87d5c7aec8ec38e4c2e5b82b4ee184.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;selectpython3&#34; srcset=&#34;
               /vscode-python-venv/selectpython3_hub7f3cb9643ae745be6b48394f2e50cdf_49574_15c2bf6fd278654efbb63e8aa9f96fd2.png 400w,
               /vscode-python-venv/selectpython3_hub7f3cb9643ae745be6b48394f2e50cdf_49574_5058619fc1a18325576fddc7993948e0.png 760w,
               /vscode-python-venv/selectpython3_hub7f3cb9643ae745be6b48394f2e50cdf_49574_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python-venv/selectpython3_hub7f3cb9643ae745be6b48394f2e50cdf_49574_15c2bf6fd278654efbb63e8aa9f96fd2.png&#34;
               width=&#34;760&#34;
               height=&#34;572&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 과정을 완료하면, &lt;code&gt;.vscode&lt;/code&gt;라는 폴더가 생기게 되고 이 안에 settings.json이라는 파일이 자동 생성됩니다. 이 파일을 열어보면, python 인터프리터의 경로가 우리가 만든 venv의 것으로 설정되고 있음을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;settings_json&#34; srcset=&#34;
               /vscode-python-venv/settings_json_hu33259f9b5f60deca83d74c432fff1574_35498_950013125438d6295bda148d2b4a101f.png 400w,
               /vscode-python-venv/settings_json_hu33259f9b5f60deca83d74c432fff1574_35498_0d9921d861c9edf99f1036ee5cc41d33.png 760w,
               /vscode-python-venv/settings_json_hu33259f9b5f60deca83d74c432fff1574_35498_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python-venv/settings_json_hu33259f9b5f60deca83d74c432fff1574_35498_950013125438d6295bda148d2b4a101f.png&#34;
               width=&#34;760&#34;
               height=&#34;572&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code에서 Python3 환경 설정하기</title>
      <link>https://evandde.github.io/vscode-python/</link>
      <pubDate>Mon, 22 Feb 2021 11:33:18 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-python/</guid>
      <description>&lt;p&gt;VSCode에서 Python3 언어를 사용하기 위해 실행/디버깅 등이 가능한 환경을 구축하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;VSCode 설치를 완료한 상태&lt;/b&gt;라고 가정합니다. VSCode 설치 및 기본 세팅은 &lt;a href=&#34;https://evandde.github.io/vscode/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;컴파일러디버거-설치&#34;&gt;컴파일러/디버거 설치&lt;/h2&gt;
&lt;p&gt;VSCode는 Python3 언어용 인터프리터를 자체적으로 내장하고있지 않습니다. 때문에 Python3 언어를 VSCode에서 사용하려면, 인터프리터를 직접 설치하고 이를 연동해주는 작업이 필요합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Extension을 설치한다고 해서 인터프리터가 설치되는 것은 아닙니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;windows를-이용하는-경우&#34;&gt;Windows를 이용하는 경우&lt;/h3&gt;
&lt;p&gt;Windows는 기본적으로 Python3 언어용 인터프리터를 제공하지 않습니다. 따라서, 우리가 직접 설치해주어야 합니다.&lt;/p&gt;
&lt;p&gt;이는 chocolatey를 통해 쉽게 설치할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Chocolatey는 Windows용 패키지 관리자입니다. 아직 사용 방법을 모르신다면, &lt;a href=&#34;https://evandde.github.io/chocolatey/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install python -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;python&#34; srcset=&#34;
               /vscode-python/python_hu6e2d05cb9a13539a28afd7639719bf5c_41500_703bb37218bd66563d4e36da4f28e468.png 400w,
               /vscode-python/python_hu6e2d05cb9a13539a28afd7639719bf5c_41500_11fd434edc6ee46a7e147ed94c4a04e4.png 760w,
               /vscode-python/python_hu6e2d05cb9a13539a28afd7639719bf5c_41500_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/python_hu6e2d05cb9a13539a28afd7639719bf5c_41500_703bb37218bd66563d4e36da4f28e468.png&#34;
               width=&#34;740&#34;
               height=&#34;494&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 설치가 잘 되었는지 확인해보세요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;python --version
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Chocolatey 특성 상, 설치한 직후에는 &lt;code&gt;python&lt;/code&gt; 명령어를 인식하지 못할 수 있습니다.&lt;/p&gt;
&lt;p&gt;PowerShell을 껐다 켜거나, &lt;code&gt;refreshenv&lt;/code&gt; 명령어를 활용하세요.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;python_version_windows&#34; srcset=&#34;
               /vscode-python/python_version_windows_hu387b960dddce961ae4b280eb6c79089d_2919_92890a0be2655ca0d77ed47cd717dbd7.png 400w,
               /vscode-python/python_version_windows_hu387b960dddce961ae4b280eb6c79089d_2919_4622c0f932ccf2499dff9c47085e2f70.png 760w,
               /vscode-python/python_version_windows_hu387b960dddce961ae4b280eb6c79089d_2919_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/python_version_windows_hu387b960dddce961ae4b280eb6c79089d_2919_92890a0be2655ca0d77ed47cd717dbd7.png&#34;
               width=&#34;480&#34;
               height=&#34;41&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extension-설치&#34;&gt;Extension 설치&lt;/h2&gt;
&lt;p&gt;이제 VSCode에서 extension을 설치할 차례입니다.&lt;/p&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 &amp;quot;&lt;strong&gt;python&lt;/strong&gt;&amp;quot;를 검색하세요. 맨 위에 python extension이 뜰 것입니다. Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_python&#34; srcset=&#34;
               /vscode-python/extension_python_hu5ac9417cd662cdf9460ddfba50989f19_72511_ad2e777e59664c609e2bc81c4fa56b1d.png 400w,
               /vscode-python/extension_python_hu5ac9417cd662cdf9460ddfba50989f19_72511_bf1a4e1d4575305c39fb888add3b0126.png 760w,
               /vscode-python/extension_python_hu5ac9417cd662cdf9460ddfba50989f19_72511_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/extension_python_hu5ac9417cd662cdf9460ddfba50989f19_72511_ad2e777e59664c609e2bc81c4fa56b1d.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;테스트&#34;&gt;테스트&lt;/h2&gt;
&lt;p&gt;이제 제대로 설치가 되었는지 확인할 시간입니다.&lt;/p&gt;
&lt;h3 id=&#34;코드-작성&#34;&gt;코드 작성&lt;/h3&gt;
&lt;p&gt;Explorer 탭으로 이동하여 적당한 경로에 &lt;b&gt;main.py&lt;/b&gt;라는 새 파일을 만들어주고 다음과 같이 작성하도록 하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Hello, World!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;codewriting&#34; srcset=&#34;
               /vscode-python/codewriting_hu3258aa037c885de537f74aef06ed958c_38131_44b6e59100ba6c21f3737ad02b2b1435.png 400w,
               /vscode-python/codewriting_hu3258aa037c885de537f74aef06ed958c_38131_2999fa9618f6388a376fb978f9fffa3f.png 760w,
               /vscode-python/codewriting_hu3258aa037c885de537f74aef06ed958c_38131_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/codewriting_hu3258aa037c885de537f74aef06ed958c_38131_44b6e59100ba6c21f3737ad02b2b1435.png&#34;
               width=&#34;695&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 [Run]-[Run Without Debugging]을 눌러 실행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;이후 아래쪽의 &lt;strong&gt;TERMINAL&lt;/strong&gt; 탭을 확인하시면, 우리가 작성한대로 Hello, World!가 화면에 출력되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run1&#34; srcset=&#34;
               /vscode-python/run1_hu2e74798ec29e178f2d2d60cef2edcb88_42206_51c57614711bb021536456f995e838cb.png 400w,
               /vscode-python/run1_hu2e74798ec29e178f2d2d60cef2edcb88_42206_943b665ca312c50cf36a7de895ba9f9e.png 760w,
               /vscode-python/run1_hu2e74798ec29e178f2d2d60cef2edcb88_42206_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/run1_hu2e74798ec29e178f2d2d60cef2edcb88_42206_51c57614711bb021536456f995e838cb.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run2&#34; srcset=&#34;
               /vscode-python/run2_hu15dd6c7e5bc1232eda1d5a0707ac041f_52244_ea85ba663330cae3476d81755912bee8.png 400w,
               /vscode-python/run2_hu15dd6c7e5bc1232eda1d5a0707ac041f_52244_7dafbdad8ec61ed19f3e19c142daa49b.png 760w,
               /vscode-python/run2_hu15dd6c7e5bc1232eda1d5a0707ac041f_52244_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/run2_hu15dd6c7e5bc1232eda1d5a0707ac041f_52244_ea85ba663330cae3476d81755912bee8.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;디버깅&#34;&gt;디버깅&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 진행하여 디버깅도 가능합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug1&#34; srcset=&#34;
               /vscode-python/debug1_huea92c79a15bd67ab41dc987ee2336c1e_44850_a643b0d95fb82fa8b90991df5ce3c690.png 400w,
               /vscode-python/debug1_huea92c79a15bd67ab41dc987ee2336c1e_44850_47b45d5186e3383dbffeb8e4475d2756.png 760w,
               /vscode-python/debug1_huea92c79a15bd67ab41dc987ee2336c1e_44850_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/debug1_huea92c79a15bd67ab41dc987ee2336c1e_44850_a643b0d95fb82fa8b90991df5ce3c690.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug2&#34; srcset=&#34;
               /vscode-python/debug2_hub256b7d4345ed72aeb0efacbcea9146d_63096_afd30996f992a43e300b34bc8d1710b8.png 400w,
               /vscode-python/debug2_hub256b7d4345ed72aeb0efacbcea9146d_63096_e26d3b9bc3ad62944bd5ac86af167661.png 760w,
               /vscode-python/debug2_hub256b7d4345ed72aeb0efacbcea9146d_63096_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/debug2_hub256b7d4345ed72aeb0efacbcea9146d_63096_afd30996f992a43e300b34bc8d1710b8.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug3&#34; srcset=&#34;
               /vscode-python/debug3_hu9259eb6f4bf6485a560db9bdf2b16733_58711_1ecf6f1ceb709b12731f62c58d826339.png 400w,
               /vscode-python/debug3_hu9259eb6f4bf6485a560db9bdf2b16733_58711_7f04a88eb9d72b6d41cc240a7d03e2ef.png 760w,
               /vscode-python/debug3_hu9259eb6f4bf6485a560db9bdf2b16733_58711_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/debug3_hu9259eb6f4bf6485a560db9bdf2b16733_58711_1ecf6f1ceb709b12731f62c58d826339.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug4&#34; srcset=&#34;
               /vscode-python/debug4_hu0fb868517a0036bb1dcc579f0bc70fe0_55281_491478477d1985c5abd72e7e96e547bc.png 400w,
               /vscode-python/debug4_hu0fb868517a0036bb1dcc579f0bc70fe0_55281_442d12385300746a883668fe9ba844a8.png 760w,
               /vscode-python/debug4_hu0fb868517a0036bb1dcc579f0bc70fe0_55281_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/debug4_hu0fb868517a0036bb1dcc579f0bc70fe0_55281_491478477d1985c5abd72e7e96e547bc.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug5&#34; srcset=&#34;
               /vscode-python/debug5_hu05174299344a0a4de7c35a5fba4d3e93_54773_cd5f4569022f58b0365b35c4ae70cfa3.png 400w,
               /vscode-python/debug5_hu05174299344a0a4de7c35a5fba4d3e93_54773_606e538de1a728f6ff2b3a4c56053a3a.png 760w,
               /vscode-python/debug5_hu05174299344a0a4de7c35a5fba4d3e93_54773_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/debug5_hu05174299344a0a4de7c35a5fba4d3e93_54773_cd5f4569022f58b0365b35c4ae70cfa3.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;추천-extension&#34;&gt;추천 extension&lt;/h3&gt;
&lt;p&gt;VSCode에서 python을 사용할 경우, import한 패키지의 내장함수에 대해 자동완성이 잘 이루어지지 않는 경우가 많습니다. 개인적으로는 이 때문에 한동안 VSCode에서 python을 사용하는 것이 꺼려졌습니다.&lt;/p&gt;
&lt;p&gt;이런 문제를 해결하기 위해 &lt;strong&gt;Pylance&lt;/strong&gt;라는 extension을 강력히 추천드립니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;pylance&#34; srcset=&#34;
               /vscode-python/pylance_hu93ecdcad1a2c88a746d67dacb1229e42_129562_08ff78f5e657792b612a3a9b10cfe4a6.png 400w,
               /vscode-python/pylance_hu93ecdcad1a2c88a746d67dacb1229e42_129562_71ec2427e9851a2d8bc0e80687bc08b5.png 760w,
               /vscode-python/pylance_hu93ecdcad1a2c88a746d67dacb1229e42_129562_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-python/pylance_hu93ecdcad1a2c88a746d67dacb1229e42_129562_08ff78f5e657792b612a3a9b10cfe4a6.png&#34;
               width=&#34;760&#34;
               height=&#34;571&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code와 Windows Subsystem for Linux 연동하기</title>
      <link>https://evandde.github.io/vscode-wsl/</link>
      <pubDate>Wed, 25 Nov 2020 10:42:23 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-wsl/</guid>
      <description>&lt;p&gt;VSCode와 WSL을 연동하여 사용하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;WSL1 혹은 WSL2&lt;/b&gt; 설치가 완료된 상태라고 가정합니다. 이에 관한 전반적인 내용은 &lt;a href=&#34;https://evandde.github.io/wsl/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;VSCode&lt;/b&gt; 설치가 완료된 상태라고 가정합니다. VSCode 설치 및 기본 세팅은 &lt;a href=&#34;https://evandde.github.io/vscode/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;remote-wsl-확장-설치&#34;&gt;Remote WSL 확장 설치&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Remote WSL 확장을 설치하기 위해서는, &lt;b&gt;1.35 버전 이상&lt;/b&gt;의 VSCode가 필요합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 &amp;quot;&lt;strong&gt;wsl&lt;/strong&gt;&amp;quot;를 검색하세요. 맨 위에 &lt;b&gt;Remote - WSL extension&lt;/b&gt;이 뜰 것입니다. Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_wsl&#34; srcset=&#34;
               /vscode-wsl/extension_wsl_hu31afeebf120d8ac309f15d19d69fda50_80471_3eab379f164895b5cf04f97656d18119.png 400w,
               /vscode-wsl/extension_wsl_hu31afeebf120d8ac309f15d19d69fda50_80471_87b7d291fba01da023cdb7a0c5387836.png 760w,
               /vscode-wsl/extension_wsl_hu31afeebf120d8ac309f15d19d69fda50_80471_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-wsl/extension_wsl_hu31afeebf120d8ac309f15d19d69fda50_80471_3eab379f164895b5cf04f97656d18119.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;linux-배포판-최신화-및-라이브러리-설치&#34;&gt;Linux 배포판 최신화 및 라이브러리 설치&lt;/h2&gt;
&lt;p&gt;일부 WSL 배포판의 경우에는 VSCode를 실행하기 위한 라이브러리가 없을 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 경우에는 패키지매니저(&lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;)를 최신화하고, 필요한 라이브러리를 설치하시기 바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Debian이나 Ubuntu의 경우 apt를 활용한 예&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;wget&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;이나 ca 인증서&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;를 다운받아야 할 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Debian이나 Ubuntu의 경우 apt를 활용한 예&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install wget -y
sudo apt install ca-certificates -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;실행해보기&#34;&gt;실행해보기&lt;/h2&gt;
&lt;h3 id=&#34;wsl-터미널에서-실행&#34;&gt;WSL 터미널에서 실행&lt;/h3&gt;
&lt;p&gt;원하는 프로젝트의 디렉토리에서 &lt;code&gt;code .&lt;/code&gt; 명령어를 입력합니다.&lt;/p&gt;
&lt;p&gt;첫 실행 시에는 자동으로 설치가 진행된 뒤 VSCode가 실행됩니다.&lt;/p&gt;
&lt;p&gt;실행한 뒤, 창 왼쪽 아래의 초록색 부분에 &lt;b&gt;WSL: [배포판 이름]&lt;/b&gt;이 정상적으로 뜬다면 성공입니다.&lt;/p&gt;














&lt;figure  id=&#34;figure-ref-get-started-using-vs-code-with-windows-subsystem-for-linux--microsoft-docshttpsdocsmicrosoftcomen-uswindowswsltutorialswsl-vscode&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Ref.: [Get started using VS Code with Windows Subsystem for Linux | Microsoft Docs](https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode)&#34;
           src=&#34;https://evandde.github.io/vscode-wsl/wsl-open-vs-code.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Ref.: &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode&#34;&gt;Get started using VS Code with Windows Subsystem for Linux | Microsoft Docs&lt;/a&gt;
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;h3 id=&#34;vscode에서-실행&#34;&gt;VSCode에서 실행&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 진행합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vscode_open_remotewsl1&#34; srcset=&#34;
               /vscode-wsl/vscode_open_remotewsl1_huaa1c17110882f41aa0a4384ed1b766f0_46007_c107efe44e721ebf4a9cb02a607116ea.png 400w,
               /vscode-wsl/vscode_open_remotewsl1_huaa1c17110882f41aa0a4384ed1b766f0_46007_7ec7a1a72568b5cbaee46f1cb4f0a686.png 760w,
               /vscode-wsl/vscode_open_remotewsl1_huaa1c17110882f41aa0a4384ed1b766f0_46007_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-wsl/vscode_open_remotewsl1_huaa1c17110882f41aa0a4384ed1b766f0_46007_c107efe44e721ebf4a9cb02a607116ea.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vscode_open_remotewsl2&#34; srcset=&#34;
               /vscode-wsl/vscode_open_remotewsl2_hu99f3459e099ff8fc97eb6a43aa703d64_46816_a2d36fd35c86f8cb7aa429678fb68d47.png 400w,
               /vscode-wsl/vscode_open_remotewsl2_hu99f3459e099ff8fc97eb6a43aa703d64_46816_4b0ae88d9910a058601da9ecd31b20be.png 760w,
               /vscode-wsl/vscode_open_remotewsl2_hu99f3459e099ff8fc97eb6a43aa703d64_46816_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-wsl/vscode_open_remotewsl2_hu99f3459e099ff8fc97eb6a43aa703d64_46816_a2d36fd35c86f8cb7aa429678fb68d47.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vscode_open_remotewsl3&#34; srcset=&#34;
               /vscode-wsl/vscode_open_remotewsl3_hua9c4c0917fe0f9e88673719e1c794159_76269_3fcc2404b1f1ebd9ad90ebb242bd55be.png 400w,
               /vscode-wsl/vscode_open_remotewsl3_hua9c4c0917fe0f9e88673719e1c794159_76269_ba439e65bc21c69c989a85551483a6ec.png 760w,
               /vscode-wsl/vscode_open_remotewsl3_hua9c4c0917fe0f9e88673719e1c794159_76269_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-wsl/vscode_open_remotewsl3_hua9c4c0917fe0f9e88673719e1c794159_76269_3fcc2404b1f1ebd9ad90ebb242bd55be.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wsl에-확장-설치하기&#34;&gt;WSL에 확장 설치하기&lt;/h2&gt;
&lt;p&gt;Extension 탭을 열면 위쪽에는 Local(윈도우)에 설치된 확장 목록이, 아래쪽에는 WSL에 설치된 확장 목록이 뜹니다.&lt;/p&gt;
&lt;p&gt;이미 로컬에 설치된 확장을 설치할 수도 있고, WSL에만 확장을 설치할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;다음 그림을 참고하세요.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_copy1&#34; srcset=&#34;
               /vscode-wsl/extension_copy1_hu2dbe3ec6e318ac7fb7f8ef0b62ea57b3_150478_b2e0722f782bf38067604cd7f3f0f0ea.png 400w,
               /vscode-wsl/extension_copy1_hu2dbe3ec6e318ac7fb7f8ef0b62ea57b3_150478_eaad8e696e95f81ede7ce27598cfce33.png 760w,
               /vscode-wsl/extension_copy1_hu2dbe3ec6e318ac7fb7f8ef0b62ea57b3_150478_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-wsl/extension_copy1_hu2dbe3ec6e318ac7fb7f8ef0b62ea57b3_150478_b2e0722f782bf38067604cd7f3f0f0ea.png&#34;
               width=&#34;760&#34;
               height=&#34;584&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_copy2&#34; srcset=&#34;
               /vscode-wsl/extension_copy2_hud8a81bc5f5eca29be782f6935b8b62e7_84124_1d2ffe353fac757515f707957fd4d788.png 400w,
               /vscode-wsl/extension_copy2_hud8a81bc5f5eca29be782f6935b8b62e7_84124_c7c5d6fed26ae5ca61d188efb29503bb.png 760w,
               /vscode-wsl/extension_copy2_hud8a81bc5f5eca29be782f6935b8b62e7_84124_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-wsl/extension_copy2_hud8a81bc5f5eca29be782f6935b8b62e7_84124_1d2ffe353fac757515f707957fd4d788.png&#34;
               width=&#34;760&#34;
               height=&#34;584&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_copy3&#34; srcset=&#34;
               /vscode-wsl/extension_copy3_hu7c330a01e9857d89173737c29c11fd46_99783_301652b25a1cdf4cdee107c215ac79ba.png 400w,
               /vscode-wsl/extension_copy3_hu7c330a01e9857d89173737c29c11fd46_99783_52648a9ff9a399171c1f7c934865ef89.png 760w,
               /vscode-wsl/extension_copy3_hu7c330a01e9857d89173737c29c11fd46_99783_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-wsl/extension_copy3_hu7c330a01e9857d89173737c29c11fd46_99783_301652b25a1cdf4cdee107c215ac79ba.png&#34;
               width=&#34;760&#34;
               height=&#34;584&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_copy4&#34; srcset=&#34;
               /vscode-wsl/extension_copy4_hu408d3fb6cb7459c36fd03cda3fd53eaf_99852_0b0d5a0b238f9afb859dacfdd9c460b8.png 400w,
               /vscode-wsl/extension_copy4_hu408d3fb6cb7459c36fd03cda3fd53eaf_99852_6b31a7796e435cdeb8023f50bcf73c87.png 760w,
               /vscode-wsl/extension_copy4_hu408d3fb6cb7459c36fd03cda3fd53eaf_99852_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-wsl/extension_copy4_hu408d3fb6cb7459c36fd03cda3fd53eaf_99852_0b0d5a0b238f9afb859dacfdd9c460b8.png&#34;
               width=&#34;760&#34;
               height=&#34;584&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_copy5&#34; srcset=&#34;
               /vscode-wsl/extension_copy5_hu9d1e06428f495f8dae4da46e316505c1_70666_2cdc28818baedbfc656f66afcecadfea.png 400w,
               /vscode-wsl/extension_copy5_hu9d1e06428f495f8dae4da46e316505c1_70666_51ab29c428e9a4ec761e0091e0d14b09.png 760w,
               /vscode-wsl/extension_copy5_hu9d1e06428f495f8dae4da46e316505c1_70666_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-wsl/extension_copy5_hu9d1e06428f495f8dae4da46e316505c1_70666_2cdc28818baedbfc656f66afcecadfea.png&#34;
               width=&#34;760&#34;
               height=&#34;584&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;웹 서버로부터 데이터를 다운 받기 위한 명령어&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;SSL 기반의 응용프로그램이 SSL 연결의 신뢰성을 검사할 수 있도록 허용하기 위한 인증서&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code에서 CMake 환경 설정하기</title>
      <link>https://evandde.github.io/vscode-cmake/</link>
      <pubDate>Fri, 13 Nov 2020 10:04:24 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-cmake/</guid>
      <description>&lt;p&gt;VSCode에서 CMake 기반의 프로젝트를 만들고, 실행/디버깅 등이 가능한 환경을 구축하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 VSCode 설치 후, &lt;b&gt;C++ 언어를 사용하기 위한 환경 구축까지 완료한 상태&lt;/b&gt;라고 가정합니다. C++ 언어 사용을 위한 환경 구축은 &lt;a href=&#34;https://evandde.github.io/vscode-cpp/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;cmake-설치&#34;&gt;CMake 설치&lt;/h2&gt;
&lt;p&gt;VSCode는 CMake를 자체적으로 내장하고있지 않습니다. 때문에 CMake를 직접 설치하고 이를 연동해주는 작업이 필요합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Extension을 설치한다고 해서 CMake가 설치되는 것은 아닙니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;windows를-이용하는-경우&#34;&gt;Windows를 이용하는 경우&lt;/h3&gt;
&lt;p&gt;Chocolatey를 이용하면 쉽게 설치할 수 있습니다. 다만, chocolatey로 CMake를 설치하는 경우 &lt;code&gt;PATH&lt;/code&gt; 환경변수가 자동으로 잡히지 않아, 추가적인 명령어를 입력해주어야 합니다. 다음 명령어를 입력하세요.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Chocolatey는 Windows용 패키지 관리자입니다. 아직 사용 방법을 모르신다면, &lt;a href=&#34;https://evandde.github.io/chocolatey/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install cmake -y --installargs &#39;ADD_CMAKE_TO_PATH=System&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_windows&#34; srcset=&#34;
               /vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_9771e93ed3e87c576f6fb2867e7b5956.png 400w,
               /vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_f38a49ff98e14257a9b883dedfdabf5a.png 760w,
               /vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_windows_huf9d6185fcc3b986572bd5104885e87fd_46967_9771e93ed3e87c576f6fb2867e7b5956.png&#34;
               width=&#34;760&#34;
               height=&#34;331&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 설치가 잘 되었는지 확인해보세요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmake --version
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Chocolatey 특성 상, 설치한 직후에는 &lt;code&gt;cmake&lt;/code&gt; 명령어를 인식하지 못할 수 있습니다.&lt;/p&gt;
&lt;p&gt;PowerShell을 껐다 켜거나, &lt;code&gt;refreshenv&lt;/code&gt; 명령어를 활용하세요.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_version_windows&#34; srcset=&#34;
               /vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_0bc90b9ece12811ecdcb9939d2704be4.png 400w,
               /vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_afb26016a1a0ad67fc17e85ed1c59bba.png 760w,
               /vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_version_windows_hu89a6af564cc18670337a8f92b68e3118_12456_0bc90b9ece12811ecdcb9939d2704be4.png&#34;
               width=&#34;760&#34;
               height=&#34;122&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;linux를-이용하는-경우&#34;&gt;Linux를 이용하는 경우&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://salsa.debian.org/apt-team/apt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt(apt-get)&lt;/a&gt;나 &lt;a href=&#34;http://yum.baseurl.org/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;yum&lt;/a&gt;을 이용하면 쉽게 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 &lt;code&gt;apt&lt;/code&gt;를 이용하여 설치한다면 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install cmake -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_linux&#34; srcset=&#34;
               /vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_08db8804eb063c564c76702499a0f070.png 400w,
               /vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_68103a3937f845ce58583da48ddc4d0e.png 760w,
               /vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_linux_huaed6654e1f9d1908b9a5d0635f33e73f_34421_08db8804eb063c564c76702499a0f070.png&#34;
               width=&#34;760&#34;
               height=&#34;300&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 설치가 잘 되었는지 확인해보세요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cmake_version_linux&#34; srcset=&#34;
               /vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1a5c2e360d69d4f6e5ccd10c0e5ee3b7.png 400w,
               /vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1d69aa391dc32fc422821a292d815295.png 760w,
               /vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cmake_version_linux_hua78ef093bdc60e6242f0783d85dba23b_5482_1a5c2e360d69d4f6e5ccd10c0e5ee3b7.png&#34;
               width=&#34;736&#34;
               height=&#34;77&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extension-설치&#34;&gt;Extension 설치&lt;/h2&gt;
&lt;p&gt;이제 VSCode에서 extension을 설치할 차례입니다.&lt;/p&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 “&lt;strong&gt;cmake&lt;/strong&gt;“를 검색하세요. 맨 위부터 &lt;strong&gt;CMake&lt;/strong&gt;와 &lt;strong&gt;CMake Tools&lt;/strong&gt;가 뜰 것입니다. 두 가지 모두 Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_cmake&#34; srcset=&#34;
               /vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png 400w,
               /vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_46089bc2159dbb4772073c745321d074.png 760w,
               /vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/extension_cmake_hu3da5222f7d42ccd615f0b10e3c843ad1_77547_4e6d4b33b76a1390296ae0108ae9ba55.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;각각의 용도는 이렇습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMake extension: CMake 명령어에 대한 자동완성 제공. CMakeLists.txt 파일 작성에 도움.&lt;/li&gt;
&lt;li&gt;CMake Tools extension: CMake 기반 프로젝트를 관리하는데에 도움.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;테스트&#34;&gt;테스트&lt;/h2&gt;
&lt;p&gt;이제 제대로 설치가 되었는지 확인할 시간입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    경로에 &lt;strong&gt;한글&lt;/strong&gt;이 있으면 제대로 동작하지 않습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;hello-world-프로젝트-만들어보기&#34;&gt;Hello world 프로젝트 만들어보기&lt;/h3&gt;
&lt;p&gt;CMake Tools는 &lt;b&gt;CMake: Quick Start&lt;/b&gt;라는 기능을 제공합니다. 손쉽게 CMake 기반의 Hello world 프로젝트를 만들어주는 것이죠.&lt;/p&gt;
&lt;p&gt;적당한 경로에 빈 폴더를 만들어주고 다음과 같이 진행합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs1&#34; srcset=&#34;
               /vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png 400w,
               /vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_3da3f460f72e8cabaaf3889ef5780923.png 760w,
               /vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs1_hu0e7303143497f0e4a137757a573cefc0_45640_caabe28af57f76ad3462e5cede53839c.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs2&#34; srcset=&#34;
               /vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png 400w,
               /vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_f9f11df871b2487e26ca5679338a6be8.png 760w,
               /vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs2_hu7f22ed4d7a598ee99fbd02dc85f95eec_42358_2558a20512433bd005186796729aa5a5.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs3&#34; srcset=&#34;
               /vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png 400w,
               /vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_c10044573126886eedd0e2d972091b76.png 760w,
               /vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs3_hu8ae8568f48c1e6cc3dda2f57b9ad71bd_73424_90322c3a2e550c599c95d82ba2446d72.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs4&#34; srcset=&#34;
               /vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png 400w,
               /vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_8cd8b9516849d5a9d8d75ca9fb813464.png 760w,
               /vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs4_hu651e505c86ff239e93aff82d745041ea_46310_b7233074ab7ba107154fcc97db32ac24.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs5&#34; srcset=&#34;
               /vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png 400w,
               /vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_2a9520c56ea9bd1f1d8c0f10ab602f8f.png 760w,
               /vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs5_huccc2f1247fcbf6dd401b7f495cf147cb_50218_17d669e23dfa30cb3dab8686981a3128.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;cqs6&#34; srcset=&#34;
               /vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png 400w,
               /vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_7c3275d6d1a0e5d48b7a79780d75038b.png 760w,
               /vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/cqs6_hu95d915dd180392f838a32ab1e81c2198_42933_c41e8bd1a6a9127e52114d072653ffc2.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 실행하시면 됩니다. 동일 폴더 내에 &lt;b&gt;.vscode&lt;/b&gt;라는 폴더가 생기고 그 안에 CMake 설정 등에 관한 &lt;code&gt;.json&lt;/code&gt; 파일이 자동으로 생성될 것입니다. 또한, &lt;b&gt;build&lt;/b&gt;라는 폴더가 생기고 그 안에 &lt;strong&gt;CMake를 통한 빌드 부산물 및 컴파일 결과물&lt;/strong&gt;이 자동으로 생성될 것입니다.&lt;/p&gt;
&lt;p&gt;이후 아래쪽의 &lt;strong&gt;TERMINAL&lt;/strong&gt; 탭을 확인하시면, 자동 생성된 main.cpp의 내용대로 Hello, world!가 출력되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run1&#34; srcset=&#34;
               /vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png 400w,
               /vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_0830794d6928faa454db44cb37713ac3.png 760w,
               /vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/run1_hu23cbc9ee6d94a3922a35bb52f261e9f6_41631_a0936e7fd0a5303dd4898784745d755f.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run2&#34; srcset=&#34;
               /vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png 400w,
               /vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_51d0b8047f56d8954d98888e1a03ec14.png 760w,
               /vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/run2_hua87ae9c2ff262c1bd9334f65408d52c2_53270_8782fbb70eef9231d034ed3435be5a6b.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;디버깅&#34;&gt;디버깅&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 진행하여 디버깅도 가능합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    맨 처음 그림에서 보이는 바와 같이, CMake type을 Debug로 설정해야 함에 주의하세요!
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug1&#34; srcset=&#34;
               /vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png 400w,
               /vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_8bd4fe75f72748f2f1abec2b49ee6738.png 760w,
               /vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug1_hu164b5677826c8eacb553a5632840e7f1_67492_6e6ce9ac77aafe17495f6bb3738fcd6d.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug2&#34; srcset=&#34;
               /vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png 400w,
               /vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_f9d287c1cb825e1f442a098e2e351024.png 760w,
               /vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug2_hua21a153eb3eb6cbbd7dccc89fc1a0738_74148_90d69e79938c9aee1109b9116d6ec3ac.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug3&#34; srcset=&#34;
               /vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png 400w,
               /vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_7a86a29cff6db9ce2bed4c66f0c4ae71.png 760w,
               /vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug3_hu571b8c96d405a1ad6a1a679231de34ef_72722_5d1ce6d547d3b6774b361664d026fc88.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug4&#34; srcset=&#34;
               /vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png 400w,
               /vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_dc1e0e7796f2a56584f0e24fc089a09d.png 760w,
               /vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug4_hu8260f189d847922232a10d48b8fb98d6_96886_19264063bdb622727eb8d20b9428bf23.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug5&#34; srcset=&#34;
               /vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png 400w,
               /vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_48f79a1d99308f24c3c1818ab0a64c3b.png 760w,
               /vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/debug5_hu9bcbe7397ec7a3bd2daf2d3e9f7033fa_86537_4e8880b22573bb0628e8760e43c7d814.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;command-line-argument-설정&#34;&gt;Command line argument 설정&lt;/h3&gt;
&lt;p&gt;실행하거나 디버깅할 때, command line argument를 넘겨주도록 설정하고 싶을 때가 있습니다.&lt;/p&gt;
&lt;p&gt;이는 &lt;b&gt;.vscode/settings.json 파일을 생성&lt;/b&gt;해주고, 해당 파일에서 &lt;code&gt;cmake.debugConfig&lt;/code&gt;인자로서 입력해줘야 합니다.&lt;/p&gt;
&lt;h4 id=&#34;테스트-코드-수정&#34;&gt;테스트 코드 수정&lt;/h4&gt;
&lt;p&gt;그 전에 먼저 argument가 제대로 동작하는지 확인하기 위해 main.cpp 코드를 수정하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

int main(int argc, char**) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Hello, world!\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;argc: &amp;quot; &amp;lt;&amp;lt; argc &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 상태로 그냥 실행해보면 다음과 같이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg1&#34; srcset=&#34;
               /vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png 400w,
               /vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_f4a8f7ec275524a9111222bf92809d79.png 760w,
               /vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg1_hu3a15c3b7e617d931524b050348937c2a_48397_34c28f2952277af9d574ae29d4482c71.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;settingsjson-설정-및-실행&#34;&gt;settings.json 설정 및 실행&lt;/h4&gt;
&lt;p&gt;이제 settings.json 파일을 만들어 보겠습니다. (이미 만들어져 있을 수도 있습니다만, 그대로 진행하시면 됩니다)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;다음 그림과 같이 File - Preferences - Settings를 클릭합니다. 단축키는 &lt;b&gt;[CTRL]+[,]&lt;/b&gt; 입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg2&#34; srcset=&#34;
               /vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png 400w,
               /vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_65c616437706abe59a2dbc43109e2633.png 760w,
               /vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg2_huee035e19a4a82fd2afe280a473865c1e_95774_56b5c80af94e7c09a01234bd2dc3b9dc.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 Workspace 탭을 클릭합니다. 이 프로젝트(workspace)에만 적용되는 설정항목이라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg3&#34; srcset=&#34;
               /vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png 400w,
               /vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_13eb3447d52efcc9587d006f0fe4e81b.png 760w,
               /vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg3_hu27dcf0e43bc0a941f885a9e8bbb5dd1a_70248_89aded21624db7e599b13f64312ffbc8.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상단 검색창에 &lt;code&gt;cmake.debugConfig&lt;/code&gt;를 검색한 뒤, &lt;u&gt;Edit in settings.json&lt;/u&gt; 부분을 클릭합니다. &lt;code&gt;cmake.debug&lt;/code&gt; 정도만 입력하셔도 바로 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg4&#34; srcset=&#34;
               /vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png 400w,
               /vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_748696740cce29f2715b14ab0cbbe055.png 760w,
               /vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg4_hub35353a5b53ed0a09d9dc6a0af763b24_87426_76799a240fa2170b3a90649176dbadcb.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클릭하시면 바로 다음과 같이 &lt;code&gt;.vscode/settings.json&lt;/code&gt; 폴더 및 파일이 생성되고, settings.json 파일이 열리며, 그 안에 다음 그림과 같은 내용이 자동으로 작성되어 있을 것입니다. (추가로 다른 내용이 더 쓰여있을 수도 있습니다.)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg5&#34; srcset=&#34;
               /vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png 400w,
               /vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_31882fb69a1599a520fda4d0b80951be.png 760w,
               /vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg5_hu78284473b6cc163dc60de15408c7f415_67837_ccbdd3d38192395f02b0ca3a07701225.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 이 안에 &lt;code&gt;args&lt;/code&gt; 항목을 만들어 command line argument를 설정합니다. 실행파일명 뒤에 이어질 추가적인 argument들만 적어주면 되며, 각 항목은 &amp;ldquo;&amp;quot;(double-quote)로 묶어주고 ,(comma)로 분리해주면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg6&#34; srcset=&#34;
               /vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png 400w,
               /vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_c9ff1596f853439e269c3e58da89d3ba.png 760w,
               /vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg6_hu0c67c12b1cda36a60f2a210f9ef8732f_56962_b6ae80161893bbf02e68257e051ba56f.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 저장한 뒤, 실행이나 디버깅을 해보면 다음과 같이 command line argument가 잘 반영된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;arg7&#34; srcset=&#34;
               /vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png 400w,
               /vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_193e7f64d30ffcba4b84ba7d57d00d13.png 760w,
               /vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cmake/arg7_hu72e75db658e05d1b13d2f3cc7bc1f901_53536_a83fb439045a7589d4e825bdef5b78dc.png&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/packages/cmake&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://chocolatey.org/packages/cmake&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vector-of-bool.github.io/docs/vscode-cmake-tools/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://vector-of-bool.github.io/docs/vscode-cmake-tools/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/settings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://code.visualstudio.com/docs/getstarted/settings&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code에서 GCC/MinGW 기반 C, C&#43;&#43; 환경 설정하기</title>
      <link>https://evandde.github.io/vscode-cpp/</link>
      <pubDate>Thu, 12 Nov 2020 16:40:31 +0900</pubDate>
      <guid>https://evandde.github.io/vscode-cpp/</guid>
      <description>&lt;p&gt;VSCode에서 C 언어 및 C++ 언어를 사용하기 위해 실행/디버깅 등이 가능한 환경을 구축하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;VSCode 설치를 완료한 상태&lt;/b&gt;라고 가정합니다. VSCode 설치 및 기본 세팅은 &lt;a href=&#34;https://evandde.github.io/vscode/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;컴파일러디버거-설치&#34;&gt;컴파일러/디버거 설치&lt;/h2&gt;
&lt;p&gt;VSCode는 C 언어용 컴파일러나 디버거를 자체적으로 내장하고있지 않습니다. 때문에 C 언어를 VSCode에서 사용하려면, 컴파일러와 디버거를 직접 설치하고 이를 연동해주는 작업이 필요합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Extension을 설치한다고 해서 컴파일러나 디버거가 설치되는 것은 아닙니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;windows를-이용하는-경우&#34;&gt;Windows를 이용하는 경우&lt;/h3&gt;
&lt;p&gt;Windows는 기본적으로 C 언어용 컴파일러나 디버거를 제공하지 않습니다. 따라서, 우리가 직접 설치해주어야 합니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 &lt;strong&gt;&lt;a href=&#34;http://www.mingw.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MinGW&lt;/a&gt;&lt;/strong&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;를 이용하도록 하겠습니다. MinGW는 chocolatey를 통해 쉽게 설치할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Chocolatey는 Windows용 패키지 관리자입니다. 아직 사용 방법을 모르신다면, &lt;a href=&#34;https://evandde.github.io/chocolatey/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install mingw -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;b&gt; 2021년 6월 28일 수정&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;2021년 1월 12일에 chocolatey repo에 등록된 mingw-w64 10.2.0 버전에서 gdb.exe가 누락된 사항이 발견되었습니다.&lt;/p&gt;
&lt;p&gt;현 시점에서는 Chocolatey로 MinGW를 설치 시 다음과 같이 입력하여 이전 버전인 8.1.0 버전으로 설치하시기를 권장합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install mingw -y --version=8.1.0
&lt;/code&gt;&lt;/pre&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;mingw&#34; srcset=&#34;
               /vscode-cpp/mingw_hud2d42d6840e6382d3092f466b6f083f0_69601_4a0158719c3551a2d375ef1b2c35ad80.png 400w,
               /vscode-cpp/mingw_hud2d42d6840e6382d3092f466b6f083f0_69601_59651aa1a8ad4756dfd14517fcece68f.png 760w,
               /vscode-cpp/mingw_hud2d42d6840e6382d3092f466b6f083f0_69601_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/mingw_hud2d42d6840e6382d3092f466b6f083f0_69601_4a0158719c3551a2d375ef1b2c35ad80.png&#34;
               width=&#34;760&#34;
               height=&#34;483&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다음 명령어를 통해 설치가 잘 되었는지 확인해보세요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;gcc --version
gdb --version
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Chocolatey 특성 상, 설치한 직후에는 &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;gdb&lt;/code&gt; 명령어를 인식하지 못할 수 있습니다.&lt;/p&gt;
&lt;p&gt;PowerShell을 껐다 켜거나, &lt;code&gt;refreshenv&lt;/code&gt; 명령어를 활용하세요.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;gccgdb_version_windows&#34; srcset=&#34;
               /vscode-cpp/gccgdb_version_windows_hue37915aa608bae256dd62c3c3068b260_49032_83dff4d7e4d41ad76cb8eed09febf5a3.png 400w,
               /vscode-cpp/gccgdb_version_windows_hue37915aa608bae256dd62c3c3068b260_49032_42175046d4dad78409fa82d381a5d8ac.png 760w,
               /vscode-cpp/gccgdb_version_windows_hue37915aa608bae256dd62c3c3068b260_49032_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/gccgdb_version_windows_hue37915aa608bae256dd62c3c3068b260_49032_83dff4d7e4d41ad76cb8eed09febf5a3.png&#34;
               width=&#34;760&#34;
               height=&#34;437&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;linux를-이용하는-경우&#34;&gt;Linux를 이용하는 경우&lt;/h3&gt;
&lt;p&gt;대부분의 Linux 배포판은 gcc&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;와 gdb&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;를 기본적으로 제공합니다.&lt;/p&gt;
&lt;p&gt;터미널을 켜서 다음 명령어를 입력했을 때 버전 정보가 정상적으로 출력되면 설치되어 있는 것입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc --version
gdb --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;gccgdb_version_linux&#34; srcset=&#34;
               /vscode-cpp/gccgdb_version_linux_hu31f77190b1307c8e73ffe9e2ec5e112c_23718_7755913bd0b1090e437853543509463f.png 400w,
               /vscode-cpp/gccgdb_version_linux_hu31f77190b1307c8e73ffe9e2ec5e112c_23718_4101639bc24c33d29948d3a304ae3381.png 760w,
               /vscode-cpp/gccgdb_version_linux_hu31f77190b1307c8e73ffe9e2ec5e112c_23718_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/gccgdb_version_linux_hu31f77190b1307c8e73ffe9e2ec5e112c_23718_7755913bd0b1090e437853543509463f.png&#34;
               width=&#34;707&#34;
               height=&#34;248&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;만약 설치가 되어있지 않다면, 패키지 관리자인 &lt;code&gt;apt&lt;/code&gt;나 &lt;code&gt;yum&lt;/code&gt;을 이용하여 설치하시기를 권장합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extension-설치&#34;&gt;Extension 설치&lt;/h2&gt;
&lt;p&gt;이제 VSCode에서 extension을 설치할 차례입니다.&lt;/p&gt;
&lt;p&gt;VSCode를 켜고 extension 탭으로 간 뒤 &amp;ldquo;&lt;strong&gt;c&lt;/strong&gt;&amp;ldquo;를 검색하세요. 맨 위에 C/C++ extension이 뜰 것입니다. Install 버튼을 눌러 설치합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;extension_c&#34; srcset=&#34;
               /vscode-cpp/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_6effe4ec295e401b02f8e8d25bd8cb0e.png 400w,
               /vscode-cpp/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_d7e0729455c36626dfc5123f0d498ede.png 760w,
               /vscode-cpp/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/extension_c_hu115aacab3740fa41f6835fd9d1b9086c_54413_6effe4ec295e401b02f8e8d25bd8cb0e.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;테스트&#34;&gt;테스트&lt;/h2&gt;
&lt;p&gt;이제 제대로 설치가 되었는지 확인할 시간입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    경로에 &lt;strong&gt;한글&lt;/strong&gt;이 있으면 제대로 동작하지 않습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;코드-작성&#34;&gt;코드 작성&lt;/h3&gt;
&lt;p&gt;Explorer 탭으로 이동하여 적당한 경로에 &lt;b&gt;main.cpp&lt;/b&gt;라는 새 파일을 만들어주고 다음과 같이 작성하도록 하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

int main(int argc, char **)
{
    std::cout &amp;lt;&amp;lt; &amp;quot;Hello, World!&amp;quot; &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;argc: &amp;quot; &amp;lt;&amp;lt; argc &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;codewriting&#34; srcset=&#34;
               /vscode-cpp/codewriting_hu5265b2e32d201fa8dc1d8701db5e3ce3_68027_a5033151e66c2286b7236c5783188134.png 400w,
               /vscode-cpp/codewriting_hu5265b2e32d201fa8dc1d8701db5e3ce3_68027_0ab0e51abc4a2b55beedf2dbf77c7bad.png 760w,
               /vscode-cpp/codewriting_hu5265b2e32d201fa8dc1d8701db5e3ce3_68027_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/codewriting_hu5265b2e32d201fa8dc1d8701db5e3ce3_68027_a5033151e66c2286b7236c5783188134.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 실행하시면 됩니다. 동일 폴더 내에 &lt;b&gt;.vscode&lt;/b&gt;라는 폴더가 생기고, 그 안에 컴파일 옵션에 관한 설정이 적힌 &lt;code&gt;.json&lt;/code&gt; 파일이 자동으로 생성될 것입니다.&lt;/p&gt;
&lt;p&gt;이후 아래쪽의 &lt;strong&gt;TERMINAL&lt;/strong&gt; 탭을 확인하시면, 우리가 작성한대로 두 줄이 화면에 출력되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;C++이 아닌 &lt;strong&gt;C 언어&lt;/strong&gt;로 작성하였다면, 세 번째 그림에서 g++.exe대신 &lt;b&gt;gcc.exe를 선택&lt;/b&gt;하시면 됩니다.&lt;/p&gt;
&lt;p&gt;아마 gcc.exe만 선택 가능하게끔 뜰 것입니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run1&#34; srcset=&#34;
               /vscode-cpp/run1_hu52a9019c1184d2b9fd9aab9c9d8c95e4_58870_a4ec28ad4af3a5047c00231403a0e7e9.png 400w,
               /vscode-cpp/run1_hu52a9019c1184d2b9fd9aab9c9d8c95e4_58870_a5ad4c2e597002ee2ef1f7428efc0a80.png 760w,
               /vscode-cpp/run1_hu52a9019c1184d2b9fd9aab9c9d8c95e4_58870_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/run1_hu52a9019c1184d2b9fd9aab9c9d8c95e4_58870_a4ec28ad4af3a5047c00231403a0e7e9.png&#34;
               width=&#34;760&#34;
               height=&#34;569&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run2&#34; srcset=&#34;
               /vscode-cpp/run2_hu14425b5936a3daeb9dc20b354bde779a_43119_51d7dca2fb20f88b543e62ce6c7bf337.png 400w,
               /vscode-cpp/run2_hu14425b5936a3daeb9dc20b354bde779a_43119_aba5919f52ebb7228451c1367ae30f85.png 760w,
               /vscode-cpp/run2_hu14425b5936a3daeb9dc20b354bde779a_43119_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/run2_hu14425b5936a3daeb9dc20b354bde779a_43119_51d7dca2fb20f88b543e62ce6c7bf337.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run3&#34; srcset=&#34;
               /vscode-cpp/run3_hub8f211d0c8f8ef855494fea902468013_55193_222d1f1cfe70ebceb10d717aaff40b1e.png 400w,
               /vscode-cpp/run3_hub8f211d0c8f8ef855494fea902468013_55193_e28eb11faef440a2c60c8db33010d87a.png 760w,
               /vscode-cpp/run3_hub8f211d0c8f8ef855494fea902468013_55193_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/run3_hub8f211d0c8f8ef855494fea902468013_55193_222d1f1cfe70ebceb10d717aaff40b1e.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run4&#34; srcset=&#34;
               /vscode-cpp/run4_hue8fd9039d89c9c975cf91efada4036df_114331_633eef85eeb6eaf9f80e8e81717854e7.png 400w,
               /vscode-cpp/run4_hue8fd9039d89c9c975cf91efada4036df_114331_82f36961dec929f382c26db5e7fb7b41.png 760w,
               /vscode-cpp/run4_hue8fd9039d89c9c975cf91efada4036df_114331_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/run4_hue8fd9039d89c9c975cf91efada4036df_114331_633eef85eeb6eaf9f80e8e81717854e7.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;실행을 하실 때, &lt;b&gt;main.cpp가 활성화된 상태에서 실행&lt;/b&gt;하세요.&lt;/p&gt;
&lt;p&gt;이 방법을 통해 자동으로 만들어진 launch.json 파일은 &lt;b&gt;&amp;ldquo;활성화된 파일의 이름.exe&amp;rdquo;&lt;/b&gt;를 실행합니다.&lt;/p&gt;
&lt;p&gt;예를들어 launch.json을 보면서 실행 버튼을 누르면, launch.exe를 찾아 실행하려고 하기 때문에 에러가 발생합니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;디버깅&#34;&gt;디버깅&lt;/h3&gt;
&lt;p&gt;다음 그림과 같이 진행하여 디버깅도 가능합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug1&#34; srcset=&#34;
               /vscode-cpp/debug1_huee9e2a433bb92ff56aea0e3873d5958d_74913_f8f6163795764a377baf486c395e79d5.png 400w,
               /vscode-cpp/debug1_huee9e2a433bb92ff56aea0e3873d5958d_74913_4a13082008f3fa5b3677afc6c55a95fb.png 760w,
               /vscode-cpp/debug1_huee9e2a433bb92ff56aea0e3873d5958d_74913_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/debug1_huee9e2a433bb92ff56aea0e3873d5958d_74913_f8f6163795764a377baf486c395e79d5.png&#34;
               width=&#34;760&#34;
               height=&#34;572&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug2&#34; srcset=&#34;
               /vscode-cpp/debug2_hua50440bfff40a6da8f2d0888a89a4c65_86088_8082201454e6d7adf8e0275a65760b4b.png 400w,
               /vscode-cpp/debug2_hua50440bfff40a6da8f2d0888a89a4c65_86088_6e19ee49020d9d703822d2f3e95a209a.png 760w,
               /vscode-cpp/debug2_hua50440bfff40a6da8f2d0888a89a4c65_86088_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/debug2_hua50440bfff40a6da8f2d0888a89a4c65_86088_8082201454e6d7adf8e0275a65760b4b.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug3&#34; srcset=&#34;
               /vscode-cpp/debug3_hu75ddfbdaf40c5f8341057da80ea90c3b_78867_7c673a3e3775560aebe55755d1d3cf4d.png 400w,
               /vscode-cpp/debug3_hu75ddfbdaf40c5f8341057da80ea90c3b_78867_3594c91c136da35faa9869353eb8f325.png 760w,
               /vscode-cpp/debug3_hu75ddfbdaf40c5f8341057da80ea90c3b_78867_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/debug3_hu75ddfbdaf40c5f8341057da80ea90c3b_78867_7c673a3e3775560aebe55755d1d3cf4d.png&#34;
               width=&#34;760&#34;
               height=&#34;572&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug4&#34; srcset=&#34;
               /vscode-cpp/debug4_huee020204c52e58149d7df10f808c06f2_80913_194ef73fe7ad9214105c6e61f9f5d468.png 400w,
               /vscode-cpp/debug4_huee020204c52e58149d7df10f808c06f2_80913_cbd4f38336d2b2e47632a78886e9598a.png 760w,
               /vscode-cpp/debug4_huee020204c52e58149d7df10f808c06f2_80913_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/debug4_huee020204c52e58149d7df10f808c06f2_80913_194ef73fe7ad9214105c6e61f9f5d468.png&#34;
               width=&#34;760&#34;
               height=&#34;569&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;debug5&#34; srcset=&#34;
               /vscode-cpp/debug5_hu212bbef05a0c2737d6ce7389bf4327f6_62005_0c4b81f052bd1dc318e5282dee7396c9.png 400w,
               /vscode-cpp/debug5_hu212bbef05a0c2737d6ce7389bf4327f6_62005_cdc4d9c7e3ede44e1c23f05e3b37d6a9.png 760w,
               /vscode-cpp/debug5_hu212bbef05a0c2737d6ce7389bf4327f6_62005_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/debug5_hu212bbef05a0c2737d6ce7389bf4327f6_62005_0c4b81f052bd1dc318e5282dee7396c9.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;command-line-argument-설정&#34;&gt;Command line argument 설정&lt;/h3&gt;
&lt;p&gt;실행하거나 디버깅할 때, command line argument를 넘겨주도록 설정하고 싶을 때가 있습니다.&lt;/p&gt;
&lt;p&gt;이 부분은 아까 자동으로 만들어졌던 &lt;b&gt;launch.json&lt;/b&gt; 파일의 &lt;b&gt;args 값&lt;/b&gt;을 통해 설정합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;args1&#34; srcset=&#34;
               /vscode-cpp/args1_hu7f277c1f4935011f99e87d9e4a095153_86943_f1f0c25542760007db66132373fa41b6.png 400w,
               /vscode-cpp/args1_hu7f277c1f4935011f99e87d9e4a095153_86943_2b113fd69436ef12692e5f62acd18104.png 760w,
               /vscode-cpp/args1_hu7f277c1f4935011f99e87d9e4a095153_86943_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/args1_hu7f277c1f4935011f99e87d9e4a095153_86943_f1f0c25542760007db66132373fa41b6.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;args2&#34; srcset=&#34;
               /vscode-cpp/args2_hu5bc6b5ad26b7135c3411762cb190937b_93732_eda1308cdefe5b26629a2a19b79695d8.png 400w,
               /vscode-cpp/args2_hu5bc6b5ad26b7135c3411762cb190937b_93732_6afbd584d11344d7fe3b77dbf5529628.png 760w,
               /vscode-cpp/args2_hu5bc6b5ad26b7135c3411762cb190937b_93732_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/args2_hu5bc6b5ad26b7135c3411762cb190937b_93732_eda1308cdefe5b26629a2a19b79695d8.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;args3&#34; srcset=&#34;
               /vscode-cpp/args3_hub793b610b49b9b0002b9d7beb42a089a_69712_c5b24194fba8437dff5c4831ccfdb6b7.png 400w,
               /vscode-cpp/args3_hub793b610b49b9b0002b9d7beb42a089a_69712_df436a76155a523c2f7747a29b3176af.png 760w,
               /vscode-cpp/args3_hub793b610b49b9b0002b9d7beb42a089a_69712_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/args3_hub793b610b49b9b0002b9d7beb42a089a_69712_c5b24194fba8437dff5c4831ccfdb6b7.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;args4&#34; srcset=&#34;
               /vscode-cpp/args4_hu7ee3fb4b707b5e5725bd0a8797709d8f_65884_992be4acd52b0aa4d47f949a2f1dfc20.png 400w,
               /vscode-cpp/args4_hu7ee3fb4b707b5e5725bd0a8797709d8f_65884_6a30e4380661d5d3180d92bc0238f396.png 760w,
               /vscode-cpp/args4_hu7ee3fb4b707b5e5725bd0a8797709d8f_65884_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode-cpp/args4_hu7ee3fb4b707b5e5725bd0a8797709d8f_65884_992be4acd52b0aa4d47f949a2f1dfc20.png&#34;
               width=&#34;760&#34;
               height=&#34;620&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Minimalist GNU for Windows. 마이크로소프트 Windows로 포팅한 GNU 소프트웨어 도구 모음&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;GNU Compiler Collection. 혹은 그 중 하나인 GNU C Compiler. C 언어 컴파일러의 일종.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;GNU Debugger. C 언어 디버거의 일종.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Visual Studio Code 소개, 설치, 기본 세팅</title>
      <link>https://evandde.github.io/vscode/</link>
      <pubDate>Thu, 12 Nov 2020 11:22:31 +0900</pubDate>
      <guid>https://evandde.github.io/vscode/</guid>
      <description>&lt;p&gt;요즘 개발자 사이에서 인기있는 코딩 툴. &lt;strong&gt;Visual Studio Code&lt;/strong&gt;에 대해 살펴보고, 설치 및 기본 세팅 방법까지 알아봅니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vscode_logo&#34; srcset=&#34;
               /vscode/vscode_logo_hub58b0ad656b469a04cb691e21fc092d7_17189_e0226bcd87c6518e4ecfddf5de21624b.png 400w,
               /vscode/vscode_logo_hub58b0ad656b469a04cb691e21fc092d7_17189_1c0117b9250d6b39bd8ed26e7996540b.png 760w,
               /vscode/vscode_logo_hub58b0ad656b469a04cb691e21fc092d7_17189_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/vscode_logo_hub58b0ad656b469a04cb691e21fc092d7_17189_e0226bcd87c6518e4ecfddf5de21624b.png&#34;
               width=&#34;760&#34;
               height=&#34;380&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;공식 홈페이지: &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub: &lt;a href=&#34;https://github.com/Microsoft/vscode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/Microsoft/vscode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다운로드: &lt;a href=&#34;https://code.visualstudio.com/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://code.visualstudio.com/download&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows의 경우 chocolatey를 통해서도 설치 가능&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install vscode -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;설치는 그냥 &lt;strong&gt;다음&lt;/strong&gt;버튼만 눌러서 진행해도 괜찮음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[CTRL]+[SHIFT]+[X] 누르면 Extension 탭이 열림. 원하는 extension을 설치하여 이용.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 extension 보기(Marketplace): &lt;a href=&#34;https://marketplace.visualstudio.com/vscode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://marketplace.visualstudio.com/vscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    VSCode는 컴파일러, 디버거 등을 내장하고 있지 않습니다. 사용하는 언어에 맞추어 따로 설치하고 연동하는 방식으로 사용하셔야 합니다. 이에 관한 자세한 내용은 본 블로그의 &lt;a href=&#34;https://evandde.github.io/categories/vscode/&#34;&gt;VSCode 카테고리&lt;/a&gt; 글을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;visual-studio-code-소개&#34;&gt;Visual Studio Code 소개&lt;/h2&gt;
&lt;p&gt;Visual Studio Code는 &lt;strong&gt;마이크로소프트&lt;/strong&gt;에서 개발하여 2016년에 출시한 &lt;del&gt;고급 메모장&lt;/del&gt;&lt;strong&gt;IDE&lt;/strong&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;입니다. 줄여서 &lt;strong&gt;VSCode&lt;/strong&gt; 혹은 &lt;strong&gt;VSC&lt;/strong&gt;라고도 부릅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;원문&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code는 가벼우면서도 강력한 소스 코드 편집기로, Windows, macOS, Linux에서 모두 사용 가능합니다. VSCode는 기본적으로 JavaScript, TypeScript, Node.js를 지원하며, 다양한 확장(extension)을 통해 다른 언어(C, C++, C#, Java, Python, PHP, Go 등)나 런타임(.NET, Unity 등)을 지원하도록 설정할 수 있습니다. 이 &lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/introvideos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;소개영상&lt;/a&gt;(영어)을 통해 VSCode로의 여행을 시작해보세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;저는 이전에 Visual Studio, PyCharm, Eclipse, QtCreator, Vim+Plugin 등의 IDE를 사용해보았습니다만, 올 초 즈음부터 VSCode로 정착했습니다. 그 이유는 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가볍다.&lt;/li&gt;
&lt;li&gt;무료다.&lt;/li&gt;
&lt;li&gt;Windows와 Linux에서 모두 사용 가능하다.&lt;/li&gt;
&lt;li&gt;WSL과 같은 원격 환경에서의 개발을 지원한다.&lt;/li&gt;
&lt;li&gt;내가 사용하는 여러 종류의 프로그래밍 언어를 하나의 IDE로 관리할 수 있다. (C++, Python, Go, Markdown, HTML, CSS, JavaScript)&lt;/li&gt;
&lt;li&gt;설정해놓은 환경이 동기화되어, 여러 대의 컴퓨터를 사용해도 동일한 환경에서 작업할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;del&gt;뭔가 프로그래밍 고수가 된 것 같은 착각이 든다&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vscode-설치하기&#34;&gt;VSCode 설치하기&lt;/h2&gt;
&lt;p&gt;다음 방법 중 편한 방법을 선택하여 진행하시면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공식 홈페이지에서 설치 프로그램을 다운받아 설치&lt;/li&gt;
&lt;li&gt;Chocolatey 프로그램을 통해 설치(Windows에서만 가능)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;설치-프로그램-다운받아-설치&#34;&gt;설치 프로그램 다운받아 설치&lt;/h3&gt;
&lt;h4 id=&#34;설치파일-다운로드&#34;&gt;설치파일 다운로드&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;공식 홈페이지&lt;/a&gt; 첫화면에 있는 다운로드 버튼을 누르면 설치 프로그램이 다운로드 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;mainpage_download&#34; srcset=&#34;
               /vscode/mainpage_download_hufc464033e495f88261d6484504eb9237_371107_b9cb34c2f83e07af7eabd65c08e0d5e2.png 400w,
               /vscode/mainpage_download_hufc464033e495f88261d6484504eb9237_371107_d7547492aba88799ef40d20c0cc49ce8.png 760w,
               /vscode/mainpage_download_hufc464033e495f88261d6484504eb9237_371107_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/mainpage_download_hufc464033e495f88261d6484504eb9237_371107_b9cb34c2f83e07af7eabd65c08e0d5e2.png&#34;
               width=&#34;732&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;혹은, &lt;a href=&#34;https://code.visualstudio.com/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;다운로드 페이지&lt;/a&gt;를 이용하셔도 좋습니다.&lt;/p&gt;
&lt;h4 id=&#34;설치파일-실행&#34;&gt;설치파일 실행&lt;/h4&gt;
&lt;p&gt;User installer를 받으셨거나, 공식 홈페이지 첫화면에서 다운로드 받으신 경우에는, 설치 프로그램을 실행시키면 다음과 같은 경고가 뜰 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이 설치파일은 관리자 권한으로 실행되지 않습니다. 시스템을 이용하는 모든 사용자가 VSCode를 쓰고자 한다면, System Installer를 다운받아 설치하세요. 그냥 진행해도 괜찮습니까?&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;install_warning&#34; srcset=&#34;
               /vscode/install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_a3377eb22fdf35f25d3fdf4ca0d9717c.png 400w,
               /vscode/install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_43ec44130e4f67adc7cb207716e8b696.png 760w,
               /vscode/install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_a3377eb22fdf35f25d3fdf4ca0d9717c.png&#34;
               width=&#34;413&#34;
               height=&#34;185&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;일반적인 개인사용자 분들은 그냥 확인을 눌러 진행&lt;/strong&gt;하시면 됩니다. 여러개의 Windows 계정이 존재하고 이 모든 계정에서 사용하게끔 하고 싶으신 분들의 경우에는, System Installer를 다운받아서 설치를 진행하시기 바랍니다.&lt;/p&gt;
&lt;p&gt;그 이후에는 경로 설정 등의 내용이므로 특별한 이유가 없다면 그냥 &lt;strong&gt;다음&lt;/strong&gt;버튼만 눌러주시면 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;chocolatey를-통해-설치windows&#34;&gt;Chocolatey를 통해 설치(Windows)&lt;/h3&gt;
&lt;p&gt;Chocolatey를 이용하신다면, 다음 명령어를 통해 간단하게 설치하실 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install vscode -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;install_choco&#34; srcset=&#34;
               /vscode/install_choco_hu00848fd8df6252c4dbc7ff29e5fcba54_71153_0bb805bbd30908215e1000aefcb210cb.png 400w,
               /vscode/install_choco_hu00848fd8df6252c4dbc7ff29e5fcba54_71153_6a4ba4498c282f06239b7fce97ac54fc.png 760w,
               /vscode/install_choco_hu00848fd8df6252c4dbc7ff29e5fcba54_71153_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/install_choco_hu00848fd8df6252c4dbc7ff29e5fcba54_71153_0bb805bbd30908215e1000aefcb210cb.png&#34;
               width=&#34;760&#34;
               height=&#34;477&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Chocolatey를 설치하고 이용하는 방법이 궁금하다면, &lt;a href=&#34;https://evandde.github.io/chocolatey/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;첫-화면-살펴보기&#34;&gt;첫 화면 살펴보기&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;vscode_fisrtview&#34; srcset=&#34;
               /vscode/vscode_fisrtview_hu98a461d620bb1c97124d8eca02f3ea0f_240766_7c2a00c7e62ad95a401192d9b77b7cf1.png 400w,
               /vscode/vscode_fisrtview_hu98a461d620bb1c97124d8eca02f3ea0f_240766_2f794fb88904ea371d26e0394ae87511.png 760w,
               /vscode/vscode_fisrtview_hu98a461d620bb1c97124d8eca02f3ea0f_240766_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/vscode_fisrtview_hu98a461d620bb1c97124d8eca02f3ea0f_240766_7c2a00c7e62ad95a401192d9b77b7cf1.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extension-살펴보기&#34;&gt;Extension 살펴보기&lt;/h2&gt;
&lt;p&gt;VSCode에는 정말 다양한 extension이 존재하며, 계속 개발되고 있습니다.&lt;/p&gt;
&lt;p&gt;현재 제공하는 모든 extension은 &lt;a href=&#34;https://marketplace.visualstudio.com/vscode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;marketplace 페이지&lt;/a&gt;에서 살펴볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 우선 간단하게 언어 설정이나 테마 설정과 같은 기본적인 extension을 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;language-pack-extension&#34;&gt;Language pack extension&lt;/h3&gt;
&lt;p&gt;VSCode는 영어뿐만 아니라, &lt;strong&gt;한국어&lt;/strong&gt;를 비롯하여, 중국어, 일본어, 스페인어, 러시아어, 독일어,&amp;hellip; 등 다양한 언어를 지원합니다. Microsoft에서 직접 제공하는 언어 팩이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;Language pack&lt;/strong&gt;으로 검색하시면 다양한 언어 팩을 확인할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;한국어 팩을 설치하시려면, &lt;strong&gt;korean을 검색&lt;/strong&gt;하여 나오는 &lt;strong&gt;Korean Language Pack for Visual Studio Code&lt;/strong&gt;를 설치하면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;kopack&#34; srcset=&#34;
               /vscode/kopack_hua27a478d535d002cf8cb6de84ac364c9_87533_63bc2a2475a67d9c48cb297cbf074208.png 400w,
               /vscode/kopack_hua27a478d535d002cf8cb6de84ac364c9_87533_72e1323c580a8c7e891fb2e601852b31.png 760w,
               /vscode/kopack_hua27a478d535d002cf8cb6de84ac364c9_87533_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/kopack_hua27a478d535d002cf8cb6de84ac364c9_87533_63bc2a2475a67d9c48cb297cbf074208.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;설치는 금방 끝납니다.&lt;/p&gt;
&lt;p&gt;오른쪽 아래에 &lt;strong&gt;Restart Now 버튼&lt;/strong&gt;이 나타나면, 눌러서 VSCode를 재시작하시기 바랍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;kopack_restart&#34; srcset=&#34;
               /vscode/kopack_restart_hu16760a2b6cd9e5a92a05d802200e203a_8225_261c847b493d023035963d17185aec77.png 400w,
               /vscode/kopack_restart_hu16760a2b6cd9e5a92a05d802200e203a_8225_eb5b8739adae1fca9bd69f761b5ebf8a.png 760w,
               /vscode/kopack_restart_hu16760a2b6cd9e5a92a05d802200e203a_8225_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/kopack_restart_hu16760a2b6cd9e5a92a05d802200e203a_8225_261c847b493d023035963d17185aec77.png&#34;
               width=&#34;503&#34;
               height=&#34;195&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;(개인적으로는 에러 검색 등의 용이성 때문에, 그냥 영어모드로 이용하고 있습니다)&lt;/p&gt;
&lt;h3 id=&#34;themeicon-extension&#34;&gt;Theme/icon extension&lt;/h3&gt;
&lt;p&gt;Marketplace에 보면 테마나 아이콘도 정말 다양하게 있습니다. 다음 그림과 같이 필터를 &lt;strong&gt;Themes 카테고리&lt;/strong&gt;로 설정하시면, 테마/아이콘에 관련된 extension들을 살펴볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;테마/아이콘 변경은 왼쪽 아래의 설정아이콘을 통해 가능합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;theme&#34; srcset=&#34;
               /vscode/theme_huf34cb39c24e079bb9844e8100caef5f8_66743_0e5912b658176b4b21ab1ba9e2db7d1c.png 400w,
               /vscode/theme_huf34cb39c24e079bb9844e8100caef5f8_66743_3f92e44f7ad57b5bdb5e6cdb6c9f8c4c.png 760w,
               /vscode/theme_huf34cb39c24e079bb9844e8100caef5f8_66743_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/theme_huf34cb39c24e079bb9844e8100caef5f8_66743_0e5912b658176b4b21ab1ba9e2db7d1c.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;theme_change&#34; srcset=&#34;
               /vscode/theme_change_hu52c14d4ac40959c65407d8137fc30c37_190741_f54be95f58cf14e1f88c796770fc4ec0.png 400w,
               /vscode/theme_change_hu52c14d4ac40959c65407d8137fc30c37_190741_2455ab8c80980b167a9c5ffc904a20bd.png 760w,
               /vscode/theme_change_hu52c14d4ac40959c65407d8137fc30c37_190741_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/theme_change_hu52c14d4ac40959c65407d8137fc30c37_190741_f54be95f58cf14e1f88c796770fc4ec0.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;extension설정-동기화하기&#34;&gt;Extension/설정 동기화하기&lt;/h2&gt;
&lt;p&gt;VSCode는 설치한 Extension목록, 설정값 등을 다른 컴퓨터에서도 동기화하여 동일하게 사용할 수 있도록, &lt;strong&gt;Sync 기능을 제공&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;p&gt;동기화를 위해서는 &lt;strong&gt;Microsoft 계정, GitHub 계정 둘 중 하나가 필요&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;h3 id=&#34;sync-켜기&#34;&gt;Sync 켜기&lt;/h3&gt;
&lt;p&gt;왼쪽 아래의 &lt;strong&gt;계정 아이콘&lt;/strong&gt;을 클릭하여 Sync 기능을 활성화할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;sync&#34; srcset=&#34;
               /vscode/sync_hub4123ab2c6c6b674280e527321382fae_35519_73d0e13e6e4d18c2cd576906c187765e.png 400w,
               /vscode/sync_hub4123ab2c6c6b674280e527321382fae_35519_aa3dcb5ed722b38704913f62c90723cf.png 760w,
               /vscode/sync_hub4123ab2c6c6b674280e527321382fae_35519_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/sync_hub4123ab2c6c6b674280e527321382fae_35519_73d0e13e6e4d18c2cd576906c187765e.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;작성일(2020년 11월) 기준, 다음과 같은 경고가 뜨네요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;동기화 기능은 아직 준비단계입니다. 사용하기 전에 관련 문서를 읽어보세요.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;sync_warning&#34; srcset=&#34;
               /vscode/sync_warning_hu0906452124b75270b823b99e9d105aa8_5079_31b6a5e8acd197c320da3d746e033e07.png 400w,
               /vscode/sync_warning_hu0906452124b75270b823b99e9d105aa8_5079_72d5e19132c746702a6b2760101c4001.png 760w,
               /vscode/sync_warning_hu0906452124b75270b823b99e9d105aa8_5079_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/sync_warning_hu0906452124b75270b823b99e9d105aa8_5079_31b6a5e8acd197c320da3d746e033e07.png&#34;
               width=&#34;558&#34;
               height=&#34;128&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;아무도 안읽어보시겠죠&lt;/del&gt; &lt;strong&gt;Turn On&lt;/strong&gt;을 눌러 넘어갑니다.&lt;/p&gt;
&lt;p&gt;그러면 창 위에 다음 그림과 같이 동기화할 항목을 선택하는 내용과 함께 &lt;strong&gt;Sign in &amp;amp; Turn On&lt;/strong&gt; 버튼이 뜹니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;sync1&#34; srcset=&#34;
               /vscode/sync1_hu09ced26c7c6b9e428a9ae1ae4be158e3_13083_89fc7dcfe05569d86ea108d39fa1238d.png 400w,
               /vscode/sync1_hu09ced26c7c6b9e428a9ae1ae4be158e3_13083_46180ed2c9fbb95e1dc09ee0fcce697c.png 760w,
               /vscode/sync1_hu09ced26c7c6b9e428a9ae1ae4be158e3_13083_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/sync1_hu09ced26c7c6b9e428a9ae1ae4be158e3_13083_89fc7dcfe05569d86ea108d39fa1238d.png&#34;
               width=&#34;652&#34;
               height=&#34;233&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sign in &amp;amp; Turn On&lt;/strong&gt; 버튼을 누르면, 계정 종류를 선택하는 항목이 뜹니다. 여기서 &lt;strong&gt;Microsoft로 로그인&lt;/strong&gt;이나 &lt;strong&gt;GitHub으로 로그인&lt;/strong&gt; 중 편하신 쪽으로 선택하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;sync2&#34; srcset=&#34;
               /vscode/sync2_hu0b968b7f7bc51aec80fc133399e9f3d2_7037_be493f4a2dc1bb6735fce6687bb7a3a4.png 400w,
               /vscode/sync2_hu0b968b7f7bc51aec80fc133399e9f3d2_7037_7a32e15688ad06d8557c092a5eb4d73a.png 760w,
               /vscode/sync2_hu0b968b7f7bc51aec80fc133399e9f3d2_7037_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/vscode/sync2_hu0b968b7f7bc51aec80fc133399e9f3d2_7037_be493f4a2dc1bb6735fce6687bb7a3a4.png&#34;
               width=&#34;642&#34;
               height=&#34;165&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;GitHub 계정으로 로그인하시는 경우에는, GitHub과 VSCode 연동을 승인하는 페이지가 뜹니다.&lt;/p&gt;
&lt;p&gt;다음과 같은 경고창이 뜨면 &lt;strong&gt;Open&lt;/strong&gt;을 눌러 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sync_github.png&#34; alt=&#34;sync_github&#34;&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;통합 개발 환경(Integrated Development Environment). 프로젝트 관리, 소스코드 편집, 컴파일, 디버그, 바이너리 배포 등, 개발에 필요한 여러 기능을 한데 묶어놓은 프로그램.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Windows 10 타임라인에서 활동 기록 뜨지 않게 하는 법</title>
      <link>https://evandde.github.io/remove-activity-history/</link>
      <pubDate>Thu, 12 Nov 2020 11:01:34 +0900</pubDate>
      <guid>https://evandde.github.io/remove-activity-history/</guid>
      <description>&lt;p&gt;이 글에서는 [WIN]+[TAB]키를 눌러 데스크톱 목록을 볼 때, 아래쪽에 타임라인이라는 이름으로 나타나는 활동 기록이 뜨지 않도록 없애는 방법을 알아보고자 합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;activityhistory&#34; srcset=&#34;
               /remove-activity-history/activityhistory_hu6c7127ef64e11e0d4b33d7b3e5e0516d_2721993_c314d44e5852df194c69b604dbfcd204.png 400w,
               /remove-activity-history/activityhistory_hu6c7127ef64e11e0d4b33d7b3e5e0516d_2721993_2c54c1d5682725df4e4594b7b0a6084b.png 760w,
               /remove-activity-history/activityhistory_hu6c7127ef64e11e0d4b33d7b3e5e0516d_2721993_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/remove-activity-history/activityhistory_hu6c7127ef64e11e0d4b33d7b3e5e0516d_2721993_c314d44e5852df194c69b604dbfcd204.png&#34;
               width=&#34;760&#34;
               height=&#34;409&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;해결방법&#34;&gt;해결방법&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;[WIN]+[I]를 눌러, &lt;strong&gt;Windows 설정&lt;/strong&gt; 창을 엽니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;step1&#34; srcset=&#34;
               /remove-activity-history/step1_hubc09b5e5b45ebe0e6367e06cbbd22f6e_27288_cb2f46f5173535b507a310fa985ff4f5.png 400w,
               /remove-activity-history/step1_hubc09b5e5b45ebe0e6367e06cbbd22f6e_27288_315ecf754dde28affb86577282b8c074.png 760w,
               /remove-activity-history/step1_hubc09b5e5b45ebe0e6367e06cbbd22f6e_27288_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/remove-activity-history/step1_hubc09b5e5b45ebe0e6367e06cbbd22f6e_27288_cb2f46f5173535b507a310fa985ff4f5.png&#34;
               width=&#34;760&#34;
               height=&#34;588&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;개인 정보&lt;/strong&gt;에 들어갑니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;step2&#34; srcset=&#34;
               /remove-activity-history/step2_hu39f9253d5e399196892cfb0d4c4fe6f2_37305_2764535d3419154d58366deb5f30a2c0.png 400w,
               /remove-activity-history/step2_hu39f9253d5e399196892cfb0d4c4fe6f2_37305_e7abea642bdcca27c623e7c4f9f25133.png 760w,
               /remove-activity-history/step2_hu39f9253d5e399196892cfb0d4c4fe6f2_37305_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/remove-activity-history/step2_hu39f9253d5e399196892cfb0d4c4fe6f2_37305_2764535d3419154d58366deb5f30a2c0.png&#34;
               width=&#34;760&#34;
               height=&#34;588&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;왼쪽 탭 중 &lt;strong&gt;활동 기록&lt;/strong&gt;에 들어갑니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;step3&#34; srcset=&#34;
               /remove-activity-history/step3_hu563d7cd15cc199e04254788b975c776d_161109_f56ef915b27969d946a23fd405940744.png 400w,
               /remove-activity-history/step3_hu563d7cd15cc199e04254788b975c776d_161109_ee121892e8350510128e693e11c63994.png 760w,
               /remove-activity-history/step3_hu563d7cd15cc199e04254788b975c776d_161109_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/remove-activity-history/step3_hu563d7cd15cc199e04254788b975c776d_161109_f56ef915b27969d946a23fd405940744.png&#34;
               width=&#34;760&#34;
               height=&#34;588&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;다음 계정의 활동 표시&lt;/strong&gt; 부분에서 계정 옆의 스위치를 클릭하여 끔으로 바꾸어주고, 원한다면 밑의 &lt;strong&gt;활동 기록 지우기&lt;/strong&gt;에서 지우기 버튼을 클릭합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;step4&#34; srcset=&#34;
               /remove-activity-history/step4_huf4e908e2d27d66e02f15f37bd2f8ca6d_209717_7942ed98d7cd3df8b69acaca3682d1ab.png 400w,
               /remove-activity-history/step4_huf4e908e2d27d66e02f15f37bd2f8ca6d_209717_6022f708b51c20c545fe3a6642b8b35e.png 760w,
               /remove-activity-history/step4_huf4e908e2d27d66e02f15f37bd2f8ca6d_209717_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/remove-activity-history/step4_huf4e908e2d27d66e02f15f37bd2f8ca6d_209717_7942ed98d7cd3df8b69acaca3682d1ab.png&#34;
               width=&#34;760&#34;
               height=&#34;712&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;끝입니다! 설정사항은 따로 확인버튼 없이 자동으로 저장되니 그냥 창을 끄셔도 됩니다!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>작업표시줄, 시작메뉴에서 최근 항목 뜨지 않게 하는 법</title>
      <link>https://evandde.github.io/remove-recent-items/</link>
      <pubDate>Thu, 12 Nov 2020 09:54:54 +0900</pubDate>
      <guid>https://evandde.github.io/remove-recent-items/</guid>
      <description>&lt;p&gt;작업표시줄에서 아이콘을 우클릭할 때 뜨는 팝업이나, 시작메뉴의 점프목록 등에서 나타나는 &lt;strong&gt;최근 항목&lt;/strong&gt;에 대한 기록을 없애는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;recentitems&#34; srcset=&#34;
               /remove-recent-items/recentitems_hu62069d273f59eafcb533d1489183463b_155059_b82a2f9c61902689ac0b929c5288ad40.png 400w,
               /remove-recent-items/recentitems_hu62069d273f59eafcb533d1489183463b_155059_ad3fae7cf078d451475d19984979f417.png 760w,
               /remove-recent-items/recentitems_hu62069d273f59eafcb533d1489183463b_155059_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/remove-recent-items/recentitems_hu62069d273f59eafcb533d1489183463b_155059_b82a2f9c61902689ac0b929c5288ad40.png&#34;
               width=&#34;459&#34;
               height=&#34;300&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;해결방법&#34;&gt;해결방법&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;[WIN]+[I]를 눌러, &lt;strong&gt;Windows 설정&lt;/strong&gt; 창을 엽니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;step1&#34; srcset=&#34;
               /remove-recent-items/step1_hubc09b5e5b45ebe0e6367e06cbbd22f6e_27288_cb2f46f5173535b507a310fa985ff4f5.png 400w,
               /remove-recent-items/step1_hubc09b5e5b45ebe0e6367e06cbbd22f6e_27288_315ecf754dde28affb86577282b8c074.png 760w,
               /remove-recent-items/step1_hubc09b5e5b45ebe0e6367e06cbbd22f6e_27288_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/remove-recent-items/step1_hubc09b5e5b45ebe0e6367e06cbbd22f6e_27288_cb2f46f5173535b507a310fa985ff4f5.png&#34;
               width=&#34;760&#34;
               height=&#34;588&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;개인 설정&lt;/strong&gt;에 들어갑니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;step2&#34; srcset=&#34;
               /remove-recent-items/step2_hu1021b5179eb911b503dfe42d0d60102f_36812_4d4df3ae42c0fa02ba9d4746e83fe18c.png 400w,
               /remove-recent-items/step2_hu1021b5179eb911b503dfe42d0d60102f_36812_0295068b196412ce481e1fc96471d96e.png 760w,
               /remove-recent-items/step2_hu1021b5179eb911b503dfe42d0d60102f_36812_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/remove-recent-items/step2_hu1021b5179eb911b503dfe42d0d60102f_36812_4d4df3ae42c0fa02ba9d4746e83fe18c.png&#34;
               width=&#34;760&#34;
               height=&#34;588&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;왼쪽 탭 중 &lt;strong&gt;시작 탭&lt;/strong&gt;에 들어갑니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;step3&#34; srcset=&#34;
               /remove-recent-items/step3_hu6f0cb14a1812bfaec7b84bbba2423e52_344721_ef50967df28671ec2b5877a6a2f77b91.png 400w,
               /remove-recent-items/step3_hu6f0cb14a1812bfaec7b84bbba2423e52_344721_a0f1fdb646de4d992a3d60537c568ac8.png 760w,
               /remove-recent-items/step3_hu6f0cb14a1812bfaec7b84bbba2423e52_344721_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/remove-recent-items/step3_hu6f0cb14a1812bfaec7b84bbba2423e52_344721_ef50967df28671ec2b5877a6a2f77b91.png&#34;
               width=&#34;760&#34;
               height=&#34;588&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;시작 메뉴의 점프 목록, 작업 표시줄 또는 파일 탐색기 즐겨찾기에서 최근에 연 항목 표시&lt;/strong&gt;의 스위치를 클릭하여 끔으로 바꾸어줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;step4&#34; srcset=&#34;
               /remove-recent-items/step4_hu7a6bb26a76c0f625a44c18439306c193_156567_2a8d110dc26faa6acd5ffedf7911fb36.png 400w,
               /remove-recent-items/step4_hu7a6bb26a76c0f625a44c18439306c193_156567_47259439bee97601a10ac1d61543c54d.png 760w,
               /remove-recent-items/step4_hu7a6bb26a76c0f625a44c18439306c193_156567_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/remove-recent-items/step4_hu7a6bb26a76c0f625a44c18439306c193_156567_2a8d110dc26faa6acd5ffedf7911fb36.png&#34;
               width=&#34;760&#34;
               height=&#34;588&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;끝입니다! 설정사항은 따로 확인버튼 없이 자동으로 저장되니 그냥 창을 끄셔도 됩니다!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WSL에서 libQt5 관련 &#34;No such file or directory&#34; 에러 해결</title>
      <link>https://evandde.github.io/cannot-open-libqt5core/</link>
      <pubDate>Wed, 28 Oct 2020 13:00:27 +0900</pubDate>
      <guid>https://evandde.github.io/cannot-open-libqt5core/</guid>
      <description>&lt;p&gt;WSL로 설치된 Debian계열 리눅스에서 Qt5 기반 프로그램 실행 시, libQt5*.so 파일과 관련하여 발생하는 cannot access 오류를 해결하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;다음 명령어 입력. (&lt;code&gt;/usr/lib/x86_64-linux-gnu/libQt5Core.so.5&lt;/code&gt; 부분은 에러 문구에 나온 경로로 입력)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;버그-설명&#34;&gt;버그 설명&lt;/h2&gt;
&lt;p&gt;WSL로 설치된 Debian계열 리눅스에서 Qt5 기반 프로그램을 실행하려 할 때, Qt5 라이브러리를 apt 등을 통해 정상설치 하였음에도 불구하고, libQt5Core.so.5, libQt5Gui.so.5, &amp;hellip; 등 libQt5 관련 라이브러리에서 cannot access 오류가 발생하는 경우가 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;왜-발생하는가&#34;&gt;왜 발생하는가?&lt;/h2&gt;
&lt;p&gt;WSL로 설치된 Debian 계열 리눅스(Ubuntu 등)에 대해 &lt;a href=&#34;https://github.com/Microsoft/WSL/issues/3023&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;알려진 이슈&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;내용이 어려워서 저도 전부 이해하지는 못했으나, 대강의 흐름은 이렇습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qt5 tool에서 &lt;code&gt;lupdate&lt;/code&gt;를 실행할 때, (&lt;code&gt;LD_DEBUG=all ldd /usr/lib/libQt5Xml.so&lt;/code&gt; 등)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libQt5Core.so.5&lt;/code&gt;를 정상적인 라이브러리로 인식하지 않는 문제가 발생함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.note.ABI-tag&lt;/code&gt;를 호출하는 ELF section이 존재하는 한, 이 라이브러리는 &lt;code&gt;ld-linux&lt;/code&gt;링커로 직접 실행될 수는 있지만, 다른 shared object와 연동하여 링킹될 수 없음.&lt;/li&gt;
&lt;li&gt;이를 해결하려면 &lt;code&gt;strip --remove-section=.note.ABI-tag /usr/lib/libQt5Core.so.5&lt;/code&gt;와 같이 해당 라이브러리에서 ELF section을 제거해야 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;해결방법&#34;&gt;해결방법&lt;/h2&gt;
&lt;p&gt;위에 설명한 바와 같이, &lt;code&gt;strip&lt;/code&gt;이라는 명령어를 사용하여 해당 정보를 제거하면 됩니다.&lt;/p&gt;
&lt;p&gt;맨 끝에 &lt;code&gt;/usr/lib/x86_64-linux-gnu/libQt5Core.so.5&lt;/code&gt; 부분은 에러 문구에 출력된 라이브러리 경로를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/YosysHQ/nextpnr/issues/375&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/YosysHQ/nextpnr/issues/375&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://superuser.com/questions/1347723/arch-on-wsl-libqt5core-so-5-not-found-despite-being-installed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://superuser.com/questions/1347723/arch-on-wsl-libqt5core-so-5-not-found-despite-being-installed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/WSL/issues/3023&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/Microsoft/WSL/issues/3023&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WSL2에서 X window를 세팅하는 법</title>
      <link>https://evandde.github.io/wsl2-x/</link>
      <pubDate>Tue, 27 Oct 2020 15:21:57 +0900</pubDate>
      <guid>https://evandde.github.io/wsl2-x/</guid>
      <description>&lt;p&gt;이 글에서는 WSL2를 설치한 뒤 X window(GUI)를 사용하기 위한 세팅 방법을 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;WSL2&lt;/b&gt; 설치가 완료된 상태라고 가정합니다. 이에 관한 전반적인 내용은 &lt;a href=&#34;https://evandde.github.io/wsl/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;WSL을 설치하더라도, GUI 기반의 프로그램을 실행하려면 X window에 관한 추가적인 설정이 필요합니다. 이 글에서는 &lt;strong&gt;WSL2&lt;/strong&gt;에서 X window 사용을 위한 세팅 방법을 다룹니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.straightrunning.com/XmingNotes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xming 공식 홈페이지&lt;/a&gt;에서 Xming 다운로드&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Xming 설치 (다음만 누르며 설치해도 괜찮음)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Xming을 한 번 실행한 뒤 종료. (방화벽에 Xming 허용 규칙을 추가하기 위함)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Xming 단축아이콘을 만들고, &lt;b&gt;속성-대상&lt;/b&gt; 항목의 맨 끝에 한 칸을 띄고 &lt;code&gt;-ac&lt;/code&gt;를 이어서 적음
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    지우고 적는 것이 아니라, 맨 끝에 추가하는 것임에 주의하세요.
  &lt;/div&gt;
&lt;/div&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xming_option_ac&#34; srcset=&#34;
               /wsl2-x/xming_option_ac_hud4dba51e4165dfbe5b19911f91f31e5d_25487_919f36167e8921b6f00384cfc1d1209f.png 400w,
               /wsl2-x/xming_option_ac_hud4dba51e4165dfbe5b19911f91f31e5d_25487_556845d9c0b3b71e48842fd0cc5caa77.png 760w,
               /wsl2-x/xming_option_ac_hud4dba51e4165dfbe5b19911f91f31e5d_25487_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl2-x/xming_option_ac_hud4dba51e4165dfbe5b19911f91f31e5d_25487_919f36167e8921b6f00384cfc1d1209f.png&#34;
               width=&#34;421&#34;
               height=&#34;598&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows PowerShell을 &lt;b&gt;관리자 권한&lt;/b&gt;으로 실행한 뒤, 다음 명령어 입력 (에러가 뜬다면 본문 참고)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-NetFirewallRule -DisplayName &amp;quot;Xming X Server&amp;quot; -Enabled True -Profile Any
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WSL2에서 다음 명령어 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk &#39;&amp;quot;&#39;&amp;quot;&#39;{print $2}&#39;&amp;quot;&#39;&amp;quot;&#39;):0&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;x-window-x-server란&#34;&gt;X window, X server란&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;X window&lt;/strong&gt;는 UNIX 내지 Linux 계열의 운영체제에서 사용되는 GUI 환경 구현을 위한 시스템입니다. &lt;strong&gt;X11&lt;/strong&gt;이라고도 부르고, 줄여서 그냥 &lt;strong&gt;X&lt;/strong&gt;라고 부르기도 합니다. X window의 동작 원리는 간단하게 말하면 서버-클라이언트 구조입니다. &amp;ldquo;&lt;strong&gt;프로그램이 GUI 창을 띄워달라고 X server에 요청&lt;/strong&gt;&amp;ldquo;하면, &amp;ldquo;&lt;strong&gt;X server가 요청을 처리하여 GUI 창을 띄우는 것&lt;/strong&gt;&amp;ldquo;이죠.&lt;/p&gt;
&lt;p&gt;일반적으로 Linux 운영체제 내에서 X server 프로그램이 구동되도록 설정된 환경에서는 내부적으로 알아서 화면을 띄울 수 있습니다. 하지만, PuTTY&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;나 WSL과 같이 Windows에서 터미널만 켜서 이용하는 경우에는, 프로그램의 X window 실행 요청을 Windows가 받아서 처리해야 하기 때문에, &lt;strong&gt;Windows용 X server 프로그램&lt;/strong&gt;이 필요합니다. 대표적으로 &lt;strong&gt;Xming&lt;/strong&gt;, &lt;strong&gt;VcXsrv&lt;/strong&gt;, &lt;strong&gt;X410&lt;/strong&gt; 등이 있습니다.&lt;/p&gt;
&lt;p&gt;클라이언트가 보내는 X window 실행 요청은, Linux 상에서 &lt;code&gt;DISPLAY&lt;/code&gt;라고 정의된 환경변수의 값으로 전송됩니다. 즉, X server를 사용하려면, X server 프로그램이 요청을 받을 수 있는 일종의 사서함 주소를 확보한 뒤, 이 값을 &lt;code&gt;DISPLAY&lt;/code&gt;로 정의해주면 되는 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;xming-설치&#34;&gt;Xming 설치&lt;/h2&gt;
&lt;p&gt;이 글에서는 Xming이라는 프로그램을 이용할 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.straightrunning.com/XmingNotes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xming 공식 홈페이지&lt;/a&gt;에 들어가셔서 &lt;u&gt;Xming 설치파일을 받아오시기 바랍니다&lt;/u&gt;. (버전이 높은 것은 Xming 측에 돈을 기부하고 계정을 받아야 사용가능하니, 그 밑에 있는 낮은 버전을 받으시면 됩니다.)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xming_download&#34; srcset=&#34;
               /wsl2-x/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_e5985975304aa3ceb123b58cde707df8.png 400w,
               /wsl2-x/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_36e1f59157a5f369f428e8e3dac4458d.png 760w,
               /wsl2-x/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl2-x/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_e5985975304aa3ceb123b58cde707df8.png&#34;
               width=&#34;760&#34;
               height=&#34;514&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;설치는 그냥 다음 버튼만 누르며 하셔도 됩니다만, 나중의 편의를 위해 &lt;strong&gt;단축아이콘 하나만 만들어두도록 합니다&lt;/strong&gt;. 아래 그림에 보이는 내용이 떴을 때 &lt;strong&gt;Create a desktop icon for Xming에 체크&lt;/strong&gt;해주시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xming_install&#34; srcset=&#34;
               /wsl2-x/xming_install_huae6882490155567490c1a876368c14fe_25675_98ad75cb6e4b5cf095079d8030f5392e.png 400w,
               /wsl2-x/xming_install_huae6882490155567490c1a876368c14fe_25675_100b1cc69ac73144a347becc6ac6a8ab.png 760w,
               /wsl2-x/xming_install_huae6882490155567490c1a876368c14fe_25675_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl2-x/xming_install_huae6882490155567490c1a876368c14fe_25675_98ad75cb6e4b5cf095079d8030f5392e.png&#34;
               width=&#34;499&#34;
               height=&#34;387&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Xming이 켜져 있는지의 여부는, 작업표시줄 오른쪽의 트레이아이콘을 확인하시면 알 수 있습니다. 트레이아이콘 중 X모양의 아이콘이 있다면 켜져있는 것입니다. 종료하고자 할 때에는, &lt;strong&gt;트레이아이콘을 우클릭&lt;/strong&gt;하고 &lt;strong&gt;Exit&lt;/strong&gt;를 눌러주시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xming_running&#34; srcset=&#34;
               /wsl2-x/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_fdf8f270899a5f07d2f8e873ec6e5aa4.png 400w,
               /wsl2-x/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_25fafa912564ab70957f284af9aaa48f.png 760w,
               /wsl2-x/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl2-x/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_fdf8f270899a5f07d2f8e873ec6e5aa4.png&#34;
               width=&#34;363&#34;
               height=&#34;40&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wsl2와-x-server-연동의-어려움&#34;&gt;WSL2와 X server 연동의 어려움&lt;/h2&gt;
&lt;p&gt;WSL2에서 X server를 연동하는 경우는 WSL1에서와 사뭇 다릅니다.&lt;/p&gt;
&lt;p&gt;WSL1이 Windows와 동일한 네트워크를 사용했던 것과 달리, WSL2는 Windows 10 내에서 &lt;u&gt;별도의 WSL2 전용 네트워크를 사용&lt;/u&gt;하고 있기 때문입니다.&lt;/p&gt;
&lt;p&gt;즉, WSL2와 Windows 10의 주소가 다르기 때문에, &lt;strong&gt;WSL2에서 자기자신(localhost)에 X 요청을 보내게 되면 Window로 그 요청이 도달하지 못하는 것&lt;/strong&gt;이지요.&lt;/p&gt;
&lt;p&gt;우리는 이 문제를 해결하기 위해 다음의 과정을 거쳐야 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Windows에서 실행한 X server 프로그램(Xming)에서 외부 IP로부터 들어오는 요청을 허용하도록 설정&lt;/li&gt;
&lt;li&gt;Windows 방화벽에서 WSL2의 요청을 허용하도록 설정&lt;/li&gt;
&lt;li&gt;WSL2에서 Windows의 주소를 획득하고, 이를 &lt;code&gt;DISPLAY&lt;/code&gt; 환경변수로 지정&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wsl2와-xming-연동&#34;&gt;WSL2와 Xming 연동&lt;/h2&gt;
&lt;h3 id=&#34;xming에서-외부-ip로부터의-요청을-허용하도록-설정&#34;&gt;Xming에서 외부 IP로부터의 요청을 허용하도록 설정&lt;/h3&gt;
&lt;p&gt;Xming은 기본적으로 자기자신(localhost)으로부터 들어온 요청만을 받아들이고, 외부 IP로부터의 요청은 받지 않도록 설정되어 있습니다. 그래서 Xming에서 설정을 바꿔주지 않으면, 아무리 WSL2에서 요청을 보내도 Xming이 받지 않는 것이지요.&lt;/p&gt;
&lt;p&gt;이 부분을 허용하도록 설정하기 위해서는 Xming을 켤때 &lt;strong&gt;-ac&lt;/strong&gt; 옵션을 넣어주면 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-ac&lt;/strong&gt; 옵션을 넣어 실행하기 위한 &lt;strong&gt;Xming 단축아이콘 생성&lt;/strong&gt; (설치 시 바탕화면에 생성하였다면 이것을 이용해도 괜찮음)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단축아이콘에서 &lt;strong&gt;우클릭 - 속성&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;바로 가기&lt;/strong&gt; 탭 선택&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;대상&lt;/strong&gt; 항목의 &lt;strong&gt;맨 끝에 한 칸을 띄어쓴 뒤 -ac를 이어서 적음&lt;/strong&gt; 
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    지우고 적는 것이 아니라, 맨 끝에 추가하는 것임에 주의하세요.
  &lt;/div&gt;
&lt;/div&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xming_option_ac&#34; srcset=&#34;
               /wsl2-x/xming_option_ac-16307509468631_hud4dba51e4165dfbe5b19911f91f31e5d_25487_39c623f508f3e7b1a04f937394b61635.png 400w,
               /wsl2-x/xming_option_ac-16307509468631_hud4dba51e4165dfbe5b19911f91f31e5d_25487_a8085b4ddf69b18aa454516efb603856.png 760w,
               /wsl2-x/xming_option_ac-16307509468631_hud4dba51e4165dfbe5b19911f91f31e5d_25487_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl2-x/xming_option_ac-16307509468631_hud4dba51e4165dfbe5b19911f91f31e5d_25487_39c623f508f3e7b1a04f937394b61635.png&#34;
               width=&#34;421&#34;
               height=&#34;598&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;확인&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이제 이 단축아이콘으로 Xming을 실행하게 되면, Xming이 -ac 옵션이 적용된 채로 켜지게 됩니다. 혹시 &lt;strong&gt;현재 Xming이 켜져있다면 종료&lt;/strong&gt;하시고, &lt;strong&gt;방금 설정한 단축아이콘으로 다시 실행&lt;/strong&gt;해주세요.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;windows-방화벽에서-xming으로-들어가는-요청-허용&#34;&gt;Windows 방화벽에서 Xming으로 들어가는 요청 허용&lt;/h3&gt;
&lt;p&gt;WSL2에서 보내는 요청이 Xming에 도달하기 전에 &lt;strong&gt;Windows 방화벽이 차단해버리는 경우&lt;/strong&gt;를 막기 위해, 다음의 작업을 통해 방화벽에서 Xming X Server로 들어가는 요청을 허용하도록 설정하시기 바랍니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    이 작업을 수행하기 전에 반드시 한 번은 Xming을 실행한 적이 있어야 합니다. 최초실행 시 뜨는 경고창을 통해 방화벽에 Xming 허용 규칙을 추가하게 되기 때문입니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;[WIN]+[R]을 눌러 실행 창 띄우기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;powershell&lt;/strong&gt;을 입력한 뒤, [CTRL]+[SHIFT]+[ENTER]를 눌러서 PowerShell을 &lt;strong&gt;관리자 권한&lt;/strong&gt;으로 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-NetFirewallRule -DisplayName &amp;quot;Xming X Server&amp;quot; -Enabled True -Profile Any
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 명령어를 입력할 때 다음과 같은 에러가 뜬다면, Xming을 실행한 적이 없기 때문입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;firewall_error&#34; srcset=&#34;
               /wsl2-x/firewall_error_hu594f1ba172f02afa791059b715de055e_10751_f122cbe3f16f7c912b03a2a7eccd2df4.png 400w,
               /wsl2-x/firewall_error_hu594f1ba172f02afa791059b715de055e_10751_97540bc8bdca533b5ed75d7241164899.png 760w,
               /wsl2-x/firewall_error_hu594f1ba172f02afa791059b715de055e_10751_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl2-x/firewall_error_hu594f1ba172f02afa791059b715de055e_10751_f122cbe3f16f7c912b03a2a7eccd2df4.png&#34;
               width=&#34;760&#34;
               height=&#34;107&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;혹시 Xming을 실행한 적이 있음에도 이런 에러가 뜬다면, 다음 명령어를 입력하세요. (앞의 Set이 New로 바뀝니다)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;New-NetFirewallRule -DisplayName &amp;quot;Xming X Server&amp;quot; -Enabled True -Profile Any
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;windows의-ip-주소-획득-및-display-환경변수로-지정&#34;&gt;Windows의 IP 주소 획득 및 DISPLAY 환경변수로 지정&lt;/h3&gt;
&lt;p&gt;WSL2에서 Windows의 IP 주소를 보는 것은 다음 명령어를 통해 가능합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;wsl2_winIP&#34; srcset=&#34;
               /wsl2-x/wsl2_winIP_hu5b032e4b17b9daeb95aaab0e3b5a5467_21872_9414c2b3526fe8952ade5d0d3d69a643.png 400w,
               /wsl2-x/wsl2_winIP_hu5b032e4b17b9daeb95aaab0e3b5a5467_21872_2658e53cda3ee473b418d5a085d7cbbc.png 760w,
               /wsl2-x/wsl2_winIP_hu5b032e4b17b9daeb95aaab0e3b5a5467_21872_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl2-x/wsl2_winIP_hu5b032e4b17b9daeb95aaab0e3b5a5467_21872_9414c2b3526fe8952ade5d0d3d69a643.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;값을 확인했다면 이걸 이용해서 DISPLAY 환경변수의 값을 설정해주면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export DISPLAY=위에서_확인한_IP:0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 작업 역시, 터미널을 종료하면 설정한 정보가 날아가버립니다. 때문에, &lt;b&gt;Windows의 IP 값을 받아다가 &lt;code&gt;DISPLAY&lt;/code&gt; 변수를 정의하는 작업&lt;/b&gt;을 한 문장으로 작성하여 &lt;code&gt;~/.bashrc&lt;/code&gt;에 적어두는 방식을 사용합니다. 이 작업을 위해서는 &lt;code&gt;|&lt;/code&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, &lt;code&gt;grep&lt;/code&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, &lt;code&gt;awk&lt;/code&gt;&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;등 생소할 수도 있는 명령어가 사용됩니다만, 그대로 따라서 한 번만 실행시키시면 WSL2에서 작업할 내용은 끝나게 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk &#39;&amp;quot;&#39;&amp;quot;&#39;{print $2}&#39;&amp;quot;&#39;&amp;quot;&#39;):0&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;gui-연동-확인을-위한-테스트&#34;&gt;GUI 연동 확인을 위한 테스트&lt;/h2&gt;
&lt;p&gt;이 모든 작업이 끝났다면, 아마 정상적으로 GUI가 실행될 것입니다.&lt;/p&gt;
&lt;p&gt;GUI 창을 띄우는 프로그램을 사용하시는 게 있다면 그 프로그램으로 테스트 하시면 됩니다. 이 글에서는 xclock이라는 프로그램을 받아서 테스트하도록 하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## Install x11 applications
sudo apt install x11-apps -y

## Run xclock
xclock
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xwindow_test_xclock&#34; srcset=&#34;
               /wsl2-x/xwindow_test_xclock_hu7f2651c3886c3374ad7b82dee80d4028_24044_d6889147aac72f98bb0de23c5c7c65ce.png 400w,
               /wsl2-x/xwindow_test_xclock_hu7f2651c3886c3374ad7b82dee80d4028_24044_687891b4135322426976b613ddc06513.png 760w,
               /wsl2-x/xwindow_test_xclock_hu7f2651c3886c3374ad7b82dee80d4028_24044_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl2-x/xwindow_test_xclock_hu7f2651c3886c3374ad7b82dee80d4028_24044_d6889147aac72f98bb0de23c5c7c65ce.png&#34;
               width=&#34;760&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PuTTY&lt;/a&gt;는 무료 터미널 에뮬레이터로, 대개 서버용으로 활용되는 리눅스 운영체제 기반 컴퓨터에 원격접속하는 용도로 활용됩니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt;는 &lt;strong&gt;pipe&lt;/strong&gt;라고 부르며, &lt;code&gt;|&lt;/code&gt;의 앞에 있는 명령어의 실행 결과를 &lt;code&gt;|&lt;/code&gt;의 뒤에 있는 명령어 실행의 입력인자로 활용하는 기호입니다.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt;은 텍스트 검색에 관한 명령어입니다.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;code&gt;awk&lt;/code&gt;는 텍스트 형태의 데이터를 행과 단어 별로 처리하여 출력하는 데에 사용되는 명령어입니다.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>WSL1에서 X window를 세팅하는 법</title>
      <link>https://evandde.github.io/wsl1-x/</link>
      <pubDate>Tue, 27 Oct 2020 15:09:37 +0900</pubDate>
      <guid>https://evandde.github.io/wsl1-x/</guid>
      <description>&lt;p&gt;이 글에서는 WSL1을 설치한 뒤 X window(GUI)를 사용하기 위한 세팅 방법을 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 &lt;b&gt;WSL1&lt;/b&gt; 설치가 완료된 상태라고 가정합니다. 이에 관한 전반적인 내용은 &lt;a href=&#34;https://evandde.github.io/wsl/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;WSL을 설치하더라도, GUI 기반의 프로그램을 실행하려면 X window에 관한 추가적인 설정이 필요합니다. 이 글에서는 &lt;strong&gt;WSL1&lt;/strong&gt;에서 X window 사용을 위한 세팅 방법을 다룹니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.straightrunning.com/XmingNotes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xming 공식 홈페이지&lt;/a&gt;에서 Xming 다운로드&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Xming 설치 (다음만 누르며 설치해도 괜찮음)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WSL1에서 다음 명령어 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;export DISPLAY=localhost:0&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;x-window-x-server란&#34;&gt;X window, X server란&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;X window&lt;/strong&gt;는 UNIX 내지 Linux 계열의 운영체제에서 사용되는 GUI 환경 구현을 위한 시스템입니다. &lt;strong&gt;X11&lt;/strong&gt;이라고도 부르고, 줄여서 그냥 &lt;strong&gt;X&lt;/strong&gt;라고 부르기도 합니다. X window의 동작 원리는 간단하게 말하면 서버-클라이언트 구조입니다. &amp;ldquo;&lt;strong&gt;프로그램이 GUI 창을 띄워달라고 X server에 요청&lt;/strong&gt;&amp;ldquo;하면, &amp;ldquo;&lt;strong&gt;X server가 요청을 처리하여 GUI 창을 띄우는 것&lt;/strong&gt;&amp;ldquo;이죠.&lt;/p&gt;
&lt;p&gt;일반적으로 Linux 운영체제 내에서 X server 프로그램이 구동되도록 설정된 환경에서는 내부적으로 알아서 화면을 띄울 수 있습니다. 하지만, PuTTY&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;나 WSL과 같이 Windows에서 터미널만 켜서 이용하는 경우에는, 프로그램의 X window 실행 요청을 Windows가 받아서 처리해야 하기 때문에, &lt;strong&gt;Windows용 X server 프로그램&lt;/strong&gt;이 필요합니다. 대표적으로 &lt;strong&gt;Xming&lt;/strong&gt;, &lt;strong&gt;VcXsrv&lt;/strong&gt;, &lt;strong&gt;X410&lt;/strong&gt; 등이 있습니다.&lt;/p&gt;
&lt;p&gt;클라이언트가 보내는 X window 실행 요청은, Linux 상에서 &lt;code&gt;DISPLAY&lt;/code&gt;라고 정의된 환경변수의 값으로 전송됩니다. 즉, X server를 사용하려면, X server 프로그램이 요청을 받을 수 있는 일종의 사서함 주소를 확보한 뒤, 이 값을 &lt;code&gt;DISPLAY&lt;/code&gt;로 정의해주면 되는 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;xming-설치&#34;&gt;Xming 설치&lt;/h2&gt;
&lt;p&gt;이 글에서는 Xming이라는 프로그램을 이용할 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.straightrunning.com/XmingNotes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xming 공식 홈페이지&lt;/a&gt;에 들어가셔서 &lt;u&gt;Xming 설치파일을 받아오시기 바랍니다&lt;/u&gt;. (버전이 높은 것은 Xming 측에 돈을 기부하고 계정을 받아야 사용가능하니, 그 밑에 있는 낮은 버전을 받으시면 됩니다.)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xming_download&#34; srcset=&#34;
               /wsl1-x/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_e5985975304aa3ceb123b58cde707df8.png 400w,
               /wsl1-x/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_36e1f59157a5f369f428e8e3dac4458d.png 760w,
               /wsl1-x/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl1-x/xming_download_hu33841999fc63939f7eb474d869007bc1_60385_e5985975304aa3ceb123b58cde707df8.png&#34;
               width=&#34;760&#34;
               height=&#34;514&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;설치는 그냥 다음 버튼만 누르며 하셔도 됩니다만, 나중의 편의를 위해 &lt;strong&gt;단축아이콘 하나만 만들어두도록 합니다&lt;/strong&gt;. 아래 그림에 보이는 내용이 떴을 때 &lt;strong&gt;Create a desktop icon for Xming에 체크&lt;/strong&gt;해주시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xming_install&#34; srcset=&#34;
               /wsl1-x/xming_install_huae6882490155567490c1a876368c14fe_25675_98ad75cb6e4b5cf095079d8030f5392e.png 400w,
               /wsl1-x/xming_install_huae6882490155567490c1a876368c14fe_25675_100b1cc69ac73144a347becc6ac6a8ab.png 760w,
               /wsl1-x/xming_install_huae6882490155567490c1a876368c14fe_25675_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl1-x/xming_install_huae6882490155567490c1a876368c14fe_25675_98ad75cb6e4b5cf095079d8030f5392e.png&#34;
               width=&#34;499&#34;
               height=&#34;387&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Xming이 켜져 있는지의 여부는, 작업표시줄 오른쪽의 트레이아이콘을 확인하시면 알 수 있습니다. 트레이아이콘 중 X모양의 아이콘이 있다면 켜져있는 것입니다. 종료하고자 할 때에는, &lt;strong&gt;트레이아이콘을 우클릭&lt;/strong&gt;하고 &lt;strong&gt;Exit&lt;/strong&gt;를 눌러주시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xming_running&#34; srcset=&#34;
               /wsl1-x/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_fdf8f270899a5f07d2f8e873ec6e5aa4.png 400w,
               /wsl1-x/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_25fafa912564ab70957f284af9aaa48f.png 760w,
               /wsl1-x/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl1-x/xming_running_hu7d32509324eb9cf6b913e8446f20cba9_11550_fdf8f270899a5f07d2f8e873ec6e5aa4.png&#34;
               width=&#34;363&#34;
               height=&#34;40&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wsl1과-xming-연동&#34;&gt;WSL1과 Xming 연동&lt;/h2&gt;
&lt;p&gt;WSL1은 고민할 것이 별로 없습니다. WSL1은 Windows와 네트워크 상 주소가 동일하기 때문입니다. 클라이언트에서 X window 요청이 들어오면, 그대로 자기자신(localhost)에게 켜져 있는 Windows용 X server에 던져주면 끝입니다.&lt;/p&gt;
&lt;p&gt;명령어 상으로는 다음과 같이 적어주면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export DISPLAY=localhost:0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다만, 이렇게 정의한 환경변수는 터미널이 종료되는 순간 사라집니다. 일반적으로는 매번 터미널이 켜질 때마다 저 명령줄이 자동으로 실행되도록 하기 위해, &lt;code&gt;~/.bashrc&lt;/code&gt; 파일에 위의 내용을 적어두는 방식으로 활용합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;export DISPLAY=localhost:0&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;gui-연동-확인을-위한-테스트&#34;&gt;GUI 연동 확인을 위한 테스트&lt;/h2&gt;
&lt;p&gt;이 모든 작업이 끝났다면, 아마 정상적으로 GUI가 실행될 것입니다.&lt;/p&gt;
&lt;p&gt;GUI 창을 띄우는 프로그램을 사용하시는 게 있다면 그 프로그램으로 테스트 하시면 됩니다. 이 글에서는 xclock이라는 프로그램을 받아서 테스트하도록 하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## Install x11 applications
sudo apt install x11-apps -y

## Run xclock
xclock
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;xwindow_test_xclock&#34; srcset=&#34;
               /wsl1-x/xwindow_test_xclock_hu7f2651c3886c3374ad7b82dee80d4028_24044_d6889147aac72f98bb0de23c5c7c65ce.png 400w,
               /wsl1-x/xwindow_test_xclock_hu7f2651c3886c3374ad7b82dee80d4028_24044_687891b4135322426976b613ddc06513.png 760w,
               /wsl1-x/xwindow_test_xclock_hu7f2651c3886c3374ad7b82dee80d4028_24044_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl1-x/xwindow_test_xclock_hu7f2651c3886c3374ad7b82dee80d4028_24044_d6889147aac72f98bb0de23c5c7c65ce.png&#34;
               width=&#34;760&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PuTTY&lt;/a&gt;는 무료 터미널 에뮬레이터로, 대개 서버용으로 활용되는 리눅스 운영체제 기반 컴퓨터에 원격접속하는 용도로 활용됩니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>cudart64_xxx.dll not found 에러 해결</title>
      <link>https://evandde.github.io/cudart64-not-found/</link>
      <pubDate>Thu, 22 Oct 2020 16:22:11 +0900</pubDate>
      <guid>https://evandde.github.io/cudart64-not-found/</guid>
      <description>&lt;p&gt;TensorFlow 설치 후 이용 시, cudart64_xxx.dll을 찾지 못하는 오류를 해결하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;&lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit-archive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://developer.nvidia.com/cuda-toolkit-archive&lt;/a&gt;에서 맞는 버전을 다운받아 설치합니다.&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예: cudart64_101.dll -&amp;gt; CUDA Toolkit 10.1 update 2 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;버그-설명&#34;&gt;버그 설명&lt;/h2&gt;
&lt;p&gt;TensorFlow 2를 설치한 뒤 이용하려 할 때, cudart64_xxx.dll을 찾지 못하는 에러가 발생하는 경우가 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;error&#34; srcset=&#34;
               /cudart64-not-found/error_hu382ddf66dda8b9c0e74a84755a6eb4d7_2253_b4d5b5985f9e4f8d7db835e788f7e8e8.png 400w,
               /cudart64-not-found/error_hu382ddf66dda8b9c0e74a84755a6eb4d7_2253_77fefef733e646bb26fb5197085bb46d.png 760w,
               /cudart64-not-found/error_hu382ddf66dda8b9c0e74a84755a6eb4d7_2253_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/cudart64-not-found/error_hu382ddf66dda8b9c0e74a84755a6eb4d7_2253_b4d5b5985f9e4f8d7db835e788f7e8e8.png&#34;
               width=&#34;619&#34;
               height=&#34;21&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;왜-발생하는가&#34;&gt;왜 발생하는가?&lt;/h2&gt;
&lt;p&gt;TensorFlow 2로 오면서, GPU 사용이 기본이 되었습니다. 이에 따라, 관련 하드웨어 및 소프트웨어 요구사항이 존재합니다.&lt;/p&gt;
&lt;p&gt;자세한 사항은 &lt;a href=&#34;https://www.tensorflow.org/install/gpu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tensorflow 설치가이드&lt;/a&gt;에서 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;hw_req&#34; srcset=&#34;
               /cudart64-not-found/hw_req_hu0ad19dfc9e065e893c61606d7e6ce243_63185_2e4daa22fbdb1a9ca22f485cab83cc65.png 400w,
               /cudart64-not-found/hw_req_hu0ad19dfc9e065e893c61606d7e6ce243_63185_2f40a99a954aac8f53fb8ae8ffdbbe1b.png 760w,
               /cudart64-not-found/hw_req_hu0ad19dfc9e065e893c61606d7e6ce243_63185_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/cudart64-not-found/hw_req_hu0ad19dfc9e065e893c61606d7e6ce243_63185_2e4daa22fbdb1a9ca22f485cab83cc65.png&#34;
               width=&#34;760&#34;
               height=&#34;334&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;sw_req&#34; srcset=&#34;
               /cudart64-not-found/sw_req_hud0e9902a58724d102076724365675e5c_42769_199acbe09f63e0f25655ac084d4e3f07.png 400w,
               /cudart64-not-found/sw_req_hud0e9902a58724d102076724365675e5c_42769_f8a81e93701190f289777765c6bd9008.png 760w,
               /cudart64-not-found/sw_req_hud0e9902a58724d102076724365675e5c_42769_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/cudart64-not-found/sw_req_hud0e9902a58724d102076724365675e5c_42769_199acbe09f63e0f25655ac084d4e3f07.png&#34;
               width=&#34;658&#34;
               height=&#34;277&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;해결방법&#34;&gt;해결방법&lt;/h2&gt;
&lt;p&gt;NVIDIA 홈페이지의 CUDA Toolkit 다운로드 페이지에서 맞는 버전을 다운받아 설치합니다.&lt;/p&gt;
&lt;p&gt;최신 버전을 요구하지 않는 경우가 있으므로, &lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit-archive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 곳&lt;/a&gt;에서 해당하는 버전을 찾아 설치하시면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cudart64_xxx.dll&lt;/code&gt;에서 xxx 부분이 버전에 해당합니다.&lt;/p&gt;
&lt;p&gt;예를 들어, 2020년 10월 기준 TensorFlow 2에서 요구하는 버전은 &lt;code&gt;cudart64_101.dll&lt;/code&gt;로, 10.1 버전을 받으시면 됩니다.&lt;/p&gt;
&lt;p&gt;아래 그림과 같이 뜨면 성공입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;solved&#34; srcset=&#34;
               /cudart64-not-found/solved_hu7ffe73168613e819c82d258fb467ba7d_2112_8a5b9af3a3a4aacd5d230414e955b80b.png 400w,
               /cudart64-not-found/solved_hu7ffe73168613e819c82d258fb467ba7d_2112_c30ee170c3d8e6492d464497f7492104.png 760w,
               /cudart64-not-found/solved_hu7ffe73168613e819c82d258fb467ba7d_2112_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/cudart64-not-found/solved_hu7ffe73168613e819c82d258fb467ba7d_2112_8a5b9af3a3a4aacd5d230414e955b80b.png&#34;
               width=&#34;376&#34;
               height=&#34;24&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nvcuda.dll not found 에러 해결</title>
      <link>https://evandde.github.io/nvcuda-not-found/</link>
      <pubDate>Thu, 22 Oct 2020 16:22:11 +0900</pubDate>
      <guid>https://evandde.github.io/nvcuda-not-found/</guid>
      <description>&lt;p&gt;TensorFlow 설치 후 이용 시, nvcuda.dll을 찾지 못하는 오류를 해결하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;&lt;a href=&#34;https://developer.nvidia.com/cudnn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://developer.nvidia.com/cudnn&lt;/a&gt;에서 CUDA 버전에 맞는 것을 다운받고, 압축을 풀어서 CUDA가 설치된 폴더에 넣습니다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;copypaste&#34; srcset=&#34;
               /nvcuda-not-found/copypaste_hu8118c5e6ec57f15f6a53e8df829aab86_81670_04970abf9b802ea87297ce7cc14f5414.png 400w,
               /nvcuda-not-found/copypaste_hu8118c5e6ec57f15f6a53e8df829aab86_81670_ea444af4382fc3129e4dd3dad094fb8e.png 760w,
               /nvcuda-not-found/copypaste_hu8118c5e6ec57f15f6a53e8df829aab86_81670_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/nvcuda-not-found/copypaste_hu8118c5e6ec57f15f6a53e8df829aab86_81670_04970abf9b802ea87297ce7cc14f5414.png&#34;
               width=&#34;760&#34;
               height=&#34;317&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;단, NVIDIA 회원가입, Developer 정보 입력, cuDNN 이용목적 등의 설문조사 참여가 필요합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;버그-설명&#34;&gt;버그 설명&lt;/h2&gt;
&lt;p&gt;TensorFlow 2를 설치한 뒤 이용하려 할 때, nvcuda.dll을 찾지 못하는 에러가 발생하는 경우가 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;error&#34; srcset=&#34;
               /nvcuda-not-found/error_hue42b89329cbf0c9bb54c8c8873bf2da3_1912_3f5c8833dac78aa5effbb9d6f73aa71d.png 400w,
               /nvcuda-not-found/error_hue42b89329cbf0c9bb54c8c8873bf2da3_1912_3809d7ab4deadc43b4ba748ba67085b2.png 760w,
               /nvcuda-not-found/error_hue42b89329cbf0c9bb54c8c8873bf2da3_1912_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/nvcuda-not-found/error_hue42b89329cbf0c9bb54c8c8873bf2da3_1912_3f5c8833dac78aa5effbb9d6f73aa71d.png&#34;
               width=&#34;528&#34;
               height=&#34;20&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;왜-발생하는가&#34;&gt;왜 발생하는가?&lt;/h2&gt;
&lt;p&gt;TensorFlow 2로 오면서, GPU 사용이 기본이 되었습니다. 이에 따라, 관련 하드웨어 및 소프트웨어 요구사항이 존재합니다.&lt;/p&gt;
&lt;p&gt;자세한 사항은 &lt;a href=&#34;https://www.tensorflow.org/install/gpu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tensorflow 설치가이드&lt;/a&gt;에서 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;hw_req&#34; srcset=&#34;
               /nvcuda-not-found/hw_req_hu0ad19dfc9e065e893c61606d7e6ce243_63185_2e4daa22fbdb1a9ca22f485cab83cc65.png 400w,
               /nvcuda-not-found/hw_req_hu0ad19dfc9e065e893c61606d7e6ce243_63185_2f40a99a954aac8f53fb8ae8ffdbbe1b.png 760w,
               /nvcuda-not-found/hw_req_hu0ad19dfc9e065e893c61606d7e6ce243_63185_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/nvcuda-not-found/hw_req_hu0ad19dfc9e065e893c61606d7e6ce243_63185_2e4daa22fbdb1a9ca22f485cab83cc65.png&#34;
               width=&#34;760&#34;
               height=&#34;334&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;sw_req&#34; srcset=&#34;
               /nvcuda-not-found/sw_req_hud0e9902a58724d102076724365675e5c_42766_3246670bca8fc23da6929713f1cb348b.png 400w,
               /nvcuda-not-found/sw_req_hud0e9902a58724d102076724365675e5c_42766_a8f7e4cb8fda40645dd7f1e531b4d257.png 760w,
               /nvcuda-not-found/sw_req_hud0e9902a58724d102076724365675e5c_42766_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/nvcuda-not-found/sw_req_hud0e9902a58724d102076724365675e5c_42766_3246670bca8fc23da6929713f1cb348b.png&#34;
               width=&#34;658&#34;
               height=&#34;277&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;해결방법&#34;&gt;해결방법&lt;/h2&gt;
&lt;p&gt;NVIDIA 홈페이지의 cuDNN 다운로드 페이지에서 맞는 버전을 다운받아 설치합니다.&lt;/p&gt;
&lt;p&gt;단, cuDNN은 NVIDIA에의 회원가입 및 개발자가입이 요구됩니다. 그리고 cuDNN을 어떤 목적으로 사용할 것인지에 대한 설문조사도 있습니다.&lt;/p&gt;
&lt;p&gt;2020년 10월 기준 TensorFlow 2에서 요구하는 버전은 cuDNN SDK 7.6이고, CUDA 10.1 버전을 지원하므로, 이에 맞추어 받으시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;version_select&#34; srcset=&#34;
               /nvcuda-not-found/version_select_hu56cb2cb3fdb7b04d2156840e58308cc1_34348_713ffe1a465c6c3189ec2906574cb5ec.png 400w,
               /nvcuda-not-found/version_select_hu56cb2cb3fdb7b04d2156840e58308cc1_34348_99f5139abdd38e5c72e987720c9fc50b.png 760w,
               /nvcuda-not-found/version_select_hu56cb2cb3fdb7b04d2156840e58308cc1_34348_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/nvcuda-not-found/version_select_hu56cb2cb3fdb7b04d2156840e58308cc1_34348_713ffe1a465c6c3189ec2906574cb5ec.png&#34;
               width=&#34;701&#34;
               height=&#34;752&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;해당 링크에서 압축파일이 받아지는데, 이를 풀면 &lt;code&gt;cuda&lt;/code&gt; 폴더가 나옵니다.&lt;/p&gt;
&lt;p&gt;이 안의 내용물을, CUDA를 설치한 폴더 안에 그대로 붙여넣으시면 됩니다. (일반적으로는 &lt;code&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\vXX.X&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;copypaste&#34; srcset=&#34;
               /nvcuda-not-found/copypaste-16307488096501_hu8118c5e6ec57f15f6a53e8df829aab86_81670_b6a31b77357e6082543346bbf4624f89.png 400w,
               /nvcuda-not-found/copypaste-16307488096501_hu8118c5e6ec57f15f6a53e8df829aab86_81670_e7fe8d94d462279d11506782c744136b.png 760w,
               /nvcuda-not-found/copypaste-16307488096501_hu8118c5e6ec57f15f6a53e8df829aab86_81670_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/nvcuda-not-found/copypaste-16307488096501_hu8118c5e6ec57f15f6a53e8df829aab86_81670_b6a31b77357e6082543346bbf4624f89.png&#34;
               width=&#34;760&#34;
               height=&#34;317&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows에서 사용자 폴더의 위치를 변경하는 방법</title>
      <link>https://evandde.github.io/userdir-change/</link>
      <pubDate>Tue, 13 Oct 2020 16:24:20 +0900</pubDate>
      <guid>https://evandde.github.io/userdir-change/</guid>
      <description>&lt;p&gt;Windows를 설치하면, &lt;code&gt;C:\Users\사용자이름&lt;/code&gt; 폴더에 &lt;strong&gt;다운로드, 사진, 문서, 동영상&lt;/strong&gt; 등의 폴더가 있는 것을 확인할 수 있습니다. 이러한 폴더를 &lt;strong&gt;사용자 폴더&lt;/strong&gt; 라고 합니다. 
이 글에서는 사용자 폴더의 위치를 변경하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;userdir&#34; srcset=&#34;
               /userdir-change/userdir_hu44aefba528d9ef9c074e54594b911602_7067_bed96f5d618e1b46df4d280a4286a85a.png 400w,
               /userdir-change/userdir_hu44aefba528d9ef9c074e54594b911602_7067_4ef6048c396066fae08e90ddde0039c0.png 760w,
               /userdir-change/userdir_hu44aefba528d9ef9c074e54594b911602_7067_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/userdir-change/userdir_hu44aefba528d9ef9c074e54594b911602_7067_bed96f5d618e1b46df4d280a4286a85a.png&#34;
               width=&#34;253&#34;
               height=&#34;254&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;사용자 폴더는 대개 응용프로그램(MS Office, Visual Studio, &amp;hellip;) 자체가 설치되는 공간이 아니라, 우리가 컴퓨터를 사용하는 과정에서 생성되는 &lt;b&gt;여러가지 데이터(*.txt, *.docx, *.pptx, &amp;hellip;)들이 저장되는 공간&lt;/b&gt;입니다. 그렇기 때문에, 컴퓨터를 사용하다보면 이러한 사용자 폴더가 차지하는 용량이 점점 늘어나게 됩니다.&lt;/p&gt;
&lt;p&gt;사용형태에 따라, C드라이브에는 적은 용량을 할당하여 윈도우와 응용프로그램을 설치하고, D드라이브에 많은 용량을 할당하여 데이터를 저장하고 백업하는 용도로 파티션 관리를 하는 분들도 꽤 있으리라 생각합니다. 이런 분들이라면 더욱, 사용자 폴더를 D드라이브로 변경하는 편이 용량 측면 및 백업·관리 측면에서 유리할 것입니다.&lt;/p&gt;
&lt;p&gt;이 글에서는 사용자 폴더를 임의의 경로로 옮기는 몇 가지 방법을 살펴볼 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;h3 id=&#34;개별-폴더마다-경로-변경을-간단하게-수행하고자-하는-경우&#34;&gt;개별 폴더마다 경로 변경을 간단하게 수행하고자 하는 경우&lt;/h3&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    일부 폴더는 이 절차를 적용할 수 없거나, 적용되더라도 의도대로 동작하지 않을 수 있습니다. 자세한 사항은 아래의 &lt;a href=&#34;https://evandde.github.io/userdir-change/#%EB%AC%B8%EC%A0%9C%EC%A0%90&#34;&gt;개별 폴더 경로변경의 문제점&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;사용자 폴더가 있는 위치로 이동.
&lt;ol&gt;
&lt;li&gt;[WIN]+[R]을 눌러 &lt;strong&gt;실행&lt;/strong&gt; 창 띄우기.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%UserProfile%&lt;/code&gt;을 입력하고 확인을 눌러 사용자 폴더 위치의 파일 탐색기 띄우기.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;옮기고 싶은 사용자 폴더에서 &lt;b&gt;우클릭 - 속성&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;위치&lt;/strong&gt; 탭으로 이동.&lt;/li&gt;
&lt;li&gt;값을 원하는 경로로 변경.&lt;/li&gt;
&lt;li&gt;확인.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;user_folder_path_setting&#34; srcset=&#34;
               /userdir-change/user_folder_path_setting_hue9e265802e9cf0996367dc8bcdaab543_15429_2137d6529ede7ca0a5ccba8ce6ff1491.png 400w,
               /userdir-change/user_folder_path_setting_hue9e265802e9cf0996367dc8bcdaab543_15429_2c3664da7bdf8a426e712e7d02025c2b.png 760w,
               /userdir-change/user_folder_path_setting_hue9e265802e9cf0996367dc8bcdaab543_15429_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/userdir-change/user_folder_path_setting_hue9e265802e9cf0996367dc8bcdaab543_15429_2137d6529ede7ca0a5ccba8ce6ff1491.png&#34;
               width=&#34;421&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;windows-설치-과정-중에-설정하는-법&#34;&gt;Windows 설치 과정 중에 설정하는 법&lt;/h3&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    실수하지 않도록 각 단계를 차근차근 진행하세요. 작업이 정상적으로 이루어지지 않은 경우, 로그인이 되지 않거나, 최악의 경우 Windows를 다시 설치해야 할 수도 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Windows 설치 과정 중, &lt;strong&gt;국가 선택창&lt;/strong&gt;이 뜨면 &lt;b&gt;[CTRL]+[SHIFT]+[F3]&lt;/b&gt;을 눌러 audit mode로 진입.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows 데스크탑 화면이 뜬 뒤, System Preperation Tool 대화상자가 나타나면 Cancle버튼을 눌러 끔.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;디스크 관리&lt;/strong&gt;를 실행하여 사용자 폴더를 위치시키고자 하는 드라이브 문자 확인.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[WIN]+[R]을 눌러 실행 창 띄우기.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diskmgmt.msc&lt;/code&gt;을 입력하고 확인을 눌러 디스크 관리 띄우기.&lt;/li&gt;
&lt;li&gt;파일 시스템이나 용량 등 정보를 바탕으로, 사용자 폴더를 위치시킬 드라이브의 문자 확인.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래 내용으로 unattended answer file 생성. (인터넷 연결이 가능하므로, 이 블로그에서 아래 내용을 복사-붙여넣기 가능)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;메모장 실행.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 &lt;code&gt;XML&lt;/code&gt; 내용 입력. (4번 줄과 6번 줄 내용을 본인에 맞게 수정)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;unattend xmlns=&amp;quot;urn:schemas-microsoft-com:unattend&amp;quot;&amp;gt;
&amp;lt;settings pass=&amp;quot;oobeSystem&amp;quot;&amp;gt;
&amp;lt;component name=&amp;quot;Microsoft-Windows-Shell-Setup&amp;quot; processorArchitecture=&amp;quot;amd64&amp;quot; publicKeyToken=&amp;quot;31bf3856ad364e35&amp;quot; language=&amp;quot;neutral&amp;quot; versionScope=&amp;quot;nonSxS&amp;quot; xmlns:wcm=&amp;quot;http://schemas.microsoft.com/WMIConfig/2002/State&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
&amp;lt;FolderLocations&amp;gt;
&amp;lt;ProfilesDirectory&amp;gt;D:\Users&amp;lt;/ProfilesDirectory&amp;gt;
&amp;lt;/FolderLocations&amp;gt;
&amp;lt;/component&amp;gt;
&amp;lt;/settings&amp;gt;
&amp;lt;/unattend&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;4번 줄: &lt;font color=&#34;red&#34;&gt;processorArchitecture&lt;/font&gt; 변수의 값은 64 bit 윈도우를 설치할 경우에는 &lt;font color=&#34;red&#34;&gt;amd64&lt;/font&gt;로 (프로세서 종류가 Intel / AMD 중 어느 것인지는 관계 없음), 32 bit 윈도우를 설치할 경우에는 &lt;font color=&#34;red&#34;&gt;x86&lt;/font&gt;로 입력.&lt;/li&gt;
&lt;li&gt;6번 줄: &lt;font color=&#34;red&#34;&gt;ProfilesDirectory&lt;/font&gt; 태그의 값은 사용할 &lt;font color=&#34;red&#34;&gt;사용자 폴더의 위치&lt;/font&gt;로 설정. 이 글에서는 D드라이브로 변경할 것을 상정하여, &lt;font color=&#34;red&#34;&gt;D:\Users&lt;/font&gt;로 설정하였음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C드라이브를 제외한 아무 드라이브의 최상위 위치&lt;/strong&gt;에 &lt;code&gt;relocate.xml&lt;/code&gt;로 저장.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;관리자 권한&lt;/strong&gt;으로 &lt;strong&gt;cmd&lt;/strong&gt;를 켜고 다음 명령어 두 줄 실행.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;net stop WMPNetworkSvc
%windir%\system32\sysprep\sysprep.exe /oobe /reboot /unattend:d:\relocate.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;2번 줄: &lt;code&gt;/unattend&lt;/code&gt; 항목의 값으로 &lt;font color=red&gt;위에서 저장한 &lt;code&gt;relocate.xml&lt;/code&gt;의 경로&lt;/font&gt;를 입력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;재부팅되는 것을 기다린 뒤 Windows 설치를 마저 진행하면 완료.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-설명&#34;&gt;용어 설명&lt;/h2&gt;
&lt;p&gt;환경변수 &lt;code&gt;UserName&lt;/code&gt;: 현재 로그인한 Windows 계정의 사용자명입니다.&lt;/p&gt;
&lt;p&gt;환경변수 &lt;code&gt;UserProfile&lt;/code&gt;: 현재 로그인한 Windows 계정의 사용자 폴더 경로입니다. 기본값은 &lt;code&gt;C:\Users\%UserName%&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;개별-폴더-경로만-변경&#34;&gt;개별 폴더 경로만 변경&lt;/h2&gt;
&lt;p&gt;사용자 폴더 경로로 들어가 봅시다. &lt;b&gt;[WIN]+[R]&lt;/b&gt;을 눌러 실행 창을 열고, &lt;code&gt;%UserProfile%&lt;/code&gt;라고 입력하면 됩니다. (기본적으로 &lt;code&gt;C:\Users\%UserName%&lt;/code&gt; 입니다)&lt;/p&gt;
&lt;p&gt;그러면 다음과 같은 탐색기 창이 뜰 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;user_folders&#34; srcset=&#34;
               /userdir-change/user_folders_hu5a368aff3008d23cd9edfe5ed5e2346d_20870_de703a574a97a5454ca478c207cdee7e.png 400w,
               /userdir-change/user_folders_hu5a368aff3008d23cd9edfe5ed5e2346d_20870_59455b82c64ca282e8e0f103a85d13e5.png 760w,
               /userdir-change/user_folders_hu5a368aff3008d23cd9edfe5ed5e2346d_20870_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/userdir-change/user_folders_hu5a368aff3008d23cd9edfe5ed5e2346d_20870_de703a574a97a5454ca478c207cdee7e.png&#34;
               width=&#34;659&#34;
               height=&#34;315&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 보이는 3D 개체, 검색, 다운로드, 동영상, &amp;hellip; 이런 폴더들은 사실 일종의 단축아이콘 같은 녀석들입니다. 예를 들어 &lt;strong&gt;3D 개체&lt;/strong&gt;라는 아이콘은 사실 &lt;code&gt;C:\Users\%UserName%\3D Objects&lt;/code&gt;와 같은 경로로 연결해주는 바로가기의 역할을 하지요. 그러므로, 이 바로가기의 경로만 변경해주면 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;변경-방법&#34;&gt;변경 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;옮기고 싶은 폴더의 바로가기에서 &lt;b&gt;우클릭 - 속성&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;user_folder_properties&#34; srcset=&#34;
               /userdir-change/user_folder_properties_huf10f81ad9ada76846d789f9f3f4128cd_41309_b9f99b2531ade1e9e2cf9f5b1e7f4ae0.png 400w,
               /userdir-change/user_folder_properties_huf10f81ad9ada76846d789f9f3f4128cd_41309_58d1f9d2d4713b9a4db0cbfdd840774f.png 760w,
               /userdir-change/user_folder_properties_huf10f81ad9ada76846d789f9f3f4128cd_41309_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/userdir-change/user_folder_properties_huf10f81ad9ada76846d789f9f3f4128cd_41309_b9f99b2531ade1e9e2cf9f5b1e7f4ae0.png&#34;
               width=&#34;420&#34;
               height=&#34;578&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;위치&lt;/strong&gt; 탭으로 이동.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;값을 원하는 경로로 변경.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;확인.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;user_folder_path_setting&#34; srcset=&#34;
               /userdir-change/user_folder_path_setting-16307498431421_hue9e265802e9cf0996367dc8bcdaab543_15429_51e38c66ad5f98d2bef7e500a3d3c5be.png 400w,
               /userdir-change/user_folder_path_setting-16307498431421_hue9e265802e9cf0996367dc8bcdaab543_15429_9f66858eda389a06da889b4c939cf5e1.png 760w,
               /userdir-change/user_folder_path_setting-16307498431421_hue9e265802e9cf0996367dc8bcdaab543_15429_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/userdir-change/user_folder_path_setting-16307498431421_hue9e265802e9cf0996367dc8bcdaab543_15429_51e38c66ad5f98d2bef7e500a3d3c5be.png&#34;
               width=&#34;421&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    이미 해당 폴더 안에 데이터가 들어있다면, 확인을 눌렀을 때 그 데이터들을 새로운 경로로 이동할지의 여부를 묻는 알림 창이 뜹니다. 원하는 방식에 따라 선택하시면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;문제점&#34;&gt;문제점&lt;/h3&gt;
&lt;p&gt;이 방법은 3D 개체, 검색, 다운로드, 동영상, &amp;hellip; 로 정의되어 있는 &lt;strong&gt;바로가기의 경로를 변경하는 방법&lt;/strong&gt;입니다. 예를 들어 &amp;ldquo;문서&amp;rdquo; 라는 바로가기의 경로를 &lt;code&gt;C:\Users\%UserName%\Documents&lt;/code&gt;에서 &lt;code&gt;D:\Users\%UserName%\Documents&lt;/code&gt;로 변경하는 것이죠.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;문제는, 우리가 이처럼 &amp;ldquo;문서&amp;quot;라는 바로가기를 변경해도, &lt;code&gt;%UserProfile%&lt;/code&gt;이라는 환경변수는 그대로 &lt;code&gt;C:\Users\%UserName%&lt;/code&gt;값을 가지고 있다는 것입니다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;일부 프로그램은, &amp;ldquo;문서&amp;quot;라는 폴더에 데이터를 저장하려고 접근할 때, &amp;ldquo;문서&amp;quot;라는 바로가기를 활용하지 않고 &lt;code&gt;%UserProfile%\Documents&lt;/code&gt;라는 경로를 활용하는 경우가 있습니다. 이런 프로그램은, 우리가 &amp;ldquo;문서&amp;quot;라는 바로가기를 D로 옮겨놓아도, 이를 무시하고 &lt;code&gt;%UserProfile%\Documents&lt;/code&gt;(&lt;code&gt;C:\Users\%UserName%\Documents&lt;/code&gt;) 폴더를 새로 만들어버린 뒤 그 안에 데이터를 저장합니다. 이러면 &amp;ldquo;문서&amp;rdquo; 폴더가 C드라이브와 D드라이브에 따로따로 생기고, 더욱 복잡해지는 결과를 초래하지요.&lt;/p&gt;
&lt;p&gt;또 다른 문제도 있습니다. &lt;code&gt;%UserProfile%&lt;/code&gt; 폴더 안에는, 우리가 위치를 바꿀수 없는 폴더들도 존재합니다. 대표적인 예가 &lt;code&gt;AppData&lt;/code&gt; 폴더입니다(기본적으로 숨김처리 되어있는 폴더입니다).  어떤 프로그램들은 그 프로그램의 환경설정 내용 등을 &lt;code&gt;AppData&lt;/code&gt; 폴더에 저장하는 경우가 있습니다. 그런데, 이 폴더는 위에서 설명한 방법으로는 위치를 변경할 수 없습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;환경변수-userprofile-변경하기&#34;&gt;환경변수 UserProfile 변경하기&lt;/h2&gt;
&lt;p&gt;앞서의 문제를 해결하려면, &lt;b&gt;&lt;code&gt;%UserProfile%&lt;/code&gt; 환경변수 자체를 D드라이브로 바꾸면 됩니다&lt;/b&gt;&amp;hellip;만, 이 작업은 쉬운 일이 아닙니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;이 작업은 실수의 여지가 많고, 난이도가 높습니다.&lt;/p&gt;
&lt;p&gt;작업이 정상적으로 이루어지지 않은 경우, 로그인이 되지 않거나, 최악의 경우 Windows를 다시 설치해야 할 수도 있습니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;windows-재설치-없이-변경하는-법&#34;&gt;Windows 재설치 없이 변경하는 법&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#39;red&#39;&gt;이 방법은 저도 아직 성공해본 적이 없습니다.&lt;/font&gt; 10회 이상 계정을 삭제하고 다시 만들고 Windows를 재설치하고 하며 시도하였지만, 성공하지 못했습니다.  (물론 제가 해당 방법에 대한 이해가 부족했기 때문일 수 있습니다)&lt;/p&gt;
&lt;p&gt;이 작업을 통해 &lt;code&gt;%UserProfile%&lt;/code&gt;을 변경하면 내부적으로 어딘가에서 꼬이는 것 같았습니다. 변경 후에 기존 계정으로 로그인하면, 로그인 하자마자 혹은 시작 버튼을 누르자마자 다음과 같은 에러가 발생하였습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;error&#34; srcset=&#34;
               /userdir-change/error_hud78967525c9c647d43ab7204a237cccd_50744_33c828eb43d2cbd9297f55d4d9ce5313.png 400w,
               /userdir-change/error_hud78967525c9c647d43ab7204a237cccd_50744_42ed7fedb4627e73e1755feeb4163dd5.png 760w,
               /userdir-change/error_hud78967525c9c647d43ab7204a237cccd_50744_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/userdir-change/error_hud78967525c9c647d43ab7204a237cccd_50744_33c828eb43d2cbd9297f55d4d9ce5313.png&#34;
               width=&#34;760&#34;
               height=&#34;227&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;때문에, 참고하였던 관련 링크와 함께 간단한 부연설명만 하고 넘어가겠습니다.&lt;/p&gt;
&lt;p&gt;사용자 폴더를 이동하는 방법에 관해 구글링을 해보면 꽤나 많은 정보가 나옵니다. 핵심적인 흐름을 요약하면 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;관리자 계정을 활성화&lt;/li&gt;
&lt;li&gt;기존 계정을 로그아웃하고 관리자 계정으로 로그인&lt;/li&gt;
&lt;li&gt;레지스트리 변경을 통해 &lt;code&gt;%UserProfile%&lt;/code&gt; 환경변수를 변경&lt;/li&gt;
&lt;li&gt;관리자 계정을 로그아웃하고 기존 계정으로 다시 로그인&lt;/li&gt;
&lt;li&gt;관리자 계정을 비활성화&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;대표적으로 제가 참고하였던 링크입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itrainbowm.tistory.com/29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows10에서 사용자 폴더의 이름을 변경하는 방법 (C:\Users\Username)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wisebee.tistory.com/13&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows 7, 사용자 폴더 위치를 변경하는 방법&lt;/a&gt; (이론상 Windows 10에서도 동일하게 적용 가능합니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;내용 추가&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;새로운 방법을 찾게되어 내용을 추가합니다. 제가 시도해보지는 않았지만 뭔가 가능할 것 같은 느낌이 듭니다. 다음에 기회가 되면 시도해보도록 하겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ks2colorworld.tistory.com/13&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;윈도우 10에서 C:\사용자 (실제명 : C:\Users) 폴더를 다른 드라이브(ssd, hdd)로 옮기는 방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;windows-설치-시-초기-설정을-통해-변경하는-법&#34;&gt;Windows 설치 시 초기 설정을 통해 변경하는 법&lt;/h3&gt;
&lt;p&gt;저는 결국 이 방법을 통해 사용자 폴더의 위치를 변경하였습니다. 이 방법을 요약하면 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Windows를 설치할 때 oobe&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;단계에서 audit 모드&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;에 진입.&lt;/li&gt;
&lt;li&gt;사용자 폴더를 변경한다는 내용이 담긴 unattended answer file&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;을 생성.&lt;/li&gt;
&lt;li&gt;2에서 생성한 unattended answer file을 참고하여 Windows를 설치.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;windows-재설치&#34;&gt;Windows 재설치&lt;/h4&gt;
&lt;p&gt;ISO 파일을 이용하여 제작한 부팅디스크도 좋고, Windows에서 기본적으로 제공하는 PC 초기화 기능을 이용해도 좋습니다.&lt;/p&gt;
&lt;h4 id=&#34;audit-모드-진입&#34;&gt;Audit 모드 진입&lt;/h4&gt;
&lt;p&gt;드라이브 초기화가 진행된 뒤, 재설치가 시작되면 다음 그림과 같은 &lt;b&gt;국가/언어 선택창&lt;/b&gt;이 뜹니다. 여기서 &lt;b&gt;[CTRL]+[SHIFT]+[F3]&lt;/b&gt;을 눌러 audit 모드로 진입합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;oobe_phase&#34; srcset=&#34;
               /userdir-change/oobe_phase_hu9c223f373d0d9e18c8b4a85f84b42b04_3513_03d9261eb4f6da219084e0e1c62787d3.png 400w,
               /userdir-change/oobe_phase_hu9c223f373d0d9e18c8b4a85f84b42b04_3513_144380774d0977164a8809e843a15dac.png 760w,
               /userdir-change/oobe_phase_hu9c223f373d0d9e18c8b4a85f84b42b04_3513_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/userdir-change/oobe_phase_hu9c223f373d0d9e18c8b4a85f84b42b04_3513_03d9261eb4f6da219084e0e1c62787d3.png&#34;
               width=&#34;600&#34;
               height=&#34;386&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;windows-부팅-후-sysprep-창-종료&#34;&gt;Windows 부팅 후 Sysprep 창 종료&lt;/h4&gt;
&lt;p&gt;자동으로 PC가 재부팅된 뒤, audit 모드로 진입할 것입니다. 윈도우 데스크탑이 뜬 뒤 다음과 같은 System Preparation Tool 창이 뜰텐데, 지금은 &lt;strong&gt;Cancle 버튼을 눌러 종료&lt;/strong&gt;해 줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;sysprep_cancle&#34; srcset=&#34;
               /userdir-change/sysprep_cancle_hu78d854eb793fcc65145afa92a8c978f0_8203_ed631a1921a21c39503f851e79980d06.png 400w,
               /userdir-change/sysprep_cancle_hu78d854eb793fcc65145afa92a8c978f0_8203_09687b883dd6ac4bb29bef291b824111.png 760w,
               /userdir-change/sysprep_cancle_hu78d854eb793fcc65145afa92a8c978f0_8203_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/userdir-change/sysprep_cancle_hu78d854eb793fcc65145afa92a8c978f0_8203_ed631a1921a21c39503f851e79980d06.png&#34;
               width=&#34;338&#34;
               height=&#34;258&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;디스크-관리에서-사용자-폴더를-둘-드라이브명-확인&#34;&gt;디스크 관리에서 사용자 폴더를 둘 드라이브명 확인&lt;/h4&gt;
&lt;p&gt;일반적으로 D드라이브라고 생각하고 있을지라도, audit 모드에서는 드라이브명이 다르게 부여되어 있을 수 있습니다. &lt;font color=&#39;red&#39;&gt;반드시 디스크 관리를 열어 용량 정보 등을 보고 사용자 폴더를 위치시킬 드라이브의 드라이브명이 무엇인지 확인하세요.&lt;/font&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[WIN]+[R]을 눌러 실행 창을 띄움.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;diskmgmt.msc&lt;/code&gt;를 입력하고 실행하여 디스크 관리 창 띄움.&lt;/li&gt;
&lt;li&gt;용량 정보, 파일 시스템 등을 토대로, 사용자 폴더를 위치시킬 드라이브의 &lt;b&gt;드라이브명(알파벳)&lt;/b&gt;이 무엇인지 확인.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;unattended-answer-file-생성&#34;&gt;Unattended answer file 생성&lt;/h4&gt;
&lt;p&gt;이 시점에서는 인터넷 연결이 가능합니다. &lt;font color=&#39;red&#39;&gt;실수를 줄이기 위해, 아래의 xml 코드를 직접 입력하지 마시고, 복사-붙여넣기한 뒤 필요한 부분만 수정하시길 권장합니다.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;다음의 과정을 통해 unattended answer file을 생성합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;메모장 실행.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 &lt;code&gt;XML&lt;/code&gt; 내용 입력. 단, 4번 줄과 6번 줄의 내용은 본인에 맞게 수정.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;unattend xmlns=&amp;quot;urn:schemas-microsoft-com:unattend&amp;quot;&amp;gt;
&amp;lt;settings pass=&amp;quot;oobeSystem&amp;quot;&amp;gt;
&amp;lt;component name=&amp;quot;Microsoft-Windows-Shell-Setup&amp;quot; processorArchitecture=&amp;quot;amd64&amp;quot; publicKeyToken=&amp;quot;31bf3856ad364e35&amp;quot; language=&amp;quot;neutral&amp;quot; versionScope=&amp;quot;nonSxS&amp;quot; xmlns:wcm=&amp;quot;http://schemas.microsoft.com/WMIConfig/2002/State&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
&amp;lt;FolderLocations&amp;gt;
&amp;lt;ProfilesDirectory&amp;gt;D:\Users&amp;lt;/ProfilesDirectory&amp;gt;
&amp;lt;/FolderLocations&amp;gt;
&amp;lt;/component&amp;gt;
&amp;lt;/settings&amp;gt;
&amp;lt;/unattend&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;4번 줄: &lt;font color=&#34;red&#34;&gt;processorArchitecture&lt;/font&gt; 변수의 값은 64 bit 윈도우를 설치할 경우에는 &lt;font color=&#34;red&#34;&gt;amd64&lt;/font&gt;로 (프로세서 종류가 Intel / AMD 중 어느 것인지는 관계 없음), 32 bit 윈도우를 설치할 경우에는 &lt;font color=&#34;red&#34;&gt;x86&lt;/font&gt;로 입력.&lt;/li&gt;
&lt;li&gt;6번 줄: &lt;font color=&#34;red&#34;&gt;ProfilesDirectory&lt;/font&gt; 태그의 값은 사용할 &lt;font color=&#34;red&#34;&gt;Users 폴더의 위치&lt;/font&gt;로 설정. 이 글에서는 D드라이브로 변경할 것을 상정하여, &lt;font color=&#34;red&#34;&gt;D:\Users&lt;/font&gt;로 설정하였음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C드라이브를 제외한 아무 드라이브의 최상위 위치에 &lt;code&gt;relocate.xml&lt;/code&gt;로 저장. 
&lt;font color=&#39;red&#39;&gt;반드시, 저장 시 파일 형식을 &lt;b&gt;모든 파일(All files)&lt;/b&gt;로 선택&lt;/font&gt;하여 txt 형태로 저장되지 않도록 주의.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;save_relocatexml&#34; srcset=&#34;
               /userdir-change/save_relocatexml_hu3ba298fcb23f309abfb0ebc8563cb7a1_25356_3e06afd3fa0ed93458d9596c07b461a2.png 400w,
               /userdir-change/save_relocatexml_hu3ba298fcb23f309abfb0ebc8563cb7a1_25356_6e1f3aa199603d44bd373febd324a9b2.png 760w,
               /userdir-change/save_relocatexml_hu3ba298fcb23f309abfb0ebc8563cb7a1_25356_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/userdir-change/save_relocatexml_hu3ba298fcb23f309abfb0ebc8563cb7a1_25356_3e06afd3fa0ed93458d9596c07b461a2.png&#34;
               width=&#34;618&#34;
               height=&#34;469&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;생성한-unattended-answer-file을-이용하여-설치-진행&#34;&gt;생성한 unattended answer file을 이용하여 설치 진행&lt;/h4&gt;
&lt;p&gt;우선 관리자 권한으로 cmd를 켭니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[WIN]+[R]을 눌러 실행 창을 띄움.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd&lt;/code&gt;를 입력하고, &lt;b&gt;[CTRL]+[SHIFT]+[ENTER]&lt;/b&gt;을 눌러 관리자 권한으로 실행.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이어서, cmd창에 다음 명령어 두 줄을 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;net stop WMPNetworkSvc
%windir%\system32\sysprep\sysprep.exe /oobe /reboot /unattend:d:\relocate.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;2번 줄: &lt;code&gt;/unattend&lt;/code&gt; 항목의 값으로 &lt;font color=red&gt;위에서 저장한 &lt;code&gt;relocate.xml&lt;/code&gt;의 경로&lt;/font&gt;를 입력&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다음과 같은 창이 뜬 뒤, 자동으로 재부팅될 것입니다. 이어서 Windows 설치를 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;sysprep&#34; srcset=&#34;
               /userdir-change/sysprep_hu4e0e11ce90bd4e32d47273100a8fb68a_2017_5c1d9b4e6e9b00d05b48b87fb6a01e57.png 400w,
               /userdir-change/sysprep_hu4e0e11ce90bd4e32d47273100a8fb68a_2017_655790237fab0d95ab2a421bffb01d24.png 760w,
               /userdir-change/sysprep_hu4e0e11ce90bd4e32d47273100a8fb68a_2017_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/userdir-change/sysprep_hu4e0e11ce90bd4e32d47273100a8fb68a_2017_5c1d9b4e6e9b00d05b48b87fb6a01e57.png&#34;
               width=&#34;234&#34;
               height=&#34;144&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;긴 과정을 따라오시느라 고생하셨습니다.&lt;/p&gt;
&lt;p&gt;정상적으로 진행되었다면, 사용자 폴더들이 원하는 드라이브에 생성되어 있을 것입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://itrainbowm.tistory.com/29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://itrainbowm.tistory.com/29&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wisebee.tistory.com/13&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://wisebee.tistory.com/13&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tenforums.com/tutorials/1964-move-users-folder-location-windows-10-a.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.tenforums.com/tutorials/1964-move-users-folder-location-windows-10-a.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ks2colorworld.tistory.com/13&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://ks2colorworld.tistory.com/13&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Out-of-Box Experience의 약자로, 새로 설치된 Windows 제품을 처음 사용할 때의 단계를 의미.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Windows에 내장된 관리자 계정 모드로, 설치 시점에서 다양한 설정을 할 수 있게 해줌.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Windows의 설치 과정에서 사용할 설정 값이나 변수 등을 기록한 xml형식의 파일.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>WSL을 다른 경로에 설치하는 법</title>
      <link>https://evandde.github.io/wsl-otherloc/</link>
      <pubDate>Thu, 08 Oct 2020 14:09:10 +0900</pubDate>
      <guid>https://evandde.github.io/wsl-otherloc/</guid>
      <description>&lt;p&gt;MS Store를 통해 WSL을 다운받아 설치하게 되면, WSL이 설치되는 경로는 &lt;code&gt;%LocalAppData%\Packages\[PackageName]&lt;/code&gt; 폴더 하위로 고정됩니다. 이 글에서는 Windows Subsystem for Linux를 기본 설치경로가 아닌 다른 경로에 설치하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    여기서는 WSL 설치를 위한 &lt;strong&gt;Windows 기능 켜기&lt;/strong&gt; 등의 설정이 완료된 상태라고 가정합니다. 이에 관한 전반적인 내용은 &lt;a href=&#34;https://evandde.github.io/wsl/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ko-kr/windows/wsl/install-manual?irgwc=1&amp;amp;OCID=AID2000142_aff_7593_1243925&amp;amp;tduid=%28ir__tmctq6trigkfrhgekk0sohzx0m2xjpbvc3r3s12c00%29%287593%29%281243925%29%28je6NUbpObpQ-EBkcl.71_gDZ2KcRFsI7Jw%29%28%29&amp;amp;irclickid=_tmctq6trigkfrhgekk0sohzx0m2xjpbvc3r3s12c00#downloading-distros?ranMID=24542&amp;amp;ranEAID=je6NUbpObpQ&amp;amp;ranSiteID=je6NUbpObpQ-EBkcl.71_gDZ2KcRFsI7Jw&amp;amp;epi=je6NUbpObpQ-EBkcl.71_gDZ2KcRFsI7Jw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 페이지&lt;/a&gt;에서 원하는 배포판을 다운로드&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어로 파일확장자 변경&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Rename-Item XXXX.appx XXXX.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령어로 압축 해제&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Expand-Archive XXXX.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;압축 해제 후 생성된 폴더에 들어가서 배포판 실행&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;배포판-다운로드&#34;&gt;배포판 다운로드&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ko-kr/windows/wsl/install-manual?irgwc=1&amp;amp;OCID=AID2000142_aff_7593_1243925&amp;amp;tduid=%28ir__tmctq6trigkfrhgekk0sohzx0m2xjpbvc3r3s12c00%29%287593%29%281243925%29%28je6NUbpObpQ-EBkcl.71_gDZ2KcRFsI7Jw%29%28%29&amp;amp;irclickid=_tmctq6trigkfrhgekk0sohzx0m2xjpbvc3r3s12c00#downloading-distros?ranMID=24542&amp;amp;ranEAID=je6NUbpObpQ&amp;amp;ranSiteID=je6NUbpObpQ-EBkcl.71_gDZ2KcRFsI7Jw&amp;amp;epi=je6NUbpObpQ-EBkcl.71_gDZ2KcRFsI7Jw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 페이지&lt;/a&gt;를 방문하여, 설치하고자 하는 배포판을 다운받습니다.&lt;/p&gt;
&lt;p&gt;원래 MS Store를 사용할 수 없을 때 이용하라고 만들어져 있는 페이지입니다만, 이 페이지를 이용하면 &lt;code&gt;.appx&lt;/code&gt; 형식의 파일을 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;WSL을 설치하고자 하는 경로에, 다운받은 &lt;code&gt;.appx&lt;/code&gt;파일을 옮겨둡니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;다운받은-appx파일의-압축-해제&#34;&gt;다운받은 Appx파일의 압축 해제&lt;/h2&gt;
&lt;p&gt;아래 그림과 같이 &lt;code&gt;.appx&lt;/code&gt; 파일을 옮겨둔 폴더에서 &lt;b&gt;파일-Windows PowerShell 열기(&lt;u&gt;R&lt;/u&gt;)-Windows PowerShell 열기(&lt;u&gt;R&lt;/u&gt;)&lt;/b&gt;를 통해 PowerShell을 실행합니다. (PowerShell을 실행하여 해당 경로로 들어오셔도 됩니다.)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;open_powershell&#34; srcset=&#34;
               /wsl-otherloc/open_powershell_hu8e1747213ace481b8cf92b2d16242d4c_42163_eddabec272f9a0e3054db3ccee6bd713.png 400w,
               /wsl-otherloc/open_powershell_hu8e1747213ace481b8cf92b2d16242d4c_42163_e86c7291cea7062b37d3940cdf0f87c4.png 760w,
               /wsl-otherloc/open_powershell_hu8e1747213ace481b8cf92b2d16242d4c_42163_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl-otherloc/open_powershell_hu8e1747213ace481b8cf92b2d16242d4c_42163_eddabec272f9a0e3054db3ccee6bd713.png&#34;
               width=&#34;760&#34;
               height=&#34;532&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이어서 &lt;code&gt;Rename-Item&lt;/code&gt; 명령어를 통해 확장자를 zip파일로 바꾸고, &lt;code&gt;Expand-Archive&lt;/code&gt; 명령어를 통해 압축을 풀 것입니다. 예를들어 Ubuntu 20.04 배포판을 받았다면, &lt;code&gt;Ubuntu_2004.2020.424.0_x64.appx&lt;/code&gt; 파일이 다운받아질 것입니다(작성일 기준). 그렇다면 다음과 같이 명령어를 입력하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;## 받은 appx 파일을 Ubuntu2004.zip으로 이름 변경
Rename-Item Ubuntu_2004.2020.424.0_x64.appx Ubuntu2004.zip
## zip 파일의 압축을 해제
Expand-Archive Ubuntu2004.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;배포판-실행하여-설치-마무리&#34;&gt;배포판 실행하여 설치 마무리&lt;/h2&gt;
&lt;p&gt;압축을 해제하면 압축파일과 동일한 폴더가 생성됩니다. 그 폴더 안에 배포판의 실행파일이 있을 것입니다.&lt;/p&gt;
&lt;p&gt;최초 실행 시에는 이 파일로 실행하셔야 합니다. 그러면 MS Store에서 설치하는 경우와 동일하게 자동으로 설치과정이 마무리되고 계정생성과정이 진행될 것입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    이렇게 최초 실행 후 설치가 마무리된 뒤에는 MS Store로 설치한 WSL과 동일한 방법으로 사용/관리 할 수 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;wsl_firstrun&#34; srcset=&#34;
               /wsl-otherloc/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_fd5de9c372a23a8b871a5a6bde87339a.png 400w,
               /wsl-otherloc/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_bb46f5ad519a74a5d627359c04d0a2c2.png 760w,
               /wsl-otherloc/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl-otherloc/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_fd5de9c372a23a8b871a5a6bde87339a.png&#34;
               width=&#34;760&#34;
               height=&#34;396&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows Subsystem for Linux 소개 및 설치</title>
      <link>https://evandde.github.io/wsl/</link>
      <pubDate>Mon, 28 Sep 2020 15:41:22 +0900</pubDate>
      <guid>https://evandde.github.io/wsl/</guid>
      <description>&lt;p&gt;Windows Subsystem for Linux, 약칭 WSL을 설치하고 이용하는 법을 알아봅니다. 이 글은 WSL1과 WSL2을 둘 다 다룹니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Linux용 Windows 하위 시스템(Windows Subsystem for Linux, WSL)&lt;/b&gt;은 가상머신을 이용함에 따른 추가적인 메모리/CPU 소모나 듀얼부팅 설정 등을 요구하지 않으면서도, Windows 운영체제 하에서 Linux 기반의 대부분의 명령줄 도구, 유틸리티, 애플리케이션 등을 사용할 수 있게 해주는 서비스입니다.&lt;/p&gt;
&lt;p&gt;간단하게 말하면, Windows에서 Linux의 bash shell을 켤 수 있고, Linux 전용의 프로그램을 자유롭게 실행할 수 있게 된다는 뜻입니다. 그것도 별도의 가상머신 프로그램 없이 말이죠.&lt;/p&gt;
&lt;p&gt;이 글에서는 두 가지 WSL 버전인 WSL1과 WSL2의 차이를 살펴보고, 이를 설치하고 이용하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PowerShell을 &lt;strong&gt;관리자 권한&lt;/strong&gt;으로 실행한 뒤, Linux용 Windows 하위시스템 옵션을 사용하기 위해 다음 명령어 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(&lt;strong&gt;WSL1 설치 시에는 이 과정 스킵&lt;/strong&gt;) PowerShell을 &lt;strong&gt;관리자 권한&lt;/strong&gt;으로 실행한 뒤, Virtual Machine 플랫폼 옵션을 사용하기 위해 다음 명령어 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;재부팅&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(&lt;strong&gt;WSL1 설치 시에는 이 과정 스킵&lt;/strong&gt;) 본인의 아키텍쳐에 맞추어 Linux 커널 업데이트 패키지를 다운로드 후 설치&lt;/p&gt;
&lt;p&gt;x64용 다운로드 링크: &lt;a href=&#34;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ARM64용 다운로드 링크: &lt;a href=&#34;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(&lt;strong&gt;WSL1 설치 시에는 이 과정 스킵&lt;/strong&gt;) &lt;strong&gt;재부팅&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(&lt;strong&gt;WSL1 설치 시에는 이 과정 스킵&lt;/strong&gt;) PowerShell을 &lt;strong&gt;관리자 권한&lt;/strong&gt;으로 실행한 뒤, WSL2를 기본 버전으로 설정하기 위해 다음 명령어 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl --set-default-version 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://aka.ms/wslstore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Store&lt;/a&gt;에서 WSL 검색 후, 원하는 Linux 배포 설치&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wsl1-vs-wsl2&#34;&gt;WSL1 vs. WSL2&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;wsl1vswsl2&#34; srcset=&#34;
               /wsl/wsl1vswsl2_hu21402894ff639c3b706e7b0f03279d4c_30847_f03b2ffd84047f8064db1ec405390a1f.png 400w,
               /wsl/wsl1vswsl2_hu21402894ff639c3b706e7b0f03279d4c_30847_ffd7c2df905853a04fcc13272138c1da.png 760w,
               /wsl/wsl1vswsl2_hu21402894ff639c3b706e7b0f03279d4c_30847_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl/wsl1vswsl2_hu21402894ff639c3b706e7b0f03279d4c_30847_f03b2ffd84047f8064db1ec405390a1f.png&#34;
               width=&#34;760&#34;
               height=&#34;447&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;위의 비교 표에서 알 수 있듯, WSL2가 WSL1에 비해 대개 우수한 성능을 보입니다.&lt;/p&gt;
&lt;p&gt;다만, OS 파일시스템 간 성능 측면에서는 WSL1이 우수합니다.&lt;/p&gt;
&lt;h3 id=&#34;os-파일시스템-간-성능이란&#34;&gt;OS 파일시스템 간 성능이란&lt;/h3&gt;
&lt;p&gt;WSL에서 Windows의 저장소 공간에 접근하거나, 반대로 Windows에서 WSL의 저장소 공간에 접근할 때의 성능을 말합니다.&lt;/p&gt;
&lt;p&gt;Windows 탐색기에서 WSL 파일시스템의 하위경로로 접근하려면 &lt;code&gt;\\wsl$\&amp;lt;distro&amp;gt;\home\&amp;lt;username&amp;gt;\&lt;/code&gt;로 들어가면 됩니다.&lt;/p&gt;
&lt;p&gt;반대로 WSL에서 Windows의 파일시스템에 접근하고자 하는 경우에는  &lt;code&gt;/mnt/c&lt;/code&gt;/, &lt;code&gt;/mnt/d/&lt;/code&gt;, &amp;hellip;와 같은 경로로 들어가면 됩니다.&lt;/p&gt;
&lt;p&gt;이처럼 서로의 파일시스템에 교차하여 접근할 수 있기는 하지만 성능 저하의 우려가 있기 때문에, &lt;strong&gt;WSL에서 주로 사용할 파일은 되도록 WSL 파일시스템의 하위경로에 두고 사용할 것을 권장&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;p&gt;&lt;u&gt;다만, WSL에서 사용되는 파일을 WSL 파일시스템에 두고 사용하기 어려워, Windows 파일시스템에의 교차 접근이 불가피하고 잦은 경우에는 WSL1을 이용하는 것이 더 나을 수 있습니다.&lt;/u&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;최소-요구사양&#34;&gt;최소 요구사양&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;운영체제: Windows 10 혹은 Windows server 2019&lt;/li&gt;
&lt;li&gt;아키텍쳐&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;: 64 bit&lt;/li&gt;
&lt;li&gt;빌드 버전&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;ul&gt;
&lt;li&gt;WSL1을 설치하는 경우: Build 16215 이상&lt;/li&gt;
&lt;li&gt;WSL2를 설치하는 경우: Build 19041 이상&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wsl1-설치하기&#34;&gt;WSL1 설치하기&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. Linux용 Windows 하위 시스템 사용&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PowerShell을 &lt;strong&gt;관리자 권한&lt;/strong&gt;으로 실행하고, 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. 재부팅&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 원하는 Linux 배포를 다운로드하여 설치&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aka.ms/wslstore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Store&lt;/a&gt;에서 WSL을 검색하고, 원하는 배포판을 설치하면 됩니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    MS Store에서 설치 시, 설치되는 경로는 &lt;code&gt;%LocalAppData%\Packages\[PackageName]&lt;/code&gt; 폴더 하위로 고정됩니다. 만약 별도로 원하는 경로에 설치하고자 하는 경우에는 &lt;a href=&#34;https://evandde.github.io/wsl-otherloc/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;msstore_wsl&#34; srcset=&#34;
               /wsl/msstore_wsl_hub5e786e5ccc62f0277ceea02caa79f4d_287720_39d145b5862e1e383033465f9e389e74.png 400w,
               /wsl/msstore_wsl_hub5e786e5ccc62f0277ceea02caa79f4d_287720_43b6d959df3f1f026c7f965c6fbd2aa0.png 760w,
               /wsl/msstore_wsl_hub5e786e5ccc62f0277ceea02caa79f4d_287720_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl/msstore_wsl_hub5e786e5ccc62f0277ceea02caa79f4d_287720_39d145b5862e1e383033465f9e389e74.png&#34;
               width=&#34;760&#34;
               height=&#34;668&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wsl2-설치하기&#34;&gt;WSL2 설치하기&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. Linux용 Windows 하위 시스템 사용&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PowerShell을 &lt;strong&gt;관리자 권한&lt;/strong&gt;으로 실행하고, 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Virtual Machine 플랫폼 사용&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PowerShell을 &lt;strong&gt;관리자 권한&lt;/strong&gt;으로 실행하고, 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. 재부팅&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Linux 커널 업데이트 패키지 설치&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 페이지&lt;/a&gt;를 방문하여 본인 시스템의 아키텍쳐에 맞는 Linux 커널 업데이트 패키지를 다운받습니다. 해당 페이지에 있는 링크를 그대로 아래에 복사해두었으니 아래를 이용하셔도 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;x64용 다운로드 링크: &lt;a href=&#34;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ARM64용 다운로드 링크: &lt;a href=&#34;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.msi 파일을 다운받으셨다면, 실행하여 설치를 진행합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 재부팅&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. WSL2를 WSL의 기본버전으로 설정&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PowerShell을 &lt;strong&gt;관리자 권한&lt;/strong&gt;으로 열어 실행하고, 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl --set-default-version 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;7. 원하는 Linux 배포를 다운로드하여 설치&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aka.ms/wslstore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Store&lt;/a&gt;에서 WSL을 검색하고, 원하는 배포판을 설치하면 됩니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    MS Store에서 설치 시, 설치되는 경로는 &lt;code&gt;%LocalAppData%\Packages\[PackageName]&lt;/code&gt; 폴더 하위로 고정됩니다. 만약 별도로 원하는 경로에 설치하고자 하는 경우에는 &lt;a href=&#34;https://evandde.github.io/wsl-otherloc/&#34;&gt;이 글&lt;/a&gt;을 참고하세요.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;설치한-배포판-실행&#34;&gt;설치한 배포판 실행&lt;/h2&gt;
&lt;p&gt;Microsoft Store를 통해 설치하면, 시작메뉴에 설치한 리눅스 배포판이 뜰 것입니다. 이를 처음 실행하면 추가적인 설치 마무리 작업을 수행한 뒤, 그 후 계정 생성 과정이 진행됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;wsl_firstrun&#34; srcset=&#34;
               /wsl/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_fd5de9c372a23a8b871a5a6bde87339a.png 400w,
               /wsl/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_bb46f5ad519a74a5d627359c04d0a2c2.png 760w,
               /wsl/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl/wsl_firstrun_hu667f8da113358d28593ba3aa96b0f8eb_32356_fd5de9c372a23a8b871a5a6bde87339a.png&#34;
               width=&#34;760&#34;
               height=&#34;396&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 원하는 계정명과 비밀번호를 입력하여 계정생성을 하면 설치가 완료됩니다.&lt;/p&gt;
&lt;p&gt;이후에는, 아까와 같이 시작메뉴에서 배포판을 실행하거나, cmd/powershell/실행윈도우([WIN]+[R])에서 &lt;code&gt;wsl&lt;/code&gt;을 입력하여 실행할 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;배포판의-관리&#34;&gt;배포판의 관리&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    하나의 Windows 운영체제에 여러 개의 WSL을 설치할 수 있습니다. 또한, 각 WSL마다 버전을 달리하여, 어떤 것은 WSL1로, 어떤 것은 WSL2로 이용할 수도 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;PowerShell에서 &lt;code&gt;wsl&lt;/code&gt; 명령어 뒤에 다양한 옵션을 입력하여, 설치한 wsl 배포판에 대한 다양한 설정을 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;사용 가능한 명령어의 설명은 다음 명령어로 확인 가능합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl --help
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;설치된-배포판-목록-확인&#34;&gt;설치된 배포판 목록 확인&lt;/h3&gt;
&lt;p&gt;현재 설치된 배포판을 확인하려면 다음 명령어를 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 때, &lt;code&gt;-v&lt;/code&gt; 옵션을 더 추가하면, 각 배포판의 현재 상태와 더불어 WSL1/WSL2 중 어떤 버전인지에 대한 정보까지 출력할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl -l -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;wsl_list&#34; srcset=&#34;
               /wsl/wsl_list_hu6701df01d532b72f94bb1436845054a0_33362_7ac4cbfe67da2ebe6d673704465517c8.png 400w,
               /wsl/wsl_list_hu6701df01d532b72f94bb1436845054a0_33362_90d45a14bd6cad8bb9ac38bb18fb4ef9.png 760w,
               /wsl/wsl_list_hu6701df01d532b72f94bb1436845054a0_33362_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/wsl/wsl_list_hu6701df01d532b72f94bb1436845054a0_33362_7ac4cbfe67da2ebe6d673704465517c8.png&#34;
               width=&#34;760&#34;
               height=&#34;301&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;NAME 옆의 * 표시는 &lt;code&gt;wsl&lt;/code&gt; 이라는 명령어만 입력하였을때 실행되는 기본 wsl 배포판이 무엇인지 알려주는 표시입니다.&lt;/p&gt;
&lt;h3 id=&#34;기본-실행-배포판-변경&#34;&gt;기본 실행 배포판 변경&lt;/h3&gt;
&lt;p&gt;앞서 &lt;code&gt;wsl -l&lt;/code&gt; 명령어로 확인한 배포판의 이름(예: &lt;code&gt;Ubuntu-20.04&lt;/code&gt;)을 확인한 뒤, &lt;code&gt;-s &amp;lt;Distro&amp;gt;&lt;/code&gt; 옵션을 이용합니다.&lt;/p&gt;
&lt;p&gt;예를 들어 기본 실행 배포판을 Ubuntu-20.04로 변경하는 경우에는 다음과 같이 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl -s Ubuntu-20.04
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;설치된-배포판의-버전-변경wsl1wsl2&#34;&gt;설치된 배포판의 버전 변경(WSL1/WSL2)&lt;/h3&gt;
&lt;p&gt;앞서 &lt;code&gt;wsl -l&lt;/code&gt; 명령어로 확인한 배포판의 이름(예: &lt;code&gt;Ubuntu-20.04&lt;/code&gt;)을 확인한 뒤, &lt;code&gt;--set-version &amp;lt;Distro&amp;gt; &amp;lt;버전&amp;gt;&lt;/code&gt; 옵션을 이용합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    WSL1에서 WSL2로 올리는 것도 되고, 반대로 WSL2에서 WSL1로 내리는 것도 가능합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;예를 들어 Ubuntu-20.04 배포판을 WSL2로 변경하는 경우에는 다음과 같이 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl --set-version Ubuntu-20.04 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;수 분 정도 소요될 수 있습니다. 기다리면 배포판의 버전이 자동으로 변경됩니다.&lt;/p&gt;
&lt;h3 id=&#34;설치된-배포판의-제거&#34;&gt;설치된 배포판의 제거&lt;/h3&gt;
&lt;p&gt;앞서 &lt;code&gt;wsl -l&lt;/code&gt; 명령어로 확인한 배포판의 이름(예: &lt;code&gt;Ubuntu-20.04&lt;/code&gt;)을 확인한 뒤, &lt;code&gt;--unregister &amp;lt;Distro&amp;gt;&lt;/code&gt; 옵션을 이용합니다.&lt;/p&gt;
&lt;p&gt;예를 들어 Ubuntu-20.04 배포판을 제거하는 경우에는 다음과 같이 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl --unregister Ubuntu-20.04
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 후에, MS store에서 설치한 내역을 찾아 uninstall까지 해주면 완전히 제거됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;wsl에서-windows-파일시스템-접근&#34;&gt;WSL에서 Windows 파일시스템 접근&lt;/h2&gt;
&lt;p&gt;Windows의 디스크 드라이브는 WSL에서 &lt;code&gt;/mnt/c&lt;/code&gt;, &lt;code&gt;/mnt/d&lt;/code&gt;&amp;hellip; 등으로 마운트되어 있습니다. 사용자가 별도로 마운트하지 않아도 바로 접근이 가능합니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    USB나 media drive 등 이동식 디스크에 대해서는 마운트 방법이 지원되지 않고 있습니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;windows에서-wsl-파일시스템-접근&#34;&gt;Windows에서 WSL 파일시스템 접근&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;\\wsl$\&amp;lt;Distro&amp;gt;\&lt;/code&gt; 경로를 갖는 네트워크 드라이브로 접근할 수 있습니다. 예를 들어 Ubuntu-20.04 배포판의 파일시스템은 &lt;code&gt;\\wsl$\Ubuntu-20.04\&lt;/code&gt;로 접근할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    만약 탐색기에서 &lt;code&gt;\\wsl$\&lt;/code&gt;에 접근 시 하위 목록이 보이지 않는다면, 한 번도 해당 인스턴스가 기동되지 않았기 때문입니다. 경로 입력란에 &lt;code&gt;\\wsl$\&amp;lt;Distro&amp;gt;&lt;/code&gt;를 입력하여 한 번 들어가고 난 뒤부터는 표시가 될 것입니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.microsoft.com/en-us/windows/wsl/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloudlinuxtech.com/install-linux-on-windows-10-wsl/#Prerequisite_to_install_WSL1_or_WSL2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloudlinuxtech.com/install-linux-on-windows-10-wsl/#Prerequisite_to_install_WSL1_or_WSL2&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;[WIN]+[R]로 실행 창을 연 뒤, &lt;code&gt;msinfo32&lt;/code&gt;를 입력하여 시스템 정보 창을 띄우고, &lt;strong&gt;시스템 종류&lt;/strong&gt;를 확인합니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;[WIN]+[R]로 실행 창을 연 뒤, &lt;code&gt;msinfo32&lt;/code&gt;를 입력하여 시스템 정보 창을 띄우고, &lt;strong&gt;버전&lt;/strong&gt;을 확인합니다.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결</title>
      <link>https://evandde.github.io/powershell-encoding/</link>
      <pubDate>Fri, 25 Sep 2020 08:55:52 +0900</pubDate>
      <guid>https://evandde.github.io/powershell-encoding/</guid>
      <description>&lt;p&gt;PowerShell에서 git log나 git diff 출력 시 인코딩 문제로 인해 글자가 깨져 나오는 경우가 있습니다. 이 문제를 해결하는 방법을 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Git 설정을 변경하거나, 혹은 PowerShell 설정을 변경하거나. 둘 중 하나만 해도 고쳐집니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;방법 1. Git 설정을 변경&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git의 출력 설정을 변경합니다. 이 방법은 Git의 설정만을 변경하므로, Git에 한해서만 문제가 해결됩니다. PowerShell은 건드리지 않으므로, 동일한 문제가 다른 프로그램에서도 발생한다면 그 부분은 고쳐지지 않을 것입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git config --global core.pager &#39;less --raw-control-chars&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;방법 2. PowerShell 설정을 변경&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Powershell에서 환경변수를 설정합니다. 이는 해당 PowerShell창에 한해 일시적으로 문제를 해결합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$env:LC_ALL=&#39;C.UTF-8&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Powershell을 켤 때 자동실행되는 스크립트에 환경변수를 설정하는 내용을 적습니다. 이는 새로운 PowerShell 창이 켜질때마다 해당 PowerShell 창에 환경변수를 설정하므로, 영구적으로 문제를 해결해줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-ExecutionPolicy unrestricted
if(!(Test-Path -path $profile)){ New-Item -Type File -Path $profile -Force }
Add-Content -Path $profile -Value &#39;$env:LC_ALL=&#39;&#39;C.UTF-8&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;버그-설명&#34;&gt;버그 설명&lt;/h2&gt;
&lt;p&gt;PowerShell에서 git log를 출력해보니 다음과 같이 한글이 깨져서 출력되는 일을 겪었습니다.
이 글에서는 이런 문제를 해결하는 방법을 다룹니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;error&#34; srcset=&#34;
               /powershell-encoding/error_hufdf22be8e591394f0a42568a58c0ed27_16086_b9664a7b5d8539ab2fb522dee029690a.png 400w,
               /powershell-encoding/error_hufdf22be8e591394f0a42568a58c0ed27_16086_f0d97a7bff89a893c90dd4bfe0a4b671.png 760w,
               /powershell-encoding/error_hufdf22be8e591394f0a42568a58c0ed27_16086_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/powershell-encoding/error_hufdf22be8e591394f0a42568a58c0ed27_16086_b9664a7b5d8539ab2fb522dee029690a.png&#34;
               width=&#34;592&#34;
               height=&#34;138&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;왜-발생하는가&#34;&gt;왜 발생하는가?&lt;/h2&gt;
&lt;p&gt;Git과 PowerShell에서의 인코딩 형식이 호환되지 않아서 그렇습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;해결방법-1-git-설정을-변경&#34;&gt;해결방법 1. Git 설정을 변경&lt;/h2&gt;
&lt;p&gt;첫 번째 방법은 git의 출력형식을 변경해주는 것입니다.
이 방법은 git의 설정만 변경할 뿐, PowerShell은 전혀 건드리지 않는다는 장점이 있습니다.&lt;/p&gt;
&lt;p&gt;PowerShell에서 다음 명령어를 통해 git의 출력 설정을 변경합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git config --global core.pager &#39;less --raw-control-chars&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;solved_git&#34; srcset=&#34;
               /powershell-encoding/solved_git_hu64357c13934de96543c05c5f070dc987_12539_521def6365e24571de8c34c9ef91eec9.png 400w,
               /powershell-encoding/solved_git_hu64357c13934de96543c05c5f070dc987_12539_321e870c48786c27017403abc8bf36e1.png 760w,
               /powershell-encoding/solved_git_hu64357c13934de96543c05c5f070dc987_12539_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/powershell-encoding/solved_git_hu64357c13934de96543c05c5f070dc987_12539_521def6365e24571de8c34c9ef91eec9.png&#34;
               width=&#34;661&#34;
               height=&#34;155&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;참고로 이 세팅을 해제하는 방법은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git config --global --unset core.pager
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;해결방법-2-powershell-설정을-변경&#34;&gt;해결방법 2. PowerShell 설정을 변경&lt;/h2&gt;
&lt;p&gt;두 번째 방법은 PowerShell에서 인코딩하는 방식을 변경해주는 것입니다.
이 방법은 PowerShell 설정을 변경하는 것이므로, PowerShell에서 사용하는 다른 프로그램에 영향을 줄 수도 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;해당-powershell-윈도우에서만-일시적으로-수정&#34;&gt;해당 PowerShell 윈도우에서만 일시적으로 수정&lt;/h3&gt;
&lt;p&gt;Powershell에서 &lt;code&gt;$env:LC_ALL&lt;/code&gt;이라는 환경변수의 값을 &lt;code&gt;&#39;C.UTF-8&#39;&lt;/code&gt;로 설정해주면 됩니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    이 방법은 그 PowerShell창에서만 유효합니다. 새로운 창에서는 문제가 다시 나타날 것입니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;다음 명령어를 입력하여 환경변수를 설정합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$env:LC_ALL=&#39;C.UTF-8&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;solved_ps&#34; srcset=&#34;
               /powershell-encoding/solved_ps_hua0003c83d795a1caf463a0107814780f_11172_2e5fcd9d08bc5cb7cf1c9f2b5e3e500c.png 400w,
               /powershell-encoding/solved_ps_hua0003c83d795a1caf463a0107814780f_11172_632c3c0ab97810d7e02c1f94758baed3.png 760w,
               /powershell-encoding/solved_ps_hua0003c83d795a1caf463a0107814780f_11172_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/powershell-encoding/solved_ps_hua0003c83d795a1caf463a0107814780f_11172_2e5fcd9d08bc5cb7cf1c9f2b5e3e500c.png&#34;
               width=&#34;593&#34;
               height=&#34;153&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;powershell을-시작할-때마다-수정되도록-자동실행-스크립트-생성&#34;&gt;PowerShell을 시작할 때마다 수정되도록 자동실행 스크립트 생성&lt;/h3&gt;
&lt;p&gt;PowerShell을 켤 때마다 자동으로 실행되는 스크립트를 만들고 그 스크립트에 &lt;code&gt;$env:LC_ALL&lt;/code&gt; 환경변수를 설정하는 내용을 적으면, 매 번 환경변수를 따로 설정하지 않아도 자동으로 문제가 해결됩니다.&lt;/p&gt;
&lt;p&gt;단, PowerShell에서 외부 스크립트를 실행하기 위해서는 &lt;strong&gt;실행 정책&lt;/strong&gt;의 &lt;strong&gt;제한을 풀어줘야&lt;/strong&gt; 합니다. 먼저, 다음 명령어를 통해 실행 정책 제한을 풀어줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-ExecutionPolicy unrestricted
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PowerShell을 켤 때마다 자동으로 실행되는 스크립트의 경로는 &lt;code&gt;$profile&lt;/code&gt; 변수에 저장되어 있습니다. 다음 명령줄을 통해, 만약 해당 경로에 스크립트가 없다면 새로 만들어줍니다. 그 뒤, 만들어진 스크립트 파일에 &lt;code&gt;$env:LC_ALL=&#39;C.UTF-8&#39;&lt;/code&gt; 내용을 추가합니다. 이를 통해, 앞으로는 PowerShell을 새로 시작할 때마다 이 스크립트가 실행되어 환경변수가 설정되도록 할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;if(!(Test-Path -path $profile)){ New-Item -Type File -Path $profile -Force }
Add-Content -Path $profile -Value &#39;$env:LC_ALL=&#39;&#39;C.UTF-8&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/41139067/git-log-output-encoding-issues-on-windows-10-command-prompt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/41139067/git-log-output-encoding-issues-on-windows-10-command-prompt&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows 실행([WIN]&#43;[R]) 명령어 정리</title>
      <link>https://evandde.github.io/windowrun/</link>
      <pubDate>Thu, 24 Sep 2020 23:07:12 +0900</pubDate>
      <guid>https://evandde.github.io/windowrun/</guid>
      <description>&lt;p&gt;이 글에서는 &lt;b&gt;시작-실행&lt;/b&gt; 혹은 단축키 &lt;b&gt;[WIN]+[R]&lt;/b&gt;을 통해 띄울 수 있는 실행 창에서 사용 가능한 다양한 명령어를 정리해 봅니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;run&#34; srcset=&#34;
               /windowrun/run_hu9e8321c22afa1e03261d9f36a197b4cf_8782_42e54cebf8eb1262da46ea61982c6edc.png 400w,
               /windowrun/run_hu9e8321c22afa1e03261d9f36a197b4cf_8782_4d19731ad97a3adf486797db7c3eb3b2.png 760w,
               /windowrun/run_hu9e8321c22afa1e03261d9f36a197b4cf_8782_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/windowrun/run_hu9e8321c22afa1e03261d9f36a197b4cf_8782_42e54cebf8eb1262da46ea61982c6edc.png&#34;
               width=&#34;399&#34;
               height=&#34;206&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;사용법&#34;&gt;사용법&lt;/h2&gt;
&lt;h3 id=&#34;기본적인-사용&#34;&gt;기본적인 사용&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;실행 창을 띄웁니다. (&lt;b&gt;시작-실행&lt;/b&gt; 혹은 단축키 &lt;b&gt;[WIN]+[R]&lt;/b&gt;)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;열기(&lt;u&gt;O&lt;/u&gt;):&lt;/b&gt; 라고 표시된 상자 안에 명령어를 입력합니다. (대소문자는 상관 없습니다)&lt;/li&gt;
&lt;li&gt;확인을 누릅니다. (혹은 &lt;b&gt;[ENTER]&lt;/b&gt;를 누릅니다.)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;관리자-권한으로-실행&#34;&gt;관리자 권한으로 실행&lt;/h3&gt;
&lt;p&gt;어떤 명령어든, 위의 사용법 설명에서 확인을 누르는 대신, &lt;b&gt;[CTRL]+[SHIFT]+[ENTER]&lt;/b&gt;를 누르면, 해당 명령어가 &lt;strong&gt;관리자 권한으로 실행&lt;/strong&gt;됩니다.&lt;/p&gt;
&lt;p&gt;주로 cmd나 powershell 등을 관리자권한으로 실행하고 싶을 때 사용하면 좋습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;응용프로그램-명령어&#34;&gt;응용프로그램 명령어&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;결과&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;calc&lt;/td&gt;
&lt;td&gt;계산기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmd&lt;/td&gt;
&lt;td&gt;커맨드 창&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mspaint&lt;/td&gt;
&lt;td&gt;그림판&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;notepad&lt;/td&gt;
&lt;td&gt;메모장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;powershell&lt;/td&gt;
&lt;td&gt;파워셸&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;환경변수로-정의된-폴더명&#34;&gt;환경변수로 정의된 폴더명&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;결과&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%AppData%&lt;/td&gt;
&lt;td&gt;현재 로그인한 사용자계정 폴더 내에 숨김처리된 AppData\Roaming\ 폴더 (일반적으로 C:\Users\&amp;lt;계정명&amp;gt;\Appdata\Roaming\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%LocalAppData%&lt;/td&gt;
&lt;td&gt;현재 로그인한 사용자계정 폴더 내에 숨김처리된 AppData\Local\ 폴더 (일반적으로 C:\Users\&amp;lt;계정명&amp;gt;\Appdata\Local\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%ProgramData%&lt;/td&gt;
&lt;td&gt;ProgramData 폴더 (일반적으로 C:\ProgramData\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%ProgramFiles%&lt;/td&gt;
&lt;td&gt;Program Files 폴더 (일반적으로 C:\Program Files\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%ProgramFiles(x86)%&lt;/td&gt;
&lt;td&gt;Program Files (x86) 폴더. 64 bit 전용 (일반적으로 C:\Program Files (x86)\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%UserProfile%&lt;/td&gt;
&lt;td&gt;현재 로그인한 사용자계정 폴더 (일반적으로 C:\Users\&amp;lt;계정명&amp;gt;\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%WinDir%&lt;/td&gt;
&lt;td&gt;Windows 폴더 (일반적으로 C:\Windows\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shell:Startup&lt;/td&gt;
&lt;td&gt;현재 사용자의 시작프로그램 폴더&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shell:Common Startup&lt;/td&gt;
&lt;td&gt;모든 사용자를 위한 시작프로그램 폴더&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;windows-시스템&#34;&gt;Windows 시스템&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;결과&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;appwiz.cpl&lt;/td&gt;
&lt;td&gt;프로그램 제거 또는 변경&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cleanmgr&lt;/td&gt;
&lt;td&gt;디스크 정리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compmgmt.msc&lt;/td&gt;
&lt;td&gt;컴퓨터 관리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;control&lt;/td&gt;
&lt;td&gt;제어판&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;desk.cpl&lt;/td&gt;
&lt;td&gt;디스플레이 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;devmgmt.msc&lt;/td&gt;
&lt;td&gt;장치 관리자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;diskmgmt.msc&lt;/td&gt;
&lt;td&gt;디스크 관리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dxdiag&lt;/td&gt;
&lt;td&gt;Direct X 진단 도구&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;firewall.cpl&lt;/td&gt;
&lt;td&gt;방화벽&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mmsys.cpl&lt;/td&gt;
&lt;td&gt;사운드 및 오디오 등록정보&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mrt&lt;/td&gt;
&lt;td&gt;악성 소프트웨어 제거 도구&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mstsc&lt;/td&gt;
&lt;td&gt;원격 데스크탑 연결&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mstsc /v &amp;lt;IP주소&amp;gt;&lt;/td&gt;
&lt;td&gt;IP 주소를 명시하여 원격 데스크탑 연결 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ncpa.cpl&lt;/td&gt;
&lt;td&gt;네트워크 연결 정보&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;optionalfeatures&lt;/td&gt;
&lt;td&gt;Windows 기능 켜기/끄기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;perfmon.msc&lt;/td&gt;
&lt;td&gt;성능 모니터 뷰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;powercfg.cpl&lt;/td&gt;
&lt;td&gt;전원 옵션&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;regedit&lt;/td&gt;
&lt;td&gt;레지스트리 편집기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;services.msc&lt;/td&gt;
&lt;td&gt;서비스&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sndvol&lt;/td&gt;
&lt;td&gt;볼륨 Mixer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sysdm.cpl&lt;/td&gt;
&lt;td&gt;시스템 속성&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;taskmgr&lt;/td&gt;
&lt;td&gt;Windows 작업 관리자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;taskschd.msc&lt;/td&gt;
&lt;td&gt;작업 스케줄러&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;winver&lt;/td&gt;
&lt;td&gt;Windows 버전 정보&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기</title>
      <link>https://evandde.github.io/chocolatey/</link>
      <pubDate>Thu, 24 Sep 2020 07:05:42 +0900</pubDate>
      <guid>https://evandde.github.io/chocolatey/</guid>
      <description>&lt;p&gt;이 글에서는 Windows용 패키지 관리자인 Chocolatey(약칭: choco)를 설치하고 이용하는 방법에 대해 알아봅니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;choco&#34; srcset=&#34;
               /chocolatey/choco_hu02ed5e5f07537358b72c8023e76b32cb_16662_df2dede2c3df1cd27d967ad237c1dbac.png 400w,
               /chocolatey/choco_hu02ed5e5f07537358b72c8023e76b32cb_16662_28f6a702d2e66ce6271d9e0e252e24f0.png 760w,
               /chocolatey/choco_hu02ed5e5f07537358b72c8023e76b32cb_16662_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/chocolatey/choco_hu02ed5e5f07537358b72c8023e76b32cb_16662_df2dede2c3df1cd27d967ad237c1dbac.png&#34;
               width=&#34;324&#34;
               height=&#34;220&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chocolatey&lt;/a&gt;는 Linux에서의 &lt;a href=&#34;https://salsa.debian.org/apt-team/apt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt(apt-get)&lt;/a&gt;, &lt;a href=&#34;http://yum.baseurl.org/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;yum&lt;/a&gt;이나 macOS에서의 &lt;a href=&#34;https://brew.sh/index_ko.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Homebrew&lt;/a&gt;처럼 패키지를 설치/업데이트/제거 등 관리하는 데에 사용하는 Windows용 프로그램입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Chocolatey로 프로그램의 설치/제거 등을 하실 때에는 &lt;strong&gt;관리자 권한&lt;/strong&gt;으로 작업하셔야 합니다. 관리자 권한 없이 이용하려면 설치경로의 변경 등의 작업이 요구됩니다.&lt;/p&gt;
&lt;p&gt;(참고: &lt;a href=&#34;https://chocolatey.org/install#non-administrative-install&#34;&gt;https://chocolatey.org/install#non-administrative-install&lt;/a&gt;)&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;chocolatey-설치하기&#34;&gt;Chocolatey 설치하기&lt;/h2&gt;
&lt;h3 id=&#34;요구사항&#34;&gt;요구사항&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows 7+/ Windows Server 2003+&lt;/li&gt;
&lt;li&gt;Powershell v2+ (온라인 설치 시 v3+)&lt;/li&gt;
&lt;li&gt;.Net Framework 4+ (온라인 설치 시 4.5+)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cmdexe로-설치하기&#34;&gt;cmd.exe로 설치하기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;cmd.exe를 관리자 권한으로 실행합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음 명령줄을 실행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@&amp;quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&amp;quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &amp;quot; [System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&amp;quot; &amp;amp;&amp;amp; SET &amp;quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;powershellexe로-설치하기&#34;&gt;PowerShell.exe로 설치하기&lt;/h3&gt;
&lt;p&gt;PowerShell로 설치할 때에는 실행 정책(Execution Policy)상 제한이 걸리지 않도록 설정하는 과정이 추가적으로 필요할 수 있습니다. 실행 정책에 관해서는 간단하게 &lt;code&gt;Bypass&lt;/code&gt; 옵션을 사용하셔도 되고, 좀 더 보안을 신경쓰신다면 &lt;code&gt;AllSigned&lt;/code&gt; 옵션을 사용하셔도 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PowerShell.exe를 관리자 권한으로 실행합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Get-ExecutionPolicy&lt;/code&gt; 명령어로 실행 정책을 확인합니다. 만약 &lt;code&gt;Restricted&lt;/code&gt;가 출력된다면, &lt;code&gt;Set-ExecutionPolicy AllSigned&lt;/code&gt; 나, &lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process&lt;/code&gt;를 입력하여 제한을 풀어줍니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 다음의 명령줄을 실행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;그-외의-방법으로-설치하기&#34;&gt;그 외의 방법으로 설치하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/docs/installation#more-install-options&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chocolatey 공식 홈페이지를 참고&lt;/a&gt;하세요.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;chocolatey-이용하기&#34;&gt;Chocolatey 이용하기&lt;/h2&gt;
&lt;h3 id=&#34;패키지-검색하기&#34;&gt;패키지 검색하기&lt;/h3&gt;
&lt;p&gt;choco로 설치 가능한 전체 패키지 목록은 &lt;a href=&#34;https://chocolatey.org/packages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://chocolatey.org/packages&lt;/a&gt;에서 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;혹은, cmd나 PowerShell에서 &lt;code&gt;choco search&lt;/code&gt; 명령어로 검색이 가능합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco search 검색할내용
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;choco_search&#34; srcset=&#34;
               /chocolatey/choco_search_hu293f8915d22526c78a36e432991d23a5_111115_f6f2d08756bd65a7b4a84c2668c552a9.png 400w,
               /chocolatey/choco_search_hu293f8915d22526c78a36e432991d23a5_111115_d55506e1abac48b907a2cdef2fdf9992.png 760w,
               /chocolatey/choco_search_hu293f8915d22526c78a36e432991d23a5_111115_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/chocolatey/choco_search_hu293f8915d22526c78a36e432991d23a5_111115_f6f2d08756bd65a7b4a84c2668c552a9.png&#34;
               width=&#34;708&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;추가적으로 다음과 같은 옵션을 사용할 수도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;검색할내용과 정확하게 일치하는 항목만 출력하기: &lt;code&gt;-e&lt;/code&gt; (&lt;code&gt;--exact&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;패키지에 대한 자세한 정보 출력하기: &lt;code&gt;--detailed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;현재 컴퓨터에 설치된 패키지 목록 출력하기: &lt;code&gt;-l&lt;/code&gt; (&lt;code&gt;--local&lt;/code&gt;) (&lt;a href=&#34;https://evandde.github.io/chocolatey/#설치한-패키지-목록-보기&#34;&gt;아래(설치한 패키지 목록 보기)&lt;/a&gt; 참고)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;패키지-설치하기&#34;&gt;패키지 설치하기&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;choco install&lt;/code&gt; 명령어를 통해 패키지를 설치할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install 패키지이름
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;추가적으로 다음과 같은 옵션을 사용할 수도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설치 시 확인여부를 묻는 내용을 띄우지 않고 무조건 수락하기: &lt;code&gt;-y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;특정 버전을 설치하기: &lt;code&gt;--version 버전번호&lt;/code&gt; (예: &lt;code&gt;choco install python --version 3.8.5&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;설치한-패키지-목록-보기&#34;&gt;설치한 패키지 목록 보기&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;choco search&lt;/code&gt; 명령어 뒤에 &lt;code&gt;-l&lt;/code&gt;옵션을 쓰면, 현재 이 컴퓨터에 설치된 목록을 출력해줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco search -l
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;패키지-삭제하기&#34;&gt;패키지 삭제하기&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;choco uninstall&lt;/code&gt; 명령어를 통해 설치한 패키지를 삭제할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco uninstall 패키지이름
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;패키지-업그레이드하기&#34;&gt;패키지 업그레이드하기&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;choco upgrade&lt;/code&gt; 명령어를 통해 설치한 패키지를 업그레이드할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco upgrade 패키지이름
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;choco upgrade chocolatey&lt;/code&gt; 명령어를 입력하면, chocolatey도 최신화할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;choco upgrade all&lt;/code&gt; 명령어를 입력하면, 현재 컴퓨터에 설치된 모든 패키지(chocolatey 포함)를 최신화할 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://chocolatey.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/chocolatey/choco/wiki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/chocolatey/choco/wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/docs/commands-reference&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://chocolatey.org/docs/commands-reference&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
