<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>기본 다지기 | EvaNote</title>
    <link>https://evandde.github.io/course/practical-cpp-cmake/02_basic/</link>
      <atom:link href="https://evandde.github.io/course/practical-cpp-cmake/02_basic/index.xml" rel="self" type="application/rss+xml" />
    <description>기본 다지기</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2021 Evan Kim</copyright><lastBuildDate>Fri, 15 Oct 2021 13:23:24 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>기본 다지기</title>
      <link>https://evandde.github.io/course/practical-cpp-cmake/02_basic/</link>
    </image>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 3. 빌드, 컴파일, 링크</title>
      <link>https://evandde.github.io/praccpp-003-whatisbuild/</link>
      <pubDate>Wed, 10 Nov 2021 16:32:26 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-003-whatisbuild/</guid>
      <description>&lt;p&gt;이 글에서는 &lt;b&gt;빌드&lt;/b&gt;/&lt;b&gt;컴파일&lt;/b&gt;/&lt;b&gt;링크&lt;/b&gt;가 무엇인지 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;컴파일은 번역하는 과정, 링크는 번역된 파일을 묶는 과정, 그리고 빌드는 컴파일과 링크를 합쳐서 부르는 것&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일이 프로그램의 실질적 동작을 설명하는 C++로 된 코드&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; 폴더는 빌드를 통해 나온 결과물이 담긴 폴더&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-설명&#34;&gt;용어 설명&lt;/h2&gt;
&lt;h3 id=&#34;컴파일&#34;&gt;컴파일&lt;/h3&gt;
&lt;p&gt;컴파일이란 사람의 언어로 작성된 코드(e.g. &lt;code&gt;main.cpp&lt;/code&gt;)를 컴퓨터가 사용하는 언어로 &lt;b&gt;번역&lt;/b&gt;하는 과정을 의미합니다.&lt;/p&gt;
&lt;p&gt;컴퓨터는 C++로 작성된 파일을 해석할 수 없습니다. 그래서 이 파일을 컴퓨터가 사용하는 이진수(binary) 기반의 언어로 번역하는 단계가 필요합니다. 이 과정을 &lt;b&gt;컴파일(compile)&lt;/b&gt;이라 부르고, 컴파일을 수행해주는 도구를 &lt;b&gt;컴파일러(compiler)&lt;/b&gt;라고 합니다.&lt;/p&gt;
&lt;p&gt;번역기도 파파고나 구글번역기 등 여러가지가 있고 각각의 결과물도 다르고 성능도 다르듯, 컴파일러도 여러가지 종류가 있고 각각의 특징이나 장단점이 있습니다. 이 시리즈에서는 그 중 Microsoft에서 제공하는 컴파일러를 이용하고 있는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;링크&#34;&gt;링크&lt;/h3&gt;
&lt;p&gt;링크란 여러 개의 파일들을 &lt;strong&gt;한데 묶어서&lt;/strong&gt; 하나의 실행용 프로그램(e.g. &lt;code&gt;.exe&lt;/code&gt; 파일)을 만들어내는 과정을 의미합니다.&lt;/p&gt;
&lt;p&gt;지금 우리는 C++ 코드가 &lt;code&gt;main.cpp&lt;/code&gt; 파일 하나만 가지고 있지만, 앞으로 C++을 배워나가다 보면 더 많은 파일을 이용하여 이들을 모아 하나의 프로그램을 만들어야 할 일이 생길 것입니다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. 마치 요리를 할 때 메인 재료 이외에도 다른 부가적인 재료와 양념이 들어가듯 말이죠. 이 때, 여러 개의 파일들을 유기적으로 잘 엮어서 하나의 완성된 프로그램으로 만들어내는 과정을 &lt;b&gt;링크(link)&lt;/b&gt;라고 부르고, 링크를 수행해주는 도구를 &lt;b&gt;링커(linker)&lt;/b&gt;라고 합니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드&#34;&gt;빌드&lt;/h3&gt;
&lt;p&gt;빌드란 컴파일과 링크의 두 과정을 합친 것입니다.&lt;/p&gt;
&lt;p&gt;순서 상으로는, &lt;b&gt;컴파일&lt;/b&gt;을 먼저 한 뒤에, 번역된 파일들을 &lt;b&gt;링크&lt;/b&gt;하는 과정을 거쳐 프로그램이 만들어집니다. 이 일련의 과정을 &lt;b&gt;빌드(build)&lt;/b&gt;라고 하고, 빌드를 수행해주는 도구를 &lt;b&gt;빌더(builder)&lt;/b&gt;라고 하는 것이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;b&gt;컴파일&lt;/b&gt;이라는 용어를 &lt;b&gt;빌드의 뜻&lt;/b&gt;으로 사용하는 경우가 꽤나 자주 있으니 그러려니 하고 넘어가시면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;cmake-quick-start-프로젝트-파일구조&#34;&gt;CMake: Quick Start 프로젝트 파일구조&lt;/h2&gt;
&lt;p&gt;지난 번 글에서 만든 &lt;a href=&#34;https://evandde.github.io/praccpp-002-envtest/#cmake-quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake: Quick Start 프로젝트&lt;/a&gt;를 살펴보며 설명을 이어가도록 하겠습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    만약 다른 IDE를 사용하고 있어 CMake: Quick Start를 실습하지 못하는 분은, 그냥 &lt;b&gt;이론적인 부분만 보고 넘어가셔도 괜찮습니다&lt;/b&gt;.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;CMake: Quick Start 프로젝트를 만든 폴더에는 다음과 같은 내용물이 만들어져 있을 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; 폴더&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vscode&lt;/code&gt; 폴더(이 폴더는 있을 수도 있고, 없을 수도 있습니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각에 대해 간단히 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;maincpp-파일&#34;&gt;main.cpp 파일&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일은 프로그램이 &lt;b&gt;실제로 어떤 일을 수행할 지&lt;/b&gt;에 대해 &lt;b&gt;C++ 언어&lt;/b&gt;로 적혀있는 파일로, 가장 핵심이 되는 파일입니다.&lt;/p&gt;
&lt;p&gt;앞으로 우리가 이 시리즈를 진행함에 있어, 계속 수정하며 살펴볼 파일입니다.&lt;/p&gt;
&lt;h3 id=&#34;build-폴더&#34;&gt;build 폴더&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; 폴더는 빌드를 수행하여 나온 결과물이 담긴 폴더입니다.&lt;/p&gt;
&lt;p&gt;빌드 결과물을 담는 경로는 자유롭게 변경 가능하지만, 이처럼 &lt;code&gt;build&lt;/code&gt;라는 이름의 폴더를 만들고 그 안에 결과물을 담는 것이 일반적입니다. 이 시리즈와 같이 환경을 구셩하셨다면, 자동으로 이 관례에 따라 저장될 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;cmakeliststxt-파일&#34;&gt;CMakeLists.txt 파일&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일은 CMake라는 프로그램을 활용하기 위해 필요한 파일입니다. 이는 나중에 CMake에 대해 다룰 때 다시 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;vscode-폴더&#34;&gt;.vscode 폴더&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.vscode&lt;/code&gt; 폴더는 &lt;b&gt;VSCode라는 IDE를 사용할 때의 설정 값 등이 저장되는 폴더&lt;/b&gt;로, CMake 기반의 프로젝트와는 아무런 관계가 없는 폴더입니다.&lt;/p&gt;
&lt;p&gt;나중에 여러가지 설정을 조정할 때 쓰일 일이 있으니, 그 때 다시 살펴보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-11-10: 최초 게시&lt;/li&gt;
&lt;li&gt;2021-11-11: TL;DR 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;사실 지금처럼 &lt;code&gt;main.cpp&lt;/code&gt; 파일 하나만으로 프로그램을 만들 때에도, 눈에 보이지 않는 수많은 다른 파일들이 엮어져서 프로그램이 만들어지게 됩니다. 이는 C++ 프로그램을 만들 때 알아서 엮어지도록 되어 있어서 직접 보이지 않을 뿐입니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 4. #include</title>
      <link>https://evandde.github.io/praccpp-004-whatisinclude/</link>
      <pubDate>Sun, 21 Nov 2021 19:15:06 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-004-whatisinclude/</guid>
      <description>&lt;p&gt;이 글에서는 &lt;b&gt;include&lt;/b&gt;의 역할과 &lt;strong&gt;헤더파일&lt;/strong&gt;에 대한 간단한 개념을 알아봅니다.&lt;/p&gt;
&lt;p&gt;지난 글에서 Helloworld 프로젝트를 구성하는 각 파일/폴더의 역할을 알아보았으니, 이제부터 당분간은 가장 핵심이되는 &lt;code&gt;main.cpp&lt;/code&gt; 파일을 뜯어보겠습니다.&lt;/p&gt;
&lt;p&gt;이번 글에서는 그 &lt;code&gt;main.cpp&lt;/code&gt; 파일의 첫 줄인 &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;에 대한 이야기를 다뤄봅시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#include&lt;/code&gt;의 역할은 사실상 &lt;b&gt;복사-붙여넣기&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;아무파일에나 쓸 수 있는 건 아니고, &lt;strong&gt;헤더파일&lt;/strong&gt;에만 쓸 수 있음.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iostream&lt;/code&gt;이라는 헤더파일은 &lt;b&gt;C++ 프로그램에서 기본적인 입력과 출력을 수행하기 위해 필요&lt;/b&gt;한 녀석임&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;include의-역할&#34;&gt;#include의 역할&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;#include&lt;/code&gt;은 &lt;b&gt;파일의 내용을 그대로 복사해서 그 자리에 붙여넣는 기능&lt;/b&gt;을 수행합니다.&lt;/p&gt;
&lt;p&gt;즉, &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;이 수행하는 내용은 &lt;b&gt;iostream이라는 파일의 내용&lt;/b&gt;을 그대로 복사해서, &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt; &lt;b&gt;줄이 있던 자리에 그대로 바꿔치기&lt;/b&gt;하는 것이지요.&lt;/p&gt;
&lt;p&gt;아무 파일이나 다 사용할 수 있는 것은 아니고, &lt;b&gt;헤더파일&lt;/b&gt;이라는 것에만 사용할 수 있습니다. 헤더파일이 무엇인지는 나중에 자세히 살펴보겠습니다. 여기서는 일단, 헤더파일이란 &lt;b&gt;이 코드에 어떤 내용이 들어있는지 목차가 정리되어있는 파일&lt;/b&gt;이다 정도로 기억하고 넘어갑시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;iostream&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;이라는 파일은 &lt;b&gt;C++에서 표준 입출력과 관련한 기능&lt;/b&gt;을 수행하기 위해 필요한 헤더파일입니다. 예를 들면, &lt;b&gt;어떤 내용을 컴퓨터 화면(터미널 창)에 출력&lt;/b&gt;하거나 &lt;b&gt;컴퓨터 화면(터미널 창)에서 어떤 내용을 입력&lt;/b&gt; 받는 기능을 제공하는 것이지요.&lt;/p&gt;
&lt;p&gt;이 안에 무슨 내용이 있는지 살짝 구경해보고 싶으시다면, 코드에서 &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 부분을 &lt;b&gt;[CTRL] 키를 누른 상태에서 마우스 왼쪽 클릭(L-Click)&lt;/b&gt; 해보시기 바랍니다. VSCode는 물론이며, 이 외에도 대부분의 IDE가 [CTRL]+[L-Click] 기능을 제공합니다. 이는 &lt;b&gt;파일의 내용을 살펴보거나, 함수 및 변수의 원형 등을 살펴볼 때 사용&lt;/b&gt;할 수 있습니다. 앞으로도 자주 사용할 기능이니 기억해두시는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_iostream&#34; srcset=&#34;
               /praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_1203280c4031feed97fe60b7e74a4243.png 400w,
               /praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_975a47bb619b9ff2c34901f80d250224.png 760w,
               /praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_1203280c4031feed97fe60b7e74a4243.png&#34;
               width=&#34;760&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;클릭해보면 다음과 같이 상당한 양의 내용이 담긴 파일이 새로 열리는 것을 확인할 수 있을 것입니다. 이것이 &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 헤더파일의 내용입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_iostream&#34; srcset=&#34;
               /praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_6318d2900035f405ddc0545a615d562a.png 400w,
               /praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_2e6a44e5cdf7dc202d82c9c51aedec3e.png 760w,
               /praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_6318d2900035f405ddc0545a615d562a.png&#34;
               width=&#34;760&#34;
               height=&#34;583&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;앞서 &lt;code&gt;#include&lt;/code&gt;의 역할은 이 파일의 내용을 &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;이 써있던 자리에 그대로 복사-붙여넣기 하는 것이라고 했으니, 이 내용 전부를 복사-붙여넣기하여 대체하셔도 당연히 프로그램은 정상적으로 동작할 것입니다. 궁금하신 분은 직접 실습해보시면 좋겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-12-09: 최초 게시&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
