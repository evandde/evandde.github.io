<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>기본 다지기 | EvaNote</title>
    <link>https://evandde.github.io/course/practical-cpp-cmake/02_basic/</link>
      <atom:link href="https://evandde.github.io/course/practical-cpp-cmake/02_basic/index.xml" rel="self" type="application/rss+xml" />
    <description>기본 다지기</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2022 Evan Kim</copyright><lastBuildDate>Fri, 15 Oct 2021 13:23:24 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>기본 다지기</title>
      <link>https://evandde.github.io/course/practical-cpp-cmake/02_basic/</link>
    </image>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 3. 빌드, 컴파일, 링크</title>
      <link>https://evandde.github.io/praccpp-003-whatisbuild/</link>
      <pubDate>Wed, 10 Nov 2021 16:32:26 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-003-whatisbuild/</guid>
      <description>&lt;p&gt;이 글에서는 &lt;b&gt;빌드&lt;/b&gt;/&lt;b&gt;컴파일&lt;/b&gt;/&lt;b&gt;링크&lt;/b&gt;가 무엇인지 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;컴파일은 번역하는 과정, 링크는 번역된 파일을 묶는 과정, 그리고 빌드는 컴파일과 링크를 합쳐서 부르는 것&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일이 프로그램의 실질적 동작을 설명하는 C++로 된 코드&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; 폴더는 빌드를 통해 나온 결과물이 담긴 폴더&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-설명&#34;&gt;용어 설명&lt;/h2&gt;
&lt;h3 id=&#34;컴파일&#34;&gt;컴파일&lt;/h3&gt;
&lt;p&gt;컴파일이란 사람의 언어로 작성된 코드(e.g. &lt;code&gt;main.cpp&lt;/code&gt;)를 컴퓨터가 사용하는 언어로 &lt;b&gt;번역&lt;/b&gt;하는 과정을 의미합니다.&lt;/p&gt;
&lt;p&gt;컴퓨터는 C++로 작성된 파일을 해석할 수 없습니다. 그래서 이 파일을 컴퓨터가 사용하는 이진수(binary) 기반의 언어로 번역하는 단계가 필요합니다. 이 과정을 &lt;b&gt;컴파일(compile)&lt;/b&gt;이라 부르고, 컴파일을 수행해주는 도구를 &lt;b&gt;컴파일러(compiler)&lt;/b&gt;라고 합니다.&lt;/p&gt;
&lt;p&gt;번역기도 파파고나 구글번역기 등 여러가지가 있고 각각의 결과물도 다르고 성능도 다르듯, 컴파일러도 여러가지 종류가 있고 각각의 특징이나 장단점이 있습니다. 이 시리즈에서는 그 중 Microsoft에서 제공하는 컴파일러를 이용하고 있는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;링크&#34;&gt;링크&lt;/h3&gt;
&lt;p&gt;링크란 여러 개의 파일들을 &lt;strong&gt;한데 묶어서&lt;/strong&gt; 하나의 실행용 프로그램(e.g. &lt;code&gt;.exe&lt;/code&gt; 파일)을 만들어내는 과정을 의미합니다.&lt;/p&gt;
&lt;p&gt;지금 우리는 C++ 코드가 &lt;code&gt;main.cpp&lt;/code&gt; 파일 하나만 가지고 있지만, 앞으로 C++을 배워나가다 보면 더 많은 파일을 이용하여 이들을 모아 하나의 프로그램을 만들어야 할 일이 생길 것입니다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. 마치 요리를 할 때 메인 재료 이외에도 다른 부가적인 재료와 양념이 들어가듯 말이죠. 이 때, 여러 개의 파일들을 유기적으로 잘 엮어서 하나의 완성된 프로그램으로 만들어내는 과정을 &lt;b&gt;링크(link)&lt;/b&gt;라고 부르고, 링크를 수행해주는 도구를 &lt;b&gt;링커(linker)&lt;/b&gt;라고 합니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드&#34;&gt;빌드&lt;/h3&gt;
&lt;p&gt;빌드란 컴파일과 링크의 두 과정을 합친 것입니다.&lt;/p&gt;
&lt;p&gt;순서 상으로는, &lt;b&gt;컴파일&lt;/b&gt;을 먼저 한 뒤에, 번역된 파일들을 &lt;b&gt;링크&lt;/b&gt;하는 과정을 거쳐 프로그램이 만들어집니다. 이 일련의 과정을 &lt;b&gt;빌드(build)&lt;/b&gt;라고 하고, 빌드를 수행해주는 도구를 &lt;b&gt;빌더(builder)&lt;/b&gt;라고 하는 것이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;b&gt;컴파일&lt;/b&gt;이라는 용어를 &lt;b&gt;빌드의 뜻&lt;/b&gt;으로 사용하는 경우가 꽤나 자주 있으니 그러려니 하고 넘어가시면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;cmake-quick-start-프로젝트-파일구조&#34;&gt;CMake: Quick Start 프로젝트 파일구조&lt;/h2&gt;
&lt;p&gt;지난 번 글에서 만든 &lt;a href=&#34;https://evandde.github.io/praccpp-002-envtest/#cmake-quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake: Quick Start 프로젝트&lt;/a&gt;를 살펴보며 설명을 이어가도록 하겠습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    만약 다른 IDE를 사용하고 있어 CMake: Quick Start를 실습하지 못하는 분은, 그냥 &lt;b&gt;이론적인 부분만 보고 넘어가셔도 괜찮습니다&lt;/b&gt;.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;CMake: Quick Start 프로젝트를 만든 폴더에는 다음과 같은 내용물이 만들어져 있을 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; 폴더&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vscode&lt;/code&gt; 폴더(이 폴더는 있을 수도 있고, 없을 수도 있습니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각에 대해 간단히 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;maincpp-파일&#34;&gt;main.cpp 파일&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일은 프로그램이 &lt;b&gt;실제로 어떤 일을 수행할 지&lt;/b&gt;에 대해 &lt;b&gt;C++ 언어&lt;/b&gt;로 적혀있는 파일로, 가장 핵심이 되는 파일입니다.&lt;/p&gt;
&lt;p&gt;앞으로 우리가 이 시리즈를 진행함에 있어, 계속 수정하며 살펴볼 파일입니다.&lt;/p&gt;
&lt;h3 id=&#34;build-폴더&#34;&gt;build 폴더&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; 폴더는 빌드를 수행하여 나온 결과물이 담긴 폴더입니다.&lt;/p&gt;
&lt;p&gt;빌드 결과물을 담는 경로는 자유롭게 변경 가능하지만, 이처럼 &lt;code&gt;build&lt;/code&gt;라는 이름의 폴더를 만들고 그 안에 결과물을 담는 것이 일반적입니다. 이 시리즈와 같이 환경을 구셩하셨다면, 자동으로 이 관례에 따라 저장될 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;cmakeliststxt-파일&#34;&gt;CMakeLists.txt 파일&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일은 CMake라는 프로그램을 활용하기 위해 필요한 파일입니다. 이는 나중에 CMake에 대해 다룰 때 다시 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;vscode-폴더&#34;&gt;.vscode 폴더&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.vscode&lt;/code&gt; 폴더는 &lt;b&gt;VSCode라는 IDE를 사용할 때의 설정 값 등이 저장되는 폴더&lt;/b&gt;로, CMake 기반의 프로젝트와는 아무런 관계가 없는 폴더입니다.&lt;/p&gt;
&lt;p&gt;나중에 여러가지 설정을 조정할 때 쓰일 일이 있으니, 그 때 다시 살펴보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-11-10: 최초 게시&lt;/li&gt;
&lt;li&gt;2021-11-11: TL;DR 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;사실 지금처럼 &lt;code&gt;main.cpp&lt;/code&gt; 파일 하나만으로 프로그램을 만들 때에도, 눈에 보이지 않는 수많은 다른 파일들이 엮어져서 프로그램이 만들어지게 됩니다. 이는 C++ 프로그램을 만들 때 알아서 엮어지도록 되어 있어서 직접 보이지 않을 뿐입니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 4. #include</title>
      <link>https://evandde.github.io/praccpp-004-whatisinclude/</link>
      <pubDate>Sun, 21 Nov 2021 19:15:06 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-004-whatisinclude/</guid>
      <description>&lt;p&gt;이 글에서는 &lt;b&gt;include&lt;/b&gt;의 역할과 &lt;strong&gt;헤더파일&lt;/strong&gt;에 대한 간단한 개념을 알아봅니다.&lt;/p&gt;
&lt;p&gt;지난 글에서 Helloworld 프로젝트를 구성하는 각 파일/폴더의 역할을 알아보았으니, 이제부터 당분간은 가장 핵심이되는 &lt;code&gt;main.cpp&lt;/code&gt; 파일을 뜯어보겠습니다.&lt;/p&gt;
&lt;p&gt;이번 글에서는 그 &lt;code&gt;main.cpp&lt;/code&gt; 파일의 첫 줄인 &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;에 대한 이야기를 다뤄봅시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#include&lt;/code&gt;의 역할은 사실상 &lt;b&gt;복사-붙여넣기&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;아무파일에나 쓸 수 있는 건 아니고, &lt;strong&gt;헤더파일&lt;/strong&gt;에만 쓸 수 있음.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iostream&lt;/code&gt;이라는 헤더파일은 &lt;b&gt;C++ 프로그램에서 기본적인 입력과 출력을 수행하기 위해 필요&lt;/b&gt;한 녀석임&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;include의-역할&#34;&gt;#include의 역할&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;#include&lt;/code&gt;은 &lt;b&gt;파일의 내용을 그대로 복사해서 그 자리에 붙여넣는 기능&lt;/b&gt;을 수행합니다.&lt;/p&gt;
&lt;p&gt;즉, &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;이 수행하는 내용은 &lt;b&gt;iostream이라는 파일의 내용&lt;/b&gt;을 그대로 복사해서, &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt; &lt;b&gt;줄이 있던 자리에 그대로 바꿔치기&lt;/b&gt;하는 것이지요.&lt;/p&gt;
&lt;p&gt;아무 파일이나 다 사용할 수 있는 것은 아니고, &lt;b&gt;헤더파일&lt;/b&gt;이라는 것에만 사용할 수 있습니다. 헤더파일이 무엇인지는 나중에 자세히 살펴보겠습니다. 여기서는 일단, 헤더파일이란 &lt;b&gt;이 코드에 어떤 내용이 들어있는지 목차가 정리되어있는 파일&lt;/b&gt;이다 정도로 기억하고 넘어갑시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;iostream&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;이라는 파일은 &lt;b&gt;C++에서 표준 입출력과 관련한 기능&lt;/b&gt;을 수행하기 위해 필요한 헤더파일입니다. 예를 들면, &lt;b&gt;어떤 내용을 컴퓨터 화면(터미널 창)에 출력&lt;/b&gt;하거나 &lt;b&gt;컴퓨터 화면(터미널 창)에서 어떤 내용을 입력&lt;/b&gt; 받는 기능을 제공하는 것이지요.&lt;/p&gt;
&lt;p&gt;이 안에 무슨 내용이 있는지 살짝 구경해보고 싶으시다면, 코드에서 &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 부분을 &lt;b&gt;[CTRL] 키를 누른 상태에서 마우스 왼쪽 클릭(L-Click)&lt;/b&gt; 해보시기 바랍니다. VSCode는 물론이며, 이 외에도 대부분의 IDE가 [CTRL]+[L-Click] 기능을 제공합니다. 이는 &lt;b&gt;파일의 내용을 살펴보거나, 함수 및 변수의 원형 등을 살펴볼 때 사용&lt;/b&gt;할 수 있습니다. 앞으로도 자주 사용할 기능이니 기억해두시는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_iostream&#34; srcset=&#34;
               /praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_1203280c4031feed97fe60b7e74a4243.png 400w,
               /praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_975a47bb619b9ff2c34901f80d250224.png 760w,
               /praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-004-whatisinclude/01_iostream_huddfaca0fac5a964ff0044bdd773b584a_28855_1203280c4031feed97fe60b7e74a4243.png&#34;
               width=&#34;760&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;클릭해보면 다음과 같이 상당한 양의 내용이 담긴 파일이 새로 열리는 것을 확인할 수 있을 것입니다. 이것이 &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 헤더파일의 내용입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_iostream&#34; srcset=&#34;
               /praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_6318d2900035f405ddc0545a615d562a.png 400w,
               /praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_2e6a44e5cdf7dc202d82c9c51aedec3e.png 760w,
               /praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-004-whatisinclude/02_iostream_hubc82c769d5d114a653264c6524a6284f_100119_6318d2900035f405ddc0545a615d562a.png&#34;
               width=&#34;760&#34;
               height=&#34;583&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;앞서 &lt;code&gt;#include&lt;/code&gt;의 역할은 이 파일의 내용을 &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;이 써있던 자리에 그대로 복사-붙여넣기 하는 것이라고 했으니, 이 내용 전부를 복사-붙여넣기하여 대체하셔도 당연히 프로그램은 정상적으로 동작할 것입니다. 궁금하신 분은 직접 실습해보시면 좋겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-12-09: 최초 게시&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 5. main 함수</title>
      <link>https://evandde.github.io/praccpp-005-whatismainfunc/</link>
      <pubDate>Thu, 16 Dec 2021 16:37:27 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-005-whatismainfunc/</guid>
      <description>&lt;p&gt;이 글에서는 함수에 대한 기본적인 이해와 더불어 main 함수의 역할을 알아봅니다.&lt;/p&gt;
&lt;p&gt;일단 이 글에서는 함수에 관한 문법적인 요소는 다 빼고, 개념부터 잡겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;함수(function)란, 일련의 작업과정을 하나로 묶은 것&lt;/li&gt;
&lt;li&gt;프로그램(program)이라는 것도 결국에는 그 프로그램이 수행하고자 하는 일련의 작업과정을 하나로 묶은 것이므로, &lt;strong&gt;함수&lt;/strong&gt;라고 볼 수 있음&lt;/li&gt;
&lt;li&gt;C++에서는 하나의 프로그램에 해당하는 작업과정을 하나로 묶어 &lt;b&gt;&amp;quot;main&amp;quot;&lt;/b&gt;이라는 이름의 함수로 부르자고 정해져 있음. 따라서 모든 C++ 프로그램은 &lt;strong&gt;하나의 main 함수&lt;/strong&gt;를 무조건 가지며, 컴퓨터가 &lt;strong&gt;어떤 프로그램을 실행&lt;/strong&gt;한다는 것은 &lt;strong&gt;그 프로그램의 main 함수를 실행하는 것과 동일&lt;/strong&gt;한 의미임&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;함수function&#34;&gt;함수(function)&lt;/h2&gt;
&lt;h3 id=&#34;기본이론&#34;&gt;기본이론&lt;/h3&gt;
&lt;p&gt;함수란 일련의 작업과정을 하나로 묶어서 부르는 것을 말합니다.&lt;/p&gt;
&lt;p&gt;간단한 예시로, 볼펜의 무게를 재는 방법을 &lt;b&gt;대학원생 A&lt;/b&gt;에게 설명한다고 생각해봅시다. 이 대학원생 A는 비록 아직 할 줄 아는 일은 없지만, 한 번 가르쳐주면 가르쳐준대로 완벽하게 따르는 훌륭한(?) 친구입니다.&lt;/p&gt;
&lt;p&gt;이 친구에게 볼펜의 무게를 재는 방법을 알려주기 위해 다음과 같이 말을 해주면 되겠군요.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저울을 꺼낸다.&lt;/li&gt;
&lt;li&gt;저울의 영점을 맞춘다.&lt;/li&gt;
&lt;li&gt;저울 위에 볼펜을 올린다.&lt;/li&gt;
&lt;li&gt;저울이 가리키는 값을 읽는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그런데, 볼펜의 무게를 재야 할 때마다 위와 같은 네 단계를 매 번 말해주는 것이 여간 귀찮은 일이 아닙니다. 그래서 이 네 단계의 과정을 &amp;quot;볼펜의 무게 재기&amp;quot;라는 하나의 이름으로 묶어서 말하기로 약속해 보았습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;볼펜의 무게 재기&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저울을 꺼낸다.&lt;/li&gt;
&lt;li&gt;저울의 영점을 맞춘다.&lt;/li&gt;
&lt;li&gt;저울 위에 볼펜을 올린다.&lt;/li&gt;
&lt;li&gt;저울이 가리키는 값을 읽는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;이제는 A에게 &lt;b&gt;&amp;quot;볼펜의 무게를 재라&amp;quot;&lt;/b&gt;라고만 말하면, A는 위의 네 단계를 수행할 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;이것이 함수입니다. 우리는 방금 &amp;quot;볼펜의 무게 재기&amp;quot;라는 함수를 만들었습니다.&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;함수의-입력인자&#34;&gt;함수의 입력인자&lt;/h3&gt;
&lt;p&gt;볼펜 말고도, 연필의 무게도 재볼 수 있겠군요. &amp;quot;연필의 무게 재기&amp;quot; 함수를 다음과 같이 만들면 될 것 같습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;연필의 무게 재기&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저울을 꺼낸다.&lt;/li&gt;
&lt;li&gt;저울의 영점을 맞춘다.&lt;/li&gt;
&lt;li&gt;저울 위에 &lt;strong&gt;연필&lt;/strong&gt;을 올린다.&lt;/li&gt;
&lt;li&gt;저울이 가리키는 값을 읽는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;그런데 이 함수를 만들고나서 살펴보니, &amp;quot;볼펜의 무게 재기&amp;quot;랑 거의 비슷하군요. 사실상 &lt;strong&gt;볼펜&lt;/strong&gt;을 &lt;strong&gt;연필&lt;/strong&gt;로만 바꾸었을 뿐, 다른 부분은 똑같이 반복되고 있습니다. 게다가 좀 더 생각해보면, 볼펜이나 연필 말고도 &lt;strong&gt;임의의 물건&lt;/strong&gt;에 대해 무게를 잴 때 &lt;b&gt;위와 같은 과정을 그대로 사용&lt;/b&gt;할 수 있을 것 같습니다.&lt;/p&gt;
&lt;p&gt;그래서 이렇게 바꿔보았습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;(물건)의 무게 재기&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저울을 꺼낸다.&lt;/li&gt;
&lt;li&gt;저울의 영점을 맞춘다.&lt;/li&gt;
&lt;li&gt;저울 위에 &lt;b&gt;(물건)&lt;/b&gt;을 올린다.&lt;/li&gt;
&lt;li&gt;저울이 가리키는 값을 읽는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;이렇게 좀 더 일반화된 무게 재기 함수인 &amp;quot;(물건)의 무게 재기&amp;quot;를 만들었습니다. 함수를 여러 개 만들다보면, 지금 보신 것처럼 같은 기능을 하는데 어떤 대상에 대해 수행할 지만 다른 경우가 생깁니다. 이럴 때는 &lt;strong&gt;그 대상을 일반화&lt;/strong&gt;해서 그 대상에 해당하는 부분만 바꿔 쓸 수 있도록 만들어 준 뒤, 함수를 사용할 때 &lt;b&gt;&amp;quot;~~의 무게를 재라&amp;quot;&lt;/b&gt;와 같은 방식으로 &lt;b&gt;그 대상을 집어넣어서 사용&lt;/b&gt;하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;b&gt;이처럼 함수를 사용할 때 집어넣는 대상을 함수의 입력인자라고 합니다.&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;함수의-출력인자&#34;&gt;함수의 출력인자&lt;/h3&gt;
&lt;p&gt;앞서 만들어 본 &amp;quot;(물건)의 무게 재기&amp;quot;함수를 사용하여 대학원생 A에게 일을 시킵니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;나: 이 지우개의 무게를 재오세요.&lt;br&gt;
대학원생 A: 네.&lt;br&gt;
(잠시 후)&lt;br&gt;
나: 무게 재오라니까 왜 안 재오세요&amp;hellip;?&lt;br&gt;
대학원생 A: &amp;hellip;? 쟀는데요?&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;대학원생 A는 분명 지우개의 무게를 쟀습니다. 그럼에도 &amp;quot;나&amp;quot;의 요구사항은 딱히 충족된 것 같지 않군요. 그 이유는 무엇일까요? 지우개의 무게를 재고서 그 값을 대학원생 A가 읽기만하고, &lt;b&gt;&amp;quot;나&amp;quot;에게는 그 결과를 알려주지 않았기 때문&lt;/b&gt;입니다.&lt;/p&gt;
&lt;p&gt;생각해보면 앞서 만든 &amp;quot;(물건)의 무게 재기&amp;quot;라는 함수는 &lt;b&gt;무게를 재는 행위만 하고 끝날 것이 아니라&lt;/b&gt;, 측정 결과인 &lt;b&gt;무게가 얼마인지 알려줘야 할 것&lt;/b&gt; 같습니다.&lt;/p&gt;
&lt;p&gt;그래서 함수를 다음과 같이 바꿔보았습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;(물건)의 무게 재기&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;저울을 꺼낸다.&lt;/li&gt;
&lt;li&gt;저울의 영점을 맞춘다.&lt;/li&gt;
&lt;li&gt;저울 위에 &lt;b&gt;(물건)&lt;/b&gt;을 올린다.&lt;/li&gt;
&lt;li&gt;저울이 가리키는 값을 읽는다.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;무게를 재달라고 한 요청자에게 저울에서 읽은 값을 알려준다.&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;이처럼 어떤 함수들은, 일련의 과정을 수행하고 나서 &lt;b&gt;그 결과로 무언가를 되돌려 줄 수 있습니다&lt;/b&gt;.
&lt;font color=red&gt;&lt;b&gt;이렇게 함수가 요청자에게 되돌려주는 결과를 함수의 출력인자라고 합니다.&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;main-함수&#34;&gt;main 함수&lt;/h2&gt;
&lt;p&gt;컴퓨터 프로그램이란 &lt;b&gt;&amp;quot;어떤 문제를 해결하기 위한 일련의 작업과정을 기술한 명령문의 집합&amp;quot;&lt;/b&gt;입니다. 가만히 생각해보면, 앞서 대학원생 A에게 했던 것과 다를 바가 없습니다. &lt;b&gt;프로그램도 결국에는 함수로 생각할 수 있다는 것&lt;/b&gt;입니다.&lt;/p&gt;
&lt;p&gt;C++ 언어에서는, 하나의 프로그램에 해당하는 작업과정을 묶어서 &lt;strong&gt;main&lt;/strong&gt;이라는 이름의 함수로 부르자고 약속을 하였습니다. 즉, C++ 언어로 만들어진 프로그램이라면, &lt;font color=red&gt;&lt;b&gt;무조건 그 프로그램의 코드에는 main 함수가 한 개 존재&lt;/b&gt;&lt;/font&gt;할 것이며, &lt;font color=red&gt;&lt;b&gt;그 프로그램이 하는 일은 main 함수에 적혀있는 일&lt;/b&gt;&lt;/font&gt;이라는 뜻입니다.&lt;/p&gt;
&lt;h3 id=&#34;main-함수의-입력인자와-출력인자&#34;&gt;main 함수의 입력인자와 출력인자&lt;/h3&gt;
&lt;p&gt;main 함수도 입력인자와 출력인자를 가지고 있습니다. 이를 임의로 바꿀 수는 없고, C++ 언어의 약속으로서 정해져 있습니다.&lt;/p&gt;
&lt;p&gt;입력인자는 그 프로그램을 실행할 때의 실행 명령 문구에 관한 정보들입니다. 이에 관해서는 좀 더 나중에 자세히 살펴보겠습니다. 생략되는 경우도 있습니다.&lt;/p&gt;
&lt;p&gt;출력인자는 그 프로그램이 맡은 일련의 작업을 다 수행한 뒤, 프로그램이 정상적으로 작동 후 종료되었는지의 여부를 알려주는 정보입니다. 생략되는 경우도 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;helloworld-프로젝트의-main-함수&#34;&gt;Helloworld 프로젝트의 main 함수&lt;/h2&gt;
&lt;p&gt;이 시리즈에서 앞서 만들었던 Helloworld 프로젝트도 하나의 C++ 프로그램입니다. 따라서, 여기에도 이 프로그램이 수행하는 내용이 담긴 &lt;b&gt;main 함수가 한 개 존재&lt;/b&gt;합니다.&lt;/p&gt;
&lt;p&gt;main 함수는 다음 그림과 같이 main이라는 이름으로 적혀있으며, main 함수가 수행할 내용은 중괄호(&lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;)로 감싸져 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_main&#34; srcset=&#34;
               /praccpp-005-whatismainfunc/01_main_hu6996c337777a651c6c691bff9186eff8_28720_a4572a3c5c648139c5497986ee6ab4ad.png 400w,
               /praccpp-005-whatismainfunc/01_main_hu6996c337777a651c6c691bff9186eff8_28720_ef909a1d5e92b2a4e4ae8bad3384b6fe.png 760w,
               /praccpp-005-whatismainfunc/01_main_hu6996c337777a651c6c691bff9186eff8_28720_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-005-whatismainfunc/01_main_hu6996c337777a651c6c691bff9186eff8_28720_a4572a3c5c648139c5497986ee6ab4ad.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 Helloworld 프로젝트의 main 함수에는 딱 한 줄만 적혀있네요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;std::cout &amp;lt;&amp;lt; &amp;quot;Hello, world!\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;우리는 이미 Helloworld 프로젝트를 실행해봤으므로, 문법을 모르더라도 이 줄이 하는 일이 무엇인지 예상할 수 있습니다. &lt;b&gt;이 줄이 하는 일은 &amp;quot;터미널 화면에 &amp;quot;Hello, world!&amp;quot;라는 문구를 출력하라&amp;quot;라는 내용이겠지요.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;지금은 이정도만 이해하셔도 충분합니다. 좀 더 문법적인 내용은 뒤에서 자세히 살펴봅시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-12-16: 최초 게시&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 6. std::cout</title>
      <link>https://evandde.github.io/praccpp-006-whatiscout/</link>
      <pubDate>Fri, 04 Feb 2022 14:28:16 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-006-whatiscout/</guid>
      <description>&lt;p&gt;이 글에서는 컴퓨터 화면과 소통하는 기본적인 방법 중 하나인 &lt;code&gt;std::cout&lt;/code&gt;에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::cout &amp;lt;&amp;lt; 출력할데이터;&lt;/code&gt;의 형태로 입력하면 출력할데이터가 화면에 출력됨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::cout &amp;lt;&amp;lt; 출력할데이터 &amp;lt;&amp;lt; 출력할데이터 &amp;lt;&amp;lt; 출력할데이터 &amp;lt;&amp;lt; ...;&lt;/code&gt;와 같은 형태로, 여러 개의 출력할데이터를 한 번에 기술할 수도 있음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt;은 화면에서 &lt;strong&gt;줄바꿈&lt;/strong&gt;을 나타내는 하나의 문자이며, &lt;code&gt;&amp;quot;\t&amp;quot;&lt;/code&gt;은 화면에서 &lt;strong&gt;탭&lt;/strong&gt;을 나타내는 하나의 문자임&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;stdcout&#34;&gt;std::cout&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::cout&lt;/code&gt;은 화면에 글자를 출력시키기 위한 &lt;strong&gt;표준출력스트림&lt;/strong&gt;(standard output stream)입니다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. 일반적으로 우리가 사용하는 컴퓨터에서는 &lt;strong&gt;콘솔 화면에 글자를 출력시켜주는 역할&lt;/strong&gt;을 수행합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;기본사용법&#34;&gt;기본사용법&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;std::cout&lt;/code&gt;를 씀&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 라는 연산자를 이어붙임&lt;/li&gt;
&lt;li&gt;그 다음에 &lt;code&gt;출력할데이터&lt;/code&gt;를 적음&lt;/li&gt;
&lt;li&gt;C++ 문장을 끝내기 위해 &lt;code&gt;;&lt;/code&gt;를 적음&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;앞서 우리의 예제코드에 적혀있던 문장을 가져와서 봅시다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_example&#34; srcset=&#34;
               /praccpp-006-whatiscout/01_example_hu778e761c0acd84cf96cf9bc4f9cf30a3_10689_b500ffa83a6de07e81247f63c69e9b98.png 400w,
               /praccpp-006-whatiscout/01_example_hu778e761c0acd84cf96cf9bc4f9cf30a3_10689_5cf9b816464e2807ccc0f70496e7d486.png 760w,
               /praccpp-006-whatiscout/01_example_hu778e761c0acd84cf96cf9bc4f9cf30a3_10689_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-006-whatiscout/01_example_hu778e761c0acd84cf96cf9bc4f9cf30a3_10689_b500ffa83a6de07e81247f63c69e9b98.png&#34;
               width=&#34;760&#34;
               height=&#34;308&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이 코드에서는 &lt;code&gt;&amp;quot;Hello, world!\n&amp;quot;&lt;/code&gt;만큼이 출력할데이터가 되는 것입니다.
실행 결과는 이미 아시다시피 다음과 같지요.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_examplerslt&#34; srcset=&#34;
               /praccpp-006-whatiscout/02_examplerslt_hud0d11f089a8fb5acc32bc2acf46dc206_3608_78efb4dc77e30c3fe8fa850e9e67fecb.png 400w,
               /praccpp-006-whatiscout/02_examplerslt_hud0d11f089a8fb5acc32bc2acf46dc206_3608_09796576a8bf2c12d37bec6dcfb6fd84.png 760w,
               /praccpp-006-whatiscout/02_examplerslt_hud0d11f089a8fb5acc32bc2acf46dc206_3608_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-006-whatiscout/02_examplerslt_hud0d11f089a8fb5acc32bc2acf46dc206_3608_78efb4dc77e30c3fe8fa850e9e67fecb.png&#34;
               width=&#34;542&#34;
               height=&#34;80&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;n-t&#34;&gt;&lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;\t&amp;quot;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;위의 예제코드에서 출력할데이터를 보면, C++ 코드 상에는 끝에 &lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt;라는 문자가 적혀있는데, 실행결과에는 이 문자가 출력되지 않았다는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;C++에서 문자 &lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt;은 한덩어리의 문자로 보며, &lt;strong&gt;줄바꿈&lt;/strong&gt;이라는 기능을 수행하는 문자입니다. 우리가 키보드로 [ENTER] 키를 누르는 효과와 동일하다고 이해하면 됩니다. &lt;code&gt;&amp;quot;\&amp;quot;&lt;/code&gt;(역슬래시)와 &lt;code&gt;&amp;quot;n&amp;quot;&lt;/code&gt;(영소문자 n)이라는 두 개의 분리된 문자로 해석하지 않는다는 점에 주의하시기 바랍니다.&lt;/p&gt;
&lt;p&gt;자매품으로, &lt;code&gt;&amp;quot;\t&amp;quot;&lt;/code&gt;도 알고 계시면 좋습니다. &lt;code&gt;&amp;quot;\t&amp;quot;&lt;/code&gt;는 마찬가지로 한덩어리의 문자로 &lt;strong&gt;탭&lt;/strong&gt;이라는 기능을 수행합니다. 키보드로 [TAB] 키를 누르는 효과와 동일합니다. 글 작성 시 일정 간격을 유지하며 단어를 나열하고자 할 때 유용하게 쓰입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;여러-데이터-출력하기&#34;&gt;여러 데이터 출력하기&lt;/h2&gt;
&lt;p&gt;출력할데이터가 여러 개라면, 위의 사용법에서 2번과 3번을 반복해서 쓸 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_example&#34; srcset=&#34;
               /praccpp-006-whatiscout/03_example_hu6a3b8e673b322544ada4fe25df2e1081_8036_6c3361ff7a879e36807b8dd795e4a8df.png 400w,
               /praccpp-006-whatiscout/03_example_hu6a3b8e673b322544ada4fe25df2e1081_8036_6a2e16c1aa294037e989964268d14c05.png 760w,
               /praccpp-006-whatiscout/03_example_hu6a3b8e673b322544ada4fe25df2e1081_8036_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-006-whatiscout/03_example_hu6a3b8e673b322544ada4fe25df2e1081_8036_6c3361ff7a879e36807b8dd795e4a8df.png&#34;
               width=&#34;557&#34;
               height=&#34;171&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이렇게 작성하면, &lt;code&gt;&amp;quot;AAA\n&amp;quot;&lt;/code&gt;, 숫자 &lt;code&gt;123&lt;/code&gt;, &lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;BBB\n&amp;quot;&lt;/code&gt;이라는 총 4개의 데이터가 순차적으로 출력되는 것이지요. 결과는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_examplerslt&#34; srcset=&#34;
               /praccpp-006-whatiscout/04_examplerslt_hu6f6960fb79caac55372f8e8c73b67b96_11401_8d4b187729cdd9859e91025f2e54d381.png 400w,
               /praccpp-006-whatiscout/04_examplerslt_hu6f6960fb79caac55372f8e8c73b67b96_11401_ab599ca35dc44b44db2f2d373fed8b66.png 760w,
               /praccpp-006-whatiscout/04_examplerslt_hu6f6960fb79caac55372f8e8c73b67b96_11401_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-006-whatiscout/04_examplerslt_hu6f6960fb79caac55372f8e8c73b67b96_11401_8d4b187729cdd9859e91025f2e54d381.png&#34;
               width=&#34;760&#34;
               height=&#34;174&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;여기서 주의하실 부분이 있습니다. &lt;strong&gt;출력할데이터 한 칸에는 하나의 데이터만 쓸 수 있다는 점&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;예를 들어, 숫자 &lt;code&gt;123&lt;/code&gt;과 줄바꿈(&lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt;)은 숫자와 문자로 총 두 개의 데이터이기 때문에, 반드시 두 덩어리로 나누어서 써야한다는 것입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;std::cout &amp;lt;&amp;lt; 123&amp;quot;\n&amp;quot;; // WRONG!!!
std::cout &amp;lt;&amp;lt; 123 &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;; // CORRECT :D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;나중에 자료형에 대한 개념을 알고 나면, 좀 더 명확하게 이해가 되실 것입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;원래 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 안에 한글을 적어서 출력할 수도 있습니다만, 대부분은 한글을 입력하면 문자가 깨져서 나올 것입니다.&lt;/p&gt;
&lt;p&gt;이는 코드 상의 문제가 아니라, PowerShell에서 한글 문자를 기본적으로 지원하지 않아 생기는 문제입니다.&lt;/p&gt;
&lt;p&gt;이에 대한 해결책은 &lt;a href=&#34;https://evandde.github.io/powershell-encoding/&#34;&gt;PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결&lt;/a&gt; 글을 참고하시기 바랍니다.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;chanagelog&#34;&gt;Chanagelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2022-02-04: 최초 게시&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;엄밀히는 &lt;code&gt;std&lt;/code&gt; 부분은 namespace라고 하는 것이고, &lt;code&gt;std::cout&lt;/code&gt;이라는 표현은 &lt;code&gt;std&lt;/code&gt;에 소속된 &lt;code&gt;cout&lt;/code&gt;이라는 의미입니다. 일부 자료에서는 &lt;code&gt;using namespace std;&lt;/code&gt; 등을 가르치기도 합니다만, 이런 문법은 나중에 살펴보기로 하고 여기서는 &lt;code&gt;std::cout&lt;/code&gt;이라는 것을 통째로 기억하시길 권해드립니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
  </channel>
</rss>
