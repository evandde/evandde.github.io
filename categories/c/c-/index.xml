<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; | EvaNote</title>
    <link>https://evandde.github.io/categories/c/c-/</link>
      <atom:link href="https://evandde.github.io/categories/c/c-/index.xml" rel="self" type="application/rss+xml" />
    <description>C/C&#43;&#43;</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2021 Evan Kim</copyright>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>C/C&#43;&#43;</title>
      <link>https://evandde.github.io/categories/c/c-/</link>
    </image>
    
    <item>
      <title>BIT Hacks - 자연수 승수 계산을 비트연산으로 빠르게 하는 법</title>
      <link>https://evandde.github.io/bithacks-power/</link>
      <pubDate>Fri, 24 Sep 2021 14:21:45 +0900</pubDate>
      <guid>https://evandde.github.io/bithacks-power/</guid>
      <description>&lt;p&gt;자연수 승수 연산에 한해, 비트연산 트릭을 활용하여 C++에서 기본으로 제공하는 pow() 함수보다 빠르게 계산하는 방법을 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;double pow_int(double base, int exp)
{
    double result = 1.;
    while (exp)
    {
        if (exp &amp;amp; 1)
            result *= base;
        exp &amp;gt;&amp;gt;= 1;
        base *= base;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_result&#34; srcset=&#34;
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_2f48893f03abd14ce0c371db43bdab63.png 400w,
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_5bd99c34fd40afc05a3b7cebaf84cbc7.png 760w,
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_2f48893f03abd14ce0c371db43bdab63.png&#34;
               width=&#34;261&#34;
               height=&#34;148&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;원리&#34;&gt;원리&lt;/h2&gt;
&lt;p&gt;실수 $a$와 자연수 $n$에 대하여, $a^n$을 계산하는 경우를 살펴보겠습니다.&lt;/p&gt;
&lt;p&gt;여기서 $n$은 2진법 변환을 통해 다음과 같이 표현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;$$n = \sum_{i=0} b_i 2^i \text{, where }b_i=0 \text{ or }1$$&lt;/p&gt;
&lt;p&gt;위 식을 이용하면 $a^n$은 다음과 같이 변형됩니다.&lt;/p&gt;
&lt;p&gt;$$
\begin{equation}
\begin{aligned}
a^n &amp;amp; = a^{\sum_{i=0} b_i 2^i} \\&lt;br&gt;
&amp;amp; = \prod_{i=0} {a^{b_i 2^i}} \text{ (} \because x^{m+n} = x^m x^n \text{)} \\&lt;br&gt;
&amp;amp; = \prod_{i=0} ({a^{2^i}})^{b_i} \text{ (} \because x^{mn} = (x^m)^n \text{)} \\&lt;br&gt;
&amp;amp; = (b_0 \times a) \times (b_1 \times a^2) \times (b_2 \times (a^2)^2) \times (b_3 \times ((a^2)^2)^2) \times &amp;hellip;
\end{aligned}
\end{equation}
$$
이 식의 의미를 해석해보면 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$n$을 2진법으로 나타내었을 때 낮은 자리수부터 확인($b_0, b_1, &amp;hellip;$)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매 $b_i$를 확인할 때마다, $a, a^2, (a^2)^2, &amp;hellip;$의 형태로 계속 제곱해 나감&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$b_i$가 0이면 그냥 넘어가고,&lt;/p&gt;
&lt;p&gt;$b_i$가 1이면 2에서 구한 $a^{2^i}$를 누적하여 곱함&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;예시&#34;&gt;예시&lt;/h2&gt;
&lt;p&gt;$3^5$를 계산해보겠습니다. 여기서 $a=3$이고, $n=5$가 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;먼저, $n$을 2진법으로 변환하여 $b_i$들을 구합니다.&lt;/p&gt;
&lt;p&gt;$$n=5=1+4=1\times2^0+0\times2^1+1\times2^2$$&lt;/p&gt;
&lt;p&gt;$$\text{i.e. }b_0=1 \text{, } b_1=0 \text{, } b_2 = 1 \text{, and } b_k = 0 \text{ for }k&amp;gt;=3$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 낮은 자리 수부터 확인하며 누적곱 작업을 수행합니다. 누적곱의 초기 값은 곱셈의 항등원인 &lt;font color=blue&gt;&lt;b&gt;1&lt;/b&gt;&lt;/font&gt;로 설정합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$a$는 &lt;font color=red&gt;&lt;b&gt;3&lt;/b&gt;&lt;/font&gt;입니다.&lt;/p&gt;
&lt;p&gt;$b_0$을 확인합니다. $b_0$가 $1$이므로, &lt;font color=blue&gt;&lt;b&gt;1&lt;/b&gt;&lt;/font&gt;에 &lt;font color=red&gt;&lt;b&gt;3&lt;/b&gt;&lt;/font&gt;을 곱합니다.&lt;/p&gt;
&lt;p&gt;결과는 &lt;font color=blue&gt;&lt;b&gt;3&lt;/b&gt;&lt;/font&gt;이 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$a^2$는 &lt;font color=red&gt;&lt;b&gt;9&lt;/b&gt;&lt;/font&gt;입니다.&lt;/p&gt;
&lt;p&gt;$b_1$을 확인합니다. $b_1$가 $0$이므로, 아무것도 곱하지 않습니다.&lt;/p&gt;
&lt;p&gt;결과는 여전히 &lt;font color=blue&gt;&lt;b&gt;3&lt;/b&gt;&lt;/font&gt;입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$(a^2)^2$는 &lt;font color=red&gt;&lt;b&gt;81&lt;/b&gt;&lt;/font&gt;입니다.&lt;/p&gt;
&lt;p&gt;$b_2$을 확인합니다. $b_2$가 $1$이므로, &lt;font color=blue&gt;&lt;b&gt;3&lt;/b&gt;&lt;/font&gt;에 &lt;font color=red&gt;&lt;b&gt;81&lt;/b&gt;&lt;/font&gt;을 곱합니다.&lt;/p&gt;
&lt;p&gt;결과는 &lt;font color=blue&gt;&lt;b&gt;243&lt;/b&gt;&lt;/font&gt;이 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이후의 $b_k$들은 모두 $0$이므로 최종 결과는 &lt;font color=blue&gt;&lt;b&gt;243&lt;/b&gt;&lt;/font&gt;입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;코드로의-적용c&#34;&gt;코드로의 적용(C++)&lt;/h2&gt;
&lt;p&gt;위 내용을 코드로 변환하면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;변수명의 의미를 고려하여, 위 식에서 $a$를 &lt;code&gt;base&lt;/code&gt;로, $n$을 &lt;code&gt;exp&lt;/code&gt;로 명명하였습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;double pow_int(double base, int exp)
{
    double result = 1.;
    while (exp)
    {
        if (exp &amp;amp; 1)
            result *= base;
        exp &amp;gt;&amp;gt;= 1;
        base *= base;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;누적곱을 수행하기 위한 &lt;code&gt;result&lt;/code&gt; 변수의 초기 값을 곱셈의 항등원인 &lt;font color=blue&gt;&lt;b&gt;1&lt;/b&gt;&lt;/font&gt;로 설정합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exp&lt;/code&gt; 값이 유효한 동안 while 반복문을 수행합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exp&lt;/code&gt;를 2진법으로 표현하였을 때 의 가장 낮은 자리수를 구합니다. (&lt;code&gt;exp &amp;amp; 1&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;만약 이 값이 1이라면, $b_i$가 1인 경우에 해당합니다. 따라서, 현재의 &lt;code&gt;base&lt;/code&gt; 값을 &lt;code&gt;result&lt;/code&gt;에 누적하여 곱합니다.&lt;/p&gt;
&lt;p&gt;만약 이 값이 0이라면, $b_i$가 0인 경우에 해당합니다. 따라서 &lt;code&gt;result&lt;/code&gt;에 아무것도 곱하지 않고 넘어갑니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;exp&lt;/code&gt;의 $b_0$ 값이 1이었다면, while 반복문을 맨 처음 수행할 때 이 if 조건이 참이 되어, &lt;code&gt;result *= base;&lt;/code&gt; 구문이 수행되고, 위 설명에서 $a$를 곱해주는 것과 동일한 작업이 이루어집니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exp&lt;/code&gt;를 오른쪽으로 한 칸 비트시프트를 수행합니다. (&lt;code&gt;exp &amp;gt;&amp;gt;= 1;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;이를 통해, 방금 살펴본 $b_i$가 버려지고, 그 다음 자리에 해당하는 $b_{i+1}$이 가장 낮은 자리로 옮겨지는 과정이 반복됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;base&lt;/code&gt;를 제곱합니다. (&lt;code&gt;base *= base;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;이를 통해 $(&amp;hellip;(a^2)^2)&amp;hellip;)^2$에 해당하는 반복 연산이 수행됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최종적으로 누적곱이 수행된 결과를 반환합니다. (&lt;code&gt;return result;&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pow-함수와의-비교용-예시-코드&#34;&gt;pow() 함수와의 비교용 예시 코드&lt;/h2&gt;
&lt;h3 id=&#34;코드&#34;&gt;코드&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;

double pow_int(double base, int exp)
{
    double result = 1.;
    while (exp)
    {
        if (exp &amp;amp; 1)
            result *= base;
        exp &amp;gt;&amp;gt;= 1;
        base *= base;
    }
    return result;
}

int main()
{
    const int N = 100000000;
    double base = 12.345;
    int exp = 67;
    double result1, result2;

    std::cout &amp;lt;&amp;lt; base &amp;lt;&amp;lt; &amp;quot;^&amp;quot; &amp;lt;&amp;lt; exp &amp;lt;&amp;lt; &amp;quot;\n\n&amp;quot;;

    auto startT1 = clock();
    for (int i = 0; i &amp;lt; N; ++i)
        result1 = pow(base, exp);
    auto endT1 = clock();
    std::cout &amp;lt;&amp;lt; &amp;quot;Calculated by pow() function\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Answer: &amp;quot; &amp;lt;&amp;lt; result1 &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Elapsed time: &amp;quot; &amp;lt;&amp;lt; (endT1 - startT1) &amp;lt;&amp;lt; &amp;quot; ms\n\n&amp;quot;;
    
    auto startT2 = clock();
    for (int i = 0; i &amp;lt; N; ++i)
        result2 = pow_int(base, exp);
    auto endT2 = clock();
    std::cout &amp;lt;&amp;lt; &amp;quot;Calculated by pow_int() function\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Answer: &amp;quot; &amp;lt;&amp;lt; result2 &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Elapsed time: &amp;quot; &amp;lt;&amp;lt; (endT2 - startT2) &amp;lt;&amp;lt; &amp;quot; ms\n\n&amp;quot;;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;결과&#34;&gt;결과&lt;/h3&gt;
&lt;p&gt;i5-9500 @ 3.00GHz 기준&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_result&#34; srcset=&#34;
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_2f48893f03abd14ce0c371db43bdab63.png 400w,
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_5bd99c34fd40afc05a3b7cebaf84cbc7.png 760w,
               /bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/bithacks-power/01_result_huef670fe8e129f9b27517dd7a606eb88f_2674_2f48893f03abd14ce0c371db43bdab63.png&#34;
               width=&#34;261&#34;
               height=&#34;148&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 1. 실습환경 만들기</title>
      <link>https://evandde.github.io/praccpp-001-envsetting/</link>
      <pubDate>Fri, 24 Sep 2021 17:57:09 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-001-envsetting/</guid>
      <description>&lt;p&gt;&lt;b&gt;Windows 10&lt;/b&gt; 환경에서 Microsoft Visual C++ (MSVC)를 이용하여 C++ 및 CMake 개발 환경을 구축하고 VSCode를 설치하여 연동하는 방법을 살펴봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;microsoft-visual-c-설치&#34;&gt;Microsoft Visual C++ 설치&lt;/h2&gt;
&lt;h3 id=&#34;다운로드&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;현재 시점에서 최신 버전에 해당하는, &lt;b&gt;Visual Studio 2022용 Build Tools&lt;/b&gt;를 다운로드 받겠습니다.&lt;/p&gt;
&lt;p&gt;Microsoft에서 제공하는 Visual Studio 2022용 Build Tools는 &lt;a href=&#34;https://visualstudio.microsoft.com/ko/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 링크&lt;/a&gt;에서 무료로 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;스크롤을 쭉 내려서 &lt;b&gt;Visual Studio 2022용 도구 목록&lt;/b&gt; 하위에 있는 &lt;b&gt;Visual Studio 2022용 빌드 도구&lt;/b&gt;의 다운로드 링크를 누르면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_vs2022buildtools_download&#34; srcset=&#34;
               /praccpp-001-envsetting/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_0406f3798f45b4354e3fa193794834cb.png 400w,
               /praccpp-001-envsetting/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_ce5d111b09146f914c28a5cee4e039f6.png 760w,
               /praccpp-001-envsetting/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/01_vs2022buildtools_download_hue94dae16933acc90b638d856026212c0_84921_0406f3798f45b4354e3fa193794834cb.png&#34;
               width=&#34;760&#34;
               height=&#34;631&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 파일(&lt;code&gt;vs_buildtools_....exe&lt;/code&gt;)을 실행합니다. 다음 그림과 같은 창이 뜰 수 있습니다. &lt;b&gt;계속&lt;/b&gt; 버튼을 누르고 잠시 기다려줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;02_vs2019buildtools_install&#34; srcset=&#34;
               /praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_4efc43656ed797e74ddf58cb381dc51d.png 400w,
               /praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_7e57b38156a4bcbdd92e55c5a68a663a.png 760w,
               /praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/02_vs2019buildtools_install_hu6e02cd8b0b7d1d230c309820161a8cdd_19149_4efc43656ed797e74ddf58cb381dc51d.png&#34;
               width=&#34;480&#34;
               height=&#34;280&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;다운로드를 마치고 설치 준비가 다 되면, 다음 그림과 같은 창이 뜰 것입니다. 이 중 &lt;b&gt;C++를 사용한 데스크톱 개발&lt;/b&gt;을 클릭합니다. 오른쪽 설치 세부 정보에서, 자동으로 선택사항 중 일부가 선택될 것입니다. 혹시라도 &lt;b&gt;Windows용 C++ CMake 도구&lt;/b&gt;가 선택이 안되어있다면, &lt;b&gt;꼭 선택&lt;/b&gt;해주시기 바랍니다. 선택을 완료하셨다면 &lt;b&gt;Install&lt;/b&gt; 버튼을 눌러 설치를 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_vs2022buildtools_install&#34; srcset=&#34;
               /praccpp-001-envsetting/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_f25b9112760d9b861a8f06cf4ae6a65b.png 400w,
               /praccpp-001-envsetting/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_8b54b94c5245c0a4a80fb14ac8956e4a.png 760w,
               /praccpp-001-envsetting/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/03_vs2022buildtools_install_hu60d8deb245f0356ddc63fbc930d39f56_87508_f25b9112760d9b861a8f06cf4ae6a65b.png&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;설치가 완료되었다면, 잘 실행되는지 테스트를 해보아야 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;[WIN]+[S]&lt;/b&gt; 를 눌러 검색을 띄움&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;developer powershell&lt;/code&gt;을 입력하여 &lt;b&gt;Developer PowerShell for VS 2022&lt;/b&gt;를 찾은 뒤 실행&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_vs2022buildtools_test1&#34; srcset=&#34;
               /praccpp-001-envsetting/04_vs2022buildtools_test1_hu524c1eeeb92a7a9647dba47441c76b34_143589_8376a61aec355e6b8cf6fe811c980071.png 400w,
               /praccpp-001-envsetting/04_vs2022buildtools_test1_hu524c1eeeb92a7a9647dba47441c76b34_143589_8ec770e7bb90bc8fe15da9c18fa7ca04.png 760w,
               /praccpp-001-envsetting/04_vs2022buildtools_test1_hu524c1eeeb92a7a9647dba47441c76b34_143589_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/04_vs2022buildtools_test1_hu524c1eeeb92a7a9647dba47441c76b34_143589_8376a61aec355e6b8cf6fe811c980071.png&#34;
               width=&#34;760&#34;
               height=&#34;621&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cl&lt;/code&gt; 명령어와 &lt;code&gt;cmake&lt;/code&gt; 명령어를 각각 입력하여, 다음 그림과 같이 각각의 사용법(usage)이 뜨는지 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_vs2022buildtools_test2&#34; srcset=&#34;
               /praccpp-001-envsetting/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_822efe39862c06232a29d4c2431969a9.png 400w,
               /praccpp-001-envsetting/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_2107f35e4f83ab342cbab819ba2ec199.png 760w,
               /praccpp-001-envsetting/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/05_vs2022buildtools_test2_hua1103082d3c35dca4e476cc33afc1040_24881_822efe39862c06232a29d4c2431969a9.png&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;잘 완료되었다면, 이 터미널은 닫으셔도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vscode-설치&#34;&gt;VSCode 설치&lt;/h2&gt;
&lt;h3 id=&#34;다운로드-1&#34;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;공식 홈페이지&lt;/a&gt; 첫화면에 있는 다운로드 버튼을 누르면 설치 프로그램이 다운로드 됩니다.&lt;/p&gt;
&lt;p&gt;혹은, &lt;a href=&#34;https://code.visualstudio.com/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;다운로드 페이지&lt;/a&gt;를 이용하시면 좀 더 다양한 옵션의 설치 파일을 다운로드 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_vscode_mainpage_download&#34; srcset=&#34;
               /praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_5032079348e1f8b63c47acc58d00d188.png 400w,
               /praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_e485de552509a5a298763d268417dd8a.png 760w,
               /praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/06_vscode_mainpage_download_hufc464033e495f88261d6484504eb9237_371107_5032079348e1f8b63c47acc58d00d188.png&#34;
               width=&#34;732&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;설치-1&#34;&gt;설치&lt;/h3&gt;
&lt;p&gt;다운받은 파일(&lt;code&gt;VSCode...Setup-....exe&lt;/code&gt;)을 실행합니다.&lt;/p&gt;
&lt;p&gt;공식 홈페이지 첫화면에서 다운로드 버튼을 눌렀거나, User installer를 받으신 경우에는, 권한 이슈로 인해 다음과 같은 경고가 뜰 수 있습니다. 개인 컴퓨터에 작업을 수행하고 있는 일반적인 경우라면, &lt;b&gt;확인 &lt;/b&gt;버튼을 누르고 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_vscode_install_warning&#34; srcset=&#34;
               /praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_e0b102a8223aa77038f3df9aa151f1d9.png 400w,
               /praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_7a434070efdaae037b5a501caa1beeb9.png 760w,
               /praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/07_vscode_install_warning_hu48d02a51faed26f6ada0cf7f7622eea8_6129_e0b102a8223aa77038f3df9aa151f1d9.png&#34;
               width=&#34;413&#34;
               height=&#34;185&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;설치 과정 중 다음과 같은 화면이 뜰 텐데, 여기서 다른 건 몰라도 &lt;b&gt;다음 그림에 표시한 세 가지 항목은 체크해 두시길 권장&lt;/b&gt;합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;08_vscode_install&#34; srcset=&#34;
               /praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_be0695542f04faefe9122a652983f34c.png 400w,
               /praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_c34c609d7dbcf724b827810f58fc9891.png 760w,
               /praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/08_vscode_install_hu5f444f29464cd1fc206f6e3c6be42c2c_24527_be0695542f04faefe9122a652983f34c.png&#34;
               width=&#34;598&#34;
               height=&#34;464&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;실행-1&#34;&gt;실행&lt;/h3&gt;
&lt;p&gt;시작메뉴나 바탕화면에 있는 Visual Studio Code를 실행시키면 됩니다.&lt;/p&gt;
&lt;p&gt;다음과 같은 화면이 뜨면 잘 실행된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;10_vscode_run&#34; srcset=&#34;
               /praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_36f07cc44663cd8e4afc0ffeac1a0acb.png 400w,
               /praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_fb08da58e0a9a0a8779eb8abf404899d.png 760w,
               /praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/10_vscode_run_hu0b0e1eda9dd677061eff8de8c8a75a99_71769_36f07cc44663cd8e4afc0ffeac1a0acb.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;필수-extension-설치&#34;&gt;필수 Extension 설치&lt;/h2&gt;
&lt;p&gt;이어서, 이 시리즈를 진행하기 위해 필수적인 &lt;strong&gt;VSCode의 extension들을 설치&lt;/strong&gt;하도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;Extension에 관한 내용을 살펴보기 위해서는, 첫 화면의 &lt;strong&gt;맨 왼쪽에 있는 아이콘 중 5번째에 있는 것&lt;/strong&gt;을 누르거나, 단축키 &lt;b&gt;[CTRL]+[SHIFT]+[X]&lt;/b&gt;를 누르면 됩니다. 이후, 검색 란에 키워드를 입력하여 원하는 extension을 찾아서 설치할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;11_vscode_extension&#34; srcset=&#34;
               /praccpp-001-envsetting/11_vscode_extension_hua79e4ac25bcc1889071411ce591649da_143263_065250876e363ceba80f04bcf267c811.png 400w,
               /praccpp-001-envsetting/11_vscode_extension_hua79e4ac25bcc1889071411ce591649da_143263_d3b714f23fe078ee1c4c6572870fb957.png 760w,
               /praccpp-001-envsetting/11_vscode_extension_hua79e4ac25bcc1889071411ce591649da_143263_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/11_vscode_extension_hua79e4ac25bcc1889071411ce591649da_143263_065250876e363ceba80f04bcf267c811.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;extension-1-cc&#34;&gt;Extension 1: C/C++&lt;/h3&gt;
&lt;p&gt;&amp;quot;&lt;b&gt;C/C++&lt;/b&gt;&amp;quot;이라고 검색하시면 다음과 같은 extension이 뜹니다. &lt;strong&gt;Install&lt;/strong&gt; 버튼을 눌러 설치하시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 extension은 VSCode에서 C 언어 및 C++ 언어를 사용함에 있어, &lt;strong&gt;여러 C 언어 및 C++ 언어용 컴파일러 및 빌드도구와의 연동&lt;/strong&gt;이나 &lt;strong&gt;자동완성 기능&lt;/strong&gt; 등을 사용할 수 있게 해줍니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;12_vscode_ccpp_extension&#34; srcset=&#34;
               /praccpp-001-envsetting/12_vscode_ccpp_extension_hu114703246117f9ee3ec0c95693f134bb_116957_4c13d9c73e3a16a3befcca4640106e1a.png 400w,
               /praccpp-001-envsetting/12_vscode_ccpp_extension_hu114703246117f9ee3ec0c95693f134bb_116957_e4b20650c198d3cd81590a14f05a165d.png 760w,
               /praccpp-001-envsetting/12_vscode_ccpp_extension_hu114703246117f9ee3ec0c95693f134bb_116957_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/12_vscode_ccpp_extension_hu114703246117f9ee3ec0c95693f134bb_116957_4c13d9c73e3a16a3befcca4640106e1a.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;extension-2-cmake-tools-cmake&#34;&gt;Extension 2: CMake Tools (+CMake)&lt;/h3&gt;
&lt;p&gt;&amp;quot;&lt;b&gt;CMake Tools&lt;/b&gt;&amp;quot;이라고 검색하시면 다음과 같은 extension이 뜹니다. &lt;strong&gt;Install&lt;/strong&gt; 버튼을 눌러 설치하시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 extension은 VSCode에서 CMake를 바로 사용할 수 있도록 &lt;strong&gt;CMake와 연동&lt;/strong&gt;을 해주고, &lt;strong&gt;CMake 기반의 빌드 작업을 좀 더 쉽게 수행할 수 있도록 여러 UI를 제공&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;13_vscode_cmaketools_extension&#34; srcset=&#34;
               /praccpp-001-envsetting/13_vscode_cmaketools_extension_hu135c962e182735c05b83f1a7877aab93_153536_e009a687ecc1beb33f19cd98c42757c8.png 400w,
               /praccpp-001-envsetting/13_vscode_cmaketools_extension_hu135c962e182735c05b83f1a7877aab93_153536_45ce2078f5add597652348d7ebbcc091.png 760w,
               /praccpp-001-envsetting/13_vscode_cmaketools_extension_hu135c962e182735c05b83f1a7877aab93_153536_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-001-envsetting/13_vscode_cmaketools_extension_hu135c962e182735c05b83f1a7877aab93_153536_e009a687ecc1beb33f19cd98c42757c8.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;이걸 깔면, 바로 밑에 있는 &lt;b&gt;&amp;quot;CMake&amp;quot;&lt;/b&gt; extension도 알아서 자동으로 설치될텐데요, &lt;b&gt;그냥 같이 깔리게 두시면 됩니다&lt;/b&gt;. 이 extension은 CMake Tools에서 제공하지 않는, &lt;strong&gt;CMake 스크립트 작성 시 도움을 주는 여러 기능&lt;/strong&gt;이나 &lt;b&gt;문법에 따른 강조기능(Syntax Highlighting)&lt;/b&gt; 등을 제공합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이 글에서는 MSVC의 구성요소인 C++ 빌드 도구와 CMake를 설치하였고, IDE로서 활용할 수 있는 VSCode를 설치 및 세팅하였습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2021-09-24: 최초 게시&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2021-10-06: 필수 Extension 설치 내용 추가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2021-10-21: Code 실행 시 Developer PowerShell for VS 2019를 통해 실행할 필요가 없어서, 해당 내용 삭제&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2021-11-10: Visual Studio 2022 버전 출시에 따른 내용 수정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 2. 실습환경 테스트하기</title>
      <link>https://evandde.github.io/praccpp-002-envtest/</link>
      <pubDate>Wed, 06 Oct 2021 17:01:14 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-002-envtest/</guid>
      <description>&lt;p&gt;앞서 구축한 실습 환경이 제대로 동작하는지 테스트 해봅시다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;작업공간-만들기&#34;&gt;작업공간 만들기&lt;/h2&gt;
&lt;p&gt;일단, &lt;strong&gt;작업을 진행할 폴더를 자유롭게 하나 준비&lt;/strong&gt;합니다. 저는 &lt;code&gt;C:\&lt;/code&gt; 하위에 &lt;code&gt;cpp\helloworld&lt;/code&gt;라는 폴더를 만들고, 여기서 작업을 진행해보도록 하겠습니다. 즉, &lt;strong&gt;제 작업공간의 경로&lt;/strong&gt;는 &lt;code&gt;C:\cpp\helloworld&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    경로에 한글이 들어가면 안됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;01_workspace&#34; srcset=&#34;
               /praccpp-002-envtest/01_workspace_hu641ea03d319e1089a74265e11b66e829_38953_2cbe2e9d7537dfd0e216ac2956ffbe79.png 400w,
               /praccpp-002-envtest/01_workspace_hu641ea03d319e1089a74265e11b66e829_38953_37ac8ee78c888a0c71d844514b567102.png 760w,
               /praccpp-002-envtest/01_workspace_hu641ea03d319e1089a74265e11b66e829_38953_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/01_workspace_hu641ea03d319e1089a74265e11b66e829_38953_2cbe2e9d7537dfd0e216ac2956ffbe79.png&#34;
               width=&#34;760&#34;
               height=&#34;503&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vscode에서-작업공간-열기&#34;&gt;VSCode에서 작업공간 열기&lt;/h2&gt;
&lt;p&gt;VSCode에서 앞서 만들어둔 작업공간 폴더를 열어보겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;위쪽의 메뉴바에서 &lt;b&gt;File - Open Folder&lt;/b&gt;를 누릅니다. 단축키로는 &lt;b&gt;[CTRL]+[K],[O]&lt;/b&gt;입니다(&lt;b&gt;[CTRL]키를 누른상태&lt;/b&gt;로 &lt;b&gt;[K]키와 [O]키를 순서대로&lt;/b&gt; 누르면 됩니다).&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;03_openfolder&#34; srcset=&#34;
               /praccpp-002-envtest/03_openfolder_hu13531afdd7e4b083ed7b7cd9cda49e8d_94490_c0d564ecee8b7855cf855352bb861fdb.png 400w,
               /praccpp-002-envtest/03_openfolder_hu13531afdd7e4b083ed7b7cd9cda49e8d_94490_4a6a2db05367aac2714939c10b26d887.png 760w,
               /praccpp-002-envtest/03_openfolder_hu13531afdd7e4b083ed7b7cd9cda49e8d_94490_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/03_openfolder_hu13531afdd7e4b083ed7b7cd9cda49e8d_94490_c0d564ecee8b7855cf855352bb861fdb.png&#34;
               width=&#34;760&#34;
               height=&#34;569&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이어서 뜨는 폴더 선택창에서, 앞서 만들어둔 작업공간 경로로 이동하여 &lt;b&gt;폴더 선택&lt;/b&gt;을 해주시면 됩니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;04_openfolder&#34; srcset=&#34;
               /praccpp-002-envtest/04_openfolder_hufe142dfb0759ebf76758db51702f088d_19129_c46d49204a05ec5753d882c3b5a7fb53.png 400w,
               /praccpp-002-envtest/04_openfolder_hufe142dfb0759ebf76758db51702f088d_19129_52f494c42a24c87ff9d7ba47bd9a563a.png 760w,
               /praccpp-002-envtest/04_openfolder_hufe142dfb0759ebf76758db51702f088d_19129_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/04_openfolder_hufe142dfb0759ebf76758db51702f088d_19129_c46d49204a05ec5753d882c3b5a7fb53.png&#34;
               width=&#34;760&#34;
               height=&#34;457&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다음과 같은 경고창이 뜰 수도 있습니다. VSCode에서 이 폴더 안에 있는 실행파일을 실행할 수도 있으니, 이 폴더가 신뢰해도 되는 폴더인지 확인하라는 경고창입니다. 직접 만든 폴더이므로 당연히 신뢰할 수 있겠죠.&lt;/p&gt;
&lt;p&gt;체크박스는, 이 폴더의 상위폴더도 신뢰할 수 있는 폴더인지를 묻는 것입니다. 저는 향후 &lt;code&gt;C:\cpp&lt;/code&gt; 하위에 새로운 프로젝트를 만들어 나갈 예정이므로, 체크박스까지 체크해준 뒤 진행하도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;05_openfolder&#34; srcset=&#34;
               /praccpp-002-envtest/05_openfolder_hub1590651155a5b37883bc96eab199e52_68304_5442964e1457da565ed2e67909ee50c1.png 400w,
               /praccpp-002-envtest/05_openfolder_hub1590651155a5b37883bc96eab199e52_68304_e50b0322ea2de6d7cdd90052da50d47d.png 760w,
               /praccpp-002-envtest/05_openfolder_hub1590651155a5b37883bc96eab199e52_68304_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/05_openfolder_hub1590651155a5b37883bc96eab199e52_68304_5442964e1457da565ed2e67909ee50c1.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;완료되었다면, 다음 그림과 같이 &lt;b&gt;탐색기 항목의 최상위부분이 폴더명으로 변경된 것을 확인&lt;/b&gt;할 수 있습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;06_openfolder&#34; srcset=&#34;
               /praccpp-002-envtest/06_openfolder_hub0d43befaf7fab2573941462c41bf3a0_59150_4d1fd6bb0b02bc2c16a9a5fead66cf23.png 400w,
               /praccpp-002-envtest/06_openfolder_hub0d43befaf7fab2573941462c41bf3a0_59150_741d2e5af3b39fa76489bc50ba4f9ada.png 760w,
               /praccpp-002-envtest/06_openfolder_hub0d43befaf7fab2573941462c41bf3a0_59150_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/06_openfolder_hub0d43befaf7fab2573941462c41bf3a0_59150_4d1fd6bb0b02bc2c16a9a5fead66cf23.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cmake-quick-start&#34;&gt;CMake: Quick Start&lt;/h2&gt;
&lt;p&gt;지난 글에서 설치한 extension 중, CMake Tools가 제공하는 기능을 활용하여 Hello World 프로젝트를 만들어 보겠습니다.&lt;/p&gt;
&lt;p&gt;CMake Tools는 &lt;b&gt;CMake: Quick Start&lt;/b&gt;라는 기능을 제공합니다. 이는, Hello World를 출력하는 간단한 예제 프로젝트를 자동으로 생성해주는 기능입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;위쪽의 메뉴바에서 &lt;b&gt;View - Command Palette&lt;/b&gt;를 누릅니다. 단축키로는 &lt;b&gt;[CTRL]+[SHIFT]+[P]&lt;/b&gt;입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;07_cqs&#34; srcset=&#34;
               /praccpp-002-envtest/07_cqs_hu3f4709795be6401f50a9d4c5ae7541a9_44735_3d64ca3b2895a1ceea1a4bc9b903326e.png 400w,
               /praccpp-002-envtest/07_cqs_hu3f4709795be6401f50a9d4c5ae7541a9_44735_2f98a3fba0df0dd872d4588287c2bd21.png 760w,
               /praccpp-002-envtest/07_cqs_hu3f4709795be6401f50a9d4c5ae7541a9_44735_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/07_cqs_hu3f4709795be6401f50a9d4c5ae7541a9_44735_3d64ca3b2895a1ceea1a4bc9b903326e.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위쪽에 작은 명령창이 뜨고, &lt;code&gt;&amp;gt;&lt;/code&gt; 표시가 적혀있을 것입니다. 뒤에 이어서 &lt;b&gt;cmake quick start&lt;/b&gt;라고 적으면, 하단에 &lt;b&gt;CMake: Quick Start&lt;/b&gt;라는 항목이 검색되어 나타날 것입니다. 이를 클릭합니다. (간단하게 &lt;b&gt;cqs&lt;/b&gt;라고만 적어도 검색됩니다)&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;08_cqs&#34; srcset=&#34;
               /praccpp-002-envtest/08_cqs_hu295d22ffc740697df9751216a6db0bfa_31971_cf41b9cdca8281be99b2302f26ffca39.png 400w,
               /praccpp-002-envtest/08_cqs_hu295d22ffc740697df9751216a6db0bfa_31971_87c6115ae3e313cfc241d9ac655bc24f.png 760w,
               /praccpp-002-envtest/08_cqs_hu295d22ffc740697df9751216a6db0bfa_31971_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/08_cqs_hu295d22ffc740697df9751216a6db0bfa_31971_cf41b9cdca8281be99b2302f26ffca39.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경우에 따라, 다음 그림과 같이 &lt;b&gt;컴파일러 선택 요청&lt;/b&gt;이 뜰 수도 있습니다. VSCode가 탐지한 빌드 도구가 모두 나타나는 것이므로, 여러분의 화면에 나타난 항목이 저와 약간 다를 수도 있습니다.&lt;/p&gt;
&lt;p&gt;이 중에서 &lt;b&gt;Visual Studio Build Tools 2022 Release - amd64&lt;/b&gt;가 있다면 이것을 클릭하시면 됩니다. 만약 이 항목이 없는 경우에는 Visual Studio Build Tools 2022 Release - x86으로 진행하셔도 큰 차이는 없습니다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;09_cqs_2022&#34; srcset=&#34;
               /praccpp-002-envtest/09_cqs_2022_hu86cf694f904f238465c0eed7f0d4ba5d_57442_a0e50705504b05a3c858d90b4901cc9f.png 400w,
               /praccpp-002-envtest/09_cqs_2022_hu86cf694f904f238465c0eed7f0d4ba5d_57442_3890175aa65cd2d48f76ad8490973a34.png 760w,
               /praccpp-002-envtest/09_cqs_2022_hu86cf694f904f238465c0eed7f0d4ba5d_57442_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/09_cqs_2022_hu86cf694f904f238465c0eed7f0d4ba5d_57442_a0e50705504b05a3c858d90b4901cc9f.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이어서, 다음 그림과 같이 &lt;b&gt;새 프로젝트의 이름을 적으라는 요청&lt;/b&gt;이 뜹니다. &lt;b&gt;아무거나 자유롭게 적으시면 됩니다&lt;/b&gt;. 여기서는 &lt;b&gt;helloworld&lt;/b&gt;라고 적겠습니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;10_cqs_2022&#34; srcset=&#34;
               /praccpp-002-envtest/10_cqs_2022_hu3575ee1eecae407ca06b8c0c576b404f_46364_47bcc8686d2d1975e0d0bf290afdcbb3.png 400w,
               /praccpp-002-envtest/10_cqs_2022_hu3575ee1eecae407ca06b8c0c576b404f_46364_2c5512f12849fb0a53e83911b9e01b56.png 760w,
               /praccpp-002-envtest/10_cqs_2022_hu3575ee1eecae407ca06b8c0c576b404f_46364_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/10_cqs_2022_hu3575ee1eecae407ca06b8c0c576b404f_46364_47bcc8686d2d1975e0d0bf290afdcbb3.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;마지막으로, &lt;b&gt;라이브러리를 만들 것인지 실행파일을 만들 것인지 선택하라는 요청&lt;/b&gt;이 뜹니다. 여기서는 실행파일을 만들 것이므로, &lt;b&gt;Executable&lt;/b&gt;을 선택합니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;11_cqs_2022&#34; srcset=&#34;
               /praccpp-002-envtest/11_cqs_2022_hub2218299f068a7f3659f7a180554b42c_45794_21df6095a17e29985924a1c7665fa697.png 400w,
               /praccpp-002-envtest/11_cqs_2022_hub2218299f068a7f3659f7a180554b42c_45794_b338db60a4753ce5ca3eeeb5c6d81177.png 760w,
               /praccpp-002-envtest/11_cqs_2022_hub2218299f068a7f3659f7a180554b42c_45794_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/11_cqs_2022_hub2218299f068a7f3659f7a180554b42c_45794_21df6095a17e29985924a1c7665fa697.png&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그러면 하단부의 &lt;b&gt;OUTPUT&lt;/b&gt; 탭에서 뭔가 많은 문구가 올라가며 여러 작업이 자동으로 진행된 뒤, 다음과 같은 폴더와 파일들이 생성될 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; 폴더&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서는 각 파일에 쓰여있는 내용을 설명하진 않을 것입니다. 이 파일들이 다음 그림처럼 &lt;b&gt;잘 만들어져 있는지만 확인&lt;/b&gt;해봅니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;12_cqs_2022&#34; srcset=&#34;
               /praccpp-002-envtest/12_cqs_2022_hud837c933b9ae765c8898d89d21bb7bd1_95575_20a907af7c224475099fc20dbdbe2a83.png 400w,
               /praccpp-002-envtest/12_cqs_2022_hud837c933b9ae765c8898d89d21bb7bd1_95575_b638a7c8f1f9c9c10e85a3e663f0e9bb.png 760w,
               /praccpp-002-envtest/12_cqs_2022_hud837c933b9ae765c8898d89d21bb7bd1_95575_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/12_cqs_2022_hud837c933b9ae765c8898d89d21bb7bd1_95575_20a907af7c224475099fc20dbdbe2a83.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이제 실행이 잘 되는지 확인해보겠습니다. 실행은 창 맨 밑의 파란색 상태표시줄에서 &lt;b&gt;재생버튼(▷) 모양&lt;/b&gt;을 눌러주시면 됩니다.&lt;/p&gt;
&lt;p&gt;이번에도 OUTPUT 탭에서 여러 문구가 올라가며 진행이 된 뒤, &lt;b&gt;TERMINAL 탭&lt;/b&gt;으로 자동 전환되며 다음 그림과 같은 &lt;b&gt;Hello, world!&lt;/b&gt; 문구가 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;여기까지 확인하셨다면, 작업 환경이 모두 정상적으로 세팅된 것입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;13_cqs_2022&#34; srcset=&#34;
               /praccpp-002-envtest/13_cqs_2022_hu3af5c1500b73b905238db0350c34ae0e_89321_512efb0e520100c41b52bb8716257cf9.png 400w,
               /praccpp-002-envtest/13_cqs_2022_hu3af5c1500b73b905238db0350c34ae0e_89321_87bd20f862218555489c052aaa29e9f5.png 760w,
               /praccpp-002-envtest/13_cqs_2022_hu3af5c1500b73b905238db0350c34ae0e_89321_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/praccpp-002-envtest/13_cqs_2022_hu3af5c1500b73b905238db0350c34ae0e_89321_512efb0e520100c41b52bb8716257cf9.png&#34;
               width=&#34;760&#34;
               height=&#34;549&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;이번 글에서는 앞서 구축한 VSCode와 MSVC를 기반으로 한 작업환경이 정상적으로 작동하는지 테스트해보았습니다.&lt;/p&gt;
&lt;p&gt;앞으로 강의를 진행하며 좀 더 세부적인 옵션을 설정하는 방법에 대해 배워나가겠지만, 프로젝트를 만들고 실행하는 큰 흐름은 이번 글에서 진행한 바와 거의 유사합니다. 그러므로, 이번 글에서 했던 작업이 &lt;b&gt;익숙해지실 수 있도록 꼭 한 번 이상 실습을 해보시길 권장&lt;/b&gt;합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-10-12: 최초 게시&lt;/li&gt;
&lt;li&gt;2021-10-21: Code 실행 시 Developer PowerShell for VS 2019를 통해 실행할 필요가 없어서, 해당 내용 삭제&lt;/li&gt;
&lt;li&gt;2021-11-10: Visual Studio 2022 버전 출시에 따른 내용 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;이는 엄밀히 말하면, 여러분이 작업을 진행하시는 컴퓨터 환경과 프로그램을 실행하게 될 컴퓨터 환경의 비트수를 고려하여 선택하는 부분입니다. 무슨 말인지 잘 모르시겠다면, &lt;b&gt;요즘 사용하시는 컴퓨터는 대부분 64 bit일 것이므로 그냥 64 bit용에 해당하는 amd64를 선택하여 진행&lt;/b&gt;하시면 됩니다. 참고로 현재 사용 중인 컴퓨터 환경의 비트수는 [WIN]+[R]을 눌러 실행 창을 연 뒤, &lt;code&gt;msinfo32&lt;/code&gt;를 입력하여 실행하여 시스템 정보 창을 띄우고, 여기서 시스템 종류 항목을 확인하면 알 수 있습니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - *. 실습환경 만들기(VSCode를 안쓰는 경우)</title>
      <link>https://evandde.github.io/praccpp-000-env_general/</link>
      <pubDate>Wed, 10 Nov 2021 20:50:10 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-000-env_general/</guid>
      <description>&lt;p&gt;이 글에서는 MSVC + VSCode 환경을 사용하지 않는 분들이 향후 수업을 따라오기 위해 어떻게 준비해야 하는지를 다룹니다.&lt;/p&gt;
&lt;p&gt;앞서 예시로 보여드린 MSVC + VSCode 환경을 그대로 따라서 사용하신다면 굳이 이 글을 읽지 않아도 괜찮습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;예제-코드-준비&#34;&gt;예제 코드 준비&lt;/h2&gt;
&lt;p&gt;앞서 &lt;a href=&#34;https://evandde.github.io/praccpp-002-envtest/&#34;&gt;실습환경 테스트하기&lt;/a&gt;에서 CMake: Quick Start를 통해 만든 파일들과 동일한 파일을 준비하면 됩니다.&lt;/p&gt;
&lt;p&gt;다음 두 개의 파일을 다운받아서 여러분이 원하는 작업공간에 넣어주시면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://evandde.github.io/uploads/main.cpp&#34; target=&#34;_blank&#34;&gt;main.cpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://evandde.github.io/uploads/CMakeLists.txt&#34; target=&#34;_blank&#34;&gt;CMakeLists.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;c-빌드-도구&#34;&gt;C++ 빌드 도구&lt;/h2&gt;
&lt;p&gt;C++ 코드를 이용하여 빌드하기 위한 &lt;b&gt;빌드 도구&lt;/b&gt;가 있어야 합니다.&lt;/p&gt;
&lt;p&gt;대표적으로 다음과 같은 것들이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Visual C++ 빌드 도구 (이 시리즈에서 사용하고 있는 것)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mingw-w64.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mingw-w64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/kr/xcode/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각자 운영체제와 사용환경에 따라 적합한 것을 선택하여 진행하시면 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cmake&#34;&gt;CMake&lt;/h2&gt;
&lt;p&gt;CMake는 사용환경과 상관없이 설치해서 이용하시면 됩니다.&lt;/p&gt;
&lt;p&gt;이 시리즈에서 소개한 방법처럼 MSVC를 이용하여 한 번에 설치할 수도 있습니다만, 그렇지 않은 경우에는 따로 설치해주시면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cmake.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake 홈페이지&lt;/a&gt;에서 직접 받아서 설치하시거나, &lt;a href=&#34;https://github.com/microsoft/winget-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;winget&lt;/a&gt;, &lt;a href=&#34;https://wiki.debian.org/Apt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apt&lt;/a&gt;, &lt;a href=&#34;https://brew.sh/index_ko&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;brew&lt;/a&gt; 등 패키지관리자를 통해서도 설치하실 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;버전은 3.0 이상&lt;/b&gt;으로 설치하시기 바랍니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;통합개발환경ide&#34;&gt;통합개발환경(IDE)&lt;/h2&gt;
&lt;p&gt;통합개발환경도 다양한 선택지가 있습니다. 대표적으로 다음과 같은 것들이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VSCode (이 시리즈에서 사용하고 있는 것)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/ko/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eclipse.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/kr/xcode/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/ko-kr/product/development-tools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Qt Creator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codeblocks.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code::Blocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ 코드 자동완성, 빌더/디버거 연동 등의 기능을 제공한다면 어떤 것을 사용하셔도 괜찮습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;빌드-및-실행&#34;&gt;빌드 및 실행&lt;/h2&gt;
&lt;p&gt;빌드는 어느 디렉토리(폴더)에서 수행해도 상관없습니다만, 전통적인 관례를 따라 &lt;code&gt;build&lt;/code&gt; 디렉토리(폴더)를 만들고 그 안에 빌드 결과물이 담기도록 하시는 것을 권장합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;위에서 받은 &lt;code&gt;main.cpp&lt;/code&gt; 파일과 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일이 있는 곳에 &lt;code&gt;build&lt;/code&gt;라는 이름의 디렉토리(폴더)를 새로 만듭니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMake를 이용하여 &lt;code&gt;build&lt;/code&gt; 디렉토리(폴더)에 결과물이 담기도록, 작업공간 디렉토리(폴더)에 대해 cmake와 빌드를 수행합니다.&lt;/p&gt;
&lt;p&gt;터미널을 이용할 수 있다면, &lt;b&gt;&lt;code&gt;build&lt;/code&gt; 디렉토리(폴더)로 이동한 상태에서 다음과 같이 입력&lt;/b&gt;하면 &lt;b&gt;빌드가 수행&lt;/b&gt;됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake ..
cmake --build . --config Release
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; 디렉토리 내에 있는 &lt;code&gt;helloworld.exe&lt;/code&gt; 파일을 실행해서 프로그램이 제대로 작동하는지 확인합니다.&lt;/p&gt;
&lt;p&gt;경우에 따라, &lt;code&gt;build/Release&lt;/code&gt; 내에 &lt;code&gt;helloworld.exe&lt;/code&gt; 파일이 존재할 수도 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-11-10: 최초 게시&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>대충보는 C&#43;&#43; &amp; CMake - 3. 빌드, 컴파일, 링크</title>
      <link>https://evandde.github.io/praccpp-003-whatisbuild/</link>
      <pubDate>Wed, 10 Nov 2021 16:32:26 +0900</pubDate>
      <guid>https://evandde.github.io/praccpp-003-whatisbuild/</guid>
      <description>&lt;p&gt;이 글에서는 &lt;b&gt;빌드&lt;/b&gt;/&lt;b&gt;컴파일&lt;/b&gt;/&lt;b&gt;링크&lt;/b&gt;가 무엇인지 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-설명&#34;&gt;용어 설명&lt;/h2&gt;
&lt;h3 id=&#34;컴파일&#34;&gt;컴파일&lt;/h3&gt;
&lt;p&gt;컴파일이란 사람의 언어로 작성된 코드(e.g. &lt;code&gt;main.cpp&lt;/code&gt;)를 컴퓨터가 사용하는 언어로 &lt;b&gt;번역&lt;/b&gt;하는 과정을 의미합니다.&lt;/p&gt;
&lt;p&gt;컴퓨터는 C++로 작성된 파일을 해석할 수 없습니다. 그래서 이 파일을 컴퓨터가 사용하는 이진수(binary) 기반의 언어로 번역하는 단계가 필요합니다. 이 과정을 &lt;b&gt;컴파일(compile)&lt;/b&gt;이라 부르고, 컴파일을 수행해주는 도구를 &lt;b&gt;컴파일러(compiler)&lt;/b&gt;라고 합니다.&lt;/p&gt;
&lt;p&gt;번역기도 파파고나 구글번역기 등 여러가지가 있고 각각의 결과물도 다르고 성능도 다르듯, 컴파일러도 여러가지 종류가 있고 각각의 특징이나 장단점이 있습니다. 이 시리즈에서는 그 중 Microsoft에서 제공하는 컴파일러를 이용하고 있는 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;링크&#34;&gt;링크&lt;/h3&gt;
&lt;p&gt;링크란 여러 개의 파일들을 &lt;strong&gt;한데 묶어서&lt;/strong&gt; 하나의 실행용 프로그램(e.g. &lt;code&gt;.exe&lt;/code&gt; 파일)을 만들어내는 과정을 의미합니다.&lt;/p&gt;
&lt;p&gt;지금 우리는 C++ 코드가 &lt;code&gt;main.cpp&lt;/code&gt; 파일 하나만 가지고 있지만, 앞으로 C++을 배워나가다 보면 더 많은 파일을 이용하여 이들을 모아 하나의 프로그램을 만들어야 할 일이 생길 것입니다&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. 마치 요리를 할 때 메인 재료 이외에도 다른 부가적인 재료와 양념이 들어가듯 말이죠. 이 때, 여러 개의 파일들을 유기적으로 잘 엮어서 하나의 완성된 프로그램으로 만들어내는 과정을 &lt;b&gt;링크(link)&lt;/b&gt;라고 부르고, 링크를 수행해주는 도구를 &lt;b&gt;링커(linker)&lt;/b&gt;라고 합니다.&lt;/p&gt;
&lt;h3 id=&#34;빌드&#34;&gt;빌드&lt;/h3&gt;
&lt;p&gt;빌드란 컴파일과 링크의 두 과정을 합친 것입니다.&lt;/p&gt;
&lt;p&gt;순서 상으로는, &lt;b&gt;컴파일&lt;/b&gt;을 먼저 한 뒤에, 번역된 파일들을 &lt;b&gt;링크&lt;/b&gt;하는 과정을 거쳐 프로그램이 만들어집니다. 이 일련의 과정을 &lt;b&gt;빌드(build)&lt;/b&gt;라고 하고, 빌드를 수행해주는 도구를 &lt;b&gt;빌더(builder)&lt;/b&gt;라고 하는 것이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;b&gt;컴파일&lt;/b&gt;이라는 용어를 &lt;b&gt;빌드의 뜻&lt;/b&gt;으로 사용하는 경우가 꽤나 자주 있으니 그러려니 하고 넘어가시면 됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&#34;cmake-quick-start-프로젝트-파일구조&#34;&gt;CMake: Quick Start 프로젝트 파일구조&lt;/h2&gt;
&lt;p&gt;지난 번 글에서 만든 &lt;a href=&#34;https://evandde.github.io/praccpp-002-envtest/#cmake-quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake: Quick Start 프로젝트&lt;/a&gt;를 살펴보며 설명을 이어가도록 하겠습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    만약 다른 IDE를 사용하고 있어 CMake: Quick Start를 실습하지 못하는 분은, 그냥 &lt;b&gt;이론적인 부분만 보고 넘어가셔도 괜찮습니다&lt;/b&gt;.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;CMake: Quick Start 프로젝트를 만든 폴더에는 다음과 같은 내용물이 만들어져 있을 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; 폴더&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vscode&lt;/code&gt; 폴더(이 폴더는 있을 수도 있고, 없을 수도 있습니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각에 대해 간단히 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;maincpp-파일&#34;&gt;main.cpp 파일&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;main.cpp&lt;/code&gt; 파일은 프로그램이 &lt;b&gt;실제로 어떤 일을 수행할 지&lt;/b&gt;에 대해 &lt;b&gt;C++ 언어&lt;/b&gt;로 적혀있는 파일로, 가장 핵심이 되는 파일입니다.&lt;/p&gt;
&lt;p&gt;앞으로 우리가 이 시리즈를 진행함에 있어, 계속 수정하며 살펴볼 파일입니다.&lt;/p&gt;
&lt;h3 id=&#34;build-폴더&#34;&gt;build 폴더&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; 폴더는 빌드를 수행하여 나온 결과물이 담긴 폴더입니다.&lt;/p&gt;
&lt;p&gt;빌드 결과물을 담는 경로는 자유롭게 변경 가능하지만, 이처럼 &lt;code&gt;build&lt;/code&gt;라는 이름의 폴더를 만들고 그 안에 결과물을 담는 것이 일반적입니다. 이 시리즈와 같이 환경을 구셩하셨다면, 자동으로 이 관례에 따라 저장될 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;cmakeliststxt-파일&#34;&gt;CMakeLists.txt 파일&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; 파일은 CMake라는 프로그램을 활용하기 위해 필요한 파일입니다. 이는 나중에 CMake에 대해 다룰 때 다시 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;vscode-폴더&#34;&gt;.vscode 폴더&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.vscode&lt;/code&gt; 폴더는 &lt;b&gt;VSCode라는 IDE를 사용할 때의 설정 값 등이 저장되는 폴더&lt;/b&gt;로, CMake 기반의 프로젝트와는 아무런 관계가 없는 폴더입니다.&lt;/p&gt;
&lt;p&gt;나중에 여러가지 설정을 조정할 때 쓰일 일이 있으니, 그 때 다시 살펴보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;일단 이론은 간단하게 여기까지만 하도록 하죠. 다음 글에서 뵙겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-11-10: 최초 게시&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;사실 지금처럼 &lt;code&gt;main.cpp&lt;/code&gt; 파일 하나만으로 프로그램을 만들 때에도, 눈에 보이지 않는 수많은 다른 파일들이 엮어져서 프로그램이 만들어지게 됩니다. 이는 C++ 프로그램을 만들 때 알아서 엮어지도록 되어 있어서 직접 보이지 않을 뿐입니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
  </channel>
</rss>
