<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geant4 | EvaNote</title>
    <link>https://evandde.github.io/categories/geant4/</link>
      <atom:link href="https://evandde.github.io/categories/geant4/index.xml" rel="self" type="application/rss+xml" />
    <description>Geant4</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ko-kr</language><copyright>© 2020–2021 Evan Kim</copyright><lastBuildDate>Mon, 05 Apr 2021 17:13:04 +0900</lastBuildDate>
    <image>
      <url>https://evandde.github.io/media/icon_hu8e7e87b14a52eedd9109bf1b224bd29e_18847_512x512_fill_lanczos_center_3.png</url>
      <title>Geant4</title>
      <link>https://evandde.github.io/categories/geant4/</link>
    </image>
    
    <item>
      <title>Geant4 UI command 소개 - 반복문</title>
      <link>https://evandde.github.io/geant4-uicommand-loop/</link>
      <pubDate>Mon, 05 Apr 2021 17:13:04 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-uicommand-loop/</guid>
      <description>&lt;p&gt;Geant4 UI command에서 활용 가능한 반복문. &lt;code&gt;/control/loop&lt;/code&gt;와 &lt;code&gt;/control/foreach&lt;/code&gt;에 대해 알아봅니다.&lt;/p&gt;
&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;Geant4에서 built-in UI command로 제공하는 반복문은 두 가지입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/control/loop&lt;/li&gt;
&lt;li&gt;/control/foreach&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 반복문의 중요한 특징은 &amp;ldquo;&lt;strong&gt;다른 매크로파일을 반복적으로 실행시킨다&lt;/strong&gt;&amp;ldquo;는 점입니다.&lt;/p&gt;
&lt;p&gt;각각의 용법과 함께 좀 더 자세히 살펴보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controlloop&#34;&gt;/control/loop&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/loop&lt;/code&gt; 반복문은 대개의 프로그래밍 언어가 제공하는 for문과 유사합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;시작&lt;/strong&gt;, &lt;strong&gt;끝&lt;/strong&gt;, &lt;strong&gt;간격&lt;/strong&gt;을 입력하여 &lt;strong&gt;카운터를 증감&lt;/strong&gt;시키며 &lt;strong&gt;다른 매크로파일을 실행&lt;/strong&gt;시켜줍니다.&lt;/p&gt;
&lt;h3 id=&#34;사용법&#34;&gt;사용법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/control/loop 매크로파일명 카운터변수명 시작값 끝값 간격&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;이 때, &lt;code&gt;매크로파일명&lt;/code&gt;과 &lt;code&gt;카운터변수명&lt;/code&gt;은 문자열(string)로 인식하고, &lt;code&gt;시작값&lt;/code&gt;, &lt;code&gt;끝값&lt;/code&gt;, &lt;code&gt;간격&lt;/code&gt;은 실수형(double)으로 인식합니다.&lt;/p&gt;
&lt;p&gt;이렇게 입력하면, &lt;code&gt;매크로파일&lt;/code&gt;에서 &lt;code&gt;카운터변수&lt;/code&gt;를 &lt;code&gt;시작&lt;/code&gt;~&lt;code&gt;끝&lt;/code&gt;값으로 aliasing 시켜줍니다. 즉, &lt;code&gt;매크로파일&lt;/code&gt; 내에서는 &lt;code&gt;{카운터변수}&lt;/code&gt;와 같이 입력하면 되는 것이죠.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;간격&lt;/code&gt; 값은 생략 가능합니다. 생략할 경우 기본값으로 &lt;strong&gt;1&lt;/strong&gt;이 사용됩니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;사용예시&#34;&gt;사용예시&lt;/h3&gt;
&lt;p&gt;다음과 같은 매크로를 만들어봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/energy 10. MeV
/run/beamOn 10000

/gun/energy 12. MeV
/run/beamOn 10000

/gun/energy 14. MeV
/run/beamOn 10000

/gun/energy 16. MeV
/run/beamOn 10000

/gun/energy 18. MeV
/run/beamOn 10000

/gun/energy 20. MeV
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 에너지 값이 10~20으로 2씩 바뀌고 있을 뿐, 나머지는 반복됩니다.&lt;/p&gt;
&lt;p&gt;이 경우 다음과 같이 두 개의 파일로 나누어 작성하면 동일하게 동작합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;주 매크로파일&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/loop myRun.mac ene 10. 20. 2.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;myRun.mac&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/energy {ene} MeV
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controlforeach&#34;&gt;/control/foreach&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/foreach&lt;/code&gt; 반복문은 대개의 프로그래밍 언어가 제공하는 range-based for문과 유사합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;카운터&lt;/strong&gt;를 &lt;strong&gt;제시된 목록의 각 값&lt;/strong&gt;으로 바꾸어가며 &lt;strong&gt;다른 매크로파일을 반복적으로 실행&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;h3 id=&#34;사용법-1&#34;&gt;사용법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/control/foreach 매크로파일명 카운터변수명 &amp;quot;반복할값목록&amp;quot;&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;여기서 &lt;code&gt;&amp;quot;반복할값목록&amp;quot;&lt;/code&gt;을 &lt;font color=red&gt;입력할 때 주의점&lt;/font&gt;이 두 가지 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;목록 전체를 반드시 &amp;quot;&amp;quot;(double-quote)로 감쌀 것&lt;/li&gt;
&lt;li&gt;목록의 각 값은 띄어쓰기로 구분할 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 입력하면, &lt;code&gt;매크로파일&lt;/code&gt;에서 &lt;code&gt;카운터변수&lt;/code&gt;를 &lt;code&gt;&amp;quot;반복할값목록&amp;quot;&lt;/code&gt;에 적힌 각각의 값으로 aliasing 시켜줍니다. 즉, &lt;code&gt;매크로파일&lt;/code&gt; 내에서는 &lt;code&gt;{카운터변수}&lt;/code&gt;와 같이 입력하면 되는 것이죠.&lt;/p&gt;
&lt;h3 id=&#34;사용예시-1&#34;&gt;사용예시&lt;/h3&gt;
&lt;p&gt;다음과 같은 매크로를 만들어 봅시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/particle p
/run/beamOn 10000

/gun/particle e-
/run/beamOn 10000

/gun/particle e+
/run/beamOn 10000

/gun/particle gamma
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서는 입자가 p, e-, e+, gamma로 바뀌고 있을 뿐, 나머지는 반복됩니다.&lt;/p&gt;
&lt;p&gt;이 경우 다음과 같이 두 개의 파일로 나누어 작성하면 동일하게 동작합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;주 매크로파일&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/foreach myRun.mac pname &amp;quot;p e- e+ gamma&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;b&gt;myRun.mac&lt;/b&gt;의 예시&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/gun/particle {pname}
/run/beamOn 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Geant4 UI command 소개 - /control/alias</title>
      <link>https://evandde.github.io/geant4-uicommand-alias/</link>
      <pubDate>Mon, 05 Apr 2021 15:20:37 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-uicommand-alias/</guid>
      <description>&lt;p&gt;Geant4 UI command 중, 자주 반복되는 문구를 간단하게 줄여주는 명령어. &amp;ldquo;/control/alias&amp;quot;에 대해 알아봅니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/control/alias&lt;/code&gt; 명령어는 &lt;strong&gt;특정 문구를 반복적으로 사용&lt;/strong&gt;해야 할 때, 별명을 지어주는 명령어입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;사용법&#34;&gt;사용법&lt;/h2&gt;
&lt;h3 id=&#34;별명-지어주기&#34;&gt;별명 지어주기&lt;/h3&gt;
&lt;p&gt;별명을 지어줄 때에는 &lt;code&gt;/control/alias 별명 원래내용&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;/tracking/verbose&lt;/code&gt;라는 명령어를 &lt;code&gt;tv&lt;/code&gt;로 줄여서 사용하고 싶다면 다음과 같이 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/alias tv /tracking/verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    만약 입력하는 내용에 띄어쓰기가 포함되어 있다면, &amp;ldquo;&amp;quot;(double-quote)로 묶어서 입력합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;별명-사용하기&#34;&gt;별명 사용하기&lt;/h3&gt;
&lt;p&gt;앞서 부여한 별명을 사용할 때에는 &lt;code&gt;{별명}&lt;/code&gt;의 형태로 입력합니다.&lt;/p&gt;
&lt;p&gt;예를 &lt;code&gt;tv&lt;/code&gt;에 대해 위에서처럼 별명을 붙여줬다면, &lt;code&gt;/tracking/verbose 1&lt;/code&gt;을 다음과 같이 줄여서 사용할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /tracking/verbose 1
{tv} 1
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;중요한-특징&#34;&gt;중요한 특징&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;alias로 호출되어 불려온 값은 무조건 string 형태로 인식합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;명령어만 별명을 부여할 수 있는 것이 아닙니다. 어떤 문자열이든 별명을 부여해줄 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;alias된 값을 중첩하여 불러올 수도 있습니다.&lt;/p&gt;
&lt;p&gt;예시)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/control/alias file1 /diskA/dirX/fileXX.dat
/control/alias file2 /diskA/dirY/fileYY.dat
/control/alias run 1

# /myDirectory/myCommand /diskA/dirX/fileXX.dat
# /myDirectory/myCommand {file1}
/myDirectory/myCommand {file{run}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;/control/loop, /control/foreach 명령어와 조합하여 응용하면 상당히 강력한 효과를 얻을 수 있습니다.&lt;/b&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Geant4의 UI Command 기초 이론</title>
      <link>https://evandde.github.io/geant4-uicommand-basic/</link>
      <pubDate>Mon, 22 Mar 2021 11:06:31 +0900</pubDate>
      <guid>https://evandde.github.io/geant4-uicommand-basic/</guid>
      <description>&lt;p&gt;Geant4는 UI command라는 개념을 통해 C++ 언어로 하드코딩 하지 않고도 시뮬레이션 전반을 핸들링하거나 모니터링할 수 있도록 합니다. 이 글에서는 Geant4의 UI Command 사용에 대한 기초 이론을 다룹니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ui-command-개념&#34;&gt;UI Command 개념&lt;/h2&gt;
&lt;p&gt;Geant4는 시뮬레이션 이전, 도중, 이후에 시뮬레이션의 조건 등을 조작하거나 정보를 추출하는 등의 다양한 기능을 수행할 수 있도록 UI Command라는 기능을 제공합니다.&lt;/p&gt;
&lt;p&gt;UI Command는 Geant4에서 &lt;strong&gt;기본적으로 제공&lt;/strong&gt;하는 &lt;strong&gt;built-in command&lt;/strong&gt;와, &lt;strong&gt;사용자가 직접 만들어 사용&lt;/strong&gt;하는 &lt;strong&gt;messenger 기반 command&lt;/strong&gt;로 구분할 수 있습니다. 둘 다 사용방법과 기본 이론은 동일합니다.&lt;/p&gt;
&lt;h3 id=&#34;built-in-command-일람&#34;&gt;Built-in Command 일람&lt;/h3&gt;
&lt;p&gt;Built-in command 목록을 확인하는 방법을 소개합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;공식 홈페이지에서 제공하는 &lt;a href=&#34;https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/Control/AllResources/Control/UIcommands/_.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;웹페이지&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qt 기반 GUI 형식으로 Geant4 어플리케이션을 실행한 뒤 &lt;strong&gt;왼쪽 부분의 Help 탭&lt;/strong&gt; 확인&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qtui-help&#34; srcset=&#34;
               /geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_5c66d9ea9836c7cb1e4822537a16e814.png 400w,
               /geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_e44cb3a007f6c0ef711f95fe22458759.png 760w,
               /geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/geant4-uicommand-basic/qtui-help_huc69b36e9b204c9725efec73459ebdb0b_114887_5c66d9ea9836c7cb1e4822537a16e814.png&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ui-command의-구성&#34;&gt;UI Command의 구성&lt;/h2&gt;
&lt;h3 id=&#34;기본-요소&#34;&gt;기본 요소&lt;/h3&gt;
&lt;p&gt;UI Command는 다음의 세 가지로 구성됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=blue&gt;Command directory&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=green&gt;Command&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=red&gt;Parameter(s)&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실제 예시는 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/&lt;font color=blue&gt;run&lt;/font&gt;/&lt;font color=green&gt;verbose&lt;/font&gt; &lt;font color=red&gt;1&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;/&lt;font color=blue&gt;vis&lt;/font&gt;/&lt;font color=blue&gt;viewer&lt;/font&gt;/&lt;font color=green&gt;flush&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 &lt;font color=red&gt;Parameter(s)&lt;/font&gt;가 여러 개 사용될 경우 각각을 구분하는 구분자는 &lt;strong&gt;공백&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    공백이 있는 string을 파라미터로 사용해야 하는 경우에는, &amp;ldquo;&amp;quot;(double-quote)로 묶어줍니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Command 중에는 일부 parameter의 기본값이 존재해서 생략할 수 있는 경우도 있습니다. 만약 앞의 값을 생략하고 뒤의 값만 입력하려면, 생략할 값에 &lt;code&gt;!&lt;/code&gt;를 적으면 됩니다. 예를 들어, 처음 값을 생략하여 기본값을 사용하고, 두번째 값만 직접 입력한다면 다음과 같이 적을 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/directory/command ! second
&lt;/code&gt;&lt;/pre&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;주석&#34;&gt;주석&lt;/h3&gt;
&lt;p&gt;각 줄마다, &lt;code&gt;#&lt;/code&gt; 표시 이후는 주석처리됩니다.&lt;/p&gt;
&lt;p&gt;예를 들면 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# This line will be commented
/run/verbose 1
/run/verbose 2 # After # mark will be commented.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ui-command의-입력&#34;&gt;UI Command의 입력&lt;/h2&gt;
&lt;p&gt;UI Command는 다음의 방법을 통해 입력 가능합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C++ 코드 상에서 직접 입력&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;외부 파일을 통한 입력&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그램 실행 후, (G)UI 명령줄을 통한 입력&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c-코드-상에서-입력하기&#34;&gt;C++ 코드 상에서 입력하기&lt;/h3&gt;
&lt;p&gt;G4UImanager라는 클래스가 관련 기능을 담당합니다.&lt;/p&gt;
&lt;p&gt;이 클래스는 singleton 형태로 짜여있으며, GetUIpointer()라는 static 멤버함수를 통해 클래스 객체를 가져올 수 있습니다.&lt;/p&gt;
&lt;p&gt;멤버함수 중 ApplyCommand() 함수를 활용하면 UI command를 실행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 함수의 원형은 G4int ApplyCommand(const G4String&amp;amp; aCommand)로, 문자열을 입력으로 받고, 실행 결과를 정수값으로 반환합니다.&lt;/p&gt;
&lt;p&gt;사용 예시는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;G4UImanager::GetUIPointer()-&amp;gt;ApplyCommand(&amp;quot;/run/verbose 1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;ApplyCommand() 함수는 정상 실행 시 &lt;code&gt;0&lt;/code&gt;을 반환하고, 오류가 있을 시 &lt;code&gt;xyy&lt;/code&gt;형태의 양의 정수로 오류코드를 반환합니다. &lt;code&gt;x&lt;/code&gt;는 G4UIcommandStatus.hh의 enum에 정의된 값이고, &lt;code&gt;yy&lt;/code&gt;는 문제를 일으킨 첫 parameter의 번호입니다. 다음은 10.7 버전의 G4UIcommandStatus 클래스에서 발췌한 내용입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;enum G4UIcommandStatus
{
  fCommandSucceeded         = 0,
  fCommandNotFound          = 100,
  fIllegalApplicationState  = 200,
  fParameterOutOfRange      = 300,
  fParameterUnreadable      = 400,
  fParameterOutOfCandidates = 500,
  fAliasNotFound            = 600
};
&lt;/code&gt;&lt;/pre&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    ApplyCommand() 함수로 UI command 실행을 시도하였다가 모종의 문제로 인해 &lt;strong&gt;실행을 실패하더라도&lt;/strong&gt;, &lt;strong&gt;프로그램은 아무런 알림 없이 그냥 진행됩니다&lt;/strong&gt;. 필요하다면 코드 작성 시 반환되는 오류코드 값에 따라 대응하도록 &lt;strong&gt;직접&lt;/strong&gt; 코딩해주셔야 합니다.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;외부-파일을-통한-입력&#34;&gt;외부 파일을 통한 입력&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;대부분의 경우&lt;/strong&gt; UI command는 이 방법을 통해 입력됩니다.&lt;/p&gt;
&lt;p&gt;이 방식을 이용하기 위해서는, 사용할 UI command를 ASCII 형태로 입력해 둔 파일이 필요합니다. 이 파일을 일반적으로 &lt;strong&gt;매크로파일&lt;/strong&gt;이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;이 방법의 가장 큰 장점은 &lt;strong&gt;소스코드를 다시 컴파일하지 않고도 수정 가능&lt;/strong&gt;하다는 점입니다.&lt;/p&gt;
&lt;p&gt;특정 인자를 약간씩 바꿔가며 여러 번 시뮬레이션을 돌려야하는 등의 작업을 수행할 때, 컴파일을 한 번만 해서 실행파일을 생성한 뒤 매크로파일만 수정하며 손쉽게 여러 조건의 시뮬레이션을 돌릴 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;사용을 위해서는 두 가지 준비가 필요합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;소스코드에서 매크로 파일을 사용하겠다는 선언 (UI command 중 &lt;code&gt;/control/execute 매크로파일명&lt;/code&gt; 이용)&lt;/p&gt;
&lt;p&gt;예를 들어, 일련의 UI command를 적어둔 파일 이름이 &lt;b&gt;run.mac&lt;/b&gt;이라면 다음과 같이 입력&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;G4UImanager::GetUIPointer()-&amp;gt;ApplyCommand(&amp;quot;/control/execute run.mac&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매크로파일 작성 (&lt;b&gt;run.mac&lt;/b&gt; 파일의 예시)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/run/verbose 1
/tracking/verbose 1

# empty line will be ignored.

# You can also call another macro file here.
/control/execute run2.mac

/run/beamOn 100
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;매크로파일을 사용할 때의 주의사항은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;매크로파일 내의 내용 중 실행할 수 없는 명령줄을 만나면, &lt;code&gt;COMMAND NOT FOUND&lt;/code&gt; 경고문구가 발생하고 해당 매크로파일을 읽는 작업을 중단한 뒤 건너뜁니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매크로파일에 사용되는 명령어는 full-path로 작성해야 합니다. cd 등으로 경로이동을 시도하거나, 경로 정보 없이 command만 입력하면 오류가 발생합니다. 다음은 &lt;font color=red&gt;잘못된 사용 예&lt;/font&gt;입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /run/ # A macro file cannot contain &amp;quot;cd&amp;quot; command.
verbose 1 # &amp;quot;verbose&amp;quot; does not contain its path.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매크로파일의 경로가 프로그램 실행파일의 경로와 다를 경우, 경로까지 입력해줘야 합니다. 예를 들어, 한 단계 상위 디렉토리(&lt;code&gt;../&lt;/code&gt;)에 있는 &lt;b&gt;run.mac&lt;/b&gt; 파일을 이용하려면 다음과 같이 입력합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;G4UImanager::GetUIPointer()-&amp;gt;ApplyCommand(&amp;quot;/control/execute ../run.mac&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gui-명령줄을-통한-입력&#34;&gt;(G)UI 명령줄을 통한 입력&lt;/h3&gt;
&lt;p&gt;프로그램을 실행한 뒤, GUI 혹은 UI 상에서 직접 명령줄을 통해 입력할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;여기에서는 마치 linux 상에서 디렉토리를 탐색하듯, &lt;code&gt;cd&lt;/code&gt; 명령어와 &lt;code&gt;ls&lt;/code&gt; 명령어 등도 이용 가능합니다.&lt;/p&gt;
&lt;p&gt;다음은 가장 많이 사용되는 Qt 기반 GUI에서 UI command를 입력하는 모습입니다.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;qtui-session&#34; srcset=&#34;
               /geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_eae5d0d054764d04283735ee9729f478.png 400w,
               /geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_b033bd2a7e94d3ad6d02f24eb48ee3ef.png 760w,
               /geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://evandde.github.io/geant4-uicommand-basic/qtui-session_hu68365735e238db15bc4a599e852473f4_135036_eae5d0d054764d04283735ee9729f478.png&#34;
               width=&#34;751&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
