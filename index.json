[{"categories":["Geant4"],"content":"Geant4 무작정 따라하기 시리즈의 첫번째. 기본 틀이 이미 짜여져있는 템플릿 코드를 다운받아서 실행해봅시다. ","date":"2021-06-09","objectID":"/g4-noqasked-001-clonetest/:0:0","tags":["Geant4","Template","git"],"title":"Geant4 무작정 따라하기 - 1. 템플릿 코드 실행하기","uri":"/g4-noqasked-001-clonetest/"},{"categories":["Geant4"],"content":"템플릿 코드 Geant4 코드 작성을 여러번 하다 보면 시뮬레이션의 내용이 다소 바뀌더라도, 기본적인 틀에 해당하는 부분은 크게 달라지지 않는다는 사실을 깨닫게 됩니다. 그래서 저는 미리 짜두었던 기본 틀을 복사해와서 실제 시뮬레이션의 요구사항에 맞추어 세부적인 부분만 조정하는 식으로 작업을 수행함으로써 작업시간을 단축시키곤 합니다. PPT나 워드 프로세싱등에서 사용되는 샘플 문서인 템플릿(Template)과 유사한 용도이기에, 이 기본 틀을 저는 템플릿 코드라고 부릅니다. 이 시리즈에서는 여러분에게 제가 직접 만든 템플릿 코드를 제공해드리려 합니다. 이 템플릿 코드는 Geant4 공식 예제 중 기본 예제 수준의 시뮬레이션을 작성하기에 적합하도록 하되, 불필요한 부분을 최소화하여 작성했습니다. 여러분은 이 시리즈를 통해, 제가 제공해드린 템플릿 코드에 여러분이 원하는 구조물, 선원항, 데이터기록방식을 정의하게 될 것이고, 이를 통해 여러분만의 Geant4 시뮬레이션 코드를 만들어 결과를 얻어볼 수 있을 것입니다. ","date":"2021-06-09","objectID":"/g4-noqasked-001-clonetest/:1:0","tags":["Geant4","Template","git"],"title":"Geant4 무작정 따라하기 - 1. 템플릿 코드 실행하기","uri":"/g4-noqasked-001-clonetest/"},{"categories":["Geant4"],"content":"템플릿 코드 다운받기 다음 세 가지 방법 중 본인에게 편한 방법을 통해 다운받으시기 바랍니다. 템플릿 코드는 이 링크를 통해 다운받을 수 있습니다. g4_minimal-master.zip 파일이 다운받아질 것입니다. 압축을 풀어 사용하시면 됩니다. 혹은, 리눅스 환경에서 wget명령어를 통해 다음과 같이 진행하셔도 됩니다. (Linux에서는 unzip 명령어로 zip 형식의 압축을 풀 수 있습니다) wget https://github.com/evandde/g4_minimal/archive/refs/heads/master.zip unzip master.zip 또는, 여러분이 git을 사용하실 줄 안다면, 다음의 명령어를 통해 repository 자체를 클론해가셔도 됩니다. git clone https://github.com/evandde/g4_minimal Tip\r\rgit을 사용할 줄 아신다면, 3번 방법을 추천합니다. 이 후 본 시리즈에서 만들어 나갈 단계별 정답 코드를 해당 repository의 example 브랜치에 지난 commit들의 형태로 제공하고 있습니다.\r\r ","date":"2021-06-09","objectID":"/g4-noqasked-001-clonetest/:2:0","tags":["Geant4","Template","git"],"title":"Geant4 무작정 따라하기 - 1. 템플릿 코드 실행하기","uri":"/g4-noqasked-001-clonetest/"},{"categories":["Geant4"],"content":"실행해보기 압축을 풀고 해당 디렉토리 안에 들어가면 다음과 같은 파일들이 있을 것입니다. 먼저, 컴파일 결과를 담을 build 디렉토리를 생성해준 뒤, build 디렉토리로 들어갑니다. mkdir build cd build 이어서, cmake와 make를 통해 컴파일을 수행합니다. cmake .. make 퍼센트가 쭉 올라가서 100%까지 진행된 뒤에 다음과 같은 파일들이 만들어짐을 확인하시면 됩니다. 이제 다음 명령어를 입력하여 실행이 되는지 확인합니다. 아래 그림과 같이 문구가 주르륵 올라간 뒤에 Good bye :) 인사를 받아내었다면 성공입니다. ./g4_minimal run.mac 그래픽을 사용할 수 있는 환경이라면, 다음 명령어로도 실행해봅니다. Qt 라이브러리를 연동하여 설치하셨다면, 아래 그림과 같이 마우스로 조작가능한 3D 화면을 볼 수 있습니다. Note\r\rQt가 아닌 다른 그래픽 라이브러리를 연동하셨다면, UI창의 모습이 다소 다를 수도 있습니다.\r\r ./g4_minimal 이 모든 화면을 확인하셨다면 이번 글의 목표는 달성한 것입니다. ","date":"2021-06-09","objectID":"/g4-noqasked-001-clonetest/:3:0","tags":["Geant4","Template","git"],"title":"Geant4 무작정 따라하기 - 1. 템플릿 코드 실행하기","uri":"/g4-noqasked-001-clonetest/"},{"categories":["Geant4"],"content":"보충 설명 ","date":"2021-06-09","objectID":"/g4-noqasked-001-clonetest/:4:0","tags":["Geant4","Template","git"],"title":"Geant4 무작정 따라하기 - 1. 템플릿 코드 실행하기","uri":"/g4-noqasked-001-clonetest/"},{"categories":["Geant4"],"content":"빌드(cmake, make) 실행해보기에서 입력한 cmake와 make 명령어는 C++ 언어로 작성된 코드를 빌드하기 위해 수행한 작업입니다. 최근의 Geant4는 CMake를 활용하는 방식을 채용하고 있으므로, 해당 프로젝트의 디렉토리 안에 CMakeLists.txt 파일이 제대로 구비되어 있어야 합니다. Geant4 공식 홈페이지에서 사용자를 위한 CMakeLists.txt의 작성법을 제공하고 있습니다(링크). 대부분의 경우 CMakeLists.txt 파일을 수정할 일은 없으므로, 여기서는 이에 대한 설명을 생략하겠습니다. cmake 명령어를 입력하면, make를 수행하기 위해 필요한 Makefile이 생성됩니다. 이어서 make 명령어를 입력하여 빌드를 수행하면 g4_minimal이라는 실행파일이 만들어집니다. ","date":"2021-06-09","objectID":"/g4-noqasked-001-clonetest/:4:1","tags":["Geant4","Template","git"],"title":"Geant4 무작정 따라하기 - 1. 템플릿 코드 실행하기","uri":"/g4-noqasked-001-clonetest/"},{"categories":["Geant4"],"content":"실행(UI모드 실행, batch모드 실행) Geant4는 프로그램을 실행하는 방식으로 다음의 두 가지를 제공합니다. UI모드 실행 프로그램이 실행된 뒤 IDLE상태로 대기. 사용자가 명령어를 입력하면 이에 따라 명령어가 실행되는 구조. 그래픽 관련 라이브러리를 연동하여 Geant4를 설치한 경우, 지오메트리 및 입자 수송을 그래픽 형태로 보거나 저장할 수도 있음. 일반적으로 실제 시뮬레이션을 수행하여 결과를 얻기 전에, 지오메트리/선원항/데이터기록 등을 테스트하고 확인하는 목적으로 이용함. batch모드 실행 시뮬레이션을 수행하는 데에 필요한 명령어를, 프로그램을 실행하는 시점에 일괄적으로(batch) 함께 입력해주어 바로 시뮬레이션을 수행하는 구조. 일반적으로 충분한 수의 초기입자를 발생시켜 실제 시뮬레이션을 수행하고 이에 대한 결과를 얻는 목적으로 이용함. main함수를 어떻게 작성하느냐에 따라 위의 두 실행방식을 자유롭게 선택할 수 있습니다. 다만, Geant4 기반으로 작성한 대부분의 코드에서 다음의 방식을 따르도록 main함수를 작성하는 것이 일반적인 관습입니다. 실행파일명만 입력하여 실행한 경우에는 UI모드로 실행 예를 들어, 위에서 ./g4_minimal 만 입력하여 실행한 경우에는 UI창이 뜨는 것을 확인할 수 있음. 실행파일명 뒤에 .mac 형식의 파일을 함께 입력하여 실행한 경우에는, 해당 .mac 파일의 내용을 일괄적으로 입력하여 batch모드로 실행 예를 들어, 위에서 ./g4_minimal run.mac을 입력하여 실행한 경우에는 run.mac파일의 내용이 일괄적으로 입력되어 시뮬레이션이 batch모드로 수행되고, 최종적으로 Good bye :)가 출력되며 시뮬레이션이 종료되는 것을 확인할 수 있음. ※ .mac 파일에 어떤 내용을 작성하는지에 대해서는 이 시리즈에서 추후에 다루도록 하겠습니다. 고생하셨습니다. 다음 글에서는 지오메트리를 정의하는 방법에 대해 알아보겠습니다. ","date":"2021-06-09","objectID":"/g4-noqasked-001-clonetest/:4:2","tags":["Geant4","Template","git"],"title":"Geant4 무작정 따라하기 - 1. 템플릿 코드 실행하기","uri":"/g4-noqasked-001-clonetest/"},{"categories":["Geant4"],"content":"더보기 빌드 관련 컴파일, 링크, 빌드란? (WIP) make 살펴보기 (WIP) cmake 살펴보기 (WIP) Geant4 어플리케이션에서의 CMakeLists.txt 파일 살펴보기 (WIP) Geant4 코드의 main함수 관련 Geant4 어플리케이션에서의 main 함수 정의하기 (WIP) Geant4 클래스 뜯어보기 - G4RunManagerFactory, G4RunManager (WIP) ","date":"2021-06-09","objectID":"/g4-noqasked-001-clonetest/:5:0","tags":["Geant4","Template","git"],"title":"Geant4 무작정 따라하기 - 1. 템플릿 코드 실행하기","uri":"/g4-noqasked-001-clonetest/"},{"categories":["Geant4"],"content":"Geant4가 뭔지도 모르겠는데… Geant4를 사용은 해야하는 상황에 처한 여러분! 묻지도 따지지도 않고 따라만 하면 일단 Geant4를 사용할 수 있게 해드립니다. ","date":"2021-06-06","objectID":"/g4-noqasked-000-opening/:0:0","tags":["Geant4"],"title":"Geant4 무작정 따라하기 시리즈를 시작하며","uri":"/g4-noqasked-000-opening/"},{"categories":["Geant4"],"content":"Geant4 Geant4는 1994년에 개발을 시작하여 1998년에 첫 버전이 출시된 이래로, 20년이 넘게 지난 현재까지도 활발하게 사용되고 있는 입자 수송 시뮬레이션 툴킷입니다. 유사한 목적으로 사용되는 다른 몬테칼로 시뮬레이션 코드들(MCNP, PHITS, EGS, FLUKA 등)과 비교해볼 때 다음과 같은 장점을 가지고 있습니다. 어마어마한 자유도 전기장/자기장 내 하전입자의 거동 모사가 가능 시간의 흐름에 따라 구조물이 움직이며 방사선이 수송되는 4D 시뮬레이션이 가능 수송 가능한 입자 종류가 수 백 가지 (가상의 입자를 정의하여 추가도 가능) 이 모든 기능이 무료! 그런데 이 좋은 툴의 큰 단점은 바로 사용하기가 어렵다는 점입니다. 원래 자유도가 높다고 소문난 것들은 대개 사용 난이도가 높은 편이죠. ","date":"2021-06-06","objectID":"/g4-noqasked-000-opening/:1:0","tags":["Geant4"],"title":"Geant4 무작정 따라하기 시리즈를 시작하며","uri":"/g4-noqasked-000-opening/"},{"categories":["Geant4"],"content":"저는… 제가 Geant4를 처음 접한 것은 2010년도 즈음이었습니다. 프로그래밍이라는 것에 조금이나마 관심이 있긴 했지만, 얕은 지식으로 Geant4를 처음 접했을 때에는 너무 어렵고 큰 산으로 보였지요. 이후 방사선계측기 관련 연구를 수행하며 다양한 시뮬레이션을 Geant4 툴킷으로 수행했었고, 경험치가 점점 쌓이다보니 그 유용성과 가치가 보이기 시작했던 것 같습니다. 2014년부터는 한양대학교 방사선신기술연구소에서 매 해마다 주최하는 Geant4 초급자 교육과정의 강사로서 일부 강의를 맡아 진행하고 있습니다. 비록 제가 개발자나 CS전공자는 아니지만, Geant4를 10년가량 사용해온 연구자로서의 저의 경험이 이 프로그램을 필요로 하는 다른 연구자분들께 도움이 되면 좋겠습니다. ","date":"2021-06-06","objectID":"/g4-noqasked-000-opening/:2:0","tags":["Geant4"],"title":"Geant4 무작정 따라하기 시리즈를 시작하며","uri":"/g4-noqasked-000-opening/"},{"categories":["Geant4"],"content":"Geant4 무작정 따라하기 시리즈의 목표 이 시리즈에서는 Geant4가 어떻게 구동되고, 최적화를 하려면 어떻게 해야하고… 이런 것을 깊게 다루지는 않으려 합니다. 당장 프로젝트를 수행해야 하는데 어찌되었든 Geant4라는 툴킷을 사용을 해야하는 상황에 처한 분, 우선 뭐라도 돌아가게끔 해서 간단하게라도 결과를 얻어내고 싶은 분에게 적합한 글이 될 것입니다. Geant4는 몬테칼로 시뮬레이션용 툴킷으로, 프레임워크1처럼 이용하는 경우가 많습니다. 그래서 Geant4를 처음 이용하는 단계에서는, Geant4의 모든 내용을 다 이해하는 것보다 내가 원하는 작업을 위해 필요한 내용을 어디에 어떻게 작성해야 하는지 숙지하는 편이 효율적입니다. 이 시리즈에서는 이 부분에 초점을 맞추어 진행할 것입니다. 여러분이 준비해야할 것은 다음과 같습니다. 간단한 Linux 터미널 사용 지식 (ls, cd, cp,… 등 간단한 명령어의 사용) 어느정도의 C++ 지식 (많이 알수록 좋습니다) 최소: for, if 등의 조건문/반복문 사용 가능. 함수를 만들고 사용 가능. 주석(//, /* */) 사용 가능. 알면 매우 유용한 것: std::vector, std::map의 개념과 사용방법. 클래스의 기본적인 개념과 사용방법. 포인터의 개념과 사용방법. 헤더파일/소스파일의 분리와 활용. 변수의 scope 개념. Geant4가 설치된 환경 여러분이 이미 Geant4가 설치된 환경이 있다면, 그 환경을 그대로 사용하시면 됩니다. 듀얼부팅 혹은 가상화 방식 등을 통해 Linux 환경을 구축하는 방법은 알지만, Geant4 설치는 해본적이 없다면 이 글을 참고하세요. Windows 10을 이용하고 있고, Linux 환경을 구축하는 방법부터 어려움을 겪고있다면, 이 글을 참고하세요. Geant4 코드 작성을 위한 통합개발환경(IDE) Info\r\r코드 작성은 메모장으로도 할 수 있습니다. 하지만, 통합개발환경(IDE)을 구축하여 이용하시기를 강력히 권장합니다.\r\r 이미 익숙하게 이용하고 있는 C++용 IDE가 있다면 그대로 사용하셔도 됩니다. 이 시리즈에서 활용할 IDE인 VS Code를 사용해보실 의향이 있다면, 다음 글을 참고하세요. Visual Studio Code 소개, 설치, 기본 세팅 Visual Studio Code에서 C, C++ 환경 설정하기 Visual Studio Code에서 CMake 환경 설정하기 어떤 문제해결에 적합한 코드를 재사용 가능하게끔 제공해둔 것. 단, 일반적으로 프레임워크의 코드 자체가 주가 되고, 사용자는 프레임워크의 규약과 형식에 맞추어 본인이 원하는 세부사항을 이 프레임워크에 끼워넣는 식으로 사용하게 됨. ↩︎ ","date":"2021-06-06","objectID":"/g4-noqasked-000-opening/:3:0","tags":["Geant4"],"title":"Geant4 무작정 따라하기 시리즈를 시작하며","uri":"/g4-noqasked-000-opening/"},{"categories":["Python"],"content":"Python에서 PyQt5 라이브러리를 연동하여 GUI 프로그래밍을 할 때 발생한 “qt.qpa.plugin: Could not find the Qt platform plugin “windows” in “”.” 과 같은 오류를 해결하는 방법에 대해 알아봅니다. Warning\r\r이 글에서는 pip install pyqt5 pyqt5-tools 등의 과정을 통해 pyqt5는 이미 설치한 상태라고 가정합니다.\r\r ","date":"2021-04-06","objectID":"/python-cannotfind-qtplatform/:0:0","tags":["BugFix","PyQt5","Qt platform plugin","qt.qpa.plugin","QT_QPA_PLATFORM_PLUGIN_PATH"],"title":"qt.qpa.plugin 오류 해결","uri":"/python-cannotfind-qtplatform/"},{"categories":["Python"],"content":"TL;DR python 실행 다음 명령줄 입력하여 python이 설치된 경로 확인 (venv로 실행 중이라면 venv 경로로 뜰 것임) import sys sys.executable 뜨는 경로 중 시작부터 Scripts 이전까지를 복사 PowerShell을 관리자권한으로 실행 다음 명령줄 입력하여 환경변수 설정. 이 때 따옴표 안의 경로는, 앞서 3번에서 복사한 경로 뒤에 \\Lib\\site-packages\\PyQt5\\Qt\\plugins\\platforms를 이어 붙임. \\(역슬래시)는 한 개씩이든 두 개씩이든 상관 없음 setx QT_QPA_PLATFORM_PLUGIN_PATH \"C:\\\\Users\\\\---\\\\python\\\\venv\\Lib\\site-packages\\PyQt5\\Qt\\plugins\\platforms\" 재부팅 ","date":"2021-04-06","objectID":"/python-cannotfind-qtplatform/:1:0","tags":["BugFix","PyQt5","Qt platform plugin","qt.qpa.plugin","QT_QPA_PLATFORM_PLUGIN_PATH"],"title":"qt.qpa.plugin 오류 해결","uri":"/python-cannotfind-qtplatform/"},{"categories":["Python"],"content":"원인 문제가 발생하는 원인은 에러문구에 적힌 바와 같이, Qt platform plugin의 경로를 찾지 못했기 때문입니다. 환경변수 QT_QPA_PLATFORM_PLUGIN_PATH를 통해 해당 플러그인의 위치를 찾는데, 해당 내용이 설정되어 있지 않아 경로를 찾지못한다는 오류가 발생하는 것입니다. ","date":"2021-04-06","objectID":"/python-cannotfind-qtplatform/:2:0","tags":["BugFix","PyQt5","Qt platform plugin","qt.qpa.plugin","QT_QPA_PLATFORM_PLUGIN_PATH"],"title":"qt.qpa.plugin 오류 해결","uri":"/python-cannotfind-qtplatform/"},{"categories":["Python"],"content":"해결책 우리가 설치해준 pyqt5 라이브러리 내에 있는 platforms 항목과 연동해주면 문제가 해결됩니다. pip를 통해 설치하게 되면, python 경로의 Lib\\site-packages\\ 안에 설치한 내용물이 보관됩니다. python 경로는 python을 실행하여 다음 명령어를 입력하면 확인할 수 있습니다. import sys sys.executable 여기서 나오는 경로는 python.exe라는 실행파일의 경로이므로, Scripts라는 폴더 이전까지의 경로 부분만 복사해둡니다. 이후, PowerShell을 관리자권한으로 실행하고 다음 명령어를 입력해 환경변수를 설정해 줍니다. setx QT_QPA_PLATFORM_PLUGIN_PATH \"C:\\\\Users\\\\---\\\\python\\\\venv\\Lib\\site-packages\\PyQt5\\Qt\\plugins\\platforms\" 여기서 C:\\\\Users\\\\---\\\\python\\\\venv 부분은 여러분이 앞서 확인하신 경로로 바꿔주셔야 합니다. 앞부분 경로를 변경하고, 뒤의 \\Lib\\site-packages\\PyQt5\\Qt\\plugins\\platforms 부분만 그대로 유지하시면 됩니다. 환경변수 설정이 완료되었다면, 환경변수 적용을 위해 재부팅을 해주면 해결됩니다! ","date":"2021-04-06","objectID":"/python-cannotfind-qtplatform/:3:0","tags":["BugFix","PyQt5","Qt platform plugin","qt.qpa.plugin","QT_QPA_PLATFORM_PLUGIN_PATH"],"title":"qt.qpa.plugin 오류 해결","uri":"/python-cannotfind-qtplatform/"},{"categories":["Geant4"],"content":"Geant4 UI command에서 활용 가능한 반복문. “/control/loop\"와 “/control/foreach\"에 대해 알아봅니다. ","date":"2021-04-05","objectID":"/geant4-uicommand-loop/:0:0","tags":["HowTo","Geant4","UI","Command","loop","foreach"],"title":"Geant4 UI command - 반복문","uri":"/geant4-uicommand-loop/"},{"categories":["Geant4"],"content":"개요 Geant4에서 built-in UI command로 제공하는 반복문은 두 가지입니다. /control/loop /control/foreach 이 반복문의 중요한 특징은 “다른 매크로파일을 반복적으로 실행시킨다“는 점입니다. 각각의 용법과 함께 좀 더 자세히 살펴보겠습니다. ","date":"2021-04-05","objectID":"/geant4-uicommand-loop/:1:0","tags":["HowTo","Geant4","UI","Command","loop","foreach"],"title":"Geant4 UI command - 반복문","uri":"/geant4-uicommand-loop/"},{"categories":["Geant4"],"content":"/control/loop /control/loop 반복문은 대개의 프로그래밍 언어가 제공하는 for문과 유사합니다. 시작, 끝, 간격을 입력하여 카운터를 증감시키며 다른 매크로파일을 실행시켜줍니다. ","date":"2021-04-05","objectID":"/geant4-uicommand-loop/:2:0","tags":["HowTo","Geant4","UI","Command","loop","foreach"],"title":"Geant4 UI command - 반복문","uri":"/geant4-uicommand-loop/"},{"categories":["Geant4"],"content":"사용법 /control/loop 매크로파일명 카운터변수명 시작값 끝값 간격의 형태로 입력합니다. 이 때, 매크로파일명과 카운터변수명은 문자열(string)로 인식하고, 시작값, 끝값, 간격은 실수형(double)으로 인식합니다. 이렇게 입력하면, 매크로파일에서 카운터변수를 시작~끝값으로 aliasing 시켜줍니다. 즉, 매크로파일 내에서는 {카운터변수}와 같이 입력하면 되는 것이죠. Note\r\r간격 값은 생략 가능합니다. 생략할 경우 기본값으로 1이 사용됩니다.\r\r ","date":"2021-04-05","objectID":"/geant4-uicommand-loop/:2:1","tags":["HowTo","Geant4","UI","Command","loop","foreach"],"title":"Geant4 UI command - 반복문","uri":"/geant4-uicommand-loop/"},{"categories":["Geant4"],"content":"사용예시 다음과 같은 매크로를 만들어봅시다. /gun/energy 10. MeV /run/beamOn 10000 /gun/energy 12. MeV /run/beamOn 10000 /gun/energy 14. MeV /run/beamOn 10000 /gun/energy 16. MeV /run/beamOn 10000 /gun/energy 18. MeV /run/beamOn 10000 /gun/energy 20. MeV /run/beamOn 10000 여기서 에너지 값이 10~20으로 2씩 바뀌고 있을 뿐, 나머지는 반복됩니다. 이 경우 다음과 같이 두 개의 파일로 나누어 작성하면 동일하게 동작합니다. # 주 매크로파일의 내용 /control/loop myRun.mac ene 10. 20. 2. # myRun.mac의 내용 /gun/energy {ene} MeV /run/beamOn 10000 ","date":"2021-04-05","objectID":"/geant4-uicommand-loop/:2:2","tags":["HowTo","Geant4","UI","Command","loop","foreach"],"title":"Geant4 UI command - 반복문","uri":"/geant4-uicommand-loop/"},{"categories":["Geant4"],"content":"/control/foreach /control/foreach 반복문은 대개의 프로그래밍 언어가 제공하는 range-based for문과 유사합니다. 카운터를 제시된 목록의 각 값으로 바꾸어가며 다른 매크로파일을 반복적으로 실행합니다. ","date":"2021-04-05","objectID":"/geant4-uicommand-loop/:3:0","tags":["HowTo","Geant4","UI","Command","loop","foreach"],"title":"Geant4 UI command - 반복문","uri":"/geant4-uicommand-loop/"},{"categories":["Geant4"],"content":"사용법 /control/foreach 매크로파일명 카운터변수명 \"반복할값목록\"의 형태로 입력합니다. 여기서 \"반복할값목록\"을 입력할 때 주의점이 두 가지 있습니다. 목록 전체를 반드시 “\"(double-quote)로 감쌀 것 목록의 각 값은 띄어쓰기로 구분할 것 이렇게 입력하면, 매크로파일에서 카운터변수를 \"반복할값목록\"에 적힌 각각의 값으로 aliasing 시켜줍니다. 즉, 매크로파일 내에서는 {카운터변수}와 같이 입력하면 되는 것이죠. ","date":"2021-04-05","objectID":"/geant4-uicommand-loop/:3:1","tags":["HowTo","Geant4","UI","Command","loop","foreach"],"title":"Geant4 UI command - 반복문","uri":"/geant4-uicommand-loop/"},{"categories":["Geant4"],"content":"사용예시 다음과 같은 매크로를 만들어 봅시다. /gun/particle p /run/beamOn 10000 /gun/particle e- /run/beamOn 10000 /gun/particle e+ /run/beamOn 10000 /gun/particle gamma /run/beamOn 10000 여기서는 입자가 p, e-, e+, gamma로 바뀌고 있을 뿐, 나머지는 반복됩니다. 이 경우 다음과 같이 두 개의 파일로 나누어 작성하면 동일하게 동작합니다. # 주 매크로파일의 내용 /control/foreach myRun.mac pname \"p e- e+ gamma\" # myRun.mac의 내용 /gun/particle {pname} /run/beamOn 10000 ","date":"2021-04-05","objectID":"/geant4-uicommand-loop/:3:2","tags":["HowTo","Geant4","UI","Command","loop","foreach"],"title":"Geant4 UI command - 반복문","uri":"/geant4-uicommand-loop/"},{"categories":["Geant4"],"content":"Geant4 UI command 중, 자주 반복되는 문구를 간단하게 줄여주는 명령어. “/control/alias\"에 대해 알아봅니다. ","date":"2021-04-05","objectID":"/geant4-uicommand-alias/:0:0","tags":["HowTo","Geant4","UI","Command","alias"],"title":"Geant4 UI command - /control/alias","uri":"/geant4-uicommand-alias/"},{"categories":["Geant4"],"content":"개요 /control/alias 명령어는 특정 문구를 반복적으로 사용해야 할 때, 별명을 지어주는 명령어입니다. ","date":"2021-04-05","objectID":"/geant4-uicommand-alias/:1:0","tags":["HowTo","Geant4","UI","Command","alias"],"title":"Geant4 UI command - /control/alias","uri":"/geant4-uicommand-alias/"},{"categories":["Geant4"],"content":"사용법 ","date":"2021-04-05","objectID":"/geant4-uicommand-alias/:2:0","tags":["HowTo","Geant4","UI","Command","alias"],"title":"Geant4 UI command - /control/alias","uri":"/geant4-uicommand-alias/"},{"categories":["Geant4"],"content":"별명 지어주기 별명을 지어줄 때에는 /control/alias 별명 원래내용의 형태로 입력합니다. 예를 들어, /tracking/verbose라는 명령어를 tv로 줄여서 사용하고 싶다면 다음과 같이 입력합니다. /control/alias tv /tracking/verbose Note\r\r만약 입력하는 내용에 띄어쓰기가 포함되어 있다면, “\"(double-quote)로 묶어서 입력합니다.\r\r ","date":"2021-04-05","objectID":"/geant4-uicommand-alias/:2:1","tags":["HowTo","Geant4","UI","Command","alias"],"title":"Geant4 UI command - /control/alias","uri":"/geant4-uicommand-alias/"},{"categories":["Geant4"],"content":"별명 사용하기 앞서 부여한 별명을 사용할 때에는 {별명}의 형태로 입력합니다. 예를 들어 앞서 부여한 tv별명을 활용하려면 다음과 같이 입력합니다. # 다음은 /tracking/verbose 1과 동일합니다. {tv} 1 ","date":"2021-04-05","objectID":"/geant4-uicommand-alias/:2:2","tags":["HowTo","Geant4","UI","Command","alias"],"title":"Geant4 UI command - /control/alias","uri":"/geant4-uicommand-alias/"},{"categories":["Geant4"],"content":"중요한 특징 alias로 호출되어 불려온 값은 무조건 string 형태로 인식합니다. 명령어만 별명을 부여할 수 있는 것이 아닙니다. 어떤 문자열이든 별명을 부여해줄 수 있습니다. alias된 값을 중첩하여 불러올 수도 있습니다. 예시) /control/alias file1 /diskA/dirX/fileXX.dat /control/alias file2 /diskA/dirY/fileYY.dat /control/alias run 1 /myDirectory/myCommand {file{run}} # /myDirectory/myCommand /diskA/dirX/fileXX.dat 와 동일 # run의 alias 값을 참조하여 /myDirectory/myCommand {file1} 로 변환됨. # file1의 alias 값을 참조하여 /myDirectory/myCommand /diskA/dirX/fileXX.dat 로 변환됨. /control/loop, /control/foreach 명령어와 조합하여 응용하면 상당히 강력한 효과를 얻을 수 있습니다. ","date":"2021-04-05","objectID":"/geant4-uicommand-alias/:3:0","tags":["HowTo","Geant4","UI","Command","alias"],"title":"Geant4 UI command - /control/alias","uri":"/geant4-uicommand-alias/"},{"categories":["Geant4"],"content":"Geant4는 UI command라는 개념을 통해 C++ 언어로 하드코딩 하지 않고도 시뮬레이션 전반을 핸들링하거나 모니터링할 수 있도록 합니다. 이 글에서는 Geant4의 UI Command 사용에 대한 기초 이론을 다룹니다. ","date":"2021-03-22","objectID":"/geant4-uicommand-basic/:0:0","tags":["Geant4","UI","Command"],"title":"Geant4의 UI Command 기초 이론","uri":"/geant4-uicommand-basic/"},{"categories":["Geant4"],"content":"UI Command 개념 Geant4는 시뮬레이션 이전, 도중, 이후에 시뮬레이션의 조건 등을 조작하거나 정보를 추출하는 등의 다양한 기능을 수행할 수 있도록 UI Command라는 기능을 제공합니다. UI Command는 Geant4에서 기본적으로 제공하는 built-in command와, 사용자가 직접 만들어 사용하는 messenger 기반 command로 구분할 수 있습니다. 둘 다 사용방법과 기본 이론은 동일합니다. ","date":"2021-03-22","objectID":"/geant4-uicommand-basic/:1:0","tags":["Geant4","UI","Command"],"title":"Geant4의 UI Command 기초 이론","uri":"/geant4-uicommand-basic/"},{"categories":["Geant4"],"content":"Built-in Command 일람 Built-in command 목록을 확인하는 방법을 소개합니다. 공식 홈페이지에서 제공하는 웹페이지 Qt 기반 GUI 형식으로 Geant4 어플리케이션을 실행한 뒤 왼쪽 부분의 Help 탭 확인 ","date":"2021-03-22","objectID":"/geant4-uicommand-basic/:1:1","tags":["Geant4","UI","Command"],"title":"Geant4의 UI Command 기초 이론","uri":"/geant4-uicommand-basic/"},{"categories":["Geant4"],"content":"UI Command의 구성 ","date":"2021-03-22","objectID":"/geant4-uicommand-basic/:2:0","tags":["Geant4","UI","Command"],"title":"Geant4의 UI Command 기초 이론","uri":"/geant4-uicommand-basic/"},{"categories":["Geant4"],"content":"기본 요소 UI Command는 다음의 세 가지로 구성됩니다. Command directory Command Parameter(s) 실제 예시는 다음과 같습니다. /run/verbose 1 /vis/viewer/flush 여기서 Parameter(s)가 여러 개 사용될 경우 각각을 구분하는 구분자는 공백입니다. Note\r\r공백이 있는 string을 파라미터로 사용해야 하는 경우에는, “\"(double-quote)로 묶어줍니다.\r\r Note\r\rUI command에 따라, 일부 parameter의 기본값이 제공되어 생략 가능한 경우도 있습니다. 만약 앞의 값을 생략하고 뒤의 값만 입력하고 싶은 경우, 생략할 값에 !를 적으면 됩니다. # 처음 값을 생략하여 기본값을 사용하고, 두번째 값만 직접 입력 /directory/command ! second \r\r ","date":"2021-03-22","objectID":"/geant4-uicommand-basic/:2:1","tags":["Geant4","UI","Command"],"title":"Geant4의 UI Command 기초 이론","uri":"/geant4-uicommand-basic/"},{"categories":["Geant4"],"content":"주석 각 줄마다, # 표시 이후는 주석처리됩니다. 예를 들면 다음과 같습니다. # 이런 줄은 주석처리됩니다. /run/verbose 1 /run/verbose 2 # /run/verbose 2는 인식되지만, #표시 이후는 주석입니다. ","date":"2021-03-22","objectID":"/geant4-uicommand-basic/:2:2","tags":["Geant4","UI","Command"],"title":"Geant4의 UI Command 기초 이론","uri":"/geant4-uicommand-basic/"},{"categories":["Geant4"],"content":"UI Command의 입력 UI Command는 다음의 방법을 통해 입력 가능합니다. C++ 코드 상에서 직접 입력 외부 파일을 통한 입력 프로그램 실행 후, (G)UI 명령줄을 통한 입력 ","date":"2021-03-22","objectID":"/geant4-uicommand-basic/:3:0","tags":["Geant4","UI","Command"],"title":"Geant4의 UI Command 기초 이론","uri":"/geant4-uicommand-basic/"},{"categories":["Geant4"],"content":"C++ 코드 상에서 입력하기 G4UImanager라는 클래스가 관련 기능을 담당합니다. 이 클래스는 singleton 형태로 짜여있으며, GetUIpointer()라는 static 멤버함수를 통해 클래스 객체를 가져올 수 있습니다. 멤버함수 중 ApplyCommand() 함수를 활용하면 UI command를 실행할 수 있습니다. 이 함수의 원형은 G4int ApplyCommand(const G4String\u0026 aCommand)로, 문자열을 입력으로 받고, 실행 결과를 정수값으로 반환합니다. 사용 예시는 다음과 같습니다. G4UImanager::GetUIPointer()-\u003eApplyCommand(\"/run/verbose 1\"); Note\r\rApplyCommand() 함수는 정상 실행 시 0을 반환하고, 오류가 있을 시 xyy형태의 양의 정수로 오류코드를 반환합니다. x는 G4UIcommandStatus.hh의 enum에 정의된 값이고, yy는 문제를 일으킨 첫 parameter의 번호입니다. 다음은 10.7 버전의 G4UIcommandStatus 클래스에서 발췌한 내용입니다. enum G4UIcommandStatus { fCommandSucceeded = 0, fCommandNotFound = 100, fIllegalApplicationState = 200, fParameterOutOfRange = 300, fParameterUnreadable = 400, fParameterOutOfCandidates = 500, fAliasNotFound = 600 }; \r\r Warning\r\rApplyCommand() 함수로 UI command 실행을 시도하였다가 모종의 문제로 인해 실행을 실패하더라도, 프로그램은 아무런 알림 없이 그냥 진행됩니다. 필요하다면 코드 작성 시 반환되는 오류코드 값에 따라 대응하도록 직접 코딩해주셔야 합니다.\r\r ","date":"2021-03-22","objectID":"/geant4-uicommand-basic/:3:1","tags":["Geant4","UI","Command"],"title":"Geant4의 UI Command 기초 이론","uri":"/geant4-uicommand-basic/"},{"categories":["Geant4"],"content":"외부 파일을 통한 입력 대부분의 경우 UI command는 이 방법을 통해 입력됩니다. 이 방식을 이용하기 위해서는, 사용할 UI command를 ASCII 형태로 입력해 둔 파일이 필요합니다. 이 파일을 일반적으로 매크로파일이라고 부릅니다. 이 방법의 가장 큰 장점은 소스코드를 다시 컴파일하지 않고도 수정 가능하다는 점입니다. 특정 인자를 약간씩 바꿔가며 여러 번 시뮬레이션을 돌려야하는 등의 작업을 수행할 때, 컴파일을 한 번만 해서 실행파일을 생성한 뒤 매크로파일만 수정하며 손쉽게 여러 조건의 시뮬레이션을 돌릴 수 있게 됩니다. 사용을 위해서는 두 가지 준비가 필요합니다. 소스코드에서 매크로 파일을 사용하겠다는 선언 (UI command 중 /control/execute 매크로파일명 이용) G4UImanager::GetUIPointer()-\u003eApplyCommand(\"/control/execute run.mac\"); // run.mac은 예시입니다. 실제 사용할 파일 이름으로 변경하면 됩니다. 매크로파일 작성 # run.mac 파일 내용 # #표시 이후는 주석으로 인식됩니다. /run/verbose 1 /tracking/verbose 1 # 빈 줄도 넣을 수 있습니다. # 다른 매크로파일을 여기서 또 불러올 수도 있습니다. /control/execute run2.mac /run/beamOn 100 매크로파일을 사용할 때의 주의사항은 다음과 같습니다. 매크로파일 내의 내용 중 실행할 수 없는 명령줄을 만나면, COMMAND NOT FOUND 경고문구가 발생하고 해당 매크로파일을 읽는 작업을 중단한 뒤 건너뜁니다. 매크로파일에 사용되는 명령어는 full-path로 작성해야 합니다. 다음은 잘못된 사용 예입니다. # 다음과 같은 명령어는 사용할 수 없습니다. cd /run/ verbose 1 매크로파일의 경로가 프로그램 실행파일의 경로와 다를 경우, 경로까지 입력해줘야 합니다. // 실행파일의 상위디렉토리에 매크로파일이 있다면 이렇게 입력합니다. G4UImanager::GetUIPointer()-\u003eApplyCommand(\"/control/execute ../run.mac\"); ","date":"2021-03-22","objectID":"/geant4-uicommand-basic/:3:2","tags":["Geant4","UI","Command"],"title":"Geant4의 UI Command 기초 이론","uri":"/geant4-uicommand-basic/"},{"categories":["Geant4"],"content":"(G)UI 명령줄을 통한 입력 프로그램을 실행한 뒤, GUI 혹은 UI 상에서 직접 명령줄을 통해 입력할 수도 있습니다. 여기에서는 마치 linux 상에서 디렉토리를 탐색하듯, cd 명령어와 ls 명령어 등도 이용 가능합니다. 다음은 가장 많이 사용되는 Qt 기반 GUI에서 UI command를 입력하는 모습입니다. ","date":"2021-03-22","objectID":"/geant4-uicommand-basic/:3:3","tags":["Geant4","UI","Command"],"title":"Geant4의 UI Command 기초 이론","uri":"/geant4-uicommand-basic/"},{"categories":["Linux"],"content":"리눅스 운영체제에서 하드웨어 및 시스템의 정보나 현재 상태를 살펴보는 데에 사용되는 명령어를 정리하였습니다. ","date":"2021-03-16","objectID":"/linux-sysinfo/:0:0","tags":["HowTo","Linux","System","Hardware","command"],"title":"리눅스 운영체제에서 하드웨어/시스템 정보 모니터링 명령어 모음","uri":"/linux-sysinfo/"},{"categories":["Linux"],"content":"OS 확인 lsb_release -a ","date":"2021-03-16","objectID":"/linux-sysinfo/:1:0","tags":["HowTo","Linux","System","Hardware","command"],"title":"리눅스 운영체제에서 하드웨어/시스템 정보 모니터링 명령어 모음","uri":"/linux-sysinfo/"},{"categories":["Linux"],"content":"메모리 및 swap 영역 상태 확인 free -h ","date":"2021-03-16","objectID":"/linux-sysinfo/:2:0","tags":["HowTo","Linux","System","Hardware","command"],"title":"리눅스 운영체제에서 하드웨어/시스템 정보 모니터링 명령어 모음","uri":"/linux-sysinfo/"},{"categories":["Linux"],"content":"디스크 용량 확인 df -h ","date":"2021-03-16","objectID":"/linux-sysinfo/:3:0","tags":["HowTo","Linux","System","Hardware","command"],"title":"리눅스 운영체제에서 하드웨어/시스템 정보 모니터링 명령어 모음","uri":"/linux-sysinfo/"},{"categories":["Linux"],"content":"파티션 정보 확인 lsblk ","date":"2021-03-16","objectID":"/linux-sysinfo/:4:0","tags":["HowTo","Linux","System","Hardware","command"],"title":"리눅스 운영체제에서 하드웨어/시스템 정보 모니터링 명령어 모음","uri":"/linux-sysinfo/"},{"categories":["Linux"],"content":"CPU 모델명 확인 cat /proc/cpuinfo | grep CPU | head -1 ","date":"2021-03-16","objectID":"/linux-sysinfo/:5:0","tags":["HowTo","Linux","System","Hardware","command"],"title":"리눅스 운영체제에서 하드웨어/시스템 정보 모니터링 명령어 모음","uri":"/linux-sysinfo/"},{"categories":["Linux"],"content":"CPU 코어 수 확인 cat /proc/cpuinfo | grep CPU | wc -l ","date":"2021-03-16","objectID":"/linux-sysinfo/:6:0","tags":["HowTo","Linux","System","Hardware","command"],"title":"리눅스 운영체제에서 하드웨어/시스템 정보 모니터링 명령어 모음","uri":"/linux-sysinfo/"},{"categories":["Linux"],"content":"서버 상태 확인 w ","date":"2021-03-16","objectID":"/linux-sysinfo/:7:0","tags":["HowTo","Linux","System","Hardware","command"],"title":"리눅스 운영체제에서 하드웨어/시스템 정보 모니터링 명령어 모음","uri":"/linux-sysinfo/"},{"categories":["Geant4"],"content":"이 글은 Geant4 초보자 혹은 Geant4를 처음 사용하시는 분들에게, Windows 10을 사용하는 개인 컴퓨터 환경에서 Geant4를 최대한 쉽게 설치하는 방법을 전달하기 위해 작성하였습니다. (인터넷 연결 필요) Warning\r\r이 글에서 제시하는 방향보다, 각자에게 더 적합한 Geant4 설치 방향이 있을 수 있습니다. 하지만, 이 글은 배경지식 없이도 실무에 사용 가능한 수준으로 Geant4를 설치하는 것을 목적으로 하기 때문에, 작업 난이도 측면에서 쉬운 방향을 택하였습니다. 묻지도 따지지도 않고 “우선 Geant4라는걸 써봐야겠다” 라는 분에게 권장합니다. \r\r ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:0:0","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["Geant4"],"content":"작업 흐름 요약 Windows 10에서 지원하는 기능인 Windows Subsystem for Linux(WSL)을 활용하여 Windows 10 내에 Ubuntu 20.04 LTS를 설치합니다. Ubuntu 20.04 LTS 운영체제가 송신하는 그래픽 화면을 Windows10에서 띄울 수 있도록 해주는 Xming을 설치합니다. Geant4 설치를 위해 Ubuntu 20.04 LTS 내에 필요한 라이브러리들을 설치합니다. Ubuntu 20.04 LTS에 Geant4를 설치합니다. 크로스섹션 데이터는 설치과정에서 자동으로 다운되도록 할 예정이므로 인터넷 연결이 필요합니다. CLHep이라는 외부 라이브러리를 연동할 수도 있습니다만, 이는 필수가 아니므로 따로 설치하지 않을 것입니다. 그래픽정도는 보여야 기분이 좋으므로, 그래픽 라이브러리는 연동하여 설치하겠습니다. Geant4 예제를 실행시켜, 잘 설치되었는지 확인합니다. ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:1:0","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["Geant4"],"content":"Ubuntu 20.04 LTS 설치하기 ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:2:0","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["Geant4"],"content":"Windows 10의 OS 빌드 버전 확인하기 [WIN]+[R]로 실행창을 띄움. winver 입력하고 실행하여, OS 빌드가 16215보다 높은지 확인. Failure\r\rOS 빌드가 16215보다 낮으면, 윈도우즈 업데이트를 먼저 진행하세요.\r\r 확인 후에는 창을 끄셔도 됩니다. ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:2:1","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["Geant4"],"content":"WSL1 형태로 Ubuntu 20.04 LTS 설치하기 [WIN]+[R]로 실행창을 띄움. powershell 입력하고, [CTRL]+[SHIFT]+[ENTER]를 눌러서 실행하여, 관리자 권한으로 PowerShell을 실행. Note\r\r[WIN]+[R]로 띄운 실행창에서 [CTRL]+[SHIFT]+[ENTER]로 실행하면 관리자 권한으로 해당 프로그램을 실행합니다.\r\r 다음 명령어 입력. dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all 재부팅. (아마 자동으로 재부팅 요청이 뜰 것임) Microsoft Store에서 Ubuntu 20.04 LTS를 검색하여 설치. (이 링크를 활용해도 됨) 설치한 Ubuntu를 실행. (시작메뉴에서 찾을 수 있음) 자동으로 추가적인 설치작업이 이루어진 뒤 계정 생성 과정이 진행 됨. 원하는 계정명(ID)과 비밀번호(Password)를 입력. 이로써 여러분은 Windows 10 안에서 Ubuntu 20.04 LTS라는 리눅스 운영체제를 사용할 수 있게 되었습니다. ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:2:2","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["Geant4"],"content":"Xming 설치 ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:3:0","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["Geant4"],"content":"설치하기 Xming 공식 홈페이지에서 Xming 다운로드. 다운받은 파일을 실행하여 Xming 설치. (다음만 누르면서 진행해도 괜찮음) ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:3:1","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["Geant4"],"content":"실행하기 설치를 마치면 기본값으로 Xming이 자동으로 실행 될 것입니다. 별도로 설치 옵션을 건드리지 않으셨다면, 시작메뉴에서 Xming을 찾을 수 있습니다. Xming이 켜져 있는지의 여부는, 작업표시줄 오른쪽의 트레이아이콘을 확인하시면 알 수 있습니다. 트레이아이콘 중 X모양의 아이콘이 있다면 켜져있는 것입니다. 종료하고자 할 때에는, 트레이아이콘을 우클릭하고 Exit를 눌러주시면 됩니다. ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:3:2","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["Geant4"],"content":"Geant4를 위한 관련 라이브러리 설치 앞서 설치한 Ubuntu를 실행. 다음 명령어를 입력하여, Xming과의 연동을 위해 DISPLAY 환경변수 설정. echo \"export DISPLAY=localhost:0\" \u003e\u003e ~/.bashrc 다음 명령어를 입력하여, apt 패키지 매니저 최신화 sudo apt update -y \u0026\u0026 sudo apt upgrade -y \u0026\u0026 sudo apt autoremove -y Note\r\rsudo 명령어로 인해, 비밀번호를 입력하라는 문구가 뜰 수 있습니다. 이는 리눅스에서의 관리자 권한을 사용하기 위해 확인하는 절차입니다. 여러분이 만든 계정의 비밀번호를 입력해주시면 됩니다. \r\r 다음 명령어를 입력하여, 관련 라이브러리 설치 C++ 컴파일러 및 표준 라이브러리, 헤더 (Geant4 설치 시 필수 라이브러리) CMake (Geant4 설치 시 필수 라이브러리) Expat (Linux, macOS에서 Geant4 설치 시 필수 라이브러리) Qt5, X11 OpenGL 라이브러리 설치 (Geant4 설치 시 선택 라이브러리. GUI 등 그래픽 기반 기능 사용에 필요) sudo apt install -y build-essential cmake libexpat1-dev qt5-default libxmu-dev 설치에 시간이 다소 소요될 수 있으니 잠시 쉬고 오셔도 됩니다. ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:4:0","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["Geant4"],"content":"Geant4 설치 명령어 부분만 순서대로 입력하시면 됩니다. Geant4 툴킷을 설치할 디렉토리 생성 sudo mkdir -p /opt/geant4/10.7.p01 1에서 생성한 디렉토리로 이동하여, Geant4 소스코드 다운로드 (소스코드 용량 약 40 MB) cd /opt/geant4/10.7.p01 sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.07.p01.tar.gz 2에서 다운받은 압축파일을 압축해제 sudo tar -xf geant4.10.07.p01.tar.gz build라는 이름의 디렉토리를 만들고 안으로 이동 sudo mkdir build cd build 컴파일 수행 (make 명령은 인터넷 속도 및 cpu 성능에 따라 수 분~수 십분 소요될 수 있음) CMAKE_INSTALL_PREFIX(설치경로): /opt/geant4/10.7.p01 GEANT4_BUILD_MULTITHREADED(multi-threading 사용 여부): ON GEANT4_INSTALL_DATA(크로스섹션 데이터 자동설치 여부): ON (데이터 총 용량 약 900 MB) GEANT4_USE_OPENGL_X11(X11 OpenGL 라이브러리 연동 여부): ON GEANT4_USE_QT(QT 라이브러리 연동 여부): ON sudo cmake ../geant4.10.07.p01 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.7.p01 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON sudo make -j `grep -c processor /proc/cpuinfo` sudo make install 이 부분에서 꽤 오랜 시간이 소요됩니다. 잠시 쉬고 오세요. 환경변수 세팅을 위해 ~/.bashrc에 내용 추가 echo \"source /opt/geant4/10.7.p01/bin/geant4.sh\" \u003e\u003e ~/.bashrc source ~/.bashrc ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:5:0","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["Geant4"],"content":"Geant4 예제 실행해보기 다음 명령어를 입력하여 예제파일 복사해오기 cp -r /opt/geant4/10.7.p01/geant4.10.07.p01/examples/basic/B1 ~ cd ~/B1 다음 명령어를 입력하여 빌드하기 mkdir build cd build cmake .. make 다음 그림과 같이 많은 줄이 출력된 뒤, [100%] Built target exampleB1까지 나오면 성공입니다. 다음 명령어를 입력하여 실행해보기 ./exampleB1 run1.mac 다음 그림처럼 또 무언가 잔뜩 출력된 뒤, RunManagerKernel is deleted. Good bye :)가 출력되었다면 잘 실행된 것입니다. 다음 명령어를 입력하여 GUI 띄워보기 Warning\r\r이 부분은 Xming이 실행된 상태에서만 가능합니다. 반드시 Xming이 실행되어 있는지 확인하세요.\r\r ./exampleB1 잘 실행되었다면 다음과 같은 창이 나타날 것입니다. 여기까지 되셨다면 설치와 테스트까지 성공적으로 하신 것입니다! 고생하셨습니다. ","date":"2021-03-04","objectID":"/g4install-107p1-win10wslbasic/:6:0","tags":["HowTo","Windows","WSL","Ubuntu","Geant4"],"title":"Geant4 설치 무작정 따라하기(초보자용)","uri":"/g4install-107p1-win10wslbasic/"},{"categories":["VSCode"],"content":"VSCode에서 Python3의 기능 중 가상환경을 설정하는 venv를 사용하는 방법에 대해 알아봅니다. Success\r\r여기서는 VSCode에서의 python3 환경을 구축한 상태라고 가정합니다. 이에 관한 내용은 이 글을 참고하세요.\r\r ","date":"2021-02-22","objectID":"/vscode-python-venv/:0:0","tags":["HowTo","VSCode","Python","venv"],"title":"Visual Studio Code에서 Python3의 venv 사용하기","uri":"/vscode-python-venv/"},{"categories":["VSCode"],"content":"가상환경 생성 다음 명령어를 통해 python3에서 제공하는 venv 기능을 사용할 수 있습니다. python -m venv ./venv ","date":"2021-02-22","objectID":"/vscode-python-venv/:1:0","tags":["HowTo","VSCode","Python","venv"],"title":"Visual Studio Code에서 Python3의 venv 사용하기","uri":"/vscode-python-venv/"},{"categories":["VSCode"],"content":"VSCode에서의 설정 vscode를 실행하고, .py 확장자의 빈 파일을 한 개 생성합니다. 그러면, vscode에서 자동으로 python 파일임을 인식하여 왼쪽 아래에 python 인터프리터가 연동되는 것을 확인할 수 있습니다. 이 곳을 클릭하면 다음과 같이 연동할 python 인터프리터의 목록이 뜹니다. 다음 그림을 따라 우리가 만들어둔 venv/Scripts/python.exe를 인터프리터로 선택해주면 됩니다. 이 과정을 완료하면, .vscode라는 폴더가 생기게 되고 이 안에 settings.json이라는 파일이 자동 생성됩니다. 이 파일을 열어보면, python 인터프리터의 경로가 우리가 만든 venv의 것으로 설정되고 있음을 확인할 수 있습니다. ","date":"2021-02-22","objectID":"/vscode-python-venv/:2:0","tags":["HowTo","VSCode","Python","venv"],"title":"Visual Studio Code에서 Python3의 venv 사용하기","uri":"/vscode-python-venv/"},{"categories":["VSCode"],"content":"VSCode에서 Python3 언어를 사용하기 위해 실행/디버깅 등이 가능한 환경을 구축하는 방법에 대해 알아봅니다. Success\r\r여기서는 VSCode 설치를 완료한 상태라고 가정합니다. VSCode 설치 및 기본 세팅은 이 글을 참고하세요.\r\r ","date":"2021-02-22","objectID":"/vscode-python/:0:0","tags":["HowTo","VSCode","Python","Pylance","Autocompletion"],"title":"Visual Studio Code에서 Python3 환경 설정하기","uri":"/vscode-python/"},{"categories":["VSCode"],"content":"컴파일러/디버거 설치 VSCode는 Python3 언어용 인터프리터를 자체적으로 내장하고있지 않습니다. 때문에 Python3 언어를 VSCode에서 사용하려면, 인터프리터를 직접 설치하고 이를 연동해주는 작업이 필요합니다. Warning\r\rExtension을 설치한다고 해서 인터프리터가 설치되는 것은 아닙니다.\r\r ","date":"2021-02-22","objectID":"/vscode-python/:1:0","tags":["HowTo","VSCode","Python","Pylance","Autocompletion"],"title":"Visual Studio Code에서 Python3 환경 설정하기","uri":"/vscode-python/"},{"categories":["VSCode"],"content":"Windows를 이용하는 경우 Windows는 기본적으로 Python3 언어용 인터프리터를 제공하지 않습니다. 따라서, 우리가 직접 설치해주어야 합니다. 이는 chocolatey를 통해 쉽게 설치할 수 있습니다. Info\r\rChocolatey는 Windows용 패키지 관리자입니다. 아직 사용 방법을 모르신다면, 이 글을 참고하세요.\r\r choco install python -y 다음 명령어를 통해 설치가 잘 되었는지 확인해보세요. python --version Tip\r\rChocolatey 특성 상, 설치한 직후에는 python 명령어를 인식하지 못할 수 있습니다. PowerShell을 껐다 켜거나, refreshenv 명령어를 활용하세요. \r\r ","date":"2021-02-22","objectID":"/vscode-python/:1:1","tags":["HowTo","VSCode","Python","Pylance","Autocompletion"],"title":"Visual Studio Code에서 Python3 환경 설정하기","uri":"/vscode-python/"},{"categories":["VSCode"],"content":"Extension 설치 이제 VSCode에서 extension을 설치할 차례입니다. VSCode를 켜고 extension 탭으로 간 뒤 “python“를 검색하세요. 맨 위에 python extension이 뜰 것입니다. Install 버튼을 눌러 설치합니다. ","date":"2021-02-22","objectID":"/vscode-python/:2:0","tags":["HowTo","VSCode","Python","Pylance","Autocompletion"],"title":"Visual Studio Code에서 Python3 환경 설정하기","uri":"/vscode-python/"},{"categories":["VSCode"],"content":"테스트 이제 제대로 설치가 되었는지 확인할 시간입니다. ","date":"2021-02-22","objectID":"/vscode-python/:3:0","tags":["HowTo","VSCode","Python","Pylance","Autocompletion"],"title":"Visual Studio Code에서 Python3 환경 설정하기","uri":"/vscode-python/"},{"categories":["VSCode"],"content":"코드 작성 Explorer 탭으로 이동하여 적당한 경로에 main.py라는 새 파일을 만들어주고 다음과 같이 작성하도록 하겠습니다. print(\"Hello, World!\") ","date":"2021-02-22","objectID":"/vscode-python/:3:1","tags":["HowTo","VSCode","Python","Pylance","Autocompletion"],"title":"Visual Studio Code에서 Python3 환경 설정하기","uri":"/vscode-python/"},{"categories":["VSCode"],"content":"실행 다음 그림과 같이 [Run]-[Run Without Debugging]을 눌러 실행하시면 됩니다. 이후 아래쪽의 TERMINAL 탭을 확인하시면, 우리가 작성한대로 Hello, World!가 화면에 출력되는 것을 확인할 수 있습니다. ","date":"2021-02-22","objectID":"/vscode-python/:3:2","tags":["HowTo","VSCode","Python","Pylance","Autocompletion"],"title":"Visual Studio Code에서 Python3 환경 설정하기","uri":"/vscode-python/"},{"categories":["VSCode"],"content":"디버깅 다음 그림과 같이 진행하여 디버깅도 가능합니다. ","date":"2021-02-22","objectID":"/vscode-python/:3:3","tags":["HowTo","VSCode","Python","Pylance","Autocompletion"],"title":"Visual Studio Code에서 Python3 환경 설정하기","uri":"/vscode-python/"},{"categories":["VSCode"],"content":"추천 extension VSCode에서 python을 사용할 경우, import한 패키지의 내장함수에 대해 자동완성이 잘 이루어지지 않는 경우가 많습니다. 개인적으로는 이 때문에 한동안 VSCode에서 python을 사용하는 것이 꺼려졌습니다. 이런 문제를 해결하기 위해 Pylance라는 extension을 강력히 추천드립니다. ","date":"2021-02-22","objectID":"/vscode-python/:3:4","tags":["HowTo","VSCode","Python","Pylance","Autocompletion"],"title":"Visual Studio Code에서 Python3 환경 설정하기","uri":"/vscode-python/"},{"categories":["Geant4"],"content":"이 글에서는 Linux계열 운영체제 중 하나인 Ubuntu 20.04 LTS에서 Geant4 10.7 patch 01 버전을 설치하는 방법에 대해 알아봅니다. ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:0:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"설치 정보 요약 설치 환경 운영체제: Ubuntu 20.04 LTS 인터넷 사용 가능. 관리자 권한 (sudo) 이용 가능. 설치 대상 Geant4 10.7 patch 01 버전. CLHep 라이브러리 별도 설치하여 연동. Cross-section data 직접 다운로드하여 준비. Multi-threading 기능 활성화. UI 및 가시화 기능 활용을 위해 Qt5, X11 OpenGL 라이브러리 연동하여 설치. 설치 경로 /opt/clhep/2.4.4.0 여러 버전의 CLHep를 설치할 경우를 고려하여, /opt/clhep 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행. /opt/geant4/10.7.p01 여러 버전의 Geant4를 설치할 경우를 고려하여, /opt/geant4 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행. ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:1:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"TL;DR ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:2:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Geant4 관련 필수/선택 라이브러리 설치 apt 패키지 매니저 최신화 sudo apt update -y \u0026\u0026 sudo apt upgrade -y \u0026\u0026 sudo apt autoremove -y apt를 이용하여 다음 항목 설치 C++ 컴파일러 및 표준 라이브러리, 헤더 (Geant4 설치 시 필수 라이브러리) CMake (Geant4 설치 시 필수 라이브러리) Expat (Linux, macOS에서 Geant4 설치 시 필수 라이브러리) Qt5, X11 OpenGL 라이브러리 설치 (Geant4 설치 시 선택 라이브러리. GUI 등 그래픽 기반 기능 사용에 필요) sudo apt install -y build-essential cmake libexpat1-dev qt5-default libxmu-dev ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:2:1","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"CLHep 설치 CLHep 라이브러리를 설치할 디렉토리 생성 sudo mkdir -p /opt/clhep 1에서 생성한 디렉토리로 이동하여, CLHep 소스코드 다운로드 (소스코드 용량 약 1.5 MB) cd /opt/clhep sudo wget https://proj-clhep.web.cern.ch/proj-clhep/dist1/clhep-2.4.4.0.tgz 2에서 다운받은 압축파일을 압축해제 sudo tar -xf clhep-2.4.4.0.tgz 압축해제로 생성된 2.4.4.0 디렉토리로 이동한 뒤, build라는 이름의 디렉토리를 생성하고 그 안으로 이동 cd 2.4.4.0 sudo mkdir build cd build 컴파일 수행 (make 명령은 인터넷 속도 및 cpu 성능에 따라 수 분가량 소요될 수 있음) Info\r\rccmake를 이용하여 설정하는 방법은 본문을 참고하세요.\r\r CMAKE_INSTALL_PREFIX(설치경로): /opt/clhep/2.4.4.0 sudo cmake ../CLHEP -DCMAKE_INSTALL_PREFIX=/opt/clhep/2.4.4.0 sudo make -j `grep -c processor /proc/cpuinfo` \u0026\u0026 sudo make install ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:2:2","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Cross-section data 준비 Geant4용 cross-section data를 넣을 디렉토리 생성 sudo mkdir -p /opt/geant4/geant4data 1에서 생성한 디렉토리로 이동하여, cross-section data 다운로드 (전체 데이터 용량 약 928 MB) cd /opt/geant4/geant4data sudo wget https://geant4-data.web.cern.ch/datasets/G4NDL.4.6.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4EMLOW.7.13.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4PhotonEvaporation.5.7.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4RadioactiveDecay.5.6.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4SAIDDATA.2.0.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4PARTICLEXS.3.1.1.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4ABLA.3.1.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4INCL.1.0.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4PII.1.3.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4ENSDFSTATE.2.3.tar.gz 2에서 다운받은 압축파일을 압축해제하고, 압축파일을 삭제 sudo find -name \"*.gz\" -exec tar -xf {} \\; sudo rm -rf *.gz ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:2:3","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Geant4 설치 Geant4 툴킷을 설치할 디렉토리 생성 sudo mkdir -p /opt/geant4/10.7.p01 1에서 생성한 디렉토리로 이동하여, Geant4 소스코드 다운로드 (소스코드 용량 약 35 MB) cd /opt/geant4/10.7.p01 sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.07.p01.tar.gz 2에서 다운받은 압축파일을 압축해제 후 디렉토리명을 source로 변경 sudo tar -xf geant4.10.07.p01.tar.gz build라는 이름의 디렉토리를 만들고 안으로 이동 sudo mkdir build cd build 컴파일 수행 (make 명령은 인터넷 속도 및 cpu 성능에 따라 수 분~수 십분 소요될 수 있음) Info\r\rccmake를 이용하여 설정하는 방법은 본문을 참고하세요.\r\r CMAKE_INSTALL_PREFIX(설치경로): /opt/geant4/10.7.p01 GEANT4_BUILD_MULTITHREADED(multi-threading 사용 여부): ON GEANT4_INSTALL_DATADIR(크로스섹션 데이터 경로): /opt/geant4/geant4data GEANT4_USE_OPENGL_X11(X11 OpenGL 라이브러리 연동 여부): ON GEANT4_USE_QT(QT 라이브러리 연동 여부): ON GEANT4_USE_SYSTEM_CLHEP(직접 설치한 CLHep 라이브러리 연동 여부): ON CLHEP_DIR(CLHEP 경로): /opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0 sudo cmake ../geant4.10.07.p01 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.7.p01 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATADIR=/opt/geant4/geant4data -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON -DGEANT4_USE_SYSTEM_CLHEP=ON -DCLHEP_DIR=/opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0 sudo make -j `grep -c processor /proc/cpuinfo` \u0026\u0026 sudo make install 환경변수 세팅을 위해 ~/.bashrc에 내용 추가 echo \"source /opt/geant4/10.7.p01/bin/geant4.sh\" \u003e\u003e ~/.bashrc ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:2:4","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Prerequisite 설치 인터넷이 안된다거나, 관리자 권한을 사용할 수 없다거나, Ubuntu가 아니라면 이야기가 좀 달라지겠지만… 앞서 말한 5가지 준비물은 모두 Ubuntu에서 제공하는 패키지 관리자 apt를 통해 설치할 수 있습니다. (RedHat 계열의 리눅스에서도 패키지 관리자 yum을 통해 유사한 명령어로 설치할 수 있습니다) Warning\r\r패키지 관리자를 사용하기 전에 최신화를 해주세요.\r\r Danger\r\r본인이 서버 등을 관리하는 사람이라면, 최신화를 할 때 주의하세요. 이런 경우에는 전체 패키지를 최신화하기보다는 원하는 특정 패키지를 선별하여 최신화하기를 권장합니다.\r\r ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:3:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"패키지 매니저 최신화 sudo apt update -y \u0026\u0026 sudo apt upgrade -y \u0026\u0026 sudo apt autoremove -y ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:3:1","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"C++ 컴파일러 및 표준 라이브러리, 헤더 설치 (GCC 등) sudo apt install -y build-essential ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:3:2","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"CMake 및 CCMake 설치 sudo apt install -y cmake cmake-curses-gui ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:3:3","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Expat 설치 sudo apt install -y libexpat1-dev ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:3:4","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Qt5 설치 sudo apt install -y qt5-default ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:3:5","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"X11 OpenGL 설치 sudo apt install -y libxmu-dev ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:3:6","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"CLHep 설치하기 이어서 CLHep을 설치합니다. CLHep 라이브러리의 경우에는, apt 레포지토리에 원하는 버전이 없는 경우가 대부분이므로 직접 소스코드를 컴파일하여 설치합니다. Geant4 10.7 버전은 CLHep 2.4.4.0 버전을 요구합니다만, Geant4 버전이 바뀜에 따라 상응하는 CLHep 버전도 변경되므로 버전별 관리를 하는 것이 추후 심신이 편합니다. 따라서, 여기서는 /opt/clhep/2.4.4.0과 같이 버전별로 경로를 만들어 설치하도록 하겠습니다. 우선 CLHep 라이브러리를 설치할 디렉토리 생성합니다. (/opt는 sudo 권한이 있어야 수정할 수 있음) sudo mkdir -p /opt/clhep 1에서 생성한 디렉토리로 이동하여, CLHep 소스코드를 다운로드합니다. (소스코드 용량 약 1.5 MB) cd /opt/clhep sudo wget https://proj-clhep.web.cern.ch/proj-clhep/dist1/clhep-2.4.4.0.tgz Info\r\rwget 명령어를 사용하지 않고, CLHep 다운로드 페이지에서 직접 받아서 옮겨오셔도 괜찮습니다.\r\r Tip\r\r본 글에서 다루는 2.4.4.0이 아닌 다른 버전을 설치하시는 경우에는, wget 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.\r\r 2번 과정을 통해 받은 압축파일 clhep-2.4.4.0.tgz을 압축해제합니다. sudo tar -xf clhep-2.4.4.0.tgz 2.4.4.0 디렉토리가 생성되며 압축이 해제됩니다. 생성된 2.4.4.0 디렉토리로 이동합니다. 이어서, 빌드를 수행하며 생기는 부산물을 보관하기 위한 build라는 이름의 디렉토리를 생성하고 그 안으로 이동합니다. cd 2.4.4.0 sudo mkdir build cd build ccmake 명령어를 통해 Makefile 생성 작업을 진행합니다. Info\r\rccmake란 cmake 작업에 요구되는 옵션을 UI형태로 보여주며 작업하게 해주는 프로그램입니다. 옵션명과 인자를 정확하게 알고있다면, cmake 명령어를 이용하여 한번에 진행할 수도 있습니다. 이 명령줄은 위의 TL;DR 부분을 참고하세요.\r\r 우선 ccmake를 실행하기 위해 다음 명령어를 입력합니다. sudo ccmake ../CLHEP 다음과 같은 화면이 뜰 것입니다. 맨 처음 ccmake 프로그램을 실행하면, 기존 작업내용이 없어서 EMPTY CACHE가 출력되고, 화면 아래에 보이는 바와 같이 키보드 [c]를 누르면 configure 작업이 수행되고, [q]를 누르면 종료되는 식입니다. [c]를 눌러 configure 작업을 수행합니다. 이어서 다음의 화면이 뜰 것입니다. 여기서 CMAKE_INSTALL_PREFIX 항목이 CLHep을 설치할 경로를 설정하는 인자입니다. 우리는 이 값을 /opt/clhep/2.4.4.0으로 변경하겠습니다. 위아래 화살표키로 항목 간 이동이 가능하며, 엔터를 한 번 누르면 수정 모드로 변경되고, 내용 입력 후 다시 엔터를 한 번 누르면 확정됩니다. 입력을 마친 뒤 [c] 키를 한번 더 누르면 다음과 같이 화면이 바뀝니다. 새로 생긴 [g]를 눌러 Makefile을 생성합니다. 이제 컴파일 및 설치작업을 진행합니다. sudo make -j `grep -c processor /proc/cpuinfo` \u0026\u0026 sudo make install Tip\r\rmake 명령어는 -j \u003c쓰레드 수\u003e 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.\r\r Warning\r\rmake 명령어에서 -j 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 cc1plus 관련 에러가 발생할 수 있습니다. -j 옵션에 적절한 숫자는 자신의 쓰레드 수 * 1.2 입니다. 여기서는 사용자 컴퓨터의 쓰레드 수를 가져오는 명령어인 grep -c processor /proc/cpuinfo를 이용하여 자동으로 숫자가 입력되게 하였습니다.\r\r make 명령을 수행하면 퍼센트가 올라가며 컴파일이 수행될 것입니다. 이는 CPU 성능에 따라 수십 초 ~ 수 분 가량 소요될 수 있으니 잠시 휴식을 취하시면 됩니다. ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:3:7","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Cross-section data 준비하기 Geant4를 설치하려면 cross-section data가 필요합니다. 이를 준비하는 방법은 두 가지 있습니다. 사용자가 직접 다운받아서 압축 풀어서 준비. 설치 과정에서 자동으로 다운로드. 무엇을 택하든 크게 상관은 없습니다만, 여기서는 1번 방법에 해당하는 직접 준비를 해보겠습니다. ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:4:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Geant4 cross-section data 디렉토리 생성 Cross-section data가 저장될 디렉토리를 생성한 뒤 이동합니다. sudo mkdir -p /opt/geant4/geant4data cd /opt/geant4/geant4data ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:4:1","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Data 다운로드 Cross-section data를 다운로드합니다. (총 10가지. 전체 데이터 용량 약 928 MB) sudo wget https://geant4-data.web.cern.ch/datasets/G4NDL.4.6.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4EMLOW.7.13.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4PhotonEvaporation.5.7.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4RadioactiveDecay.5.6.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4SAIDDATA.2.0.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4PARTICLEXS.3.1.1.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4ABLA.3.1.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4INCL.1.0.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4PII.1.3.tar.gz sudo wget https://geant4-data.web.cern.ch/datasets/G4ENSDFSTATE.2.3.tar.gz Info\r\rwget 명령어를 사용하지 않고, Geant4 다운로드 페이지에서 직접 받아서 옮겨오셔도 괜찮습니다.\r\r 위에 적힌 10가지 외에 G4RealSurface, G4TENDL, LEND 데이터가 있습니다만, 이는 필수가 아닌 옵션이므로 여기서는 생략하겠습니다. ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:4:2","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"압축 해제 10개의 파일을 하나하나 압축 해제하기 귀찮으므로, find 명령어를 활용하여 일괄 해제 하는 명령어를 적어드립니다. 이후 불필요한 압축파일(*.gz)은 삭제해도 괜찮습니다. sudo find -name \"*.gz\" -exec tar -xf {} \\; sudo rm -rf *.gz ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:4:3","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Geant4 설치하기 이제 준비가 다 되었습니다. 이어서 Geant4를 설치해봅시다. 우리가 설치하고자 하는 경로는 /opt/geant4/10.7.p01입니다. 앞서 말씀드린 것처럼, 여러 버전의 Geant4를 설치할 경우를 고려하여 /opt/geant4 하위에 버전명에 해당하는 디렉토리를 두어 세분화한 것입니다. ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:5:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"설치를 위한 디렉토리 생성 우선 해당 디렉토리를 생성하기 위해 다음 명령어를 입력합니다. (/opt는 관리자 권한이 있어야 수정할 수 있음) sudo mkdir -p /opt/geant4/10.7.p01 ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:5:1","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Geant4 소스코드 다운로드 이어서, 해당 디렉토리로 이동한 뒤 Geant4 소스코드를 다운 받겠습니다. cd /opt/geant4/10.7.p01 sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.07.p01.tar.gz Info\r\rwget 명령어를 사용하지 않고, Geant4 다운로드 페이지에서 직접 받아서 옮겨오셔도 괜찮습니다.\r\r Tip\r\r본 글에서 다루는 10.7.p01와 다른 버전을 설치하시는 경우에는, wget 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.\r\r ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:5:2","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"소스코드 압축 해제 위 과정을 통해 geant4.10.07.p01.tar.gz라는 압축파일을 다운받으셨을 것입니다. 다음 명령어를 통해 해당 파일의 압축을 해제합니다. sudo tar -xf geant4.10.07.p01.tar.gz geant4.10.07.p01라는 디렉토리가 생성되고 그 안에 압축이 풀리게 됩니다. ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:5:3","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"빌드를 위한 build 디렉토리 생성 빌드를 수행하면 CMake와 관련된 잡다한 부산물이 생성됩니다. 관리의 용이성을 위해, 별도의 build라는 디렉토리를 만들고 이 안에서 컴파일을 수행하겠습니다. sudo mkdir build cd build ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:5:4","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"CMake 수행 (ccmake 활용) ccmake 명령어를 통해 Makefile 생성 작업을 진행합니다. Info\r\rccmake란 cmake 작업에 요구되는 옵션을 UI형태로 보여주며 작업하게 해주는 프로그램입니다. 옵션명과 인자를 정확하게 알고있다면, cmake 명령어를 이용하여 한번에 진행할 수도 있습니다. 이 명령줄은 위의 TL;DR 부분을 참고하세요.\r\r 우선 ccmake를 실행하기 위해 다음 명령어를 입력합니다. sudo ccmake ../geant4.10.07.p01 다음과 같은 화면이 뜰 것입니다. CLHep때와 마찬가지 모습입니다. [c]를 눌러 configure 작업을 수행합니다. 이어서 다음의 화면이 뜰 것입니다. Geant4 설치를 위한 cross-section data가 어디있는지 못찾겠다는 문구입니다. [e]를 눌러 설정화면으로 돌아옵니다. 이 화면에서 우리는 Geant4 설치에 관한 여러가지 인자를 조정할 수 있습니다. 이 글에서는 앞서 설명했던 설치조건에 맞추어 다음 항목들을 변경할 것입니다. 그림의 빨간 체크표시 된 값들을 참고하세요. CMAKE_INSTALL_PREFIX(설치경로): /opt/geant4/10.7.p01 GEANT4_BUILD_MULTITHREADED(multi-threading 사용 여부): ON GEANT4_INSTALL_DATADIR(크로스섹션 데이터 경로): /opt/geant4/geant4data GEANT4_USE_OPENGL_X11(X11 OpenGL 라이브러리 연동 여부): ON GEANT4_USE_QT(QT 라이브러리 연동 여부): ON GEANT4_USE_SYSTEM_CLHEP(직접 설치한 CLHep 라이브러리 연동 여부): ON 이후 [c]를 눌러 configure 작업을 수행합니다. 또 다른 에러가 뜰 것입니다. CLHep을 직접 설치한 것으로 연동하겠다고 하였는데, CLHep이 어디에 있는지 못찾겠다는 에러입니다. 다음 그림과 같이 CLHEP_DIR을 변경해줍니다. CLHEP_DIR(CLHEP 경로): /opt/clhep/2.4.4.0/lib/CLHEP-2.4.4.0 이제 다시 [c]를 눌러 configure 작업을 수행하면, 에러는 뜨지 않고 Qt5 관련 경로가 알아서 잡힌 모습이 뜨게 됩니다. 마지막으로 한번 더 [c]를 눌러 configure 작업을 수행합니다. 이제 드디어 [g] 버튼이 나타났습니다. [g]를 눌러 Makefile을 생성합니다. ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:5:5","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"컴파일 및 설치작업 이제 컴파일 및 설치작업을 진행합니다. sudo make -j `grep -c processor /proc/cpuinfo` \u0026\u0026 sudo make install Tip\r\rmake 명령어는 -j \u003c쓰레드 수\u003e 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.\r\r Warning\r\rmake 명령어에서 -j 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 cc1plus 관련 에러가 발생할 수 있습니다. -j 옵션에 적절한 숫자는 자신의 쓰레드 수 * 1.2 입니다. 여기서는 사용자 컴퓨터의 쓰레드 수를 가져오는 명령어인 grep -c processor /proc/cpuinfo를 이용하여 자동으로 숫자가 입력되게 하였습니다.\r\r make 명령을 수행하면 퍼센트가 올라가며 컴파일이 수행될 것입니다. 이는 CPU 성능에 따라 수 분 ~ 수십 분 가량 소요될 수 있으니 푹 쉬고 오세요. ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:5:6","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"환경변수 설정 Geant4 툴킷을 설치하고나면 마지막으로 할 일이 있습니다. 바로 환경변수를 설정하는 것입니다. Geant4 사용을 위해 컴퓨터에게 알려줘야 하는 초기값들이 몇 가지 있습니다만, 이를 정리하여 한 번에 자동으로 설정이 되게끔하는 파일을 Geant4에서 제공하고 있습니다. 설치경로의 내부에 있는 bin/geant4.sh라는 파일입니다. (C-shell을 이용하시는 분은 bin/geant4.csh를 이용합니다) Info\r\rGeant4가 여러 버전으로 설치되어 있는 경우, 원하는 버전의 bin/geant4.sh를 실행함으로써 해당 버전으로 동작하도록 설정할 수 있습니다.\r\r 실행을 위해서는 다음 명령어를 입력합니다. (source 명령어 뒤에 오는 경로는 Geant4를 설치한 경로에 따라 바뀔 수 있습니다) source /opt/geant4/10.7.p01/bin/geant4.sh 다만, 이 명령어는 실행한 이후 해당 shell이 종료될 때까지만 그 효과가 지속됩니다. 즉, 터미널을 새로 연다거나 하면 다시 환경변수 설정이 사라지게 되죠. 그래서 일반적으로는 터미널을 켤 때마다 자동으로 한 번 실행되는 파일인 ~/.bashrc 맨 밑에 위의 명령줄을 적어둡니다. vim이나 gedit 등을 이용하여 직접 입력하셔도 되고, 다음 명령줄을 이용하여 ~/.bashrc 파일 맨 밑에 해당 내용이 추가되도록 하셔도 됩니다. echo \"source /opt/geant4/10.7.p01/bin/geant4.sh\" \u003e\u003e ~/.bashrc ~/.bashrc에 추가된 내용을 새로고침하기 위해 다음 줄까지 실행하고 넘어가겠습니다. source ~/.bashrc 드디어 Geant4 설치가 끝났습니다! ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:6:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"제대로 설치되었는지 확인하기 ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:7:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"환경변수 확인 정상적으로 설치가 완료되고 geant.sh 파일이 제대로 실행되었다면, G4...와 같은 형태의 환경변수가 크로스섹션 데이터를 담은 경로를 가리키고 있어야 합니다. 다음 명령어를 통해 제대로 그 경로가 출력되는지 확인할 수 있습니다. env | grep G4 ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:7:1","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"예제 실행해보기 예제코드 복사해오기 예제코드는 소스 코드를 압축해제한 디렉토리 안에 examples이라는 디렉토리에 있습니다. 우리의 경우에는 /opt/geant4/10.7.p01/geant4.10.06.p02/examples이 되겠군요. 테스트를 위해 basic/B1 이라는 예제를 복사해오고, 복사해온 디렉토리 안으로 들어가봅시다. cp -r /opt/geant4/10.7.p01/geant4.10.07.p01/examples/basic/B1 . cd B1 예제코드 실행하기 (터미널 상에서 실행) 예제 코드 B1에는 다음과 같은 파일 및 디렉토리들이 있을 것입니다. 이 글에서는 코드를 살펴보지는 않고, 그냥 실행만 하겠습니다. 우선 빌드를 하기 위해 다음 명령어를 입력합니다. cmake . make -f Makefile 다음 그림과 같이 많은 줄이 출력된 뒤, [100%] Built target exampleB1까지 나오면 성공입니다. 이어서 실행을 해봅니다. ./exampleB1 run1.mac 다음 그림처럼 또 무언가 잔뜩 출력된 뒤, RunManagerKernel is deleted. Good bye :)가 출력되었다면 잘 실행된 것입니다. 예제코드 실행하기 (GUI 띄우기) Geant4 설치 시 Qt5와 OpenGL 설치도 함께 진행했으므로, 여러분의 우분투에 X window 관련 설정이 잘 되어있다면 다음 명령어로 GUI창도 띄워볼 수 있습니다. ./exampleB1 잘 실행되었다면 다음과 같은 창이 나타날 것입니다. 여기까지 되셨다면 설치와 테스트까지 성공적으로 하신 것입니다! 고생하셨습니다. ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:7:2","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Reference Geant4 Homepage Geant4 Toolkit 소스 코드 GNU Compiler Collection(GCC) CMake Expat Qt5 OpenGL ","date":"2021-02-15","objectID":"/g4install-107p1-ubt2004/:8:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake","ccmake"],"title":"Geant4 설치하기(10.7.p01, Ubuntu 2004 LTS)","uri":"/g4install-107p1-ubt2004/"},{"categories":["Geant4"],"content":"Geant4는 매질을 통과하는 입자의 수송과정을 시뮬레이션하기 위한 C++ 기반 툴킷입니다. 이 글에서는 Geant4 설치에 관한 다양한 정보와, 설치가이드 링크를 제공합니다. ","date":"2021-02-15","objectID":"/geant4-install-linux/:0:0","tags":["HowTo","Install","Geant4","Linux"],"title":"Geant4 설치가이드 모음 (Linux)","uri":"/geant4-install-linux/"},{"categories":["Geant4"],"content":"TL;DR ","date":"2021-02-15","objectID":"/geant4-install-linux/:1:0","tags":["HowTo","Install","Geant4","Linux"],"title":"Geant4 설치가이드 모음 (Linux)","uri":"/geant4-install-linux/"},{"categories":["Geant4"],"content":"Ubuntu 20.04 LTS 10.6 patch-02 설치가이드 cmake 이용 (ccmake는 사용하지 않음) multi-threading 기능 활성화 외부 라이브러리 Qt5 (그래픽/UI 라이브러리) 연동 외부 라이브러리 OpenGL (그래픽) 연동 CLHep 내장 라이브러리 사용 Cross-section Data 설치 중 자동 다운로드 10.7 patch-01 설치가이드 cmake/ccmake 이용 multi-threading 기능 활성화 외부 라이브러리 Qt5 (그래픽/UI 라이브러리) 연동 외부 라이브러리 OpenGL (그래픽) 연동 외부 라이브러리 CLHep 연동 Cross-section Data 직접 다운받아 준비 Windows 10에서 WSL 활용하여 10.7 patch-01 설치하기(초보자용) Windows 10 환경에서 WSL1 설치부터 진행 cmake 이용 (ccmake는 사용하지 않음) multi-threading 기능 활성화 외부 라이브러리 Qt5 (그래픽/UI 라이브러리) 연동 외부 라이브러리 OpenGL (그래픽) 연동 CLHep 내장 라이브러리 사용 Cross-section Data 설치 중 자동 다운로드 ","date":"2021-02-15","objectID":"/geant4-install-linux/:1:1","tags":["HowTo","Install","Geant4","Linux"],"title":"Geant4 설치가이드 모음 (Linux)","uri":"/geant4-install-linux/"},{"categories":["Geant4"],"content":"설치 가이드 읽기 ","date":"2021-02-15","objectID":"/geant4-install-linux/:2:0","tags":["HowTo","Install","Geant4","Linux"],"title":"Geant4 설치가이드 모음 (Linux)","uri":"/geant4-install-linux/"},{"categories":["Geant4"],"content":"설치 가이드 위치 제가 설치 예시 글을 통해 설명드릴 수 있는 내용은 제한적입니다. 그러므로 설치 가이드가 어디에 있으며, 그 가이드에서 무엇을 살펴봐야 하는지 알려드리도록 하겠습니다. 우선 설치 가이드는 다음의 과정을 따라가시면 확인할 수 있습니다. Geant4 공식 홈페이지 접속 화면 중간의 User Support 탭에 있는 guides 클릭 이후 나오는 User Documentation 페이지에서, Installation Guide: For setting up Geant4 in your computing environment를 클릭 (pdf로 다운받거나, 혹은 이전 버전의 것을 볼 수도 있음) 설치 가이드에 도착! ","date":"2021-02-15","objectID":"/geant4-install-linux/:2:1","tags":["HowTo","Install","Geant4","Linux"],"title":"Geant4 설치가이드 모음 (Linux)","uri":"/geant4-install-linux/"},{"categories":["Geant4"],"content":"설치 필수/선택 사항 확인하기(Getting Started) 이 가이드에서 가장 먼저 보셔야할 부분은 Getting Started 탭입니다. 이 곳에는 설치에 필요한 필수 사항과, 꼭 필요하지는 않지만 편의에 따라 연동 가능한 선택 사항에 대한 요구조건이 적혀있습니다. 필수 사항 맨처음에 나오는 OS/Software Prerequisites는 필수 사항에 대한 설명입니다. 몇 가지 부분만 추려서 적어보겠습니다. Quote\r\rOS/Software Prerequisites Geant4 Toolkit 소스 코드 C++ 컴파일러 및 C++11 표준을 지원하는 표준 라이브러리 Linux의 경우에는 GNU Compiler Collection(GCC) 4.9.3 이상 패키지 관리 시스템에서 기본 제공하는 GCC 컴파일러를 사용할 것을 강력히 권장함 (기본 제공 컴파일러가 버전 미달이면 따로 설치) CMake 3.8 이상 패키지 관리 시스템에서 기본 제공하는 CMake를 사용할 것을 권장함 (기본 제공 CMake가 버전 미달이면 따로 설치하되, CMake 공식 다운로드 페이지에서 제공하는 binary 실행파일을 통한 최신버전 설치를 권장함) \r\r 선택 사항 다음으로 살펴야 할 내용은 Prerequisites for Optional Components of Geant4 입니다. 이는 선택 사항에 대한 설명입니다. 연동하여 설치할 수 있는 다양한 라이브러리가 제시되어 있습니다. 먼저 CLHEP, Expat, zlib 관련 내용입니다. Quote\r\rCLHEP, Expat and zlib Support Libraries CLHEP, Expat, zlib의 경우, Geant4에서 요구하는 최소한의 내용은 내장되어 있음 다만 Linux와 macOS용 버전에는 Expat이 내장되어 있지 않으므로 별도 설치가 요구됨 사용자가 해당 라이브러리의 기능을 더욱 확장하여 사용하고자 하는 경우 추가적으로 연동하여 설치 \r\r 위 내용 상, Linux에서 Geant4를 설치하는 경우에는 Expat은 필수 사항으로 봐도 무방합니다. 다음은 GDML 부분(GDML XML Geometry Support)입니다. 이는 Geometry 입출력을 위한 라이브러리 중 하나입니다만, 여기서는 생략하겠습니다. 다음은 그래픽 및 UI 사용을 위해 대부분 연동하여 설치하는 UI 및 가시화 관련 내용(User Interface and Visualization Drivers)입니다. 여기서는 대표적으로 많이 사용되는 Qt 라이브러리 관련 내용만 적겠습니다. Quote\r\rUser Interface and Visualization Drivers 아래에 나열한 패키지의 설치와 더불어, 사용자 시스템에 사용된 그래픽카드(NVIDIA 등)의 드라이버를 설치할 것을 강력히 권고합니다. Qt UI 및 가시화 관련(모든 플랫폼) Qt5 헤더 및 라이브러리(Qt4는 이제 사용하지 않음) OpenGL 혹은 MesaGL의 헤더 및 라이브러리 X11 OpenGL 가시화 관련(Linux, macOS) X11 헤더 및 라이브러리 혹은 MesaGL의 헤더 및 라이브러리 … \r\r 이 외에도 다양한 UI 및 가시화 옵션이 있으니 참고하시기 바랍니다. ","date":"2021-02-15","objectID":"/geant4-install-linux/:2:2","tags":["HowTo","Install","Geant4","Linux"],"title":"Geant4 설치가이드 모음 (Linux)","uri":"/geant4-install-linux/"},{"categories":["Geant4"],"content":"설치 옵션 확인하기 설치 가이드에서 다음으로 확인하셔야 할 부분은 Building and Installing 탭입니다. 이 곳에는 여러분이 설치를 진행할 때, 어떤 옵션을 어떻게 주어야 원하는 조건에 따라 설치가 가능한 지에 대해 설명되어 있습니다. 운영체제에 따라 핵심적인 설치 방법이 따로 정리되어 있습니다. 특히, Geant4 Build Option 부분에 여러분이 추가옵션을 설정하는 방법이 기재되어 있습니다. 나중에 기회가 되신다면 이 부분을 살펴보시는 것도 좋습니다. 여기서는 자주 사용되는 몇 가지만 다루겠습니다. Quote\r\rGeant4 Build Option … 설치 시 다양한 옵션을 cmake 명령어에서 -D 플래그를 통해 설정할 수 있습니다. 예를 들면, 다음과 같이 명령줄을 입력하면 설치경로(CMAKE_INSTALL_PREFIX)를 /opt/geant4로 설정하고, GDML을 지원하게끔 설치하게 됩니다. cmake -DCMAKE_INSTALL_PREFIX=/opt/geant4 -DGEANT4_USE_GDML=ON /path/to/geant4-source … CMake는 Curses (UNIX 한정)나 Qt (UNIX 혹은 Windows) 기반의 터미널/GUI 형태의 인터페이스도 제공하고 있으므로, 이를 활용하여 다양한 옵션을 살펴보고 설정할 수 있습니다. Standard Options CMAKE_INSTALL_PREFIX Geant4가 설치될 경로. Autotools에서의 --prefix와 동일. Unix 시스템의 기본값은 /usr/local. 절대경로로 입력하기를 권장. … GEANT4_BUILD_MULTITHREADED 기본값은 OFF. ON으로 설정되면, Geant4 라이브러리가 multi-threading을 지원하도록 빌드함. GEANT4_INSTALL_DATA 기본값은 OFF. ON으로 설정되면, Geant4 설치 및 사용에 필요한 크로스섹션 데이터를 GEANT4_INSTALL_DATADIR에서 찾아본 뒤, 부족한 데이터를 자동으로 인터넷에서 다운받은 뒤 압축을 풀어 GEANT4_INSTALL_DATADIR에 넣고 설치를 진행함. GEANT4_INSTALL_DATADIR 기본값은 CMAKE_INSTALL_DATAROOTDIR. 설치경로의 share/ 임. Geant4 설치 및 사용에 필요한 크로스섹션 데이터를 이 경로에서 탐색함. … GEANT4_USE_QT 기본값은 OFF. ON으로 설정되면, Qt5 UI 및 가시화 라이브러리를 연동하여 빌드함. 경로 관련 문제가 발생하면, Advanced Options 부분의 CMAKE_PREFIX_PATH 항목을 참고. GEANT4_USE_OPENGL_X11 기본값은 OFF. ON으로 설정되면, X11 OpenGL 가시화 라이브러리를 연동하여 빌드함. … \r\r 이외에도 정말 많은 옵션이 있습니다. 각 옵션마다 요구사항도 있으므로 주의해서 살펴보시기 바랍니다. ","date":"2021-02-15","objectID":"/geant4-install-linux/:2:3","tags":["HowTo","Install","Geant4","Linux"],"title":"Geant4 설치가이드 모음 (Linux)","uri":"/geant4-install-linux/"},{"categories":["VSCode"],"content":"VSCode와 WSL을 연동하여 사용하는 방법에 대해 알아봅니다. Success\r\r여기서는 WSL1 혹은 WSL2 설치가 완료된 상태라고 가정합니다. 이에 관한 전반적인 내용은 이 글을 참고하세요.\r\r Success\r\r여기서는 VSCode 설치가 완료된 상태라고 가정합니다. VSCode 설치 및 기본 세팅은 이 글을 참고하세요.\r\r ","date":"2020-11-25","objectID":"/vscode-wsl/:0:0","tags":["HowTo","VSCode","WSL"],"title":"Visual Studio Code와 Windows Subsystem for Linux 연동하기","uri":"/vscode-wsl/"},{"categories":["VSCode"],"content":"Remote WSL 확장 설치 Info\r\rRemote WSL 확장을 설치하기 위해서는, 1.35 버전 이상의 VSCode가 필요합니다.\r\r VSCode를 켜고 extension 탭으로 간 뒤 “wsl“를 검색하세요. 맨 위에 Remote - WSL extension이 뜰 것입니다. Install 버튼을 눌러 설치합니다. ","date":"2020-11-25","objectID":"/vscode-wsl/:1:0","tags":["HowTo","VSCode","WSL"],"title":"Visual Studio Code와 Windows Subsystem for Linux 연동하기","uri":"/vscode-wsl/"},{"categories":["VSCode"],"content":"Linux 배포판 최신화 및 라이브러리 설치 일부 WSL 배포판의 경우에는 VSCode를 실행하기 위한 라이브러리가 없을 수 있습니다. 이 경우에는 패키지매니저(apt, yum)를 최신화하고, 필요한 라이브러리를 설치하시기 바랍니다. Debian이나 Ubuntu의 경우 apt를 활용한 예 sudo apt update -y \u0026\u0026 sudo apt upgrade -y wget1이나 ca 인증서2를 다운받아야 할 수 있습니다. Debian이나 Ubuntu의 경우 apt를 활용한 예 sudo apt install wget -y sudo apt install ca-certificates -y ","date":"2020-11-25","objectID":"/vscode-wsl/:2:0","tags":["HowTo","VSCode","WSL"],"title":"Visual Studio Code와 Windows Subsystem for Linux 연동하기","uri":"/vscode-wsl/"},{"categories":["VSCode"],"content":"실행해보기 ","date":"2020-11-25","objectID":"/vscode-wsl/:3:0","tags":["HowTo","VSCode","WSL"],"title":"Visual Studio Code와 Windows Subsystem for Linux 연동하기","uri":"/vscode-wsl/"},{"categories":["VSCode"],"content":"WSL 터미널에서 실행 원하는 프로젝트의 디렉토리에서, code . 명령어를 입력합니다. 첫 실행 시에는 자동으로 설치가 진행된 뒤 VSCode가 실행됩니다. 실행한 뒤, 창 왼쪽 아래의 초록색 부분에 WSL: [배포판 이름]이 정상적으로 뜬다면 성공입니다. Ref.: Get started using VS Code with Windows Subsystem for Linux | Microsoft Docs\"\rRef.: Get started using VS Code with Windows Subsystem for Linux | Microsoft Docs\r ","date":"2020-11-25","objectID":"/vscode-wsl/:3:1","tags":["HowTo","VSCode","WSL"],"title":"Visual Studio Code와 Windows Subsystem for Linux 연동하기","uri":"/vscode-wsl/"},{"categories":["VSCode"],"content":"VSCode에서 실행 다음 그림과 같이 진행합니다. ","date":"2020-11-25","objectID":"/vscode-wsl/:3:2","tags":["HowTo","VSCode","WSL"],"title":"Visual Studio Code와 Windows Subsystem for Linux 연동하기","uri":"/vscode-wsl/"},{"categories":["VSCode"],"content":"WSL에 확장 설치하기 Extension 탭을 열면 위쪽에는 Local(윈도우)에 설치된 확장 목록이, 아래쪽에는 WSL에 설치된 확장 목록이 뜹니다. 이미 로컬에 설치된 확장을 설치할 수도 있고, WSL에만 확장을 설치할 수도 있습니다. 다음 그림을 참고하세요. 웹 서버로부터 데이터를 다운 받기 위한 명령어 ↩︎ SSL 기반의 응용프로그램이 SSL 연결의 신뢰성을 검사할 수 있도록 허용하기 위한 인증서 ↩︎ ","date":"2020-11-25","objectID":"/vscode-wsl/:4:0","tags":["HowTo","VSCode","WSL"],"title":"Visual Studio Code와 Windows Subsystem for Linux 연동하기","uri":"/vscode-wsl/"},{"categories":["VSCode"],"content":"VSCode에서 CMake 기반의 프로젝트를 만들고, 실행/디버깅 등이 가능한 환경을 구축하는 방법에 대해 알아봅니다. Success\r\r여기서는 VSCode 설치 후, C++ 언어를 사용하기 위한 환경 구축까지 완료한 상태라고 가정합니다. C++ 언어 사용을 위한 환경 구축은 이 글을 참고하세요.\r\r ","date":"2020-11-13","objectID":"/vscode-cmake/:0:0","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"CMake 설치 VSCode는 CMake를 자체적으로 내장하고있지 않습니다. 때문에 CMake를 직접 설치하고 이를 연동해주는 작업이 필요합니다. Warning\r\rExtension을 설치한다고 해서 CMake가 설치되는 것은 아닙니다.\r\r ","date":"2020-11-13","objectID":"/vscode-cmake/:1:0","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"Windows를 이용하는 경우 Chocolatey를 이용하면 쉽게 설치할 수 있습니다. 다만, chocolatey로 CMake를 설치하는 경우 PATH 환경변수가 자동으로 잡히지 않아, 추가적인 명령어를 입력해주어야 합니다. 다음 명령어를 입력하세요. Info\r\rChocolatey는 Windows용 패키지 관리자입니다. 아직 사용 방법을 모르신다면, 이 글을 참고하세요.\r\r choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System' 다음 명령어를 통해 설치가 잘 되었는지 확인해보세요. cmake --version Tip\r\rChocolatey 특성 상, 설치한 직후에는 cmake 명령어를 인식하지 못할 수 있습니다. PowerShell을 껐다 켜거나, refreshenv 명령어를 활용하세요. \r\r ","date":"2020-11-13","objectID":"/vscode-cmake/:1:1","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"Linux를 이용하는 경우 apt(apt-get)나 yum을 이용하면 쉽게 설치할 수 있습니다. 예를 들어 apt를 이용하여 설치한다면 다음 명령어를 입력합니다. sudo apt install cmake -y 다음 명령어를 통해 설치가 잘 되었는지 확인해보세요. cmake --version ","date":"2020-11-13","objectID":"/vscode-cmake/:1:2","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"Extension 설치 이제 VSCode에서 extension을 설치할 차례입니다. VSCode를 켜고 extension 탭으로 간 뒤 “cmake“를 검색하세요. 맨 위부터 CMake와 CMake Tools가 뜰 것입니다. 두 가지 모두 Install 버튼을 눌러 설치합니다. 각각의 용도는 이렇습니다. CMake extension: CMake 명령어에 대한 자동완성 제공. CMakeLists.txt 파일 작성에 도움. CMake Tools extension: CMake 기반 프로젝트를 관리하는데에 도움. ","date":"2020-11-13","objectID":"/vscode-cmake/:2:0","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"테스트 이제 제대로 설치가 되었는지 확인할 시간입니다. Warning\r\r경로에 한글이 있으면 제대로 동작하지 않습니다.\r\r ","date":"2020-11-13","objectID":"/vscode-cmake/:3:0","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"Hello world 프로젝트 만들어보기 CMake Tools는 CMake: Quick Start라는 기능을 제공합니다. 손쉽게 CMake 기반의 Hello world 프로젝트를 만들어주는 것이죠. 적당한 경로에 빈 폴더를 만들어주고 다음과 같이 진행합니다. ","date":"2020-11-13","objectID":"/vscode-cmake/:3:1","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"실행 다음 그림과 같이 실행하시면 됩니다. 동일 폴더 내에 .vscode라는 폴더가 생기고 그 안에 CMake 설정 등에 관한 .json 파일이 자동으로 생성될 것입니다. 또한, build라는 폴더가 생기고 그 안에 CMake를 통한 빌드 부산물 및 컴파일 결과물이 자동으로 생성될 것입니다. 이후 아래쪽의 TERMINAL 탭을 확인하시면, 자동 생성된 main.cpp의 내용대로 Hello, world!가 출력되는 것을 확인할 수 있습니다. ","date":"2020-11-13","objectID":"/vscode-cmake/:3:2","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"디버깅 다음 그림과 같이 진행하여 디버깅도 가능합니다. Warning\r\r맨 처음 그림에서 보이는 바와 같이, CMake type을 Debug로 설정해야 함에 주의하세요!\r\r ","date":"2020-11-13","objectID":"/vscode-cmake/:3:3","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"Command line argument 설정 실행하거나 디버깅할 때, command line argument를 넘겨주도록 설정하고 싶을 때가 있습니다. 이는 CMake Tools extension이 직접 지원하지 않기 때문에, 우리가 launch.json 파일을 생성해 주어야 합니다. 테스트 코드 수정 그 전에 먼저 argument가 제대로 동작하는지 확인하기 위해 main.cpp 코드를 수정하겠습니다. #include \u003ciostream\u003e int main(int argc, char**) { std::cout \u003c\u003c \"Hello, world!\\n\"; std::cout \u003c\u003c \"argc: \" \u003c\u003c argc \u003c\u003c std::endl; } 이 상태로 그냥 실행해보면 다음과 같이 나타날 것입니다. launch.json 자동생성 이제 launch.json 파일을 만들어 보겠습니다. 다음 그림과 같이 진행해주세요. Note\r\r직접 작성하는 것이 아니라, VSCode의 기능을 통해 자동으로 기본 틀이 작성되도록 할 것입니다.\r\r 필요없는 파일 삭제 위 과정을 거치면, .vscode/launch.json, .vscode/tasks.json, main.exe의 세 파일이 생성됩니다. 이 중 .vscode/tasks.json, main.exe 파일은 필요가 없고 사용하지 않을 것이니 삭제해줍니다. launch.json 수정 이제 실행/디버깅에 사용되는 launch.json 파일을 수정합니다. program 변수의 값을 “${command:cmake.launchTargetPath}“로 변경 Info\r\rcmake.launchTargetPath는 CMake Tools extension에서 제공하는 변수명으로, CMake project에서 컴파일하여 만든 실행파일의 경로를 의미합니다.\r\r preLaunchTask 항목을 삭제 (값만 지우는 것이 아니라 항목 전체를 삭제) Info\r\rpreLaunchTask는 tasks.json 파일을 통해 정의되는 선행작업입니다. CMake 기반 project에서는 tasks.json의 역할을 CMake Tools extension이 수행해주므로 이 부분은 사용하지 않습니다.\r\r launch.json 파일을 통해 실행해보기 launch.json 파일을 통해 실행하기 위해서는, 다음 그림과 같이 (Run) - (Run Without Debugging) 항목을 클릭하면 됩니다. Info\r\rlaunch.json 파일을 통해 디버깅하기 위해서는, 바로 위의 (Run) - (Start Debugging) 항목을 클릭하면 됩니다.\r\r Command line argument 설정 이제 command line argument를 변경해보겠습니다. 아까 수정한 launch.json 파일에서 args의 값을 통해 설정합니다. ","date":"2020-11-13","objectID":"/vscode-cmake/:3:4","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"Reference https://chocolatey.org/packages/cmake https://vector-of-bool.github.io/docs/vscode-cmake-tools/ ","date":"2020-11-13","objectID":"/vscode-cmake/:4:0","tags":["HowTo","VSCode","CMake","CMakeTools","C","CPP","C++"],"title":"Visual Studio Code에서 CMake 환경 설정하기","uri":"/vscode-cmake/"},{"categories":["VSCode"],"content":"VSCode에서 C 언어 및 C++ 언어를 사용하기 위해 실행/디버깅 등이 가능한 환경을 구축하는 방법에 대해 알아봅니다. Success\r\r여기서는 VSCode 설치를 완료한 상태라고 가정합니다. VSCode 설치 및 기본 세팅은 이 글을 참고하세요.\r\r ","date":"2020-11-12","objectID":"/vscode-cpp/:0:0","tags":["HowTo","VSCode","C","CPP","C++"],"title":"Visual Studio Code에서 C, C++ 환경 설정하기","uri":"/vscode-cpp/"},{"categories":["VSCode"],"content":"컴파일러/디버거 설치 VSCode는 C 언어용 컴파일러나 디버거를 자체적으로 내장하고있지 않습니다. 때문에 C 언어를 VSCode에서 사용하려면, 컴파일러와 디버거를 직접 설치하고 이를 연동해주는 작업이 필요합니다. Warning\r\rExtension을 설치한다고 해서 컴파일러나 디버거가 설치되는 것은 아닙니다.\r\r ","date":"2020-11-12","objectID":"/vscode-cpp/:1:0","tags":["HowTo","VSCode","C","CPP","C++"],"title":"Visual Studio Code에서 C, C++ 환경 설정하기","uri":"/vscode-cpp/"},{"categories":["VSCode"],"content":"Windows를 이용하는 경우 Windows는 기본적으로 C 언어용 컴파일러나 디버거를 제공하지 않습니다. 따라서, 우리가 직접 설치해주어야 합니다. 이 글에서는 MinGW1를 이용하도록 하겠습니다. MinGW는 chocolatey를 통해 쉽게 설치할 수 있습니다. Info\r\rChocolatey는 Windows용 패키지 관리자입니다. 아직 사용 방법을 모르신다면, 이 글을 참고하세요.\r\r choco install mingw -y 다음 명령어를 통해 설치가 잘 되었는지 확인해보세요. gcc --version gdb --version Tip\r\rChocolatey 특성 상, 설치한 직후에는 gcc, gdb 명령어를 인식하지 못할 수 있습니다. PowerShell을 껐다 켜거나, refreshenv 명령어를 활용하세요. \r\r ","date":"2020-11-12","objectID":"/vscode-cpp/:1:1","tags":["HowTo","VSCode","C","CPP","C++"],"title":"Visual Studio Code에서 C, C++ 환경 설정하기","uri":"/vscode-cpp/"},{"categories":["VSCode"],"content":"Linux를 이용하는 경우 대부분의 Linux 배포판은 gcc2와 gdb3를 기본적으로 제공합니다. 터미널을 켜서 다음 명령어를 입력했을 때 버전 정보가 정상적으로 출력되면 설치되어 있는 것입니다. gcc --version gdb --version 만약 설치가 되어있지 않다면, 패키지 관리자인 apt나 yum을 이용하여 설치하시기를 권장합니다. ","date":"2020-11-12","objectID":"/vscode-cpp/:1:2","tags":["HowTo","VSCode","C","CPP","C++"],"title":"Visual Studio Code에서 C, C++ 환경 설정하기","uri":"/vscode-cpp/"},{"categories":["VSCode"],"content":"Extension 설치 이제 VSCode에서 extension을 설치할 차례입니다. VSCode를 켜고 extension 탭으로 간 뒤 “c“를 검색하세요. 맨 위에 C/C++ extension이 뜰 것입니다. Install 버튼을 눌러 설치합니다. ","date":"2020-11-12","objectID":"/vscode-cpp/:2:0","tags":["HowTo","VSCode","C","CPP","C++"],"title":"Visual Studio Code에서 C, C++ 환경 설정하기","uri":"/vscode-cpp/"},{"categories":["VSCode"],"content":"테스트 이제 제대로 설치가 되었는지 확인할 시간입니다. Warning\r\r경로에 한글이 있으면 제대로 동작하지 않습니다.\r\r ","date":"2020-11-12","objectID":"/vscode-cpp/:3:0","tags":["HowTo","VSCode","C","CPP","C++"],"title":"Visual Studio Code에서 C, C++ 환경 설정하기","uri":"/vscode-cpp/"},{"categories":["VSCode"],"content":"코드 작성 Explorer 탭으로 이동하여 적당한 경로에 main.cpp라는 새 파일을 만들어주고 다음과 같이 작성하도록 하겠습니다. #include \u003ciostream\u003e int main(int argc, char **) { std::cout \u003c\u003c \"Hello, World!\" \u003c\u003c std::endl; std::cout \u003c\u003c \"argc: \" \u003c\u003c argc \u003c\u003c std::endl; } ","date":"2020-11-12","objectID":"/vscode-cpp/:3:1","tags":["HowTo","VSCode","C","CPP","C++"],"title":"Visual Studio Code에서 C, C++ 환경 설정하기","uri":"/vscode-cpp/"},{"categories":["VSCode"],"content":"실행 다음 그림과 같이 실행하시면 됩니다. 동일 폴더 내에 .vscode라는 폴더가 생기고, 그 안에 컴파일 옵션에 관한 설정이 적힌 .json 파일이 자동으로 생성될 것입니다. 이후 아래쪽의 TERMINAL 탭을 확인하시면, 우리가 작성한대로 두 줄이 화면에 출력되는 것을 확인할 수 있습니다. Info\r\rC++이 아닌 C 언어로 작성하였다면, 세 번째 그림에서 g++.exe대신 gcc.exe를 선택하시면 됩니다. 아마 gcc.exe만 선택 가능하게끔 뜰 것입니다. \r\r Warning\r\r실행을 하실 때, main.cpp가 활성화된 상태에서 실행하세요. 이 방법을 통해 자동으로 만들어진 launch.json 파일은 “활성화된 파일의 이름.exe”를 실행합니다. 예를들어 launch.json을 보면서 실행 버튼을 누르면, launch.exe를 찾아 실행하려고 하기 때문에 에러가 발생합니다. \r\r ","date":"2020-11-12","objectID":"/vscode-cpp/:3:2","tags":["HowTo","VSCode","C","CPP","C++"],"title":"Visual Studio Code에서 C, C++ 환경 설정하기","uri":"/vscode-cpp/"},{"categories":["VSCode"],"content":"디버깅 다음 그림과 같이 진행하여 디버깅도 가능합니다. ","date":"2020-11-12","objectID":"/vscode-cpp/:3:3","tags":["HowTo","VSCode","C","CPP","C++"],"title":"Visual Studio Code에서 C, C++ 환경 설정하기","uri":"/vscode-cpp/"},{"categories":["VSCode"],"content":"Command line argument 설정 실행하거나 디버깅할 때, command line argument를 넘겨주도록 설정하고 싶을 때가 있습니다. 이 부분은 아까 자동으로 만들어졌던 launch.json 파일의 args 값을 통해 설정합니다. Minimalist GNU for Windows. 마이크로소프트 Windows로 포팅한 GNU 소프트웨어 도구 모음 ↩︎ GNU Compiler Collection. 혹은 그 중 하나인 GNU C Compiler. C 언어 컴파일러의 일종. ↩︎ GNU Debugger. C 언어 디버거의 일종. ↩︎ ","date":"2020-11-12","objectID":"/vscode-cpp/:3:4","tags":["HowTo","VSCode","C","CPP","C++"],"title":"Visual Studio Code에서 C, C++ 환경 설정하기","uri":"/vscode-cpp/"},{"categories":["VSCode"],"content":"요즘 개발자 사이에서 인기있는 코딩 툴. Visual Studio Code에 대해 살펴보고, 설치 및 기본 세팅 방법까지 알아봅니다. ","date":"2020-11-12","objectID":"/vscode/:0:0","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"TL;DR 공식 홈페이지: https://code.visualstudio.com/ GitHub: https://github.com/Microsoft/vscode 다운로드: https://code.visualstudio.com/download Windows의 경우 chocolatey를 통해서도 설치 가능 choco install vscode -y 설치는 그냥 다음버튼만 눌러서 진행해도 괜찮음 [CTRL]+[SHIFT]+[X] 누르면 Extension 탭이 열림. 원하는 extension을 설치하여 이용. 모든 extension 보기(Marketplace): https://marketplace.visualstudio.com/vscode Warning\r\rVSCode는 컴파일러, 디버거 등을 내장하고 있지 않습니다. 사용하는 언어에 맞추어 따로 설치하고 연동하는 방식으로 사용하셔야 합니다. 이에 관한 자세한 내용은 본 블로그의 VSCode 카테고리 글을 참고하세요.\r\r ","date":"2020-11-12","objectID":"/vscode/:1:0","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"Visual Studio Code 소개 Visual Studio Code는 마이크로소프트에서 개발하여 2016년에 출시한 고급 메모장IDE1입니다. 줄여서 VSCode 혹은 VSC라고도 부릅니다. 공식 소개글 번역\r\r원문 Getting started Visual Studio Code는 가벼우면서도 강력한 소스 코드 편집기로, Windows, macOS, Linux에서 모두 사용 가능합니다. VSCode는 기본적으로 JavaScript, TypeScript, Node.js를 지원하며, 다양한 확장(extension)을 통해 다른 언어(C, C++, C#, Java, Python, PHP, Go 등)나 런타임(.NET, Unity 등)을 지원하도록 설정할 수 있습니다. 이 소개영상(영어)을 통해 VSCode로의 여행을 시작해보세요. \r\r 저는 이전에 Visual Studio, PyCharm, Eclipse, QtCreator, Vim+Plugin 등의 IDE를 사용해보았습니다만, 올 초 즈음부터 VSCode로 정착했습니다. 그 이유는 다음과 같습니다. 가볍다. 무료다. Windows와 Linux에서 모두 사용 가능하다. WSL과 같은 원격 환경에서의 개발을 지원한다. 내가 사용하는 여러 종류의 프로그래밍 언어를 하나의 IDE로 관리할 수 있다. (C++, Python, Go, Markdown, HTML, CSS, JavaScript) 설정해놓은 환경이 동기화되어, 여러 대의 컴퓨터를 사용해도 동일한 환경에서 작업할 수 있다. 뭔가 프로그래밍 고수가 된 것 같은 착각이 든다 ","date":"2020-11-12","objectID":"/vscode/:2:0","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"VSCode 설치하기 ","date":"2020-11-12","objectID":"/vscode/:3:0","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"설치 프로그램 다운받아 설치 설치파일 다운로드 공식 홈페이지 첫화면에 있는 다운로드 버튼을 누르면 설치 프로그램이 다운로드 됩니다. 혹은, 다운로드 페이지를 이용하셔도 좋습니다. 설치파일 실행 User installer를 받으셨거나, 공식 홈페이지 첫화면에서 다운로드 받으신 경우에는, 설치 프로그램을 실행시키면 다음과 같은 경고가 뜰 수 있습니다. 이 설치파일은 관리자 권한으로 실행되지 않습니다. 시스템을 이용하는 모든 사용자가 VSCode를 쓰고자 한다면, System Installer를 다운받아 설치하세요. 그냥 진행해도 괜찮습니까? 일반적인 개인사용자 분들은 그냥 확인을 눌러 진행하시면 됩니다. 여러개의 Windows 계정이 존재하고 이 모든 계정에서 사용하게끔 하고 싶으신 분들의 경우에는, System Installer를 다운받아서 설치를 진행하시기 바랍니다. 그 이후에는 경로 설정 등의 내용이므로 특별한 이유가 없다면 그냥 다음버튼만 눌러주시면 됩니다. ","date":"2020-11-12","objectID":"/vscode/:3:1","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"Chocolatey를 통해 설치(Windows) Chocolatey를 이용하신다면, 다음 명령어를 통해 간단하게 설치하실 수 있습니다. choco install vscode -y Tip\r\rChocolatey를 설치하고 이용하는 방법이 궁금하다면, 이 글을 참고하세요.\r\r ","date":"2020-11-12","objectID":"/vscode/:3:2","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"첫 화면 살펴보기 ","date":"2020-11-12","objectID":"/vscode/:4:0","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"Extension 살펴보기 VSCode에는 정말 다양한 extension이 존재하며, 계속 개발되고 있습니다. 현재 제공하는 모든 extension은 marketplace 페이지에서 살펴볼 수 있습니다. 이 글에서는 우선 간단하게 언어 설정이나 테마 설정과 같은 기본적인 extension을 살펴보겠습니다. ","date":"2020-11-12","objectID":"/vscode/:5:0","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"Language pack extension VSCode는 영어뿐만 아니라, 한국어를 비롯하여, 중국어, 일본어, 스페인어, 러시아어, 독일어,… 등 다양한 언어를 지원합니다. Microsoft에서 직접 제공하는 언어 팩이죠. Info\r\rLanguage pack으로 검색하시면 다양한 언어 팩을 확인할 수 있습니다.\r\r 한국어 팩을 설치하시려면, korean을 검색하여 나오는 Korean Language Pack for Visual Studio Code를 설치하면 됩니다. 설치는 금방 끝납니다. 오른쪽 아래에 Restart Now 버튼이 나타나면, 눌러서 VSCode를 재시작하시기 바랍니다. (개인적으로는 에러 검색 등의 용이성 때문에, 그냥 영어모드로 이용하고 있습니다) ","date":"2020-11-12","objectID":"/vscode/:5:1","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"Theme/icon extension Marketplace에 보면 테마나 아이콘도 정말 다양하게 있습니다. 다음 그림과 같이 필터를 Themes 카테고리로 설정하시면, 테마/아이콘에 관련된 extension들을 살펴볼 수 있습니다. 테마/아이콘 변경은 왼쪽 아래의 설정아이콘을 통해 가능합니다. ","date":"2020-11-12","objectID":"/vscode/:5:2","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"Extension/설정 동기화하기 VSCode는 설치한 Extension목록, 설정값 등을 다른 컴퓨터에서도 동기화하여 동일하게 사용할 수 있도록, Sync 기능을 제공합니다. 동기화를 위해서는 Microsoft 계정, GitHub 계정 둘 중 하나가 필요합니다. ","date":"2020-11-12","objectID":"/vscode/:6:0","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"Sync 켜기 왼쪽 아래의 계정 아이콘을 클릭하여 Sync 기능을 활성화할 수 있습니다. 작성일(2020년 11월) 기준, 다음과 같은 경고가 뜨네요. 동기화 기능은 아직 준비단계입니다. 사용하기 전에 관련 문서를 읽어보세요. 아무도 안읽어보시겠죠 Turn On을 눌러 넘어갑니다. 그러면 창 위에 다음 그림과 같이 동기화할 항목을 선택하는 내용과 함께 Sign in \u0026 Turn On 버튼이 뜹니다. Sign in \u0026 Turn On 버튼을 누르면, 계정 종류를 선택하는 항목이 뜹니다. 여기서 Microsoft로 로그인이나 GitHub으로 로그인 중 편하신 쪽으로 선택하시면 됩니다. Info\r\rGitHub 계정으로 로그인하시는 경우에는, GitHub과 VSCode 연동을 승인하는 페이지가 뜹니다. 다음과 같은 경고창이 뜨면 Open을 눌러 진행하시면 됩니다. \r\r\r ","date":"2020-11-12","objectID":"/vscode/:6:1","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["VSCode"],"content":"Reference https://code.visualstudio.com/ 통합 개발 환경(Integrated Development Environment). 프로젝트 관리, 소스코드 편집, 컴파일, 디버그, 바이너리 배포 등, 개발에 필요한 여러 기능을 한데 묶어놓은 프로그램. ↩︎ ","date":"2020-11-12","objectID":"/vscode/:7:0","tags":["HowTo","Visual Studio Code","VSCode","VSC","Install"],"title":"Visual Studio Code 소개, 설치, 기본 세팅","uri":"/vscode/"},{"categories":["Windows"],"content":"이 글에서는 [WIN]+[TAB]키를 눌러 데스크톱 목록을 볼 때, 아래쪽에 타임라인이라는 이름으로 나타나는 활동 기록이 뜨지 않도록 없애는 방법을 알아보고자 합니다. ","date":"2020-11-12","objectID":"/remove-activity-history/:0:0","tags":["HowTo","Windows","활동 기록","activity history","타임라인","timeline"],"title":"타임라인에서 활동 기록 뜨지 않게 하는 법","uri":"/remove-activity-history/"},{"categories":["Windows"],"content":"해결방법 [WIN]+[I]를 눌러, Windows 설정 창을 엽니다. 개인 정보에 들어갑니다. 왼쪽 탭 중 활동 기록에 들어갑니다. 다음 계정의 활동 표시 부분에서 계정 옆의 스위치를 클릭하여 끔으로 바꾸어주고, 원한다면 밑의 활동 기록 지우기에서 지우기 버튼을 클릭합니다. 끝입니다! 설정사항은 따로 확인버튼 없이 자동으로 저장되니 그냥 창을 끄셔도 됩니다! ","date":"2020-11-12","objectID":"/remove-activity-history/:1:0","tags":["HowTo","Windows","활동 기록","activity history","타임라인","timeline"],"title":"타임라인에서 활동 기록 뜨지 않게 하는 법","uri":"/remove-activity-history/"},{"categories":["Windows"],"content":"작업표시줄에서 아이콘을 우클릭할 때 뜨는 팝업이나, 시작메뉴의 점프목록 등에서 나타나는 최근 항목에 대한 기록을 없애는 방법에 대해 알아봅니다. 논문입니다. 정말입니다.\"\r논문입니다. 정말입니다.\r ","date":"2020-11-12","objectID":"/remove-recent-items/:0:0","tags":["HowTo","Windows","최근 항목","recent items"],"title":"작업표시줄, 시작메뉴에서 최근 항목 뜨지 않게 하는 법","uri":"/remove-recent-items/"},{"categories":["Windows"],"content":"해결방법 [WIN]+[I]를 눌러, Windows 설정 창을 엽니다. 개인 설정에 들어갑니다. 왼쪽 탭 중 시작 탭에 들어갑니다. 시작 메뉴의 점프 목록, 작업 표시줄 또는 파일 탐색기 즐겨찾기에서 최근에 연 항목 표시의 스위치를 클릭하여 끔으로 바꾸어줍니다. 끝입니다! 설정사항은 따로 확인버튼 없이 자동으로 저장되니 그냥 창을 끄셔도 됩니다! ","date":"2020-11-12","objectID":"/remove-recent-items/:1:0","tags":["HowTo","Windows","최근 항목","recent items"],"title":"작업표시줄, 시작메뉴에서 최근 항목 뜨지 않게 하는 법","uri":"/remove-recent-items/"},{"categories":null,"content":" 안녕하세요 EvaNote(에바노트)를 기록하고 있는 Evan Kim입니다. ","date":"2020-11-10","objectID":"/about/:0:1","tags":null,"title":"EvaNote","uri":"/about/"},{"categories":null,"content":" 전공 B.S.: Nuclear Engineering Ph.D.: Nuclear Engineering (M.S. integrated) ","date":"2020-11-10","objectID":"/about/:0:2","tags":null,"title":"EvaNote","uri":"/about/"},{"categories":null,"content":" 관심 연구주제 감마선 방출영상 및 투과영상 기술 감마선 계측 몬테칼로 전산모사 기반 방사선 수송 해석 몬테칼로 전산모사용 인체 전산모델 활용 ","date":"2020-11-10","objectID":"/about/:0:3","tags":null,"title":"EvaNote","uri":"/about/"},{"categories":null,"content":" 관심 분야 컴퓨터/콘솔 게임 소프트웨어 프로그래밍 순수수학 이론물리학 … 점점 늘어가는 중 ","date":"2020-11-10","objectID":"/about/:0:4","tags":null,"title":"EvaNote","uri":"/about/"},{"categories":null,"content":" 잡담 살아가다보니 정말 다양한 분야에서 어마어마한 정보가 쏟아지더군요. 해를 거듭할수록 입력되는 정보가 더 많아지다보니, 어느 순간부터인가 머리에만 저장하는 데에 한계를 느끼고 노트를 적기 시작했습니다. 지식은 나눌 때 더 가치가 높아진다고 생각하기에, 지금까지 적어두었던 노트와 앞으로 적어나갈 노트를, 이 블로그를 통해 공유해보고자 합니다. 제가 헤쳐왔던 난관과 그 과정에서 얻은 지식이, 미래의 제 자신에게 그리고 이곳을 지나쳐가는 다른 분들에게 미약하나마 도움이 되길 바랍니다. ","date":"2020-11-10","objectID":"/about/:0:5","tags":null,"title":"EvaNote","uri":"/about/"},{"categories":["Geant4"],"content":"이 글에서는 Linux계열 운영체제 중 하나인 Ubuntu 20.04 LTS에서 Geant4 10.6 patch 02 버전을 설치하는 방법에 대해 알아봅니다. ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:0:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"설치 정보 요약 설치 환경 운영체제: Ubuntu 20.04 LTS 인터넷 사용 가능. 관리자 권한 (sudo) 이용 가능. 설치 대상 Geant4 10.6 patch 02 버전. Multi-threading 기능 활성화. UI 및 가시화 기능 활용을 위해 Qt5, X11 OpenGL 라이브러리 연동하여 설치. 설치 경로 /opt/geant4/10.6.p02 여러 버전의 Geant4를 설치할 경우를 고려하여, /opt/geant4 하위에 버전별로 디렉토리를 만들고 그 하위에 설치 진행. ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:1:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"TL;DR ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:2:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"Geant4 관련 필수/선택 라이브러리 설치 apt 패키지 매니저 최신화 sudo apt update -y \u0026\u0026 sudo apt upgrade -y \u0026\u0026 sudo apt autoremove -y apt를 이용하여 다음 항목 설치 C++ 컴파일러 및 표준 라이브러리, 헤더 (Geant4 설치 시 필수 라이브러리) CMake (Geant4 설치 시 필수 라이브러리) Expat (Linux, macOS에서 Geant4 설치 시 필수 라이브러리) Qt5, X11 OpenGL 라이브러리 설치 (Geant4 설치 시 선택 라이브러리. GUI 등 그래픽 기반 기능 사용에 필요) sudo apt install -y build-essential cmake libexpat1-dev qt5-default libxmu-dev ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:2:1","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"Geant4 설치 Geant4 툴킷을 설치할 디렉토리 생성 sudo mkdir -p /opt/geant4/10.6.p02 1에서 생성한 디렉토리로 이동하여, Geant4 소스코드 다운로드 (소스코드 용량 약 40 MB) cd /opt/geant4/10.6.p02 sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.06.p02.tar.gz 2에서 다운받은 압축파일을 압축해제 sudo tar -xf geant4.10.06.p02.tar.gz build라는 이름의 디렉토리를 만들고 안으로 이동 sudo mkdir build cd build 컴파일 수행 (make 명령은 인터넷 속도 및 cpu 성능에 따라 수 분~수 십분 소요될 수 있음) CMAKE_INSTALL_PREFIX(설치경로): /opt/geant4/10.6.p02 GEANT4_BUILD_MULTITHREADED(multi-threading 사용 여부): ON GEANT4_INSTALL_DATA(크로스섹션 데이터 자동설치 여부): ON (데이터 총 용량 약 900 MB) GEANT4_USE_OPENGL_X11(X11 OpenGL 라이브러리 연동 여부): ON GEANT4_USE_QT(QT 라이브러리 연동 여부): ON sudo cmake ../geant4.10.06.p02 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.6.p02 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON sudo make -j `grep -c processor /proc/cpuinfo` sudo make install 환경변수 세팅을 위해 ~/.bashrc에 내용 추가 echo \"source /opt/geant4/10.6.p02/bin/geant4.sh\" \u003e\u003e ~/.bashrc ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:2:2","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"Prerequisite 설치 인터넷이 안된다거나, 관리자 권한을 사용할 수 없다거나, Ubuntu가 아니라면 이야기가 좀 달라지겠지만… 앞서 말한 5가지 준비물은 모두 Ubuntu에서 제공하는 패키지 관리자 apt를 통해 설치할 수 있습니다. (RedHat 계열의 리눅스에서도 패키지 관리자 yum을 통해 유사한 명령어로 설치할 수 있습니다) Warning\r\r패키지 관리자를 사용하기 전에 최신화를 해주세요.\r\r Danger\r\r본인이 서버 등을 관리하는 사람이라면, 최신화를 할 때 주의하세요. 이런 경우에는 전체 패키지를 최신화하기보다는 원하는 특정 패키지를 선별하여 최신화하기를 권장합니다.\r\r ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:3:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"패키지 매니저 최신화 sudo apt update -y \u0026\u0026 sudo apt upgrade -y \u0026\u0026 sudo apt autoremove -y ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:3:1","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"C++ 컴파일러 및 표준 라이브러리, 헤더 설치 (GCC 등) sudo apt install -y build-essential ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:3:2","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"CMake 설치 sudo apt install -y cmake ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:3:3","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"Expat 설치 sudo apt install -y libexpat1-dev ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:3:4","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"Qt5 설치 sudo apt install -y qt5-default ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:3:5","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"X11 OpenGL 설치 sudo apt install -y libxmu-dev ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:3:6","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"Geant4 설치하기 이제 준비가 다 되었습니다. 이어서 Geant4를 설치해봅시다. 우리가 설치하고자 하는 경로는 /opt/geant4/10.6.p02입니다. 앞서 말씀드린 것처럼, 여러 버전의 Geant4를 설치할 경우를 고려하여 /opt/geant4 하위에 버전명에 해당하는 디렉토리를 두어 세분화한 것입니다. ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:4:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"설치를 위한 디렉토리 생성 우선 해당 디렉토리를 생성하기 위해 다음 명령어를 입력합니다. (/opt는 관리자 권한이 있어야 수정할 수 있음) sudo mkdir -p /opt/geant4/10.6.p02 ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:4:1","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"Geant4 소스코드 다운로드 이어서, 해당 디렉토리로 이동한 뒤 Geant4 소스코드를 다운 받겠습니다. cd /opt/geant4/10.6.p02 sudo wget http://geant4-data.web.cern.ch/geant4-data/releases/geant4.10.06.p02.tar.gz Info\r\rwget 명령어를 사용하지 않고, Geant4 다운로드 페이지에서 직접 받아서 옮겨오셔도 괜찮습니다.\r\r Tip\r\r본 글에서 다루는 10.6.p02와 다른 버전을 설치하시는 경우에는, wget 링크를 바꿔주셔야 합니다. 일반적으로 맨 뒤의 버전부분만 수정하면 됩니다.\r\r ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:4:2","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"소스코드 압축 해제 위 과정을 통해 geant4.10.06.p02.tar.gz라는 압축파일을 다운받으셨을 것입니다. 다음 명령어를 통해 해당 파일의 압축을 해제합니다. sudo tar -xf geant4.10.06.p02.tar.gz geant4.10.06.p02라는 디렉토리가 생성되고 그 안에 압축이 풀리게 됩니다. ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:4:3","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"빌드를 위한 build 디렉토리 생성 빌드를 수행하면 CMake와 관련된 잡다한 부산물이 생성됩니다. 관리의 용이성을 위해, 별도의 build라는 디렉토리를 만들고 이 안에서 컴파일을 수행하겠습니다. sudo mkdir build cd build ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:4:4","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"빌드 수행 우리는 빌드를 진행할 때 다음과 같은 옵션을 설정할 것입니다. CMAKE_INSTALL_PREFIX(설치경로): /opt/geant4/10.6.p02 GEANT4_BUILD_MULTITHREADED(multi-threading 사용 여부): ON GEANT4_INSTALL_DATA(크로스섹션 데이터 자동설치 여부): ON (데이터 총 용량 약 900 MB) GEANT4_USE_OPENGL_X11(X11 OpenGL 라이브러리 연동 여부): ON GEANT4_USE_QT(QT 라이브러리 연동 여부): ON 그리고 우리의 소스 코드는 ../geant4.10.06.p02 디렉토리에 압축이 풀려져 있지요. 이에 따라 다음과 같이 명령줄을 입력합니다. sudo cmake ../geant4.10.06.p02 -DCMAKE_INSTALL_PREFIX=/opt/geant4/10.6.p02 -DGEANT4_BUILD_MULTITHREADED=ON -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_QT=ON 이 명령어를 입력하면, 많은 내용이 출력되며 작업이 진행됩니다. 혹시라도 오타가 나면 이 부분에서 에러가 발생합니다. 오타가 나지 않도록 주의하세요! 복사-붙여넣기 추천! Note\r\rGEANT4_INSTALL_DATA 부분은 앞서 설명한 바와 같이, 크로스섹션 데이터를 자동으로 다운받을지에 대한 옵션입니다. 사용자에 따라 OFF로 하고 직접 다운로드 받아서 가져오는 경우도 있습니다. 이 글에서는 Geant4를 처음 설치하는 분들이 별도로 작업할 내용을 최소화하고자, 자동 다운로드 하는 방법으로 진행합니다. \r\r Tip\r\rccmake (curses 기반 CMake)를 사용할 수 있는 분이라면, 이를 이용하는 편이 더욱 편할 수도 있습니다. 이에 관한 내용은 지면이 부족하여 생략합니다. \r\r 다음과 같은 명령어와 함께 마무리되면 정상적으로 진행이 된 것입니다. 이어서 make 명령어로 빌드를 진행하고, make install로 설치를 마무리합니다. sudo make sudo make install Tip\r\rmake 명령어는 -j \u003c쓰레드 수\u003e 옵션을 주면, 여러 쓰레드를 동시에 이용하여 좀 더 빨리 설치됩니다.\r\r Warning\r\rmake 명령어에서 -j 옵션을 주고 돌릴 때, 메모리가 부족한데 쓰레드 수가 너무 과하게 잡히면 cc1plus 관련 에러가 발생할 수 있습니다. -j 옵션에 적절한 숫자는 자신의 쓰레드 수 * 1.2 입니다.\r\r ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:4:5","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"환경변수 설정 Geant4 툴킷을 설치하고나면 마지막으로 할 일이 있습니다. 바로 환경변수를 설정하는 것입니다. Geant4 사용을 위해 컴퓨터에게 알려줘야 하는 초기값들이 몇 가지 있습니다만, 이를 정리하여 한 번에 자동으로 설정이 되게끔하는 파일을 Geant4에서 제공하고 있습니다. 설치경로의 내부에 bin/geant4.sh라는 파일입니다. (C-shell을 이용하시는 분은 bin/geant4.csh를 이용합니다) Info\r\rGeant4가 여러 버전으로 설치되어 있는 경우, 원하는 버전의 bin/geant4.sh를 실행함으로써 해당 버전으로 동작하도록 설정할 수 있습니다.\r\r 실행을 위해서는 다음 명령어를 입력합니다. (source 명령어 뒤에 오는 경로는 Geant4를 설치한 경로에 따라 바뀔 수 있습니다) source /opt/geant4/10.6.p02/bin/geant4.sh 다만, 이 명령어는 실행한 이후 해당 shell이 종료될 때까지만 그 효과가 지속됩니다. 즉, 터미널을 새로 연다거나 하면 다시 환경변수 설정이 사라지게 되죠. 그래서 일반적으로는 터미널을 켤 때마다 자동으로 한 번 실행되는 파일인 ~/.bashrc 맨 밑에 위의 명령줄을 적어둡니다. vim이나 gedit 등을 이용하여 직접 입력하셔도 되고, 다음 명령줄을 이용하여 ~/.bashrc 파일 맨 밑에 해당 내용이 추가되도록 하셔도 됩니다. echo \"source /opt/geant4/10.6.p02/bin/geant4.sh\" \u003e\u003e ~/.bashrc ~/.bashrc에 추가된 내용을 새로고침하기 위해 다음 줄까지 실행하고 넘어가겠습니다. source ~/.bashrc 드디어 Geant4 설치가 끝났습니다! ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:5:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"제대로 설치되었는지 확인하기 ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:6:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"환경변수 확인 정상적으로 설치가 완료되고 geant.sh 파일이 제대로 실행되었다면, G4...와 같은 형태의 환경변수가 크로스섹션 데이터를 담은 경로를 가리키고 있어야 합니다. 다음 명령어를 통해 제대로 그 경로가 출력되는지 확인할 수 있습니다. env | grep G4 ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:6:1","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"예제 실행해보기 예제코드 복사해오기 예제코드는 소스 코드를 압축해제한 디렉토리 안에 examples이라는 디렉토리에 있습니다. 우리의 경우에는 /opt/geant4/10.6.p02/geant4.10.06.p02/examples이 되겠군요. 테스트를 위해 basic/B1 이라는 예제를 복사해오고, 복사해온 디렉토리 안으로 들어가봅시다. cp -r /opt/geant4/10.6.p02/geant4.10.06.p02/examples/basic/B1 . cd B1 예제코드 실행하기 (터미널 상에서 실행) 예제 코드 B1에는 다음과 같은 파일 및 디렉토리들이 있을 것입니다. 이 글에서는 코드를 살펴보지는 않고, 그냥 실행만 하겠습니다. 우선 빌드를 하기 위해 다음 명령어를 입력합니다. cmake . make -f Makefile 다음 그림과 같이 많은 줄이 출력된 뒤, [100%] Built target exampleB1까지 나오면 성공입니다. 이어서 실행을 해봅니다. ./exampleB1 run1.mac 다음 그림처럼 또 무언가 잔뜩 출력된 뒤, RunManagerKernel is deleted. Good bye :)가 출력되었다면 잘 실행된 것입니다. 예제코드 실행하기 (GUI 띄우기) Geant4 설치 시 Qt5와 OpenGL 설치도 함께 진행했으므로, 여러분의 우분투에 X window 관련 설정이 잘 되어있다면 다음 명령어로 GUI창도 띄워볼 수 있습니다. ./exampleB1 잘 실행되었다면 다음과 같은 창이 나타날 것입니다. 여기까지 되셨다면 설치와 테스트까지 성공적으로 하신 것입니다! 고생하셨습니다. ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:6:2","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":["Geant4"],"content":"Reference Geant4 Homepage Geant4 Toolkit 소스 코드 GNU Compiler Collection(GCC) CMake Expat Qt5 OpenGL ","date":"2020-11-01","objectID":"/g4install-106p2-ubt2004/:7:0","tags":["HowTo","Linux","Ubuntu","Geant4","cmake"],"title":"Geant4 설치하기(10.6.p02, Ubuntu 2004 LTS)","uri":"/g4install-106p2-ubt2004/"},{"categories":[],"content":"WSL로 설치된 Debian계열 리눅스에서 Qt5 기반 프로그램 실행 시, libQt5*.so 파일과 관련하여 발생하는 cannot access 오류를 해결하는 방법에 대해 알아봅니다. ","date":"2020-10-28","objectID":"/cannot-open-libqt5core/:0:0","tags":["BugFix","WSL","Debian","Ubuntu","Qt5","libQt5Core.so.5","strip","library"],"title":"WSL에서 libQt5 관련 \"No such file or directory\" 에러 해결","uri":"/cannot-open-libqt5core/"},{"categories":[],"content":"TL;DR 다음 명령어 입력. (/usr/lib/x86_64-linux-gnu/libQt5Core.so.5 부분은 에러 문구에 나온 경로로 입력) sudo strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5 ","date":"2020-10-28","objectID":"/cannot-open-libqt5core/:1:0","tags":["BugFix","WSL","Debian","Ubuntu","Qt5","libQt5Core.so.5","strip","library"],"title":"WSL에서 libQt5 관련 \"No such file or directory\" 에러 해결","uri":"/cannot-open-libqt5core/"},{"categories":[],"content":"버그 설명 WSL로 설치된 Debian계열 리눅스에서 Qt5 기반 프로그램을 실행하려 할 때, Qt5 라이브러리를 apt 등을 통해 정상설치 하였음에도 불구하고, libQt5Core.so.5, libQt5Gui.so.5, … 등 libQt5 관련 라이브러리에서 cannot access 오류가 발생하는 경우가 있습니다. ","date":"2020-10-28","objectID":"/cannot-open-libqt5core/:2:0","tags":["BugFix","WSL","Debian","Ubuntu","Qt5","libQt5Core.so.5","strip","library"],"title":"WSL에서 libQt5 관련 \"No such file or directory\" 에러 해결","uri":"/cannot-open-libqt5core/"},{"categories":[],"content":"왜 발생하는가? WSL로 설치된 Debian 계열 리눅스(Ubuntu 등)에 대해 알려진 이슈입니다. 내용이 어려워서 저도 전부 이해하지는 못했으나, 대강의 흐름은 이렇습니다. Qt5 tool에서 lupdate를 실행할 때, (LD_DEBUG=all ldd /usr/lib/libQt5Xml.so 등) libQt5Core.so.5를 정상적인 라이브러리로 인식하지 않는 문제가 발생함. .note.ABI-tag를 호출하는 ELF section이 존재하는 한, 이 라이브러리는 ld-linux링커로 직접 실행될 수는 있지만, 다른 shared object와 연동하여 링킹될 수 없음. 이를 해결하려면 strip --remove-section=.note.ABI-tag /usr/lib/libQt5Core.so.5와 같이 해당 라이브러리에서 ELF section을 제거해야 함. ","date":"2020-10-28","objectID":"/cannot-open-libqt5core/:3:0","tags":["BugFix","WSL","Debian","Ubuntu","Qt5","libQt5Core.so.5","strip","library"],"title":"WSL에서 libQt5 관련 \"No such file or directory\" 에러 해결","uri":"/cannot-open-libqt5core/"},{"categories":[],"content":"해결방법 위에 설명한 바와 같이, strip이라는 명령어를 사용하여 해당 정보를 제거하면 됩니다. 맨 끝에 /usr/lib/x86_64-linux-gnu/libQt5Core.so.5 부분은 에러 문구에 출력된 라이브러리 경로를 입력합니다. sudo strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5 ","date":"2020-10-28","objectID":"/cannot-open-libqt5core/:4:0","tags":["BugFix","WSL","Debian","Ubuntu","Qt5","libQt5Core.so.5","strip","library"],"title":"WSL에서 libQt5 관련 \"No such file or directory\" 에러 해결","uri":"/cannot-open-libqt5core/"},{"categories":[],"content":"Reference https://github.com/YosysHQ/nextpnr/issues/375 https://superuser.com/questions/1347723/arch-on-wsl-libqt5core-so-5-not-found-despite-being-installed https://github.com/Microsoft/WSL/issues/3023 ","date":"2020-10-28","objectID":"/cannot-open-libqt5core/:5:0","tags":["BugFix","WSL","Debian","Ubuntu","Qt5","libQt5Core.so.5","strip","library"],"title":"WSL에서 libQt5 관련 \"No such file or directory\" 에러 해결","uri":"/cannot-open-libqt5core/"},{"categories":["Windows","Linux"],"content":"이 글에서는 WSL2를 설치한 뒤 X window(GUI)를 사용하기 위한 세팅 방법을 알아봅니다. Success\r\r여기서는 WSL2 설치가 완료된 상태라고 가정합니다. 이에 관한 전반적인 내용은 이 글을 참고하세요.\r\r WSL을 설치하더라도, GUI 기반의 프로그램을 실행하려면 X window에 관한 추가적인 설정이 필요합니다. 이 글에서는 WSL2에서 X window 사용을 위한 세팅 방법을 다룹니다. ","date":"2020-10-27","objectID":"/wsl2-x/:0:0","tags":["HowTo","Windows","WSL","WSL2","X server","X window","Xming"],"title":"WSL2에서 X window를 세팅하는 법","uri":"/wsl2-x/"},{"categories":["Windows","Linux"],"content":"TL;DR Xming 공식 홈페이지에서 Xming 다운로드 Xming 설치 (다음만 누르며 설치해도 괜찮음) Xming을 한 번 실행한 뒤 종료. (방화벽에 Xming 허용 규칙을 추가하기 위함) Xming 단축아이콘을 만들고, 속성-대상 항목의 맨 끝에 한 칸을 띄고 -ac를 이어서 적음 Warning\r\r지우고 적는 것이 아니라, 맨 끝에 추가하는 것임에 주의하세요.\r \r\r Windows PowerShell을 관리자 권한으로 실행한 뒤, 다음 명령어 입력 (에러가 뜬다면 본문 참고) Set-NetFirewallRule -DisplayName \"Xming X Server\" -Enabled True -Profile Any WSL2에서 다음 명령어 입력 echo 'export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '\"'\"'{print $2}'\"'\"'):0' \u003e\u003e ~/.bashrc ","date":"2020-10-27","objectID":"/wsl2-x/:1:0","tags":["HowTo","Windows","WSL","WSL2","X server","X window","Xming"],"title":"WSL2에서 X window를 세팅하는 법","uri":"/wsl2-x/"},{"categories":["Windows","Linux"],"content":"X window, X server란 X window는 UNIX 내지 Linux 계열의 운영체제에서 사용되는 GUI 환경 구현을 위한 시스템입니다. X11이라고도 부르고, 줄여서 그냥 X라고 부르기도 합니다. X window의 동작 원리는 간단하게 말하면 서버-클라이언트 구조입니다. “프로그램이 GUI 창을 띄워달라고 X server에 요청“하면, “X server가 요청을 처리하여 GUI 창을 띄우는 것“이죠. 일반적으로 Linux 운영체제 내에서 X server 프로그램이 구동되도록 설정된 환경에서는 내부적으로 알아서 화면을 띄울 수 있습니다. 하지만, PuTTY1나 WSL과 같이 Windows에서 터미널만 켜서 이용하는 경우에는, 프로그램의 X window 실행 요청을 Windows가 받아서 처리해야 하기 때문에, Windows용 X server 프로그램이 필요합니다. 대표적으로 Xming, VcXsrv, X410 등이 있습니다. 클라이언트가 보내는 X window 실행 요청은, Linux 상에서 DISPLAY라고 정의된 환경변수의 값으로 전송됩니다. 즉, X server를 사용하려면, X server 프로그램이 요청을 받을 수 있는 일종의 사서함 주소를 확보한 뒤, 이 값을 DISPLAY로 정의해주면 되는 것입니다. ","date":"2020-10-27","objectID":"/wsl2-x/:2:0","tags":["HowTo","Windows","WSL","WSL2","X server","X window","Xming"],"title":"WSL2에서 X window를 세팅하는 법","uri":"/wsl2-x/"},{"categories":["Windows","Linux"],"content":"Xming 설치 이 글에서는 Xming이라는 프로그램을 이용할 것입니다. Xming 공식 홈페이지에 들어가셔서 Xming 설치파일을 받아오시기 바랍니다. (버전이 높은 것은 Xming 측에 돈을 기부하고 계정을 받아야 사용가능하니, 그 밑에 있는 낮은 버전을 받으시면 됩니다.) (2021년 2월 17일 기준, 공식 홈페이지 접속이 안되네요. 구글에서 찾아서 다운받으세요.) 설치는 그냥 다음 버튼만 누르며 하셔도 됩니다만, 나중의 편의를 위해 단축아이콘 하나만 만들어두도록 합니다. 아래 그림에 보이는 내용이 떴을 때 Create a desktop icon for Xming에 체크해주시면 됩니다. Xming이 켜져 있는지의 여부는, 작업표시줄 오른쪽의 트레이아이콘을 확인하시면 알 수 있습니다. 트레이아이콘 중 X모양의 아이콘이 있다면 켜져있는 것입니다. 종료하고자 할 때에는, 트레이아이콘을 우클릭하고 Exit를 눌러주시면 됩니다. ","date":"2020-10-27","objectID":"/wsl2-x/:3:0","tags":["HowTo","Windows","WSL","WSL2","X server","X window","Xming"],"title":"WSL2에서 X window를 세팅하는 법","uri":"/wsl2-x/"},{"categories":["Windows","Linux"],"content":"WSL2와 X server 연동의 어려움 WSL2에서 X server를 연동하는 경우는 WSL1에서와 사뭇 다릅니다. WSL1이 Windows와 동일한 네트워크를 사용했던 것과 달리, WSL2는 Windows 10 내에서 별도의 WSL2 전용 네트워크를 사용하고 있기 때문입니다. 즉, WSL2와 Windows 10의 주소가 다르기 때문에, WSL2에서 자기자신(localhost)에 X 요청을 보내게 되면 Window로 그 요청이 도달하지 못하는 것이지요. 우리는 이 문제를 해결하기 위해 다음의 과정을 거쳐야 합니다. Windows에서 실행한 X server 프로그램(Xming)에서 외부 IP로부터 들어오는 요청을 허용하도록 설정 Windows 방화벽에서 WSL2의 요청을 허용하도록 설정 WSL2에서 Windows의 주소를 획득하고, 이를 DISPLAY 환경변수로 지정 ","date":"2020-10-27","objectID":"/wsl2-x/:4:0","tags":["HowTo","Windows","WSL","WSL2","X server","X window","Xming"],"title":"WSL2에서 X window를 세팅하는 법","uri":"/wsl2-x/"},{"categories":["Windows","Linux"],"content":"WSL2와 Xming 연동 ","date":"2020-10-27","objectID":"/wsl2-x/:5:0","tags":["HowTo","Windows","WSL","WSL2","X server","X window","Xming"],"title":"WSL2에서 X window를 세팅하는 법","uri":"/wsl2-x/"},{"categories":["Windows","Linux"],"content":"Xming에서 외부 IP로부터의 요청을 허용하도록 설정 Xming은 기본적으로 자기자신(localhost)으로부터 들어온 요청만을 받아들이고, 외부 IP로부터의 요청은 받지 않도록 설정되어 있습니다. 그래서 Xming에서 설정을 바꿔주지 않으면, 아무리 WSL2에서 요청을 보내도 Xming이 받지 않는 것이지요. 이 부분을 허용하도록 설정하기 위해서는 Xming을 켤때 -ac 옵션을 넣어주면 됩니다. -ac 옵션을 넣어 실행하기 위한 Xming 단축아이콘 생성 (설치 시 바탕화면에 생성하였다면 이것을 이용해도 괜찮음) 단축아이콘에서 우클릭 - 속성 바로 가기 탭 선택 대상 항목의 맨 끝에 한 칸을 띄어쓴 뒤 -ac를 이어서 적음 Warning\r\r지우고 적는 것이 아니라, 맨 끝에 추가하는 것임에 주의하세요.\r\r 확인 이제 이 단축아이콘으로 Xming을 실행하게 되면, Xming이 -ac 옵션이 적용된 채로 켜지게 됩니다. 혹시 현재 Xming이 켜져있다면 종료하시고, 방금 설정한 단축아이콘으로 다시 실행해주세요. ","date":"2020-10-27","objectID":"/wsl2-x/:5:1","tags":["HowTo","Windows","WSL","WSL2","X server","X window","Xming"],"title":"WSL2에서 X window를 세팅하는 법","uri":"/wsl2-x/"},{"categories":["Windows","Linux"],"content":"Windows 방화벽에서 Xming으로 들어가는 요청 허용 WSL2에서 보내는 요청이 Xming에 도달하기 전에 Windows 방화벽이 차단해버리는 경우를 막기 위해, 다음의 작업을 통해 방화벽에서 Xming X Server로 들어가는 요청을 허용하도록 설정하시기 바랍니다. Warning\r\r이 작업을 수행하기 전에 반드시 한 번은 Xming을 실행한 적이 있어야 합니다. 최초실행 시 뜨는 경고창을 통해 방화벽에 Xming 허용 규칙을 추가하게 되기 때문입니다.\r\r [WIN]+[R]을 눌러 실행 창 띄우기 powershell을 입력한 뒤, [CTRL]+[SHIFT]+[ENTER]를 눌러서 PowerShell을 관리자 권한으로 실행 다음 명령어 입력 Set-NetFirewallRule -DisplayName \"Xming X Server\" -Enabled True -Profile Any 이 명령어를 입력할 때 다음과 같은 에러가 뜬다면, Xming을 실행한 적이 없기 때문입니다. 혹시 Xming을 실행한 적이 있음에도 이런 에러가 뜬다면, 다음 명령어를 입력하세요. (앞의 Set이 New로 바뀝니다) New-NetFirewallRule -DisplayName \"Xming X Server\" -Enabled True -Profile Any ","date":"2020-10-27","objectID":"/wsl2-x/:5:2","tags":["HowTo","Windows","WSL","WSL2","X server","X window","Xming"],"title":"WSL2에서 X window를 세팅하는 법","uri":"/wsl2-x/"},{"categories":["Windows","Linux"],"content":"Windows의 IP 주소 획득 및 DISPLAY 환경변수로 지정 WSL2에서 Windows의 IP 주소를 보는 것은 다음 명령어를 통해 가능합니다. cat /etc/resolv.conf 값을 확인했다면 이걸 이용해서 DISPLAY 환경변수의 값을 설정해주면 됩니다. export DISPLAY=위에서_확인한_IP:0 이 작업 역시, 터미널을 종료하면 설정한 정보가 날아가버립니다. 때문에, Windows의 IP 값을 받아다가 DISPLAY 변수를 정의하는 작업을 한 문장으로 작성하여 ~/.bashrc에 적어두는 방식을 사용합니다. 이 작업을 위해서는 |2, grep3, awk4등 생소할 수도 있는 명령어가 사용됩니다만, 그대로 따라서 한 번만 실행시키시면 WSL2에서 작업할 내용은 끝나게 됩니다. echo 'export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '\"'\"'{print $2}'\"'\"'):0' \u003e\u003e ~/.bashrc ","date":"2020-10-27","objectID":"/wsl2-x/:5:3","tags":["HowTo","Windows","WSL","WSL2","X server","X window","Xming"],"title":"WSL2에서 X window를 세팅하는 법","uri":"/wsl2-x/"},{"categories":["Windows","Linux"],"content":"GUI 연동 확인을 위한 테스트 이 모든 작업이 끝났다면, 아마 정상적으로 GUI가 실행될 것입니다. GUI 창을 띄우는 프로그램을 사용하시는 게 있다면 그 프로그램으로 테스트 하시면 됩니다. 이 글에서는 xclock이라는 프로그램을 받아서 테스트하도록 하겠습니다. ## x11 어플리케이션 설치 sudo apt install x11-apps -y ## xclock 실행 xclock PuTTY는 무료 터미널 에뮬레이터로, 대개 서버용으로 활용되는 리눅스 운영체제 기반 컴퓨터에 원격접속하는 용도로 활용됩니다. ↩︎ |는 pipe라고 부르며, |의 앞에 있는 명령어의 실행 결과를 |의 뒤에 있는 명령어 실행의 입력인자로 활용하는 기호입니다. ↩︎ grep은 텍스트 검색에 관한 명령어입니다. ↩︎ awk는 텍스트 형태의 데이터를 행과 단어 별로 처리하여 출력하는 데에 사용되는 명령어입니다. ↩︎ ","date":"2020-10-27","objectID":"/wsl2-x/:6:0","tags":["HowTo","Windows","WSL","WSL2","X server","X window","Xming"],"title":"WSL2에서 X window를 세팅하는 법","uri":"/wsl2-x/"},{"categories":["Windows","Linux"],"content":"이 글에서는 WSL1을 설치한 뒤 X window(GUI)를 사용하기 위한 세팅 방법을 알아봅니다. Success\r\r여기서는 WSL1 설치가 완료된 상태라고 가정합니다. 이에 관한 전반적인 내용은 이 글을 참고하세요.\r\r WSL을 설치하더라도, GUI 기반의 프로그램을 실행하려면 X window에 관한 추가적인 설정이 필요합니다. 이 글에서는 WSL1에서 X window 사용을 위한 세팅 방법을 다룹니다. ","date":"2020-10-27","objectID":"/wsl1-x/:0:0","tags":["HowTo","Windows","WSL","WSL1","X server","X window","Xming"],"title":"WSL1에서 X window를 세팅하는 법","uri":"/wsl1-x/"},{"categories":["Windows","Linux"],"content":"TL;DR Xming 공식 홈페이지에서 Xming 다운로드 Xming 설치 (다음만 누르며 설치해도 괜찮음) WSL1에서 다음 명령어 입력 echo \"export DISPLAY=localhost:0\" \u003e\u003e ~/.bashrc ","date":"2020-10-27","objectID":"/wsl1-x/:1:0","tags":["HowTo","Windows","WSL","WSL1","X server","X window","Xming"],"title":"WSL1에서 X window를 세팅하는 법","uri":"/wsl1-x/"},{"categories":["Windows","Linux"],"content":"X window, X server란 X window는 UNIX 내지 Linux 계열의 운영체제에서 사용되는 GUI 환경 구현을 위한 시스템입니다. X11이라고도 부르고, 줄여서 그냥 X라고 부르기도 합니다. X window의 동작 원리는 간단하게 말하면 서버-클라이언트 구조입니다. “프로그램이 GUI 창을 띄워달라고 X server에 요청“하면, “X server가 요청을 처리하여 GUI 창을 띄우는 것“이죠. 일반적으로 Linux 운영체제 내에서 X server 프로그램이 구동되도록 설정된 환경에서는 내부적으로 알아서 화면을 띄울 수 있습니다. 하지만, PuTTY1나 WSL과 같이 Windows에서 터미널만 켜서 이용하는 경우에는, 프로그램의 X window 실행 요청을 Windows가 받아서 처리해야 하기 때문에, Windows용 X server 프로그램이 필요합니다. 대표적으로 Xming, VcXsrv, X410 등이 있습니다. 클라이언트가 보내는 X window 실행 요청은, Linux 상에서 DISPLAY라고 정의된 환경변수의 값으로 전송됩니다. 즉, X server를 사용하려면, X server 프로그램이 요청을 받을 수 있는 일종의 사서함 주소를 확보한 뒤, 이 값을 DISPLAY로 정의해주면 되는 것입니다. ","date":"2020-10-27","objectID":"/wsl1-x/:2:0","tags":["HowTo","Windows","WSL","WSL1","X server","X window","Xming"],"title":"WSL1에서 X window를 세팅하는 법","uri":"/wsl1-x/"},{"categories":["Windows","Linux"],"content":"Xming 설치 이 글에서는 Xming이라는 프로그램을 이용할 것입니다. Xming 공식 홈페이지에 들어가셔서 Xming 설치파일을 받아오시기 바랍니다. (버전이 높은 것은 Xming 측에 돈을 기부하고 계정을 받아야 사용가능하니, 그 밑에 있는 낮은 버전을 받으시면 됩니다.) 설치는 그냥 다음 버튼만 누르며 하셔도 됩니다만, 나중의 편의를 위해 단축아이콘 하나만 만들어두도록 합니다. 아래 그림에 보이는 내용이 떴을 때 Create a desktop icon for Xming에 체크해주시면 됩니다. Xming이 켜져 있는지의 여부는, 작업표시줄 오른쪽의 트레이아이콘을 확인하시면 알 수 있습니다. 트레이아이콘 중 X모양의 아이콘이 있다면 켜져있는 것입니다. 종료하고자 할 때에는, 트레이아이콘을 우클릭하고 Exit를 눌러주시면 됩니다. ","date":"2020-10-27","objectID":"/wsl1-x/:3:0","tags":["HowTo","Windows","WSL","WSL1","X server","X window","Xming"],"title":"WSL1에서 X window를 세팅하는 법","uri":"/wsl1-x/"},{"categories":["Windows","Linux"],"content":"WSL1과 Xming 연동 WSL1은 고민할 것이 별로 없습니다. WSL1은 Windows와 네트워크 상 주소가 동일하기 때문입니다. 클라이언트에서 X window 요청이 들어오면, 그대로 자기자신(localhost)에게 켜져 있는 Windows용 X server에 던져주면 끝입니다. 명령어 상으로는 다음과 같이 적어주면 됩니다. export DISPLAY=localhost:0 다만, 이렇게 정의한 환경변수는 터미널이 종료되는 순간 사라집니다. 일반적으로는 매번 터미널이 켜질 때마다 저 명령줄이 자동으로 실행되도록 하기 위해, ~/.bashrc 파일에 위의 내용을 적어두는 방식으로 활용합니다. echo \"export DISPLAY=localhost:0\" \u003e\u003e ~/.bashrc ","date":"2020-10-27","objectID":"/wsl1-x/:4:0","tags":["HowTo","Windows","WSL","WSL1","X server","X window","Xming"],"title":"WSL1에서 X window를 세팅하는 법","uri":"/wsl1-x/"},{"categories":["Windows","Linux"],"content":"GUI 연동 확인을 위한 테스트 이 모든 작업이 끝났다면, 아마 정상적으로 GUI가 실행될 것입니다. GUI 창을 띄우는 프로그램을 사용하시는 게 있다면 그 프로그램으로 테스트 하시면 됩니다. 이 글에서는 xclock이라는 프로그램을 받아서 테스트하도록 하겠습니다. ## x11 어플리케이션 설치 sudo apt install x11-apps -y ## xclock 실행 xclock PuTTY는 무료 터미널 에뮬레이터로, 대개 서버용으로 활용되는 리눅스 운영체제 기반 컴퓨터에 원격접속하는 용도로 활용됩니다. ↩︎ ","date":"2020-10-27","objectID":"/wsl1-x/:5:0","tags":["HowTo","Windows","WSL","WSL1","X server","X window","Xming"],"title":"WSL1에서 X window를 세팅하는 법","uri":"/wsl1-x/"},{"categories":["TensorFlow"],"content":"TensorFlow 설치 후 이용 시, cudart64_xxx.dll을 찾지 못하는 오류를 해결하는 방법에 대해 알아봅니다. ","date":"2020-10-22","objectID":"/cudart64-not-found/:0:0","tags":["BugFix","TensorFlow","tf","CUDA","cudart64","dll","not found"],"title":"cudart64_xxx.dll not found 에러 해결","uri":"/cudart64-not-found/"},{"categories":["TensorFlow"],"content":"TL;DR https://developer.nvidia.com/cuda-toolkit-archive에서 맞는 버전을 다운받아 설치합니다. 예: cudart64_101.dll -\u003e CUDA Toolkit 10.1 update 2 설치 ","date":"2020-10-22","objectID":"/cudart64-not-found/:1:0","tags":["BugFix","TensorFlow","tf","CUDA","cudart64","dll","not found"],"title":"cudart64_xxx.dll not found 에러 해결","uri":"/cudart64-not-found/"},{"categories":["TensorFlow"],"content":"버그 설명 TensorFlow 2를 설치한 뒤 이용하려 할 때, cudart64_xxx.dll을 찾지 못하는 에러가 발생하는 경우가 있습니다. ","date":"2020-10-22","objectID":"/cudart64-not-found/:2:0","tags":["BugFix","TensorFlow","tf","CUDA","cudart64","dll","not found"],"title":"cudart64_xxx.dll not found 에러 해결","uri":"/cudart64-not-found/"},{"categories":["TensorFlow"],"content":"왜 발생하는가? TensorFlow 2로 오면서, GPU 사용이 기본이 되었습니다. 이에 따라, 관련 하드웨어 및 소프트웨어 요구사항이 존재합니다. 자세한 사항은 tensorflow 설치가이드에서 확인할 수 있습니다. ","date":"2020-10-22","objectID":"/cudart64-not-found/:3:0","tags":["BugFix","TensorFlow","tf","CUDA","cudart64","dll","not found"],"title":"cudart64_xxx.dll not found 에러 해결","uri":"/cudart64-not-found/"},{"categories":["TensorFlow"],"content":"해결방법 NVIDIA 홈페이지의 CUDA Toolkit 다운로드 페이지에서 맞는 버전을 다운받아 설치합니다. 최신 버전을 요구하지 않는 경우가 있으므로, 이 곳에서 해당하는 버전을 찾아 설치하시면 됩니다. cudart64_xxx.dll에서 xxx 부분이 버전에 해당합니다. 예를 들어, 2020년 10월 기준 TensorFlow 2에서 요구하는 버전은 cudart64_101.dll로, 10.1 버전을 받으시면 됩니다. 아래 그림과 같이 뜨면 성공입니다. ","date":"2020-10-22","objectID":"/cudart64-not-found/:4:0","tags":["BugFix","TensorFlow","tf","CUDA","cudart64","dll","not found"],"title":"cudart64_xxx.dll not found 에러 해결","uri":"/cudart64-not-found/"},{"categories":["TensorFlow"],"content":"TensorFlow 설치 후 이용 시, nvcuda.dll을 찾지 못하는 오류를 해결하는 방법에 대해 알아봅니다. ","date":"2020-10-22","objectID":"/nvcuda-not-found/:0:0","tags":["BugFix","TensorFlow","tf","cuDNN","nvcuda","dll","not found"],"title":"nvcuda.dll not found 에러 해결","uri":"/nvcuda-not-found/"},{"categories":["TensorFlow"],"content":"TL;DR https://developer.nvidia.com/cudnn에서 CUDA 버전에 맞는 것을 다운받고, 압축을 풀어서 CUDA가 설치된 폴더에 넣습니다. 단, NVIDIA 회원가입, Developer 정보 입력, cuDNN 이용목적 등의 설문조사 참여가 필요합니다. ","date":"2020-10-22","objectID":"/nvcuda-not-found/:1:0","tags":["BugFix","TensorFlow","tf","cuDNN","nvcuda","dll","not found"],"title":"nvcuda.dll not found 에러 해결","uri":"/nvcuda-not-found/"},{"categories":["TensorFlow"],"content":"버그 설명 TensorFlow 2를 설치한 뒤 이용하려 할 때, nvcuda.dll을 찾지 못하는 에러가 발생하는 경우가 있습니다. ","date":"2020-10-22","objectID":"/nvcuda-not-found/:2:0","tags":["BugFix","TensorFlow","tf","cuDNN","nvcuda","dll","not found"],"title":"nvcuda.dll not found 에러 해결","uri":"/nvcuda-not-found/"},{"categories":["TensorFlow"],"content":"왜 발생하는가? TensorFlow 2로 오면서, GPU 사용이 기본이 되었습니다. 이에 따라, 관련 하드웨어 및 소프트웨어 요구사항이 존재합니다. 자세한 사항은 tensorflow 설치가이드에서 확인할 수 있습니다. ","date":"2020-10-22","objectID":"/nvcuda-not-found/:3:0","tags":["BugFix","TensorFlow","tf","cuDNN","nvcuda","dll","not found"],"title":"nvcuda.dll not found 에러 해결","uri":"/nvcuda-not-found/"},{"categories":["TensorFlow"],"content":"해결방법 NVIDIA 홈페이지의 cuDNN 다운로드 페이지에서 맞는 버전을 다운받아 설치합니다. 단, cuDNN은 NVIDIA에의 회원가입 및 개발자가입이 요구됩니다. 그리고 cuDNN을 어떤 목적으로 사용할 것인지에 대한 설문조사도 있습니다. 2020년 10월 기준 TensorFlow 2에서 요구하는 버전은 cuDNN SDK 7.6이고, CUDA 10.1 버전을 지원하므로, 이에 맞추어 받으시면 됩니다. 해당 링크에서 압축파일이 받아지는데, 이를 풀면 cuda 폴더가 나옵니다. 이 안의 내용물을, CUDA를 설치한 폴더 안에 그대로 붙여넣으시면 됩니다. (일반적으로는 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\vXX.X) ","date":"2020-10-22","objectID":"/nvcuda-not-found/:4:0","tags":["BugFix","TensorFlow","tf","cuDNN","nvcuda","dll","not found"],"title":"nvcuda.dll not found 에러 해결","uri":"/nvcuda-not-found/"},{"categories":["Windows"],"content":"Windows를 설치하면, C:\\Users\\사용자이름 폴더에 다운로드, 사진, 문서, 동영상 등의 폴더가 있는 것을 확인할 수 있습니다. 이러한 폴더를 사용자 폴더 라고 합니다. 이 글에서는 사용자 폴더의 위치를 변경하는 방법에 대해 알아봅니다. 사용자 폴더는 대개 응용프로그램(MS Office, Visual Studio, …) 자체가 설치되는 공간이 아니라, 우리가 컴퓨터를 사용하는 과정에서 생성되는 여러가지 데이터(*.txt, *.docx, *.pptx, …)들이 저장되는 공간입니다. 그렇기 때문에, 컴퓨터를 사용하다보면 이러한 사용자 폴더가 차지하는 용량이 점점 늘어나게 됩니다. 사용형태에 따라, C드라이브에는 적은 용량을 할당하여 윈도우와 응용프로그램을 설치하고, D드라이브에 많은 용량을 할당하여 데이터를 저장하고 백업하는 용도로 파티션 관리를 하는 분들도 꽤 있으리라 생각합니다. 이런 분들이라면 더욱, 사용자 폴더를 D드라이브로 변경하는 편이 용량 측면 및 백업·관리 측면에서 유리할 것입니다. 이 글에서는 사용자 폴더를 임의의 경로로 옮기는 몇 가지 방법을 살펴볼 것입니다. ","date":"2020-10-13","objectID":"/userdir-change/:0:0","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"TL;DR ","date":"2020-10-13","objectID":"/userdir-change/:1:0","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"개별 폴더마다 경로 변경을 간단하게 수행하고자 하는 경우 Warning\r\r일부 폴더는 이 절차를 적용할 수 없거나, 적용되더라도 의도대로 동작하지 않을 수 있습니다. 자세한 사항은 아래의 개별 폴더 경로변경의 문제점을 참고하세요.\r\r 사용자 폴더가 있는 위치로 이동. [WIN]+[R]을 눌러 실행 창 띄우기. %UserProfile%을 입력하고 확인을 눌러 사용자 폴더 위치의 파일 탐색기 띄우기. 옮기고 싶은 사용자 폴더에서 우클릭 - 속성. 위치 탭으로 이동. 값을 원하는 경로로 변경. 확인. ","date":"2020-10-13","objectID":"/userdir-change/:1:1","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"Windows 설치 과정 중에 설정하는 법 Danger\r\r실수하지 않도록 각 단계를 차근차근 진행하세요. 작업이 정상적으로 이루어지지 않은 경우, 로그인이 되지 않거나, 최악의 경우 Windows를 다시 설치해야 할 수도 있습니다.\r\r Windows 설치 과정 중, 국가 선택창이 뜨면 [CTRL]+[SHIFT]+[F3]을 눌러 audit mode로 진입. Windows 데스크탑 화면이 뜬 뒤, System Preperation Tool 대화상자가 나타나면 Cancle버튼을 눌러 끔. 디스크 관리를 실행하여 사용자 폴더를 위치시키고자 하는 드라이브 문자 확인. [WIN]+[R]을 눌러 실행 창 띄우기. diskmgmt.msc을 입력하고 확인을 눌러 디스크 관리 띄우기. 파일 시스템이나 용량 등 정보를 바탕으로, 사용자 폴더를 위치시킬 드라이브의 문자 확인. 아래 내용으로 unattended answer file 생성. (인터넷 연결이 가능하므로, 이 블로그에서 아래 내용을 복사-붙여넣기 가능) 메모장 실행. 다음 XML 내용 입력. (4번 줄과 6번 줄 내용을 본인에 맞게 수정) \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cunattend xmlns=\"urn:schemas-microsoft-com:unattend\"\u003e \u003csettings pass=\"oobeSystem\"\u003e \u003ccomponent name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003e \u003cFolderLocations\u003e \u003cProfilesDirectory\u003eD:\\Users\u003c/ProfilesDirectory\u003e \u003c/FolderLocations\u003e \u003c/component\u003e \u003c/settings\u003e \u003c/unattend\u003e 4번 줄: processorArchitecture 변수의 값은 64 bit 윈도우를 설치할 경우에는 amd64로 (프로세서 종류가 Intel / AMD 중 어느 것인지는 관계 없음), 32 bit 윈도우를 설치할 경우에는 x86로 입력. 6번 줄: ProfilesDirectory 태그의 값은 사용할 사용자 폴더의 위치로 설정. 이 글에서는 D드라이브로 변경할 것을 상정하여, D:\\Users로 설정하였음. C드라이브를 제외한 아무 드라이브의 최상위 위치에 relocate.xml로 저장. 관리자 권한으로 cmd를 켜고 다음 명령어 두 줄 실행. (2번 줄의 /unattend 항목은 위에서 저장한 relocate.xml의 경로를 입력) net stop WMPNetworkSvc %windir%\\system32\\sysprep\\sysprep.exe /oobe /reboot /unattend:d:\\relocate.xml 재부팅되는 것을 기다린 뒤 Windows 설치를 마저 진행하면 완료. ","date":"2020-10-13","objectID":"/userdir-change/:1:2","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"용어 설명 환경변수 UserName: 현재 로그인한 Windows 계정의 사용자명입니다. 환경변수 UserProfile: 현재 로그인한 Windows 계정의 사용자 폴더 경로입니다. 기본값은 C:\\Users\\%UserName% 입니다. ","date":"2020-10-13","objectID":"/userdir-change/:2:0","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"개별 폴더 경로만 변경 사용자 폴더 경로로 들어가 봅시다. [WIN]+[R]을 눌러 실행 창을 열고, %UserProfile%라고 입력하면 됩니다. (기본적으로 C:\\Users\\%UserName% 입니다) 그러면 다음과 같은 탐색기 창이 뜰 것입니다. 여기서 보이는 3D 개체, 검색, 다운로드, 동영상, … 이런 폴더들은 사실 일종의 단축아이콘 같은 녀석들입니다. 예를 들어 3D 개체라는 아이콘은 사실 C:\\Users\\%UserName%\\3D Objects와 같은 경로로 연결해주는 바로가기의 역할을 하지요. 그러므로, 이 바로가기의 경로만 변경해주면 됩니다. ","date":"2020-10-13","objectID":"/userdir-change/:3:0","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"변경 방법 옮기고 싶은 폴더의 바로가기에서 우클릭 - 속성. 위치 탭으로 이동. 값을 원하는 경로로 변경. 확인. Info\r\r이미 해당 폴더 안에 데이터가 들어있다면, 확인을 눌렀을 때 그 데이터들을 새로운 경로로 이동할지의 여부를 묻는 알림 창이 뜹니다. 원하는 방식에 따라 선택하시면 됩니다.\r\r ","date":"2020-10-13","objectID":"/userdir-change/:3:1","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"문제점 이 방법은 3D 개체, 검색, 다운로드, 동영상, … 로 정의되어 있는 바로가기의 경로를 변경하는 방법입니다. 예를 들어 “문서” 라는 바로가기의 경로를 C:\\Users\\%UserName%\\Documents에서 D:\\Users\\%UserName%\\Documents로 변경하는 것이죠. 문제는, 우리가 이처럼 “문서\"라는 바로가기를 변경해도, %UserProfile%이라는 환경변수는 그대로 C:\\Users\\%UserName%값을 가지고 있다는 것입니다. 일부 프로그램은, “문서\"라는 폴더에 데이터를 저장하려고 접근할 때, “문서\"라는 바로가기를 활용하지 않고 %UserProfile%\\Documents라는 경로를 활용하는 경우가 있습니다. 이런 프로그램은, 우리가 “문서\"라는 바로가기를 D로 옮겨놓아도, 이를 무시하고 %UserProfile%\\Documents(C:\\Users\\%UserName%\\Documents) 폴더를 새로 만들어버린 뒤 그 안에 데이터를 저장합니다. 이러면 “문서” 폴더가 C드라이브와 D드라이브에 따로따로 생기고, 더욱 복잡해지는 결과를 초래하지요. 또 다른 문제도 있습니다. %UserProfile% 폴더 안에는, 우리가 위치를 바꿀수 없는 폴더들도 존재합니다. 대표적인 예가 AppData 폴더입니다(기본적으로 숨김처리 되어있는 폴더입니다). 어떤 프로그램들은 그 프로그램의 환경설정 내용 등을 AppData 폴더에 저장하는 경우가 있습니다. 그런데, 이 폴더는 위에서 설명한 방법으로는 위치를 변경할 수 없습니다. ","date":"2020-10-13","objectID":"/userdir-change/:3:2","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"환경변수 UserProfile 변경하기 앞서의 문제를 해결하려면, %UserProfile% 환경변수 자체를 D드라이브로 바꾸면 됩니다…만, 이 작업은 쉬운 일이 아닙니다. Danger\r\r이 작업은 실수의 여지가 많고, 난이도가 높습니다. 작업이 정상적으로 이루어지지 않은 경우, 로그인이 되지 않거나, 최악의 경우 Windows를 다시 설치해야 할 수도 있습니다. \r\r ","date":"2020-10-13","objectID":"/userdir-change/:4:0","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"Windows 재설치 없이 변경하는 법 이 방법은 저도 아직 성공해본 적이 없습니다. 10회 이상 계정을 삭제하고 다시 만들고 Windows를 재설치하고 하며 시도하였지만, 성공하지 못했습니다. (물론 제가 해당 방법에 대한 이해가 부족했기 때문일 수 있습니다) 이 작업을 통해 %UserProfile%을 변경하면 내부적으로 어딘가에서 꼬이는 것 같았습니다. 변경 후에 기존 계정으로 로그인하면, 로그인 하자마자 혹은 시작 버튼을 누르자마자 다음과 같은 에러가 발생하였습니다. 때문에, 참고하였던 관련 링크와 함께 간단한 부연설명만 하고 넘어가겠습니다. 사용자 폴더를 이동하는 방법에 관해 구글링을 해보면 꽤나 많은 정보가 나옵니다. 핵심적인 흐름을 요약하면 다음과 같습니다. 관리자 계정을 활성화 기존 계정을 로그아웃하고 관리자 계정으로 로그인 레지스트리 변경을 통해 %UserProfile% 환경변수를 변경 관리자 계정을 로그아웃하고 기존 계정으로 다시 로그인 관리자 계정을 비활성화 대표적으로 제가 참고하였던 링크입니다. Windows10에서 사용자 폴더의 이름을 변경하는 방법 (C:\\Users\\Username) Windows 7, 사용자 폴더 위치를 변경하는 방법 (이론상 Windows 10에서도 동일하게 적용 가능합니다) 내용 추가 새로운 방법을 찾게되어 내용을 추가합니다. 제가 시도해보지는 않았지만 뭔가 가능할 것 같은 느낌이 듭니다. 다음에 기회가 되면 시도해보도록 하겠습니다. 윈도우 10에서 C:\\사용자 (실제명 : C:\\Users) 폴더를 다른 드라이브(ssd, hdd)로 옮기는 방법 ","date":"2020-10-13","objectID":"/userdir-change/:4:1","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"Windows 설치 시 초기 설정을 통해 변경하는 법 저는 결국 이 방법을 통해 사용자 폴더의 위치를 변경하였습니다. 이 방법을 요약하면 다음과 같습니다. Windows를 설치할 때 oobe1단계에서 audit 모드2에 진입. 사용자 폴더를 변경한다는 내용이 담긴 unattended answer file3을 생성. 2에서 생성한 unattended answer file을 참고하여 Windows를 설치. Windows 재설치 ISO 파일을 이용하여 제작한 부팅디스크도 좋고, Windows에서 기본적으로 제공하는 PC 초기화 기능을 이용해도 좋습니다. Audit 모드 진입 드라이브 초기화가 진행된 뒤, 재설치가 시작되면 다음 그림과 같은 국가/언어 선택창이 뜹니다. 여기서 [CTRL]+[SHIFT]+[F3]을 눌러 audit 모드로 진입합니다. Windows 부팅 후 Sysprep 창 종료 자동으로 PC가 재부팅된 뒤, audit 모드로 진입할 것입니다. 윈도우 데스크탑이 뜬 뒤 다음과 같은 System Preparation Tool 창이 뜰텐데, 지금은 Cancle 버튼을 눌러 종료해 줍니다. 디스크 관리에서 사용자 폴더를 둘 드라이브명 확인 일반적으로 D드라이브라고 생각하고 있을지라도, audit 모드에서는 드라이브명이 다르게 부여되어 있을 수 있습니다. 반드시 디스크 관리를 열어 용량 정보 등을 보고 사용자 폴더를 위치시킬 드라이브의 드라이브명이 무엇인지 확인하세요. [WIN]+[R]을 눌러 실행 창을 띄움. diskmgmt.msc를 입력하고 실행하여 디스크 관리 창 띄움. 용량 정보, 파일 시스템 등을 토대로, 사용자 폴더를 위치시킬 드라이브의 드라이브명(알파벳)이 무엇인지 확인. Unattended answer file 생성 이 시점에서는 인터넷 연결이 가능합니다. 실수를 줄이기 위해, 아래의 xml 코드를 직접 입력하지 마시고, 복사-붙여넣기한 뒤 필요한 부분만 수정하시길 권장합니다. 다음의 과정을 통해 unattended answer file을 생성합니다. 메모장 실행. 다음 XML 내용 입력. 단, 4번 줄과 6번 줄의 내용은 본인에 맞게 수정. \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cunattend xmlns=\"urn:schemas-microsoft-com:unattend\"\u003e \u003csettings pass=\"oobeSystem\"\u003e \u003ccomponent name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003e \u003cFolderLocations\u003e \u003cProfilesDirectory\u003eD:\\Users\u003c/ProfilesDirectory\u003e \u003c/FolderLocations\u003e \u003c/component\u003e \u003c/settings\u003e \u003c/unattend\u003e 4번 줄: processorArchitecture 변수의 값은 64 bit 윈도우를 설치할 경우에는 amd64로 (프로세서 종류가 Intel / AMD 중 어느 것인지는 관계 없음), 32 bit 윈도우를 설치할 경우에는 x86로 입력. 6번 줄: ProfilesDirectory 태그의 값은 사용할 Users 폴더의 위치로 설정. 이 글에서는 D드라이브로 변경할 것을 상정하여, D:\\Users로 설정하였음. C드라이브를 제외한 아무 드라이브의 최상위 위치에 relocate.xml로 저장. 반드시, 저장 시 파일 형식을 모든 파일(All files)로 선택하여 txt 형태로 저장되지 않도록 주의. 생성한 unattended answer file을 이용하여 설치 진행 우선 관리자 권한으로 cmd를 켭니다. [WIN]+[R]을 눌러 실행 창을 띄움. cmd를 입력하고, [CTRL]+[SHIFT]+[ENTER]을 눌러 관리자 권한으로 실행. 이어서, cmd창에 다음 명령어 두 줄을 입력합니다. 단, 2번 줄의 /unattend 항목은 위에서 저장한 relocate.xml의 경로로 입력합니다. net stop WMPNetworkSvc %windir%\\system32\\sysprep\\sysprep.exe /oobe /reboot /unattend:d:\\relocate.xml 다음과 같은 창이 뜬 뒤, 자동으로 재부팅될 것입니다. 이어서 Windows 설치를 진행하시면 됩니다. 긴 과정을 따라오시느라 고생하셨습니다. 정상적으로 진행되었다면, 사용자 폴더들이 원하는 드라이브에 생성되어 있을 것입니다. ","date":"2020-10-13","objectID":"/userdir-change/:4:2","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows"],"content":"Reference https://itrainbowm.tistory.com/29 https://wisebee.tistory.com/13 https://www.tenforums.com/tutorials/1964-move-users-folder-location-windows-10-a.html https://ks2colorworld.tistory.com/13 Out-of-Box Experience의 약자로, 새로 설치된 Windows 제품을 처음 사용할 때의 단계를 의미. ↩︎ Windows에 내장된 관리자 계정 모드로, 설치 시점에서 다양한 설정을 할 수 있게 해줌. ↩︎ Windows의 설치 과정에서 사용할 설정 값이나 변수 등을 기록한 xml형식의 파일. ↩︎ ","date":"2020-10-13","objectID":"/userdir-change/:5:0","tags":["HowTo","Windows","User directory","사용자 폴더"],"title":"사용자 폴더의 위치를 변경하는 방법사용자 폴더의 위치를 변경하는 방법","uri":"/userdir-change/"},{"categories":["Windows","Linux"],"content":"MS Store를 통해 WSL을 다운받아 설치하게 되면, WSL이 설치되는 경로는 %LocalAppData%\\Packages\\[PackageName] 폴더 하위로 고정됩니다. 이 글에서는 Windows Subsystem for Linux를 기본 설치경로가 아닌 다른 경로에 설치하는 방법에 대해 알아봅니다. Success\r\r여기서는 WSL 설치를 위한 Windows 기능 켜기 등의 설정이 완료된 상태라고 가정합니다. 이에 관한 전반적인 내용은 이 글을 참고하세요.\r\r ","date":"2020-10-08","objectID":"/wsl-otherloc/:0:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"WSL을 다른 경로에 설치하는 법","uri":"/wsl-otherloc/"},{"categories":["Windows","Linux"],"content":"TL;DR 이 페이지에서 원하는 배포판을 다운로드 다음 명령어로 파일확장자 변경 Rename-Item XXXX.appx XXXX.zip 다음 명령어로 압축 해제 Expand-Archive XXXX.zip 압축 해제 후 생성된 폴더에 들어가서 배포판 실행 ","date":"2020-10-08","objectID":"/wsl-otherloc/:1:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"WSL을 다른 경로에 설치하는 법","uri":"/wsl-otherloc/"},{"categories":["Windows","Linux"],"content":"배포판 다운로드 이 페이지를 방문하여, 설치하고자 하는 배포판을 다운받습니다. 원래 MS Store를 사용할 수 없을 때 이용하라고 만들어져 있는 페이지입니다만, 이 페이지를 이용하면 .appx 형식의 파일을 받을 수 있습니다. WSL을 설치하고자 하는 경로에, 다운받은 .appx파일을 옮겨둡니다. ","date":"2020-10-08","objectID":"/wsl-otherloc/:2:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"WSL을 다른 경로에 설치하는 법","uri":"/wsl-otherloc/"},{"categories":["Windows","Linux"],"content":"다운받은 Appx파일의 압축 해제 아래 그림과 같이 .appx 파일을 옮겨둔 폴더에서 파일-Windows PowerShell 열기(R)-Windows PowerShell 열기(R)를 통해 PowerShell을 실행합니다. (PowerShell을 실행하여 해당 경로로 들어오셔도 됩니다.) 이어서 Rename-Item 명령어를 통해 확장자를 zip파일로 바꾸고, Expand-Archive 명령어를 통해 압축을 풀 것입니다. 예를들어 Ubuntu 20.04 배포판을 받았다면, Ubuntu_2004.2020.424.0_x64.appx 파일이 다운받아질 것입니다(작성일 기준). 그렇다면 다음과 같이 명령어를 입력하면 됩니다. ## 받은 appx 파일을 Ubuntu2004.zip으로 이름 변경 Rename-Item Ubuntu_2004.2020.424.0_x64.appx Ubuntu2004.zip ## zip 파일의 압축을 해제 Expand-Archive Ubuntu2004.zip ","date":"2020-10-08","objectID":"/wsl-otherloc/:3:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"WSL을 다른 경로에 설치하는 법","uri":"/wsl-otherloc/"},{"categories":["Windows","Linux"],"content":"배포판 실행하여 설치 마무리 압축을 해제하면 압축파일과 동일한 폴더가 생성됩니다. 그 폴더 안에 배포판의 실행파일이 있을 것입니다. 최초 실행 시에는 이 파일로 실행하셔야 합니다. 그러면 MS Store에서 설치하는 경우와 동일하게 자동으로 설치과정이 마무리되고 계정생성과정이 진행될 것입니다. Info\r\r이렇게 최초 실행 후 설치가 마무리된 뒤에는 MS Store로 설치한 WSL과 동일한 방법으로 사용/관리 할 수 있습니다.\r\r ","date":"2020-10-08","objectID":"/wsl-otherloc/:4:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"WSL을 다른 경로에 설치하는 법","uri":"/wsl-otherloc/"},{"categories":["Windows","Linux"],"content":"Windows Subsystem for Linux, 약칭 WSL을 설치하고 이용하는 법을 알아봅니다. 이 글은 WSL1과 WSL2을 둘 다 다룹니다. Linux용 Windows 하위 시스템(Windows Subsystem for Linux, WSL)은 가상머신을 이용함에 따른 추가적인 메모리/CPU 소모나 듀얼부팅 설정 등을 요구하지 않으면서도, Windows 운영체제 하에서 Linux 기반의 대부분의 명령줄 도구, 유틸리티, 애플리케이션 등을 사용할 수 있게 해주는 서비스입니다. 간단하게 말하면, Windows에서 Linux의 bash shell을 켤 수 있고, Linux 전용의 프로그램을 자유롭게 실행할 수 있게 된다는 뜻입니다. 그것도 별도의 가상머신 프로그램 없이 말이죠. 이 글에서는 두 가지 WSL 버전인 WSL1과 WSL2의 차이를 살펴보고, 이를 설치하고 이용하는 방법에 대해 알아봅니다. ","date":"2020-09-28","objectID":"/wsl/:0:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"TL;DR PowerShell을 관리자 권한으로 실행한 뒤, Linux용 Windows 하위시스템 옵션을 사용하기 위해 다음 명령어 입력 dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart (WSL1 설치 시에는 이 과정 스킵) PowerShell을 관리자 권한으로 실행한 뒤, Virtual Machine 플랫폼 옵션을 사용하기 위해 다음 명령어 입력 dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 재부팅 (WSL1 설치 시에는 이 과정 스킵) 본인의 아키텍쳐에 맞추어 Linux 커널 업데이트 패키지를 다운로드 후 설치 x64용 다운로드 링크: https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi ARM64용 다운로드 링크: https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi (WSL1 설치 시에는 이 과정 스킵) 재부팅 (WSL1 설치 시에는 이 과정 스킵) PowerShell을 관리자 권한으로 실행한 뒤, WSL2를 기본 버전으로 설정하기 위해 다음 명령어 입력 wsl --set-default-version 2 Microsoft Store에서 WSL 검색 후, 원하는 Linux 배포 설치 ","date":"2020-09-28","objectID":"/wsl/:1:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"WSL1 vs. WSL2 위의 비교 표에서 알 수 있듯, WSL2가 WSL1에 비해 대개 우수한 성능을 보입니다. 다만, OS 파일시스템 간 성능 측면에서는 WSL1이 우수합니다. ","date":"2020-09-28","objectID":"/wsl/:2:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"OS 파일시스템 간 성능이란 WSL 파일시스템과 Windows 파일시스템의 위치는 서로 다릅니다. 성능을 고려할 때 WSL에서 접근하는 파일은 되도록 WSL 파일시스템의 하위경로에 두고 사용할 것을 권장합니다. (이런 곳에 저장하세요) Linux 파일 시스템: \\\\wsl$\\\u003cdistro\u003e\\home\\\u003cusername\u003e\\ (이런 곳 말구요) Windows 파일 시스템: C:\\Users\\\u003cusername\u003e\\ 다만, WSL에서도 Windows 파일시스템에 존재하는 파일에 접근할 수 있으며, 그 반대 또한 가능합니다. 이런 식의 접근이 불가피하고 잦은 경우에는, WSL1을 이용하는 것이 더 나을 수 있습니다. ","date":"2020-09-28","objectID":"/wsl/:2:1","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"최소 요구사양 운영체제: Windows 10 혹은 Windows server 2019 아키텍쳐1: 64 bit 빌드 버전2 WSL1을 설치하는 경우: Build 16215 이상 WSL2를 설치하는 경우: Build 19041 이상 ","date":"2020-09-28","objectID":"/wsl/:3:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"WSL1 설치하기 1. Linux용 Windows 하위 시스템 사용 PowerShell을 관리자 권한으로 실행하고, 다음 명령어를 입력합니다. dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 2. 재부팅 3. 원하는 Linux 배포를 다운로드하여 설치 Microsoft Store에서 WSL을 검색하고, 원하는 배포판을 설치하면 됩니다. Info\r\rMS Store에서 설치 시, 설치되는 경로는 %LocalAppData%\\Packages\\[PackageName] 폴더 하위로 고정됩니다. 만약 별도로 원하는 경로에 설치하고자 하는 경우에는 이 글을 참고하세요.\r\r ","date":"2020-09-28","objectID":"/wsl/:4:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"WSL2 설치하기 1. Linux용 Windows 하위 시스템 사용 PowerShell을 관리자 권한으로 실행하고, 다음 명령어를 입력합니다. dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 2. Virtual Machine 플랫폼 사용 PowerShell을 관리자 권한으로 실행하고, 다음 명령어를 입력합니다. dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 3. 재부팅 4. Linux 커널 업데이트 패키지 설치 이 페이지를 방문하여 본인 시스템의 아키텍쳐에 맞는 Linux 커널 업데이트 패키지를 다운받습니다. 해당 페이지에 있는 링크를 그대로 아래에 복사해두었으니 아래를 이용하셔도 됩니다. x64용 다운로드 링크: https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi ARM64용 다운로드 링크: https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi .msi 파일을 다운받으셨다면, 실행하여 설치를 진행합니다. 5. 재부팅 6. WSL2를 WSL의 기본버전으로 설정 PowerShell을 관리자 권한으로 열어 실행하고, 다음 명령어를 입력합니다. wsl --set-default-version 2 7. 원하는 Linux 배포를 다운로드하여 설치 Microsoft Store에서 WSL을 검색하고, 원하는 배포판을 설치하면 됩니다. Info\r\rMS Store에서 설치 시, 설치되는 경로는 %LocalAppData%\\Packages\\[PackageName] 폴더 하위로 고정됩니다. 만약 별도로 원하는 경로에 설치하고자 하는 경우에는 이 글을 참고하세요.\r\r ","date":"2020-09-28","objectID":"/wsl/:5:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"설치한 배포판 실행 Microsoft Store를 통해 설치하면, 시작메뉴에 설치한 리눅스 배포판이 뜰 것입니다. 이를 처음 실행하면 추가적인 설치 마무리 작업을 수행한 뒤, 그 후 계정 생성 과정이 진행됩니다. 여기서 원하는 계정명과 비밀번호를 입력하여 계정생성을 하면 설치가 완료됩니다. 이후에는, 아까와 같이 시작메뉴에서 배포판을 실행하거나, cmd/powershell/실행윈도우([WIN]+[R])에서 wsl을 입력하여 실행할 수 있습니다. ","date":"2020-09-28","objectID":"/wsl/:6:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"배포판의 관리 Info\r\r하나의 Windows 운영체제에 여러 개의 WSL을 설치할 수 있습니다. 또한, 각 WSL마다 버전을 달리하여, 어떤 것은 WSL1로, 어떤 것은 WSL2로 이용할 수도 있습니다.\r\r PowerShell에서 wsl 명령어 뒤에 다양한 옵션을 입력하여, 설치한 wsl 배포판에 대한 다양한 설정을 할 수 있습니다. 사용 가능한 명령어의 설명은 다음 명령어로 확인 가능합니다. wsl --help ","date":"2020-09-28","objectID":"/wsl/:7:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"설치된 배포판 목록 확인 현재 설치된 배포판을 확인하려면 다음 명령어를 입력합니다. wsl -l 이 때, -v 옵션을 더 추가하면, 각 배포판의 현재 상태와 더불어 WSL1/WSL2 중 어떤 버전인지에 대한 정보까지 출력할 수 있습니다. wsl -l -v NAME 옆의 * 표시는 wsl 이라는 명령어만 입력하였을때 실행되는 기본 wsl 배포판이 무엇인지 알려주는 표시입니다. ","date":"2020-09-28","objectID":"/wsl/:7:1","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"기본 실행 배포판 변경 앞서 wsl -l 명령어로 확인한 배포판의 이름(예: Ubuntu-20.04)을 확인한 뒤, -s \u003cDistro\u003e 옵션을 이용합니다. 예를 들어 기본 실행 배포판을 Ubuntu-20.04로 변경하는 경우에는 다음과 같이 입력합니다. wsl -s Ubuntu-20.04 ","date":"2020-09-28","objectID":"/wsl/:7:2","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"설치된 배포판의 버전 변경(WSL1/WSL2) 앞서 wsl -l 명령어로 확인한 배포판의 이름(예: Ubuntu-20.04)을 확인한 뒤, --set-version \u003cDistro\u003e \u003c버전\u003e 옵션을 이용합니다. Note\r\rWSL1에서 WSL2로 올리는 것도 되고, 반대로 WSL2에서 WSL1로 내리는 것도 가능합니다.\r\r 예를 들어 Ubuntu-20.04 배포판을 WSL2로 변경하는 경우에는 다음과 같이 입력합니다. wsl --set-version Ubuntu-20.04 2 수 분 정도 소요될 수 있습니다. 기다리면 배포판의 버전이 자동으로 변경됩니다. ","date":"2020-09-28","objectID":"/wsl/:7:3","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"설치된 배포판의 제거 앞서 wsl -l 명령어로 확인한 배포판의 이름(예: Ubuntu-20.04)을 확인한 뒤, --unregister \u003cDistro\u003e 옵션을 이용합니다. 예를 들어 Ubuntu-20.04 배포판을 제거하는 경우에는 다음과 같이 입력합니다. wsl --unregister Ubuntu-20.04 이 후에, MS store에서 설치한 내역을 찾아 uninstall까지 해주면 완전히 제거됩니다. ","date":"2020-09-28","objectID":"/wsl/:7:4","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"WSL에서 Windows 파일시스템 접근 Windows의 디스크 드라이브는 WSL에서 /mnt/c, /mnt/d… 등으로 마운트되어 있습니다. 사용자가 별도로 마운트하지 않아도 바로 접근이 가능합니다. Failure\r\rUSB나 media drive 등 이동식 디스크에 대해서는 마운트 방법이 지원되지 않고 있습니다.\r\r ","date":"2020-09-28","objectID":"/wsl/:8:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"Windows에서 WSL 파일시스템 접근 \\\\wsl$\\\u003cDistro\u003e\\ 경로를 갖는 네트워크 드라이브로 접근할 수 있습니다. 예를 들어 Ubuntu-20.04 배포판의 파일시스템은 \\\\wsl$\\Ubuntu-20.04\\로 접근할 수 있습니다. Note\r\r만약 탐색기에서 \\\\wsl$\\에 접근 시 하위 목록이 보이지 않는다면, 한 번도 해당 인스턴스가 기동되지 않았기 때문입니다. 경로 입력란에 \\\\wsl$\\\u003cDistro\u003e를 입력하여 한 번 들어가고 난 뒤부터는 표시가 될 것입니다.\r\r ","date":"2020-09-28","objectID":"/wsl/:9:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows","Linux"],"content":"Reference https://docs.microsoft.com/en-us/windows/wsl/ https://cloudlinuxtech.com/install-linux-on-windows-10-wsl/#Prerequisite_to_install_WSL1_or_WSL2 [WIN]+[R]로 실행 창을 연 뒤, msinfo32를 입력하여 시스템 정보 창을 띄우고, 시스템 종류를 확인합니다. ↩︎ [WIN]+[R]로 실행 창을 연 뒤, msinfo32를 입력하여 시스템 정보 창을 띄우고, 버전을 확인합니다. ↩︎ ","date":"2020-09-28","objectID":"/wsl/:10:0","tags":["HowTo","Windows","WSL","Linux","Install"],"title":"Linux용 Windows Subsystem(WSL1, WSL2)","uri":"/wsl/"},{"categories":["Windows"],"content":"PowerShell에서 git log나 git diff 출력 시 인코딩 문제로 인해 글자가 깨져 나오는 경우가 있습니다. 이 문제를 해결하는 방법을 알아봅니다. ","date":"2020-09-25","objectID":"/powershell-encoding/:0:0","tags":["BugFix","PowerShell","Git","한글","encoding"],"title":"PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결","uri":"/powershell-encoding/"},{"categories":["Windows"],"content":"TL;DR Git 설정을 변경하거나, 혹은 PowerShell 설정을 변경하거나. 둘 중 하나만 해도 고쳐집니다. 방법 1. Git 설정을 변경 Git의 출력 설정을 변경합니다. 이 방법은 Git의 설정만을 변경하므로, Git에 한해서만 문제가 해결됩니다. PowerShell은 건드리지 않으므로, 동일한 문제가 다른 프로그램에서도 발생한다면 그 부분은 고쳐지지 않을 것입니다. git config --global core.pager 'less --raw-control-chars' 방법 2. PowerShell 설정을 변경 Powershell에서 환경변수를 설정합니다. 이는 해당 PowerShell창에 한해 일시적으로 문제를 해결합니다. $env:LC_ALL='C.UTF-8' Powershell을 켤 때 자동실행되는 스크립트에 환경변수를 설정하는 내용을 적습니다. 이는 새로운 PowerShell 창이 켜질때마다 해당 PowerShell 창에 환경변수를 설정하므로, 영구적으로 문제를 해결해줍니다. Set-ExecutionPolicy unrestricted if(!(Test-Path -path $profile)){ New-Item -Type File -Path $profile -Force } Add-Content -Path $profile -Value '$env:LC_ALL=''C.UTF-8''' ","date":"2020-09-25","objectID":"/powershell-encoding/:1:0","tags":["BugFix","PowerShell","Git","한글","encoding"],"title":"PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결","uri":"/powershell-encoding/"},{"categories":["Windows"],"content":"버그 설명 PowerShell에서 git log를 출력해보니 다음과 같이 한글이 깨져서 출력되는 일을 겪었습니다. 이 글에서는 이런 문제를 해결하는 방법을 다룹니다. ","date":"2020-09-25","objectID":"/powershell-encoding/:2:0","tags":["BugFix","PowerShell","Git","한글","encoding"],"title":"PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결","uri":"/powershell-encoding/"},{"categories":["Windows"],"content":"왜 발생하는가? Git과 PowerShell에서의 인코딩 형식이 호환되지 않아서 그렇습니다. ","date":"2020-09-25","objectID":"/powershell-encoding/:3:0","tags":["BugFix","PowerShell","Git","한글","encoding"],"title":"PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결","uri":"/powershell-encoding/"},{"categories":["Windows"],"content":"해결방법 1. Git 설정을 변경 첫 번째 방법은 git의 출력형식을 변경해주는 것입니다. 이 방법은 git의 설정만 변경할 뿐, PowerShell은 전혀 건드리지 않는다는 장점이 있습니다. PowerShell에서 다음 명령어를 통해 git의 출력 설정을 변경합니다. git config --global core.pager 'less --raw-control-chars' 참고로 이 세팅을 해제하는 방법은 다음과 같습니다. git config --global --unset core.pager ","date":"2020-09-25","objectID":"/powershell-encoding/:4:0","tags":["BugFix","PowerShell","Git","한글","encoding"],"title":"PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결","uri":"/powershell-encoding/"},{"categories":["Windows"],"content":"해결방법 2. PowerShell 설정을 변경 두 번째 방법은 PowerShell에서 인코딩하는 방식을 변경해주는 것입니다. 이 방법은 PowerShell 설정을 변경하는 것이므로, PowerShell에서 사용하는 다른 프로그램에 영향을 줄 수도 있습니다. ","date":"2020-09-25","objectID":"/powershell-encoding/:5:0","tags":["BugFix","PowerShell","Git","한글","encoding"],"title":"PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결","uri":"/powershell-encoding/"},{"categories":["Windows"],"content":"해당 PowerShell 윈도우에서만 일시적으로 수정 Powershell에서 $env:LC_ALL이라는 환경변수의 값을 'C.UTF-8'로 설정해주면 됩니다. Warning\r\r이 방법은 그 PowerShell창에서만 유효합니다. 새로운 창에서는 문제가 다시 나타날 것입니다.\r\r 다음 명령어를 입력하여 환경변수를 설정합니다. $env:LC_ALL='C.UTF-8' ","date":"2020-09-25","objectID":"/powershell-encoding/:5:1","tags":["BugFix","PowerShell","Git","한글","encoding"],"title":"PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결","uri":"/powershell-encoding/"},{"categories":["Windows"],"content":"PowerShell을 시작할 때마다 수정되도록 자동실행 스크립트 생성 PowerShell을 켤 때마다 자동으로 실행되는 스크립트를 만들고 그 스크립트에 $env:LC_ALL 환경변수를 설정하는 내용을 적으면, 매 번 환경변수를 따로 설정하지 않아도 자동으로 문제가 해결됩니다. 단, PowerShell에서 외부 스크립트를 실행하기 위해서는 실행 정책의 제한을 풀어줘야 합니다. 먼저, 다음 명령어를 통해 실행 정책 제한을 풀어줍니다. Set-ExecutionPolicy unrestricted PowerShell을 켤 때마다 자동으로 실행되는 스크립트의 경로는 $profile 변수에 저장되어 있습니다. 다음 명령줄을 통해, 만약 해당 경로에 스크립트가 없다면 새로 만들어줍니다. 그 뒤, 만들어진 스크립트 파일에 $env:LC_ALL='C.UTF-8' 내용을 추가합니다. 이를 통해, 앞으로는 PowerShell을 새로 시작할 때마다 이 스크립트가 실행되어 환경변수가 설정되도록 할 수 있습니다. if(!(Test-Path -path $profile)){ New-Item -Type File -Path $profile -Force } Add-Content -Path $profile -Value '$env:LC_ALL=''C.UTF-8''' ","date":"2020-09-25","objectID":"/powershell-encoding/:5:2","tags":["BugFix","PowerShell","Git","한글","encoding"],"title":"PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결","uri":"/powershell-encoding/"},{"categories":["Windows"],"content":"Reference https://stackoverflow.com/questions/41139067/git-log-output-encoding-issues-on-windows-10-command-prompt ","date":"2020-09-25","objectID":"/powershell-encoding/:6:0","tags":["BugFix","PowerShell","Git","한글","encoding"],"title":"PowerShell에서 git log, diff 출력 시 한글 깨지는 오류 해결","uri":"/powershell-encoding/"},{"categories":["Windows"],"content":"이 글에서는 시작-실행 혹은 단축키 [WIN]+[R]을 통해 띄울 수 있는 실행 창에서 사용 가능한 다양한 명령어를 정리해 봅니다. ","date":"2020-09-24","objectID":"/windowrun/:0:0","tags":["HowTo","Windows","run","실행"],"title":"Windows 실행([WIN]+[R]) 명령어 정리","uri":"/windowrun/"},{"categories":["Windows"],"content":"사용법 ","date":"2020-09-24","objectID":"/windowrun/:1:0","tags":["HowTo","Windows","run","실행"],"title":"Windows 실행([WIN]+[R]) 명령어 정리","uri":"/windowrun/"},{"categories":["Windows"],"content":"기본적인 사용 실행 창을 띄웁니다. (시작-실행 혹은 단축키 [WIN]+[R]) 열기(O): 라고 표시된 상자 안에 명령어를 입력합니다. (대소문자는 상관 없습니다) 확인을 누릅니다. (혹은 [ENTER]를 누릅니다.) ","date":"2020-09-24","objectID":"/windowrun/:1:1","tags":["HowTo","Windows","run","실행"],"title":"Windows 실행([WIN]+[R]) 명령어 정리","uri":"/windowrun/"},{"categories":["Windows"],"content":"관리자 권한으로 실행 어떤 명령어든, 위의 사용법 설명에서 확인을 누르는 대신, [CTRL]+[SHIFT]+[ENTER]를 누르면, 해당 명령어가 관리자 권한으로 실행됩니다. 주로 cmd나 powershell 등을 관리자권한으로 실행하고 싶을 때 사용하면 좋습니다. ","date":"2020-09-24","objectID":"/windowrun/:1:2","tags":["HowTo","Windows","run","실행"],"title":"Windows 실행([WIN]+[R]) 명령어 정리","uri":"/windowrun/"},{"categories":["Windows"],"content":"응용프로그램 명령어 명령어  결과  calc 계산기 cmd 커맨드 창 mspaint 그림판 notepad 메모장 powershell 파워셸 ","date":"2020-09-24","objectID":"/windowrun/:2:0","tags":["HowTo","Windows","run","실행"],"title":"Windows 실행([WIN]+[R]) 명령어 정리","uri":"/windowrun/"},{"categories":["Windows"],"content":"환경변수로 정의된 폴더명 명령어 결과 %AppData% 현재 로그인한 사용자계정 폴더 내에 숨김처리된 AppData\\Roaming\\ 폴더 (일반적으로 C:\\Users\\\u003c계정명\u003e\\Appdata\\Roaming\\) %LocalAppData% 현재 로그인한 사용자계정 폴더 내에 숨김처리된 AppData\\Local\\ 폴더 (일반적으로 C:\\Users\\\u003c계정명\u003e\\Appdata\\Local\\) %ProgramData% ProgramData 폴더 (일반적으로 C:\\ProgramData\\) %ProgramFiles% Program Files 폴더 (일반적으로 C:\\Program Files\\) %ProgramFiles(x86)% Program Files (x86) 폴더. 64 bit 전용 (일반적으로 C:\\Program Files (x86)\\) %UserProfile% 현재 로그인한 사용자계정 폴더 (일반적으로 C:\\Users\\\u003c계정명\u003e\\) %WinDir% Windows 폴더 (일반적으로 C:\\Windows\\) shell:Startup 현재 사용자의 시작프로그램 폴더 shell:Common Startup 모든 사용자를 위한 시작프로그램 폴더 ","date":"2020-09-24","objectID":"/windowrun/:3:0","tags":["HowTo","Windows","run","실행"],"title":"Windows 실행([WIN]+[R]) 명령어 정리","uri":"/windowrun/"},{"categories":["Windows"],"content":"Windows 시스템 명령어 결과 appwiz.cpl 프로그램 제거 또는 변경 cleanmgr 디스크 정리 compmgmt.msc 컴퓨터 관리 control 제어판 desk.cpl 디스플레이 설정 devmgmt.msc 장치 관리자 diskmgmt.msc 디스크 관리 dxdiag Direct X 진단 도구 firewall.cpl 방화벽 mmsys.cpl 사운드 및 오디오 등록정보 mrt 악성 소프트웨어 제거 도구 mstsc 원격 데스크탑 연결 mstsc /v \u003cIP주소\u003e IP 주소를 명시하여 원격 데스크탑 연결 실행 ncpa.cpl 네트워크 연결 정보 optionalfeatures Windows 기능 켜기/끄기 perfmon.msc 성능 모니터 뷰 powercfg.cpl 전원 옵션 regedit 레지스트리 편집기 services.msc 서비스 sndvol 볼륨 Mixer sysdm.cpl 시스템 속성 taskmgr Windows 작업 관리자 taskschd.msc 작업 스케줄러 winver Windows 버전 정보 ","date":"2020-09-24","objectID":"/windowrun/:4:0","tags":["HowTo","Windows","run","실행"],"title":"Windows 실행([WIN]+[R]) 명령어 정리","uri":"/windowrun/"},{"categories":["Windows"],"content":"이 글에서는 Windows용 패키지 관리자인 Chocolatey(약칭: choco)를 설치하고 이용하는 방법에 대해 알아봅니다. Chocolatey는 Linux에서의 apt(apt-get), yum이나 macOS에서의 Homebrew처럼 패키지를 설치/업데이트/제거 등 관리하는 데에 사용하는 Windows용 프로그램입니다. Note\r\rChocolatey로 프로그램의 설치/제거 등을 하실 때에는 관리자 권한으로 작업하셔야 합니다. 관리자 권한 없이 이용하려면 설치경로의 변경 등의 작업이 요구됩니다. (참고: https://chocolatey.org/install#non-administrative-install) \r\r ","date":"2020-09-24","objectID":"/chocolatey/:0:0","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"Chocolatey 설치하기 ","date":"2020-09-24","objectID":"/chocolatey/:1:0","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"요구사항 Windows 7+/ Windows Server 2003+ Powershell v2+ (온라인 설치 시 v3+) .Net Framework 4+ (온라인 설치 시 4.5+) ","date":"2020-09-24","objectID":"/chocolatey/:1:1","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"cmd.exe로 설치하기 cmd.exe를 관리자 권한으로 실행합니다. 다음 명령줄을 실행합니다. @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \" [System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" \u0026\u0026 SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" ","date":"2020-09-24","objectID":"/chocolatey/:1:2","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"PowerShell.exe로 설치하기 PowerShell로 설치할 때에는 실행 정책(Execution Policy)상 제한이 걸리지 않도록 설정하는 과정이 추가적으로 필요할 수 있습니다. 실행 정책에 관해서는 간단하게 Bypass 옵션을 사용하셔도 되고, 좀 더 보안을 신경쓰신다면 AllSigned 옵션을 사용하셔도 됩니다. PowerShell.exe를 관리자 권한으로 실행합니다. Get-ExecutionPolicy 명령어로 실행 정책을 확인합니다. 만약 Restricted가 출력된다면, Set-ExecutionPolicy AllSigned 나, Set-ExecutionPolicy Bypass -Scope Process를 입력하여 제한을 풀어줍니다. 이제 다음의 명령줄을 실행합니다. [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) ","date":"2020-09-24","objectID":"/chocolatey/:1:3","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"그 외의 방법으로 설치하기 chocolatey 공식 홈페이지를 참고하세요. ","date":"2020-09-24","objectID":"/chocolatey/:1:4","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"Chocolatey 이용하기 ","date":"2020-09-24","objectID":"/chocolatey/:2:0","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"패키지 검색하기 choco로 설치 가능한 전체 패키지 목록은 https://chocolatey.org/packages에서 확인할 수 있습니다. 혹은, cmd나 PowerShell에서 choco search 명령어로 검색이 가능합니다. choco search 검색할내용 추가적으로 다음과 같은 옵션을 사용할 수도 있습니다. 검색할내용과 정확하게 일치하는 항목만 출력하기: -e (--exact) 패키지에 대한 자세한 정보 출력하기: --detailed 현재 컴퓨터에 설치된 패키지 목록 출력하기: -l (--local) (아래(설치한 패키지 목록 보기) 참고) ","date":"2020-09-24","objectID":"/chocolatey/:2:1","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"패키지 설치하기 choco install 명령어를 통해 패키지를 설치할 수 있습니다. choco install 패키지이름 추가적으로 다음과 같은 옵션을 사용할 수도 있습니다. 설치 시 확인여부를 묻는 내용을 띄우지 않고 무조건 수락하기: -y 특정 버전을 설치하기: --version 버전번호 (예: choco install python --version 3.8.5) ","date":"2020-09-24","objectID":"/chocolatey/:2:2","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"설치한 패키지 목록 보기 choco search 명령어 뒤에 -l옵션을 쓰면, 현재 이 컴퓨터에 설치된 목록을 출력해줍니다. choco search -l ","date":"2020-09-24","objectID":"/chocolatey/:2:3","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"패키지 삭제하기 choco uninstall 명령어를 통해 설치한 패키지를 삭제할 수 있습니다. choco uninstall 패키지이름 ","date":"2020-09-24","objectID":"/chocolatey/:2:4","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"패키지 업그레이드하기 choco upgrade 명령어를 통해 설치한 패키지를 업그레이드할 수 있습니다. choco upgrade 패키지이름 choco upgrade chocolatey 명령어를 입력하면, chocolatey도 최신화할 수 있습니다. choco upgrade all 명령어를 입력하면, 현재 컴퓨터에 설치된 모든 패키지(chocolatey 포함)를 최신화할 수 있습니다. ","date":"2020-09-24","objectID":"/chocolatey/:2:5","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"},{"categories":["Windows"],"content":"Reference https://chocolatey.org/ https://github.com/chocolatey/choco/wiki https://chocolatey.org/docs/commands-reference ","date":"2020-09-24","objectID":"/chocolatey/:3:0","tags":["HowTo","Windows","Chocolatey","choco"],"title":"Windows용 패키지 관리자 Chocolatey(choco) 설치 및 이용하기","uri":"/chocolatey/"}]